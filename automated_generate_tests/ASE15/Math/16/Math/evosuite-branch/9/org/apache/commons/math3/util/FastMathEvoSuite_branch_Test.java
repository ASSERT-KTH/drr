/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:04:21 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;



import org.junit.runner.RunWith;


public class FastMathEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      long long0 = (-396L);
      long long1 = FastMath.max(long0, long0);
      assertEquals((-396L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int0 = 0;
      float float0 = FastMath.copySign((float) long1, (float) int0);
      assertEquals(396.0F, float0, 0.01F);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test001()  throws Throwable  {
      long long0 = (-214L);
      long long1 = FastMath.abs(long0);
      assertEquals(214L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      
      float float0 = FastMath.copySign((float) long1, (float) long0);
      assertEquals((-214.0F), float0, 0.01F);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test002()  throws Throwable  {
      double double0 = (-474.81246877);
      double double1 = FastMath.log1p(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = (-3480.4573F);
      double double2 = FastMath.copySign((double) float0, double1);
      assertEquals(3480.457275390625, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test003()  throws Throwable  {
      double double0 = (-2729.894828478);
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 0;
      double double2 = FastMath.copySign((double) int0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test004()  throws Throwable  {
      long long0 = (-396L);
      long long1 = FastMath.max(long0, long0);
      assertEquals((-396L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      int int0 = 0;
      double double0 = FastMath.copySign((double) int0, (double) long1);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test005()  throws Throwable  {
      double double0 = (-8.0E298);
      float float0 = (-240.90004F);
      double double1 = FastMath.copySign(double0, (double) float0);
      assertEquals((-8.0E298), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test006()  throws Throwable  {
      double double0 = 5698.422487;
      double double1 = FastMath.toRadians(double0);
      assertEquals(99.45623456783377, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.hypot(double1, double2);
      assertEquals(99.45623456783377, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
  }

  @Test
  public void test007()  throws Throwable  {
      long long0 = 2193L;
      double double0 = 3.141592653589793;
      double double1 = FastMath.tan(double0);
      //  // Unstable assertion: assertEquals((-1.2246467991473532E-16), double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      long long1 = FastMath.max(long0, long0);
      //  // Unstable assertion: assertEquals(2193L, long1);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      
      int int0 = FastMath.getExponent((double) long1);
      //  // Unstable assertion: assertEquals(11, int0);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      
      double double2 = FastMath.sqrt(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      
      double double3 = FastMath.hypot((double) int0, double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertTrue(long0 == long1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
  }

  @Test
  public void test008()  throws Throwable  {
      double double0 = (-7.800414592973399E-9);
      double double1 = FastMath.sqrt(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      int int0 = 1971;
      int int1 = FastMath.min(int0, int0);
      //  // Unstable assertion: assertEquals(1971, int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      
      double double2 = FastMath.hypot(double1, (double) int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(int0 == int1);
  }

  @Test
  public void test009()  throws Throwable  {
      double double0 = 2186.9;
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.hypot(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test010()  throws Throwable  {
      long long0 = 921L;
      long long1 = FastMath.abs(long0);
      assertEquals(921L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.sinh((double) long1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double1 = FastMath.hypot(double0, (double) long1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(double1 == double0);
      assertTrue(long0 == long1);
      assertTrue(double0 == double1);
  }

  @Test
  public void test011()  throws Throwable  {
      long long0 = 4368491638549381120L;
      int int0 = 210;
      int int1 = FastMath.max(int0, int0);
      assertEquals(210, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.max((double) int1, (double) long0);
      assertEquals(4.3684916385493811E18, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test012()  throws Throwable  {
      double double0 = (-1382.6168403457007);
      int int0 = 0;
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.max(double1, (double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test013()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.max(int0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.max((double) int1, (double) int1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test014()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      float float2 = FastMath.max(float0, float1);
      assertEquals(-0.0F, float2, 0.01F);
      assertTrue(float0 == float2);
      assertTrue(float0 == float1);
      assertTrue(float2 == float0);
      assertTrue(float2 == float1);
      assertTrue(float1 == float0);
      assertTrue(float1 == float2);
  }

  @Test
  public void test015()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.max(int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      long long0 = 5636L;
      float float0 = FastMath.max((float) int1, (float) long0);
      assertEquals(5636.0F, float0, 0.01F);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test016()  throws Throwable  {
      long long0 = 4095L;
      float float0 = 0.0F;
      float float1 = FastMath.max((float) long0, float0);
      assertEquals(4095.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test017()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.max(int0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float0 = FastMath.max((float) int1, (float) int1);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test018()  throws Throwable  {
      long long0 = 4368491638549381120L;
      long long1 = 0L;
      long long2 = FastMath.max(long0, long1);
      assertEquals(4368491638549381120L, long2);
      assertTrue(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
  }

  @Test
  public void test019()  throws Throwable  {
      int int0 = 16;
      int int1 = 1111;
      int int2 = FastMath.max(int1, int0);
      assertEquals(1111, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test020()  throws Throwable  {
      float float0 = (-8.1157F);
      int int0 = FastMath.getExponent(float0);
      assertEquals(3, int0);
      
      float float1 = -0.0F;
      double double0 = FastMath.pow((double) float1, (double) int0);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      float float2 = FastMath.min(float1, (float) int0);
      assertEquals(-0.0F, float2, 0.01F);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      
      double double1 = FastMath.min(double0, (double) float2);
      assertEquals(-0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertTrue(double1 == double0);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
  }

  @Test
  public void test021()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.floor(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = (-1.1918070206953359E-228);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.signum(double2);
      assertEquals((-1.0), double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double4 = FastMath.min(double3, double1);
      assertEquals((-1.0), double4, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double4 == double2);
      assertTrue(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertTrue(double3 == double4);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
  }

  @Test
  public void test022()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 7.526183084319617E-8;
      double double2 = FastMath.min(double1, double0);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test023()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.floor(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.min(double1, double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
  }

  @Test
  public void test024()  throws Throwable  {
      float float0 = 1.4E-45F;
      int int0 = FastMath.getExponent(float0);
      //  // Unstable assertion: assertEquals((-127), int0);
      
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      
      float float2 = -0.0F;
      //  // Unstable assertion: assertFalse(float2 == float1);
      
      float float3 = FastMath.min(float2, float1);
      //  // Unstable assertion: assertEquals(-0.0F, float3, 0.01F);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float3);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertTrue(float2 == float3);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float3);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float3 == float0);
      //  // Unstable assertion: assertFalse(float3 == float1);
      //  // Unstable assertion: assertTrue(float3 == float2);
  }

  @Test
  public void test025()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = (-2475.0F);
      float float2 = FastMath.min(float0, float1);
      //  // Unstable assertion: assertEquals((-2475.0F), float2, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 0;
      float float0 = FastMath.min((float) int0, (float) int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test027()  throws Throwable  {
      long long0 = 48L;
      long long1 = 3952090531849364496L;
      long long2 = FastMath.min(long1, long0);
      assertEquals(48L, long2);
      assertTrue(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
  }

  @Test
  public void test028()  throws Throwable  {
      int int0 = 428;
      int int1 = 0;
      int int2 = FastMath.min(int0, int1);
      assertEquals(0, int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test029()  throws Throwable  {
      float float0 = 0.5F;
      double double0 = FastMath.rint((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test030()  throws Throwable  {
      double double0 = (-963.70365352057);
      int int0 = 1717;
      double double1 = FastMath.pow(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.rint(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test031()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.rint(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = 125.0;
      double double1 = FastMath.sin(double0);
      assertEquals((-0.6160404591886565), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.ceil(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test033()  throws Throwable  {
      double double0 = (-943.2338776961183);
      double double1 = FastMath.ceil(double0);
      assertEquals((-943.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test034()  throws Throwable  {
      float float0 = 0.5F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-1), int0);
      
      double double0 = FastMath.ceil((double) int0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test035()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      long long0 = FastMath.round(double1);
      assertEquals((-9223372036854775808L), long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test036()  throws Throwable  {
      double double0 = 0.5039018405998233;
      double double1 = FastMath.acos(double0);
      assertEquals(1.042686203271179, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 1032;
      float float0 = FastMath.nextAfter((float) int0, double1);
      assertEquals(1031.9999F, float0, 0.01F);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test037()  throws Throwable  {
      long long0 = 0L;
      float float0 = (-1097.3F);
      float float1 = FastMath.nextAfter((float) long0, (double) float0);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = 0;
      float float0 = FastMath.nextUp((float) int0);
      assertEquals(1.4E-45F, float0, 0.01F);
  }

  @Test
  public void test039()  throws Throwable  {
      int int0 = (-321);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-321), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, (double) int1);
      assertEquals(3.4028235E38F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(float0 == float1);
  }

  @Test
  public void test040()  throws Throwable  {
      int int0 = 16;
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, (double) int0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test041()  throws Throwable  {
      float float0 = 3484.0F;
      float float1 = FastMath.nextAfter(float0, (double) float0);
      //  // Unstable assertion: assertEquals(3484.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      float float2 = Float.NaN;
      //  // Unstable assertion: assertFalse(float2 == float1);
      
      float float3 = FastMath.nextAfter(float2, (double) float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float3, 0.01F);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertTrue(float2 == float3);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float3 == float0);
      //  // Unstable assertion: assertTrue(float3 == float2);
      //  // Unstable assertion: assertFalse(float3 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float3);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float0 == float3);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = 4.3198234936686506E-297;
      double double1 = 281.3740839;
      double double2 = FastMath.nextAfter(double0, double1);
      assertEquals(4.319823493668651E-297, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test043()  throws Throwable  {
      double double0 = 2239.170985;
      double double1 = FastMath.atan2(double0, double0);
      assertEquals(0.7853981633974483, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 1481;
      float float0 = FastMath.nextUp((float) int0);
      assertEquals(1481.0001F, float0, 0.01F);
      
      double double2 = FastMath.nextAfter((double) float0, double1);
      assertEquals(1481.0001220703123, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test044()  throws Throwable  {
      long long0 = (-396L);
      int int0 = 0;
      double double0 = FastMath.nextAfter((double) int0, (double) long0);
      assertEquals((-4.9E-324), double0, 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      double double0 = (-2135.156023444174);
      double double1 = FastMath.asinh(double0);
      assertEquals((-8.359442237286997), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.nextAfter(double0, double1);
      assertEquals((-2135.1560234441736), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test046()  throws Throwable  {
      float float0 = 1119.483F;
      int int0 = (-2912);
      long long0 = FastMath.max((long) int0, (long) int0);
      assertEquals((-2912L), long0);
      
      int int1 = 3994;
      double double0 = FastMath.scalb((double) float0, int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(int1 == int0);
      
      double double1 = FastMath.nextAfter(double0, (double) long0);
      assertEquals(1.7976931348623157E308, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test047()  throws Throwable  {
      int int0 = (-29);
      int int1 = 142;
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = FastMath.nextAfter((double) float0, (double) int1);
      assertEquals((-1.7976931348623157E308), double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test048()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.nextUp((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test049()  throws Throwable  {
      double double0 = (-3384.59637560501);
      long long0 = (-214L);
      long long1 = FastMath.abs(long0);
      //  // Unstable assertion: assertEquals(214L, long1);
      //  // Unstable assertion: assertFalse(long0 == long1);
      //  // Unstable assertion: assertFalse(long1 == long0);
      
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.nextAfter((double) long1, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(long0 == long1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(long1 == long0);
  }

  @Test
  public void test050()  throws Throwable  {
      double double0 = Double.NaN;
      double double1 = FastMath.nextUp(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = 252;
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      float float0 = 1.4E-45F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = (-0.3267786F);
      float float2 = FastMath.scalb(float1, int0);
      assertEquals((-1.920632E-39F), float2, 0.01F);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
  }

  @Test
  public void test053()  throws Throwable  {
      float float0 = (-240.90004F);
      int int0 = 881;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test054()  throws Throwable  {
      float float0 = (-1754.3712F);
      int int0 = FastMath.round(float0);
      assertEquals((-1754), int0);
      
      float float1 = FastMath.scalb((float) int0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test055()  throws Throwable  {
      float float0 = 1119.483F;
      int int0 = (-2912);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test056()  throws Throwable  {
      int int0 = 1727;
      float float0 = 0.0F;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test057()  throws Throwable  {
      float float0 = 561.47314F;
      int int0 = 2795;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test058()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 1099;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test
  public void test059()  throws Throwable  {
      long long0 = (-396L);
      long long1 = FastMath.max(long0, long0);
      assertEquals((-396L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      int int0 = 0;
      float float0 = FastMath.scalb((float) long1, int0);
      assertEquals((-396.0F), float0, 0.01F);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test060()  throws Throwable  {
      long long0 = (-214L);
      float float0 = 1.4E-45F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = FastMath.scalb((float) long0, int0);
      assertEquals((-1.257779E-36F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test061()  throws Throwable  {
      double double0 = 4.3198234936686506E-297;
      int int0 = 1334;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(1.619870206896548E105, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test062()  throws Throwable  {
      double double0 = (-257.1410193);
      int int0 = (-1534);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test063()  throws Throwable  {
      double double0 = 2859.7032;
      int int0 = (-1037);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(1.941849009219177E-309, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.hypot(double1, double2);
      assertEquals(1.941849009219177E-309, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertTrue(double3 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test064()  throws Throwable  {
      double double0 = 2.092571258544922;
      double double1 = FastMath.sinh(double0);
      assertEquals(3.991180403939667, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-1548);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test065()  throws Throwable  {
      double double0 = (-1.7168146928204135);
      int int0 = 2172;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = (-474.81246877);
      int int0 = (-2562);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test067()  throws Throwable  {
      double double0 = 2498.45697449;
      int int0 = (-2783);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test068()  throws Throwable  {
      int int0 = 8388607;
      double double0 = 0.0;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test069()  throws Throwable  {
      double double0 = (-1720.4853870812);
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-1882);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test070()  throws Throwable  {
      double double0 = (-7.800414592973399E-9);
      double double1 = FastMath.sqrt(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      int int0 = 1971;
      double double2 = FastMath.scalb(double1, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
  }

  @Test
  public void test071()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      double double1 = FastMath.scalb((double) int0, int0);
      assertEquals((-1.1381252786264335E-305), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test072()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test073()  throws Throwable  {
      double double0 = 2959.0;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.ulp(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test074()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sin(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.abs(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = (-1382.6168403457007);
      double double1 = FastMath.abs(double0);
      assertEquals(1382.6168403457007, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test076()  throws Throwable  {
      long long0 = (-396L);
      long long1 = FastMath.max(long0, long0);
      assertEquals((-396L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      float float0 = FastMath.ulp((float) long1);
      assertEquals(3.0517578E-5F, float0, 0.01F);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test077()  throws Throwable  {
      int int0 = 0;
      float float0 = FastMath.ulp((float) int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test078()  throws Throwable  {
      float float0 = 1.4E-45F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      int int1 = FastMath.abs(int0);
      assertEquals(127, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toDegrees(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test080()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.log10(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      
      double double3 = FastMath.toDegrees(double2);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = 4.9E-324;
      double double1 = FastMath.toRadians(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test082()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toRadians(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test083()  throws Throwable  {
      int int0 = 2387;
      int int1 = FastMath.min(int0, int0);
      assertEquals(2387, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.cosh((double) int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double1 = FastMath.toRadians(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test084()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test085()  throws Throwable  {
      double double0 = 4.9E-324;
      double double1 = FastMath.cbrt(double0);
      assertEquals(1.7031839360032603E-108, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test086()  throws Throwable  {
      long long0 = 5636L;
      long long1 = FastMath.max(long0, long0);
      assertEquals(5636L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.cbrt((double) long1);
      assertEquals(17.796051811273802, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test087()  throws Throwable  {
      double double0 = (-4.791602708710648E-8);
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963747109237, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test088()  throws Throwable  {
      double double0 = 4.9E-324;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test089()  throws Throwable  {
      double double0 = 2186.9;
      double double1 = 0.0;
      double double2 = FastMath.pow(double0, double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      double double3 = FastMath.acos(double2);
      assertEquals(0.0, double3, 0.01D);
      assertTrue(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double3);
  }

  @Test
  public void test090()  throws Throwable  {
      double double0 = (-1.1918070206953359E-228);
      double double1 = FastMath.signum(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test091()  throws Throwable  {
      int int0 = 0;
      long long0 = FastMath.abs((long) int0);
      assertEquals(0L, long0);
      
      double double0 = FastMath.acos((double) long0);
      assertEquals(1.5707963267948966, double0, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      double double0 = 2959.0;
      double double1 = FastMath.acos(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test093()  throws Throwable  {
      long long0 = (-396L);
      long long1 = FastMath.max(long0, long0);
      assertEquals((-396L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double0 = FastMath.acos((double) long1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test094()  throws Throwable  {
      double double0 = (-1.1918070206953359E-228);
      double double1 = FastMath.signum(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.asin(double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = 5698.422487;
      double double1 = FastMath.toRadians(double0);
      assertEquals(99.45623456783377, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log(double1, double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.asin(double2);
      assertEquals(1.5707963267948966, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
  }

  @Test
  public void test096()  throws Throwable  {
      double double0 = (-508.7024743648);
      double double1 = FastMath.asin(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test097()  throws Throwable  {
      double double0 = 2959.0;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test098()  throws Throwable  {
      int int0 = 2387;
      double double0 = 2.4439696075216986E-307;
      double double1 = FastMath.atan2((double) int0, double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test099()  throws Throwable  {
      long long0 = 0L;
      double double0 = 86.615;
      double double1 = FastMath.atan2(double0, (double) long0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test100()  throws Throwable  {
      float float0 = (-1349.5566F);
      float float1 = 0.0F;
      double double0 = FastMath.atan2((double) float0, (double) float1);
      assertEquals((-1.5707963267948966), double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test101()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = 618.435655;
      double double1 = FastMath.atan2(double0, (double) float0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = (-2578.24776565);
      long long0 = FastMath.round(double0);
      assertEquals((-2578L), long0);
      
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2((double) long0, double1);
      assertEquals((-3.141592653589793), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = (-2876.825531);
      int int0 = 1481;
      double double1 = FastMath.cosh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test104()  throws Throwable  {
      double double0 = 2239.170985;
      int int0 = 1481;
      double double1 = FastMath.cosh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = (-2578.24776565);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double0);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test106()  throws Throwable  {
      int int0 = 2387;
      double double0 = FastMath.log1p((double) int0);
      assertEquals(7.778211474512493, double0, 0.01D);
      
      double double1 = 9.215982463319503E224;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.atan2(double2, double0);
      assertEquals(1.5707963267948966, double3, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test107()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-859.4284287);
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test108()  throws Throwable  {
      int int0 = 2982;
      double double0 = FastMath.cosh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = 0.0;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.asin(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      
      double double3 = FastMath.atan2(double2, double0);
      assertEquals(0.0, double3, 0.01D);
      assertTrue(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertTrue(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double1 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test109()  throws Throwable  {
      long long0 = 0L;
      double double0 = FastMath.atan2((double) long0, (double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test110()  throws Throwable  {
      double double0 = (-2876.825531);
      double double1 = FastMath.atan2(double0, double0);
      assertEquals((-2.356194490192345), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test111()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.max(int0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.log10((double) int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double1 = FastMath.atan(double0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test112()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test113()  throws Throwable  {
      double double0 = 1639.6063;
      double double1 = FastMath.tan(double0);
      assertEquals((-0.314894861478748), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tan(double1);
      assertEquals((-0.32573314587037583), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test114()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.min(long0, long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double0 = FastMath.log10((double) long1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double1 = FastMath.tan(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertTrue(long0 == long1);
      assertFalse(double0 == double1);
      assertTrue(long1 == long0);
      assertFalse(double1 == double0);
  }

  @Test
  public void test115()  throws Throwable  {
      long long0 = (-214L);
      double double0 = FastMath.tan((double) long0);
      assertEquals((-0.3898196866698101), double0, 0.01D);
  }

  @Test
  public void test116()  throws Throwable  {
      float float0 = (-280.8F);
      double double0 = FastMath.cos((double) float0);
      assertEquals((-0.3639960690946274), double0, 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      double double0 = (-963.70365352057);
      int int0 = 1717;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cos(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = 5698.422487;
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sin(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = (-4.791602708710648E-8);
      double double1 = FastMath.asin(double0);
      assertEquals((-4.79160270871065E-8), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.rint(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      double double3 = FastMath.sin(double2);
      assertEquals(-0.0, double3, 0.01D);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.sin(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
  }

  @Test
  public void test121()  throws Throwable  {
      double double0 = 2.268329019570017E70;
      double double1 = FastMath.cos(double0);
      assertEquals(0.663213827198144, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = 1.0450615121235744E99;
      double double1 = FastMath.sin(double0);
      assertEquals((-0.7610065122339399), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = 3.156243682143956E47;
      double double1 = FastMath.tan(double0);
      assertEquals(1.4058291060195793, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test124()  throws Throwable  {
      double double0 = 8.403887374207366E221;
      double double1 = FastMath.toDegrees(double0);
      assertEquals(4.815072780453616E223, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tan(double1);
      assertEquals(0.2278558265942108, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.sin(double0);
      assertEquals(0.004961954789184062, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test126()  throws Throwable  {
      double double0 = 1.8356062677502141E202;
      double double1 = FastMath.tan(double0);
      assertEquals((-2.4046196662594923), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test127()  throws Throwable  {
      int int0 = 8388607;
      double double0 = FastMath.cos((double) int0);
      assertEquals((-0.12349580912475928), double0, 0.01D);
  }

  @Test
  public void test128()  throws Throwable  {
      double double0 = 5.05239404378821E31;
      double double1 = FastMath.sin(double0);
      assertEquals(0.7912963560231924, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test129()  throws Throwable  {
      long long0 = 9223372036854775807L;
      double double0 = FastMath.cos((double) long0);
      assertEquals(0.011800076512800236, double0, 0.01D);
  }

  @Test
  public void test130()  throws Throwable  {
      double double0 = 125.0;
      double double1 = FastMath.sin(double0);
      assertEquals((-0.6160404591886565), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      long long0 = FastMath.round(double1);
      assertEquals((-1L), long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-3720);
      double double2 = FastMath.pow((double) long0, int0);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test131()  throws Throwable  {
      long long0 = (-396L);
      long long1 = FastMath.max(long0, long0);
      assertEquals((-396L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.cos((double) long1);
      assertEquals(0.9873344954974584, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double1 = FastMath.pow((double) long1, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertTrue(long1 == long0);
      assertFalse(double0 == double1);
      assertTrue(long0 == long1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test132()  throws Throwable  {
      double double0 = (-1382.6168403457007);
      long long0 = 5636L;
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.tan((double) long0);
      //  // Unstable assertion: assertEquals((-0.017222242524183667), double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertTrue(double3 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
  }

  @Test
  public void test133()  throws Throwable  {
      double double0 = (-963.70365352057);
      int int0 = 1717;
      double double1 = FastMath.pow(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.scalb(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
  }

  @Test
  public void test134()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 2759;
      double double2 = FastMath.pow(double1, (double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test135()  throws Throwable  {
      int int0 = (-2912);
      long long0 = FastMath.max((long) int0, (long) int0);
      assertEquals((-2912L), long0);
      
      double double0 = 2237.62966998956;
      int int1 = 3994;
      double double1 = FastMath.scalb(double0, int1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow((double) long0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test136()  throws Throwable  {
      float float0 = (-1349.5566F);
      float float1 = FastMath.abs(float0);
      assertEquals(1349.5566F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      int int0 = 1727;
      double double0 = FastMath.scalb((double) float1, int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double1 = FastMath.pow(double0, (double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(float0 == float1);
      assertTrue(double1 == double0);
      assertFalse(float1 == float0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test137()  throws Throwable  {
      double double0 = 1639.6063;
      double double1 = FastMath.tan(double0);
      assertEquals((-0.314894861478748), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 1727;
      double double2 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.pow(double2, double1);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test
  public void test138()  throws Throwable  {
      long long0 = 2193L;
      long long1 = FastMath.max(long0, long0);
      assertEquals(2193L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int0 = FastMath.getExponent((double) long1);
      assertEquals(11, int0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = 0.0;
      double double1 = FastMath.pow(double0, (double) int0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(long1 == long0);
      assertTrue(double0 == double1);
      assertTrue(long0 == long1);
  }

  @Test
  public void test139()  throws Throwable  {
      float float0 = (-0.026013102F);
      int int0 = FastMath.getExponent(float0);
      assertEquals((-6), int0);
      
      float float1 = -0.0F;
      double double0 = FastMath.pow((double) float1, (double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test140()  throws Throwable  {
      float float0 = 1.4E-45F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = -0.0F;
      double double0 = FastMath.pow((double) float1, (double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test141()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.log1p(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test142()  throws Throwable  {
      long long0 = (-396L);
      int int0 = 0;
      double double0 = FastMath.pow((double) long0, int0);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = FastMath.log1p(double0);
      assertEquals(0.6931471805599453, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test143()  throws Throwable  {
      double double0 = 1601.99304;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test144()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.log1p((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test145()  throws Throwable  {
      double double0 = (-1701.0);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double1);
      assertEquals((-1.0), double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test146()  throws Throwable  {
      float float0 = (-1707.4366F);
      double double0 = FastMath.ulp((double) float0);
      assertEquals(2.2737367544323206E-13, double0, 0.01D);
      
      double double1 = 1.25;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.hypot(double0, double1);
      assertEquals(1.25, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.pow(double2, double0);
      assertEquals(1.0000000000000506, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test147()  throws Throwable  {
      double double0 = 2186.9;
      double double1 = 0.0;
      double double2 = FastMath.pow(double0, double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.log(double2);
      assertEquals(0.0, double3, 0.01D);
      assertTrue(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double2);
      assertTrue(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
  }

  @Test
  public void test148()  throws Throwable  {
      double double0 = 0.975640573013751;
      double double1 = FastMath.log10(double0);
      assertEquals((-0.010710147401362523), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test149()  throws Throwable  {
      double double0 = 4.9E-324;
      double double1 = FastMath.log(double0, double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test150()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      long long0 = (-325L);
      long long1 = FastMath.min(long0, long0);
      assertEquals((-325L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      int int0 = 2766;
      double double2 = FastMath.pow(double1, (double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.log(double2, (double) long1);
      assertEquals(Double.NaN, double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test151()  throws Throwable  {
      double double0 = (-1.1587600174449919E-8);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.158760010731368E-8), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test152()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test153()  throws Throwable  {
      double double0 = 5.088219872370737E183;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test154()  throws Throwable  {
      double double0 = (-718.0406697567793);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test155()  throws Throwable  {
      double double0 = (-943.2338776961183);
      double double1 = (-932.0);
      double double2 = FastMath.pow(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test156()  throws Throwable  {
      float float0 = 1.4E-45F;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(1.4E-45F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      float float2 = FastMath.signum(float1);
      assertEquals(1.0F, float2, 0.01F);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float2);
      assertTrue(float1 == float0);
      assertFalse(float0 == float2);
      assertTrue(float0 == float1);
  }

  @Test
  public void test157()  throws Throwable  {
      float float0 = 1.4E-45F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = FastMath.signum((float) int0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test158()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test159()  throws Throwable  {
      float float0 = 1.4E-45F;
      int int0 = 142;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0078125F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.atanh((double) float1);
      assertEquals(0.007812658951540421, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test160()  throws Throwable  {
      double double0 = (-0.07589667640974304);
      double double1 = FastMath.atanh(double0);
      assertEquals((-0.0760429115060147), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test161()  throws Throwable  {
      double double0 = 0.14285714285714285;
      double double1 = FastMath.asin(double0);
      assertEquals(0.14334756890536535, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atanh(double1);
      assertEquals(0.14434171533408743, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test162()  throws Throwable  {
      double double0 = (-1204.0);
      double double1 = FastMath.atanh(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test163()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.atanh((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test164()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.asinh(double0);
      assertEquals((-0.01071448572782725), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test165()  throws Throwable  {
      double double0 = 0.04168701738764507;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.041674952818573315, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test166()  throws Throwable  {
      double double0 = 0.14285714285714285;
      double double1 = FastMath.asin(double0);
      assertEquals(0.14334756890536535, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.asinh(double1);
      assertEquals(0.14286112350096827, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test167()  throws Throwable  {
      double double0 = (-0.09088450866185192);
      double double1 = FastMath.tanh(double0);
      assertEquals((-0.09063509752042591), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test168()  throws Throwable  {
      double double0 = (-1914.7651);
      double double1 = FastMath.atan(double0);
      assertEquals((-1.57027406956915), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tanh(double1);
      assertEquals((-0.9170693449759402), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test169()  throws Throwable  {
      double double0 = 5.0614674548127384E-8;
      double double1 = FastMath.signum(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(0.7615941559557649, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test170()  throws Throwable  {
      double double0 = (-404.8850329046078);
      double double1 = FastMath.tanh(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test171()  throws Throwable  {
      long long0 = 0L;
      long long1 = 4095L;
      long long2 = FastMath.max(long0, long1);
      assertEquals(4095L, long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      
      double double0 = FastMath.tanh((double) long2);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
  }

  @Test
  public void test172()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.max(int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.tanh((double) int1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test173()  throws Throwable  {
      double double0 = (-1.2513218445781325E-8);
      double double1 = FastMath.sin(double0);
      assertEquals((-1.2513218445781325E-8), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.sinh(double1);
      assertEquals((-1.2513218445781325E-8), double2, 0.01D);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
  }

  @Test
  public void test174()  throws Throwable  {
      double double0 = (-33.1263285137145);
      double double1 = FastMath.sinh(double0);
      assertEquals((-1.2177319013657906E14), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test175()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sinh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test176()  throws Throwable  {
      double double0 = 514.3;
      double double1 = FastMath.sinh(double0);
      assertEquals(1.1392578957202087E223, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test177()  throws Throwable  {
      int int0 = 2759;
      int int1 = FastMath.abs(int0);
      assertEquals(2759, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.sinh((double) int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test178()  throws Throwable  {
      double double0 = 2.092571258544922;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.4984196741691675), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(1.12680387257561, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test179()  throws Throwable  {
      double double0 = (-49.231724187);
      double double1 = FastMath.cosh(double0);
      assertEquals(1.2023645226394166E21, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test180()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cosh(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test181()  throws Throwable  {
      double double0 = 572.4018489943;
      double double1 = FastMath.cosh(double0);
      assertEquals(1.9495503402027592E248, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test182()  throws Throwable  {
      double double0 = (-718.0406697567793);
      double double1 = FastMath.exp(double0);
      assertEquals(1.44178114769E-312, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double1, double1);
      assertEquals(0.7853981633974483, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test183()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.max(int0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.cos((double) int1);
      assertEquals(1.0, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test184()  throws Throwable  {
      long long0 = (-214L);
      float float0 = FastMath.copySign((float) long0, (float) long0);
      assertEquals((-214.0F), float0, 0.01F);
      
      int int0 = FastMath.getExponent(float0);
      assertEquals(7, int0);
  }

  @Test
  public void test185()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.nextUp((double) int0);
      assertEquals(4.9E-324, double0, 0.01D);
  }

  @Test
  public void test186()  throws Throwable  {
      long long0 = (-396L);
      long long1 = FastMath.max(long0, long0);
      assertEquals((-396L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      float float0 = FastMath.nextUp((float) long1);
      assertEquals((-395.99997F), float0, 0.01F);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test187()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.max(int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.IEEEremainder((double) int1, (double) int1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }
}
