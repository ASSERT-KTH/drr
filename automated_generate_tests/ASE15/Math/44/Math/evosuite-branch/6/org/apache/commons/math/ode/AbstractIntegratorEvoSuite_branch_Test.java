/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:42:09 GMT 2014
 */

package org.apache.commons.math.ode;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Collection;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math.ode.nonstiff.GillIntegrator;
import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math.ode.sampling.StepHandler;



import org.junit.runner.RunWith;


public class AbstractIntegratorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 0.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(double0);
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      
      int int0 = 1580;
      classicalRungeKuttaIntegrator0.setMaxEvaluations(int0);
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      assertEquals(1580, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-1747.0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(double0);
      assertNotNull(threeEighthesIntegrator0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      
      Collection<EventHandler> collection0 = threeEighthesIntegrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 1580;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((double) int0, double0, double0, double0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(1580.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      
      double double1 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(1580.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = (-1747.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(double0, double0, double0, double0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(1747.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(1747.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1747.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try {
        graggBulirschStoerIntegrator0.computeDerivatives(double0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = (-1456.65832425);
      GillIntegrator gillIntegrator0 = new GillIntegrator(double0);
      assertNotNull(gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(2147483647, gillIntegrator0.getMaxEvaluations());
      assertEquals(0, gillIntegrator0.getEvaluations());
      
      gillIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(2147483647, gillIntegrator0.getMaxEvaluations());
      assertEquals(0, gillIntegrator0.getEvaluations());
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = (-1456.65832425);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(double0);
      assertNotNull(midpointIntegrator0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      
      double double1 = midpointIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = (-31.139403219565178);
      double[] doubleArray0 = new double[7];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(double0, double0, doubleArray0, doubleArray0);
      assertNotNull(dormandPrince853Integrator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(31.139403219565178, dormandPrince853Integrator0.getMaxStep(), 0.01D);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01D);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(31.139403219565178, dormandPrince853Integrator0.getMinStep(), 0.01D);
      assertEquals(2147483647, dormandPrince853Integrator0.getMaxEvaluations());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01D);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01D);
      assertEquals(31.139403219565178, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01D);
      
      String string0 = dormandPrince853Integrator0.getName();
      assertNotNull(string0);
      assertEquals("Dormand-Prince 8 (5, 3)", string0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(31.139403219565178, dormandPrince853Integrator0.getMaxStep(), 0.01D);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01D);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(31.139403219565178, dormandPrince853Integrator0.getMinStep(), 0.01D);
      assertEquals(2147483647, dormandPrince853Integrator0.getMaxEvaluations());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01D);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01D);
      assertEquals(31.139403219565178, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = (-1456.65832425);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(double0, double0, double0, double0);
      assertNotNull(highamHall54Integrator0);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(1456.65832425, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(1456.65832425, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(1456.65832425, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      
      int int0 = highamHall54Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(1456.65832425, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(1456.65832425, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(1456.65832425, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-1747.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(double0, double0, double0, double0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(1747.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(1747.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(1747.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      
      int int0 = (-4463);
      EventHandler eventHandler0 = null;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      
      EventState eventState0 = new EventState(eventHandler0, double0, double0, int0, (UnivariateRealSolver) regulaFalsiSolver0);
      assertNotNull(eventState0);
      assertEquals(false, eventState0.stop());
      assertEquals(1747.0, eventState0.getConvergence(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, eventState0.getEventTime(), 0.01D);
      assertEquals(-4463, eventState0.getMaxIterationCount());
      assertEquals((-1747.0), eventState0.getMaxCheckInterval(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      
      EventHandler eventHandler1 = eventState0.getEventHandler();
      assertNull(eventHandler1);
      assertEquals(false, eventState0.stop());
      assertEquals(1747.0, eventState0.getConvergence(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, eventState0.getEventTime(), 0.01D);
      assertEquals(-4463, eventState0.getMaxIterationCount());
      assertEquals((-1747.0), eventState0.getMaxCheckInterval(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (double) int0, double0, int0);
      assertEquals(false, eventState0.stop());
      assertEquals(1747.0, eventState0.getConvergence(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, eventState0.getEventTime(), 0.01D);
      assertEquals(-4463, eventState0.getMaxIterationCount());
      assertEquals((-1747.0), eventState0.getMaxCheckInterval(), 0.01D);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(1747.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(1747.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(1747.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-1053.7399069217113);
      GillIntegrator gillIntegrator0 = new GillIntegrator(double0);
      assertNotNull(gillIntegrator0);
      assertEquals(2147483647, gillIntegrator0.getMaxEvaluations());
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, gillIntegrator0.getEvaluations());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01D);
      
      Collection<StepHandler> collection0 = gillIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals(2147483647, gillIntegrator0.getMaxEvaluations());
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, gillIntegrator0.getEvaluations());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-1053.7399069217113);
      GillIntegrator gillIntegrator0 = new GillIntegrator(double0);
      assertNotNull(gillIntegrator0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(2147483647, gillIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, gillIntegrator0.getEvaluations());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01D);
      
      gillIntegrator0.clearStepHandlers();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(2147483647, gillIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, gillIntegrator0.getEvaluations());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01D);
  }
}
