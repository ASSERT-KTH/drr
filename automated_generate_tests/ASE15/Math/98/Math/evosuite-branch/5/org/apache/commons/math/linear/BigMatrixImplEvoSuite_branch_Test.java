/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:32:43 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import org.apache.commons.math.linear.BigMatrix;
import org.apache.commons.math.linear.BigMatrixImpl;
import org.apache.commons.math.linear.InvalidMatrixException;
import org.apache.commons.math.linear.MatrixIndexException;




import org.junit.runner.RunWith;


public class BigMatrixImplEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = (-27);
      try {
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.getRow(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][10];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0[1]);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(10, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.getLUMatrix();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // LU decomposition requires that the matrix be square.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimalArray0[0].shortValue());
      assertEquals(1, bigDecimalArray0[0].byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      
      boolean boolean0 = bigMatrixImpl0.equals((Object) bigMatrixImpl1);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertTrue(boolean0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
  }

  @Test
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.getRow(int0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigDecimalArray0);
      
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[2][6];
      bigDecimalArray1[0] = bigDecimalArray0;
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigDecimalArray1[0]);
      
      bigDecimalArray1[1] = bigDecimalArray0;
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigDecimalArray1[1]);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(2, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      
      boolean boolean0 = bigMatrixImpl0.equals((Object) bigMatrixImpl1);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(2, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertFalse(boolean0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
  }

  @Test
  public void test04()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      boolean boolean0 = bigMatrixImpl0.equals((Object) bigDecimalArray0[0]);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][10];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(10, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      String string0 = bigMatrixImpl0.toString();
      assertEquals(10, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals("BigMatrixImpl{{null,null,null,null,null,null,null,null,null,null},{null,null,null,null,null,null,null,null,null,null}}", string0);
      assertNotNull(string0);
  }

  @Test
  public void test06()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      String string0 = bigMatrixImpl0.toString();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals("BigMatrixImpl{}", string0);
      assertNotNull(string0);
  }

  @Test
  public void test07()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][10];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(10, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      boolean boolean0 = bigMatrixImpl0.isSingular();
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(10, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertTrue(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][10];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimalArray1[0].shortValue());
      assertEquals(1, bigDecimalArray1[0].byteValue());
      assertNotNull(bigDecimalArray1[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      bigDecimalArray0[0] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[0]);
      
      BigDecimal[] bigDecimalArray2 = bigMatrixImpl0.solve(bigDecimalArray0[0]);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigDecimalArray2);
      assertNotSame(bigDecimalArray1, bigDecimalArray2);
      assertNotSame(bigDecimalArray2, bigDecimalArray1);
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray2));
      assertFalse(bigDecimalArray2.equals((Object)bigDecimalArray1));
  }

  @Test
  public void test09()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray0 = new double[4];
      try {
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.solve(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // constant vector has wrong length
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray1 = new double[4];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(doubleArray0);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl1.operate(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertNotNull(bigDecimalArray0);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      
      BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.preMultiply(bigDecimalArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigDecimalArray1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigDecimalArray0, bigDecimalArray1);
      assertNotSame(bigDecimalArray1, bigDecimalArray0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigDecimalArray0.equals((Object)bigDecimalArray1));
      assertFalse(bigDecimalArray1.equals((Object)bigDecimalArray0));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
  }

  @Test
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      try {
        BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.operate(doubleArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector has wrong length
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][10];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(10, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      try {
        BigDecimal bigDecimal0 = bigMatrixImpl0.getTrace();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix is not square
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal0 = bigMatrixImpl0.getTrace();
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertNull(bigDecimal0);
  }

  @Test
  public void test14()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(1, bigDecimalArray0[0].byteValue());
      assertEquals(1, bigDecimalArray0[0].shortValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.inverse();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      
      boolean boolean0 = bigMatrixImpl0.isSingular();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertFalse(boolean0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
  }

  @Test
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal0 = bigMatrixImpl0.getDeterminant();
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test16()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimalArray0[0].byteValue());
      assertEquals(1, bigDecimalArray0[0].shortValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal1 = bigMatrixImpl0.getDeterminant();
      assertEquals(1, bigDecimal1.shortValue());
      assertEquals(1, bigDecimal1.byteValue());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
  }

  @Test
  public void test17()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[7];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      try {
        BigDecimal bigDecimal0 = bigMatrixImpl0.getDeterminant();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix is not square
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.transpose();
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotNull(bigMatrixImpl1);
  }

  @Test
  public void test19()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[5];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(1, bigDecimalArray0[0].byteValue());
      assertEquals(1, bigDecimalArray0[0].shortValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      byte[] byteArray0 = new byte[2];
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[1][10];
      bigDecimalArray1[0] = bigDecimalArray0;
      assertNotNull(bigDecimalArray1[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray0 = bigMatrixImpl0.getColumnAsDoubleArray((int) byteArray0[1]);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(doubleArray0);
  }

  @Test
  public void test20()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 4837;
      try {
        double[] doubleArray0 = bigMatrixImpl0.getColumnAsDoubleArray(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = bigMatrixImpl0.hashCode();
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(209529, int0);
      
      try {
        BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.getColumn(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[5];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 1;
      BigDecimal[] bigDecimalArray0 = bigMatrixImpl0.getColumn(int0);
      assertEquals(5, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertNotNull(bigDecimalArray0);
  }

  @Test
  public void test23()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(1, bigDecimalArray0[0].byteValue());
      assertEquals(1, bigDecimalArray0[0].shortValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      int int0 = 1;
      bigDecimalArray0[1] = bigDecimalArray0[0];
      assertEquals(1, bigDecimalArray0[1].shortValue());
      assertEquals(1, bigDecimalArray0[1].byteValue());
      assertNotNull(bigDecimalArray0[1]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      double[] doubleArray0 = bigMatrixImpl0.getRowAsDoubleArray(int0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(doubleArray0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 6275;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(int0, int0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(6275, bigMatrixImpl0.getColumnDimension());
      assertEquals(6275, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      try {
        double[] doubleArray0 = bigMatrixImpl0.getRowAsDoubleArray(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = bigMatrixImpl0.getScale();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, int0);
      
      try {
        BigDecimal[] bigDecimalArray1 = bigMatrixImpl0.getRow(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][1];
      bigMatrixImpl0.data = bigDecimalArray0;
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0.data);
      
      int int0 = (-2013);
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.getColumnMatrix(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal column argument
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getColumnMatrix(int0);
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl1);
  }

  @Test
  public void test28()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[9];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(9, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 4405;
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.getRowMatrix(int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal row argument
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 1;
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getRowMatrix(int0);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
  }

  @Test
  public void test30()  throws Throwable  {
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[1][9];
      int int0 = 1;
      try {
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // matrix must be initialized to perfom this method
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][10];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      try {
        bigMatrixImpl0.setSubMatrix(bigDecimalArray0, int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[11][10];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      bigDecimalArray0[0] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[2];
      int int0 = 4;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      int int1 = (-3668);
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[9][6];
      try {
        bigMatrixImpl0.setSubMatrix(bigDecimalArray1, int1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      int[] intArray0 = new int[3];
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getSubMatrix(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(3, bigMatrixImpl1.getRowDimension());
      assertEquals(3, bigMatrixImpl1.getColumnDimension());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
  }

  @Test
  public void test35()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      int int1 = 1906;
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.getSubMatrix(int0, int0, int1, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      double double0 = 0.0;
      BigDecimal bigDecimal0 = new BigDecimal(double0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(0, bigDecimalArray0[0].shortValue());
      assertEquals(0, bigDecimalArray0[0].byteValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      byte byte0 = bigDecimalArray0[0].byteValue();
      assertEquals((byte)0, byte0);
      
      int int0 = 2425;
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.getSubMatrix((int) byte0, int0, (int) byte0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.getSubMatrix(int0, int0, int0, int0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
  }

  @Test
  public void test38()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = (-22);
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.getSubMatrix(int0, int0, int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid row or column index selection
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][10];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      double double0 = 0.0;
      BigDecimal bigDecimal0 = new BigDecimal(double0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      assertEquals(0, bigDecimalArray1[0].shortValue());
      assertEquals(0, bigDecimalArray1[0].byteValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimalArray1[0]);
      
      bigDecimalArray0[0] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[0]);
      
      bigDecimalArray0[1] = bigDecimalArray0[0];
      assertNotNull(bigDecimalArray0[1]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal bigDecimal1 = bigMatrixImpl0.getNorm();
      assertEquals(0, bigDecimal1.shortValue());
      assertEquals(0, bigDecimal1.byteValue());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
  }

  @Test
  public void test40()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][10];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      double double0 = 0.0;
      BigDecimal bigDecimal0 = new BigDecimal(double0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray1[0] = bigDecimal0;
      assertEquals(0, bigDecimalArray1[0].shortValue());
      assertEquals(0, bigDecimalArray1[0].byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimalArray1[0]);
      
      bigDecimalArray0[1] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[1]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0[1]);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      double[][] doubleArray0 = bigMatrixImpl0.getDataAsDoubleArray();
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(doubleArray0);
  }

  @Test
  public void test41()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(1, bigDecimalArray0[0].byteValue());
      assertEquals(1, bigDecimalArray0[0].shortValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.preMultiply((BigMatrix) bigMatrixImpl0);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
  }

  @Test
  public void test42()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      try {
        BigMatrixImpl bigMatrixImpl1 = bigMatrixImpl0.multiply(bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrices are not multiplication compatible.
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimalArray0[0].byteValue());
      assertEquals(1, bigDecimalArray0[0].shortValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarMultiply(bigDecimal0);
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
  }

  @Test
  public void test44()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(1, bigDecimalArray0[0].shortValue());
      assertEquals(1, bigDecimalArray0[0].byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.scalarAdd(bigDecimal0);
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
  }

  @Test
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.subtract((BigMatrix) bigMatrixImpl0);
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertTrue(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
  }

  @Test
  public void test46()  throws Throwable  {
      double[][] doubleArray0 = new double[10][2];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(10, bigMatrixImpl0.getRowDimension());
      assertEquals(2, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[] bigDecimalArray0 = new BigDecimal[4];
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      
      try {
        BigMatrixImpl bigMatrixImpl2 = bigMatrixImpl0.subtract(bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(1, bigDecimalArray0[0].shortValue());
      assertEquals(1, bigDecimalArray0[0].byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      bigDecimalArray0[1] = bigDecimalArray0[0];
      assertEquals(1, bigDecimalArray0[1].byteValue());
      assertEquals(1, bigDecimalArray0[1].shortValue());
      assertNotNull(bigDecimalArray0[1]);
      
      bigDecimalArray0[2] = bigDecimalArray0[0];
      assertEquals(1, bigDecimalArray0[2].shortValue());
      assertEquals(1, bigDecimalArray0[2].byteValue());
      assertNotNull(bigDecimalArray0[2]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = bigMatrixImpl0.add(bigMatrixImpl0);
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(3, bigMatrixImpl1.getRowDimension());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertFalse(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
  }

  @Test
  public void test48()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][10];
      BigDecimal[] bigDecimalArray1 = new BigDecimal[1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray1);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      bigDecimalArray0[0] = bigDecimalArray1;
      assertNotNull(bigDecimalArray0[0]);
      
      bigDecimalArray0[1] = bigDecimalArray0[0];
      assertNotNull(bigDecimalArray0[1]);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(2, bigMatrixImpl1.getRowDimension());
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(false, bigMatrixImpl1.isSquare());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl1.add((BigMatrix) bigMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[7];
      int int0 = 123;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(7, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = new BigMatrixImpl(int0, int0);
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(123, bigMatrixImpl1.getColumnDimension());
      assertEquals(123, bigMatrixImpl1.getRowDimension());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertFalse(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      
      try {
        BigMatrixImpl bigMatrixImpl2 = bigMatrixImpl0.add(bigMatrixImpl1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix dimension mismatch
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      String[][] stringArray0 = new String[8][5];
      String[] stringArray1 = new String[9];
      stringArray0[1] = stringArray1;
      assertNotNull(stringArray0[1]);
      
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      String[][] stringArray0 = new String[8][5];
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[10];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      BigDecimal bigDecimal0 = BigMatrixImpl.ONE;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimalArray0[0].byteValue());
      assertEquals(1, bigDecimalArray0[0].shortValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      BigDecimal[][] bigDecimalArray1 = new BigDecimal[16][10];
      bigDecimalArray1[7] = bigDecimalArray0;
      assertNotNull(bigDecimalArray1[7]);
      
      boolean boolean0 = bigMatrixImpl0.isSingular();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertFalse(boolean0);
      
      BigMatrixImpl bigMatrixImpl1 = null;
      try {
        bigMatrixImpl1 = new BigMatrixImpl(bigDecimalArray1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All input rows must have the same length.
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][6];
      boolean boolean0 = true;
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0, boolean0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(6, bigMatrixImpl0.getColumnDimension());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = 1125;
      int int1 = 0;
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = (-373);
      BigMatrixImpl bigMatrixImpl0 = null;
      try {
        bigMatrixImpl0 = new BigMatrixImpl(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row and column dimensions must be positive
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[1];
      double double0 = 0.0;
      BigDecimal bigDecimal0 = new BigDecimal(double0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      bigDecimalArray0[0] = bigDecimal0;
      assertEquals(0, bigDecimalArray0[0].byteValue());
      assertEquals(0, bigDecimalArray0[0].shortValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimalArray0[0]);
      
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      byte byte0 = bigDecimalArray0[0].byteValue();
      assertEquals((byte)0, byte0);
      
      bigMatrixImpl0.setScale((int) byte0);
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(0, bigMatrixImpl0.getScale());
  }

  @Test
  public void test58()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][10];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(10, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      // Undeclared exception!
      try {
        int[] intArray0 = bigMatrixImpl0.getPermutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test59()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[23];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(23, bigMatrixImpl0.getRowDimension());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertNotNull(bigMatrixImpl0);
      
      try {
        BigMatrix bigMatrix0 = bigMatrixImpl0.inverse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // coefficient matrix is not square
         //
      }
  }

  @Test
  public void test60()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][10];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(10, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = bigMatrixImpl0.getScale();
      assertEquals(10, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(64, int0);
      
      bigMatrixImpl0.setRoundingMode(int0);
      assertEquals(10, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(2, bigMatrixImpl0.getRowDimension());
      assertEquals(64, bigMatrixImpl0.getRoundingMode());
      assertEquals(false, bigMatrixImpl0.isSquare());
  }

  @Test
  public void test61()  throws Throwable  {
      BigDecimal[][] bigDecimalArray0 = new BigDecimal[2][10];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0[1]);
      assertEquals(10, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        double double0 = bigMatrixImpl0.getEntryAsDouble(int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test62()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(doubleArray0);
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl0);
      
      BigMatrixImpl bigMatrixImpl1 = (BigMatrixImpl)bigMatrixImpl0.copy();
      assertEquals(1, bigMatrixImpl1.getColumnDimension());
      assertEquals(1, bigMatrixImpl1.getRowDimension());
      assertEquals(true, bigMatrixImpl1.isSquare());
      assertEquals(64, bigMatrixImpl1.getScale());
      assertEquals(4, bigMatrixImpl1.getRoundingMode());
      assertEquals(true, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(1, bigMatrixImpl0.getRowDimension());
      assertNotNull(bigMatrixImpl1);
      assertNotSame(bigMatrixImpl1, bigMatrixImpl0);
      assertNotSame(bigMatrixImpl0, bigMatrixImpl1);
      assertTrue(bigMatrixImpl1.equals((Object)bigMatrixImpl0));
      assertTrue(bigMatrixImpl0.equals((Object)bigMatrixImpl1));
  }

  @Test
  public void test63()  throws Throwable  {
      BigDecimal[] bigDecimalArray0 = new BigDecimal[3];
      BigMatrixImpl bigMatrixImpl0 = new BigMatrixImpl(bigDecimalArray0);
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertNotNull(bigMatrixImpl0);
      
      int int0 = bigMatrixImpl0.getRoundingMode();
      assertEquals(64, bigMatrixImpl0.getScale());
      assertEquals(3, bigMatrixImpl0.getRowDimension());
      assertEquals(false, bigMatrixImpl0.isSquare());
      assertEquals(1, bigMatrixImpl0.getColumnDimension());
      assertEquals(4, bigMatrixImpl0.getRoundingMode());
      assertEquals(4, int0);
  }
}
