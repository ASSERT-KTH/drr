/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:58:54 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.apache.commons.math3.exception.NoDataException;
import org.apache.commons.math3.exception.NonMonotonicSequenceException;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.util.MathArrays;



import org.junit.runner.RunWith;


public class MathArraysEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      int int0 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      try {
        double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.NaN;
      double double1 = 378.48;
      doubleArray0[4] = double0;
      doubleArray0[1] = double1;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 378.48, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 378.48, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray1);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.NaN;
      doubleArray0[4] = double0;
      try {
        double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, doubleArray0[1]);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = double0;
      try {
        double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, doubleArray0[6]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 3
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = Double.NaN;
      try {
        double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = double0;
      try {
        double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, doubleArray0[6]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = 1913.7283F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) float0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1913.728271484375, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1913.728271484375, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      
      doubleArray0[0] = (double) floatArray0[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1913.728271484375, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[5];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double double0 = Double.NaN;
      doubleArray0[1] = double0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = (-1.564113F);
      float[] floatArray1 = new float[5];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[2] = float0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.564113F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[4];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = Float.NaN;
      floatArray0[0] = float0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = new float[5];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      float[] floatArray0 = new float[11];
      float[] floatArray1 = null;
      boolean boolean0 = MathArrays.equals(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = null;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       float[] floatArray0 = new float[6];
//       boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
//       assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
//       assertTrue(boolean0);
//   }

  @Test
  public void test28()  throws Throwable  {
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-0.16624879837036133);
      double double1 = Double.NaN;
      int int0 = 1;
      double double2 = MathArrays.linearCombination(double0, double1, doubleArray0[0], (double) int0, double0, (double) int0, double0, (double) int0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = (-1.0);
      int int0 = (-2056);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-2056), (int)integer0);
      
      double double1 = MathArrays.linearCombination((double) integer0, double0, (double) int0, (double) integer0, (double) int0, double0, (double) integer0, (double) integer0);
      assertFalse(double0 == double1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(double1 == double0);
      assertEquals(8458384.0, double1, 0.01D);
  }

  @Test
  public void test31()  throws Throwable  {
      double double0 = (-3329.673408);
      double double1 = Double.NaN;
      double double2 = MathArrays.linearCombination(double0, double0, double1, double0, double0, double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = 543.1879;
      double double1 = MathArrays.linearCombination(double0, double0, double0, double0, double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(885159.28411923, double1, 0.01D);
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = (-8.0E298);
      double double1 = MathArrays.linearCombination(double0, double0, double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-1897.8334909918387);
      double double1 = MathArrays.linearCombination(double0, double0, doubleArray0[3], doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3601771.9595302697, double1, 0.01D);
  }

  @Test
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = Double.NaN;
      doubleArray0[1] = double0;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][2];
      try {
        double double0 = MathArrays.linearCombination(doubleArray1[0], doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 8
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[29];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][9];
      try {
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 29
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = null;
      double[][] doubleArray2 = new double[8][9];
      doubleArray2[0] = doubleArray1;
      assertNull(doubleArray2[0]);
      
      try {
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][7];
      try {
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-1897.8334909918387);
      doubleArray0[1] = double0;
      double double1 = (-6.032174644509064E-23);
      MathArrays.scaleInPlace(double1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, 1.144806306386109E-19, -0.0, -0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      
      doubleArray0[2] = double1;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {-0.0, 1.144806306386109E-19, (-6.032174644509064E-23), -0.0}, doubleArray0, 0.01);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.1448064653087504E-19, double2, 0.01D);
  }

  @Test
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-6.032174644509064E-23);
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-6.032174644509064E-23), (-6.032174644509064E-23)}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertEquals(8.530783192867822E-23, double1, 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = Double.NaN;
      doubleArray0[1] = double0;
      doubleArray0[4] = doubleArray0[1];
      double double1 = MathArrays.safeNorm(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-1897.8334909918387);
      doubleArray0[1] = double0;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1897.8334909918387), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertEquals(1897.8334909918387, double1, 0.01D);
  }

  @Test
  public void test46()  throws Throwable  {
      long[][] longArray0 = new long[10][2];
      long[] longArray1 = new long[9];
      long long0 = (-128L);
      longArray1[3] = long0;
      longArray0[8] = longArray1;
      assertNotNull(longArray0[8]);
      
      try {
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -128 is smaller than the minimum (0)
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      long[][] longArray0 = new long[2][7];
      MathArrays.checkNonNegative(longArray0);
  }

  @Test
  public void test48()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = (-1902L);
      longArray0[3] = long0;
      try {
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,902 is smaller than the minimum (0)
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      long[] longArray0 = new long[10];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      try {
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = Double.NaN;
      doubleArray0[1] = double0;
      doubleArray0[4] = doubleArray0[1];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = doubleArray0[4];
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test52()  throws Throwable  {
      long[][] longArray0 = new long[10][4];
      long[] longArray1 = new long[6];
      longArray0[3] = longArray1;
      assertNotNull(longArray0[3]);
      
      try {
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 4
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      long[][] longArray0 = new long[2][2];
      MathArrays.checkRectangular(longArray0);
  }

  @Test
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 6.2762111955810305;
      doubleArray0[2] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, boolean0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 6.2762111955810305}, doubleArray0, 0.01);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      double double0 = (-421.50418445750296);
      doubleArray0[1] = double0;
      try {
        boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, boolean0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-421.504 <= 0)
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, boolean0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      double double0 = (-84.4234756375429);
      doubleArray0[7] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      try {
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 6 and 7 are not increasing (0 > -84.423)
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double double0 = Double.NaN;
      doubleArray0[1] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      try {
        boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, boolean0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (\uFFFD >= 0)
         //
      }
  }

  @Test
  public void test59()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[19];
      int int0 = (-2056);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-2056), (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      int int1 = 40;
      Integer integer1 = new Integer(int1);
      assertNotSame(integer1, integer0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(int1 == int0);
      assertEquals(40, (int)integer1);
      
      integerArray0[2] = integer1;
      boolean boolean0 = false;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test60()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 202;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(202, (int)integer0);
      
      integerArray0[0] = integer0;
      int int1 = (-1617);
      Integer integer1 = new Integer(int1);
      assertNotSame(integer1, integer0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(int1 == int0);
      assertEquals((-1617), (int)integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test61()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      int int0 = 202;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(202, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test62()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int int0 = 25;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(25, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      int int1 = 1095;
      Integer integer1 = new Integer(int1);
      assertNotSame(integer1, integer0);
      assertFalse(int1 == int0);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1095, (int)integer1);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integerArray0[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test63()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = "INCREASING";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = "cannot compute nth root for null or negative n: {0}";
      assertNotSame(string1, string0);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test64()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = "INCREASING";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test65()  throws Throwable  {
      double double0 = (-3329.673408);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) double0;
      doubleArray0[1] = (Double) double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test67()  throws Throwable  {
      double[] doubleArray0 = new double[27];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test68()  throws Throwable  {
      int[] intArray0 = new int[10];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test69()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test70()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test72()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[16];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try {
        double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 16 != 10
         //
      }
  }

  @Test
  public void test73()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test
  public void test74()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try {
        double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 9
         //
      }
  }

  @Test
  public void test75()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test
  public void test76()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[25];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try {
        double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 25
         //
      }
  }

  @Test
  public void test77()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray1);
  }

  @Test
  public void test78()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[2];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try {
        double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
      }
  }

  @Test
  public void test79()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
  }

  @Test
  public void test80()  throws Throwable  {
      float[] floatArray0 = new float[9];
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.scale((double) floatArray0[4], doubleArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray1);
  }

  @Test
  public void test81()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test82()  throws Throwable  {
      int[] intArray0 = new int[10];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray1);
  }

  @Test
  public void test83()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test84()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test85()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
