/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:02:37 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class FDistributionImplEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 23.999156403;
      double double1 = (-1415.60602599);
      FDistributionImpl fDistributionImpl0 = null;
      try {
        fDistributionImpl0 = new FDistributionImpl(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 1559.91789323243;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(1559.91789323243, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(1559.91789323243, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = 0.0;
      // Undeclared exception!
      try {
        fDistributionImpl0.setNumeratorDegreesOfFreedom(double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 1559.91789323243;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(1559.91789323243, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(1559.91789323243, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = 1.0;
      fDistributionImpl0.setDenominatorDegreesOfFreedom(double1);
      assertEquals(1.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(1559.91789323243, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = fDistributionImpl0.getInitialDomain(double1);
      assertEquals(1.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(1559.91789323243, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 1.0;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(1.0, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = fDistributionImpl0.inverseCumulativeProbability(double0);
      assertEquals(1.0, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = Double.NaN;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(Double.NaN, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.NaN, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = 0.0;
      double double2 = fDistributionImpl0.inverseCumulativeProbability(double1);
      assertEquals(Double.NaN, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.NaN, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 604.801399143852;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(604.801399143852, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(604.801399143852, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = (-111.9921007);
      double double2 = fDistributionImpl0.cumulativeProbability(double1);
      assertEquals(604.801399143852, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(604.801399143852, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = Double.NaN;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      //  // Unstable assertion: assertNotNull(fDistributionImpl0);
      
      double double1 = fDistributionImpl0.cumulativeProbability(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = fDistributionImpl0.inverseCumulativeProbability(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double0);
      //  // Unstable assertion: assertTrue(double0 == double2);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }
}
