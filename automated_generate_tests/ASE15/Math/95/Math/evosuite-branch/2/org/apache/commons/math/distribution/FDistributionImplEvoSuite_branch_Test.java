/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:00:00 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.distribution.FDistributionImpl;




import org.junit.runner.RunWith;


public class FDistributionImplEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 1453.1;
      double double1 = (-59.227092865959);
      FDistributionImpl fDistributionImpl0 = null;
      try {
        fDistributionImpl0 = new FDistributionImpl(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = (-1482.9818945219);
      FDistributionImpl fDistributionImpl0 = null;
      try {
        fDistributionImpl0 = new FDistributionImpl(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 6048.1108;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(6048.1108, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(6048.1108, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = fDistributionImpl0.getInitialDomain(double0);
      assertEquals(6048.1108, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(6048.1108, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0003307911591697, double1, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 0.5;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(0.5, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.5, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = fDistributionImpl0.getDomainUpperBound(double0);
      assertEquals(0.5, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.5, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.7976931348623157E308, double1, 0.01D);
      
      double double2 = fDistributionImpl0.getInitialDomain(double1);
      assertEquals(0.5, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.5, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.0, double2, 0.01D);
      
      double double3 = fDistributionImpl0.inverseCumulativeProbability(double2);
      assertEquals(0.5, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.5, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 453.4296850023152;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(453.4296850023152, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(453.4296850023152, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = 0.0;
      double double2 = fDistributionImpl0.inverseCumulativeProbability(double1);
      assertEquals(453.4296850023152, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(453.4296850023152, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 0.5;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(0.5, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.5, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = fDistributionImpl0.getDomainUpperBound(double0);
      assertEquals(0.5, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.5, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.7976931348623157E308, double1, 0.01D);
      
      // Undeclared exception!
      try {
        double double2 = fDistributionImpl0.inverseCumulativeProbability(double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // p must be between 0.0 and 1.0, inclusive.
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 0.5;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(0.5, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.5, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = (-2032.94714922406);
      double double2 = fDistributionImpl0.cumulativeProbability(double1);
      assertEquals(0.5, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.5, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = 453.4296850023152;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(453.4296850023152, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(453.4296850023152, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = fDistributionImpl0.getDenominatorDegreesOfFreedom();
      assertEquals(453.4296850023152, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(453.4296850023152, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(453.4296850023152, double1, 0.01D);
      
      double double2 = fDistributionImpl0.getDomainLowerBound(double1);
      assertEquals(453.4296850023152, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(453.4296850023152, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      double double0 = 0.5;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(0.5, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.5, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = fDistributionImpl0.cumulativeProbability(double0);
      assertEquals(0.5, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.5, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.43455988484242636, double1, 0.01D);
  }
}
