/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:03:03 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.distribution.FDistributionImpl;




import org.junit.runner.RunWith;


public class FDistributionImplEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 0.5;
      double double1 = 0.0;
      FDistributionImpl fDistributionImpl0 = null;
      try {
        fDistributionImpl0 = new FDistributionImpl(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 2.0;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(2.0, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(2.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = 0.0;
      double double2 = fDistributionImpl0.getInitialDomain(double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(2.0, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(2.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0, double2, 0.01D);
      
      FDistributionImpl fDistributionImpl1 = null;
      try {
        fDistributionImpl1 = new FDistributionImpl(double1, double2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 2582.476254106604;
      double double1 = 1.7976931348623157E308;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double1, double1);
      assertFalse(double1 == double0);
      assertEquals(1.7976931348623157E308, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(1.7976931348623157E308, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double2 = fDistributionImpl0.getInitialDomain(double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.7976931348623157E308, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(1.7976931348623157E308, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0, double2, 0.01D);
      
      double double3 = fDistributionImpl0.inverseCumulativeProbability(double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertEquals(1.7976931348623157E308, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(1.7976931348623157E308, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 2.0;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(2.0, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(2.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = 0.0;
      double double2 = fDistributionImpl0.cumulativeProbability(double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(2.0, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(2.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = fDistributionImpl0.inverseCumulativeProbability(double2);
      assertTrue(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double1 == double2);
      assertTrue(double1 == double3);
      assertFalse(double1 == double0);
      assertEquals(2.0, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(2.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 0.5;
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(double0, double0);
      assertEquals(0.5, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.5, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistributionImpl0);
      
      double double1 = fDistributionImpl0.inverseCumulativeProbability(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.5, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.5, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0000001323506196, double1, 0.01D);
  }
}
