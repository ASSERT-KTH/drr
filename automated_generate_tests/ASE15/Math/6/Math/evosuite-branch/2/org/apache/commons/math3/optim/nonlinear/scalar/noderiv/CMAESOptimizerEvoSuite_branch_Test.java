/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:08:18 GMT 2014
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class CMAESOptimizerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 1327;
      boolean boolean0 = true;
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((double) int0, (double) int0, int0);
      assertEquals(1327.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(1327.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertNotNull(simpleValueChecker0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) mersenneTwister0, boolean0, (ConvergenceChecker<PointValuePair>) simpleValueChecker0);
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(1327.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(1327.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertNotNull(cMAESOptimizer0);
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[15];
      double[] doubleArray0 = new double[8];
      doubleArray0[7] = (double) int0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      assertNotNull(initialGuess0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1327.0}, doubleArray0, 0.01);
      
      optimizationDataArray0[3] = (OptimizationData) initialGuess0;
      assertNotNull(optimizationDataArray0[3]);
      
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      assertNotNull(cMAESOptimizer_Sigma0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1327.0}, doubleArray0, 0.01);
      
      optimizationDataArray0[5] = (OptimizationData) cMAESOptimizer_Sigma0;
      assertNotNull(optimizationDataArray0[5]);
      
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      assertNotNull(simpleBounds0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1327.0}, doubleArray0, 0.01);
      
      optimizationDataArray0[8] = (OptimizationData) simpleBounds0;
      assertNotNull(optimizationDataArray0[8]);
      
      // Undeclared exception!
      try {
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,327 out of [0, 0] range
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 1264;
      boolean boolean0 = false;
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((double) int0, (double) int0, int0);
      assertEquals(1264.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1264.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertNotNull(simpleValueChecker0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) mersenneTwister0, boolean0, (ConvergenceChecker<PointValuePair>) simpleValueChecker0);
      assertEquals(1264.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1264.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertNotNull(cMAESOptimizer0);
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[36];
      double[] doubleArray0 = new double[4];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      assertNotNull(initialGuess0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      assertNotNull(optimizationDataArray0[0]);
      
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      assertNotNull(cMAESOptimizer_Sigma0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      optimizationDataArray0[27] = (OptimizationData) cMAESOptimizer_Sigma0;
      assertNotNull(optimizationDataArray0[27]);
      
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      assertNotNull(simpleBounds0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      optimizationDataArray0[30] = (OptimizationData) simpleBounds0;
      assertNotNull(optimizationDataArray0[30]);
      
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      assertEquals(1264.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(1264.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getIterations());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 769;
      boolean boolean0 = false;
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((double) int0, (double) int0, int0);
      assertEquals(769.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(769.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertNotNull(simpleValueChecker0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) well512a0, boolean0, (ConvergenceChecker<PointValuePair>) simpleValueChecker0);
      assertEquals(769.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(769.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[25];
      double[] doubleArray0 = new double[3];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      assertNotNull(initialGuess0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      optimizationDataArray0[12] = (OptimizationData) initialGuess0;
      assertNotNull(optimizationDataArray0[12]);
      
      double[] doubleArray1 = new double[8];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(cMAESOptimizer_Sigma0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      optimizationDataArray0[4] = (OptimizationData) cMAESOptimizer_Sigma0;
      assertNotNull(optimizationDataArray0[4]);
      
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 3
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-2672);
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,672 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-35.69015133661);
      doubleArray0[3] = double0;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = null;
      try {
        cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -35.69 is smaller than the minimum (0)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 8;
      boolean boolean0 = false;
      Well44497b well44497b0 = new Well44497b(int0);
      assertNotNull(well44497b0);
      
      ConvergenceChecker<PointValuePair> convergenceChecker0 = null;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) well44497b0, boolean0, convergenceChecker0);
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertNotNull(cMAESOptimizer0);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 279;
      boolean boolean0 = false;
      int[] intArray0 = new int[3];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      assertNotNull(iSAACRandom0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) iSAACRandom0);
      assertNotNull(randomAdaptor0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((double) intArray0[0], (double) intArray0[0]);
      assertEquals(0.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertNotNull(simpleValueChecker0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) randomAdaptor0, boolean0, (ConvergenceChecker<PointValuePair>) simpleValueChecker0);
      assertEquals(0.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(cMAESOptimizer0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertEquals(0.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 279;
      boolean boolean0 = false;
      int[] intArray0 = new int[3];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      assertNotNull(iSAACRandom0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) iSAACRandom0);
      assertNotNull(randomAdaptor0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((double) intArray0[0], (double) intArray0[0]);
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertNotNull(simpleValueChecker0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) randomAdaptor0, boolean0, (ConvergenceChecker<PointValuePair>) simpleValueChecker0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertNotNull(cMAESOptimizer0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertNotNull(list0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 8;
      boolean boolean0 = false;
      Well44497b well44497b0 = new Well44497b(int0);
      assertNotNull(well44497b0);
      
      ConvergenceChecker<PointValuePair> convergenceChecker0 = null;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) well44497b0, boolean0, convergenceChecker0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertNotNull(cMAESOptimizer0);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertNotNull(list0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = 769;
      boolean boolean0 = false;
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((double) int0, (double) int0, int0);
      assertEquals(769.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(769.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertNotNull(simpleValueChecker0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, (double) int0, boolean0, int0, int0, (RandomGenerator) well512a0, boolean0, (ConvergenceChecker<PointValuePair>) simpleValueChecker0);
      assertEquals(769.0, simpleValueChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(769.0, simpleValueChecker0.getRelativeThreshold(), 0.01D);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(2147483647, cMAESOptimizer0.getMaxIterations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getIterations());
      assertNotNull(cMAESOptimizer0);
      
      OptimizationData[] optimizationDataArray0 = new OptimizationData[25];
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(int0);
      assertNotNull(cMAESOptimizer_PopulationSize0);
      
      optimizationDataArray0[22] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      assertNotNull(optimizationDataArray0[22]);
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
