/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:18:58 GMT 2014
 */

package org.apache.commons.math3.random;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BitsStreamGeneratorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 95;
      intArray0[0] = int0;
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertArrayEquals(new int[] {95}, intArray0);
      assertNotNull(well44497b0);
      
      int int1 = well44497b0.nextInt();
      assertArrayEquals(new int[] {95}, intArray0);
      assertEquals(538907249, int1);
      assertFalse(int1 == int0);
      
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertArrayEquals(new int[] {95}, intArray0);
      assertNotNull(well19937c0);
      
      int int2 = well19937c0.nextInt(int1);
      assertArrayEquals(new int[] {95}, intArray0);
      assertEquals(495626177, int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test
  public void test1()  throws Throwable  {
      long long0 = 113236205062349925L;
      Well19937a well19937a0 = new Well19937a(long0);
      assertNotNull(well19937a0);
      
      int int0 = 32;
      int int1 = well19937a0.nextInt(int0);
      assertEquals(22, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte byte0 = (byte) (-7);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      try {
        int int0 = mersenneTwister0.nextInt((int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -7 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int[] intArray0 = new int[9];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0[1]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(mersenneTwister0);
      
      double double0 = mersenneTwister0.nextGaussian();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-0.7805794640849414), double0, 0.01D);
      
      double double1 = mersenneTwister0.nextGaussian();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-0.24720750404342587), double1, 0.01D);
      assertFalse(double1 == double0);
  }

  @Test
  public void test4()  throws Throwable  {
      long long0 = 0L;
      ISAACRandom iSAACRandom0 = new ISAACRandom(long0);
      assertNotNull(iSAACRandom0);
      
      boolean boolean0 = iSAACRandom0.nextBoolean();
      assertTrue(boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1090;
      Well19937a well19937a0 = new Well19937a(int0);
      assertNotNull(well19937a0);
      
      byte[] byteArray0 = new byte[7];
      well19937a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)112, (byte)108, (byte) (-51), (byte) (-101), (byte) (-105), (byte) (-75), (byte) (-127)}, byteArray0);
      
      boolean boolean0 = well19937a0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1090;
      Well19937a well19937a0 = new Well19937a(int0);
      assertNotNull(well19937a0);
      
      long long0 = well19937a0.nextLong();
      assertEquals((-7219995397358242409L), long0);
  }

  @Test
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(well44497a0);
      
      float float0 = well44497a0.nextFloat();
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.8937937F, float0, 0.01F);
  }
}
