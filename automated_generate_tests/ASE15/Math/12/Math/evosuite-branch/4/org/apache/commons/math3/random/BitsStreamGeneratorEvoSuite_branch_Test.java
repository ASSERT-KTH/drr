/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:16:45 GMT 2014
 */

package org.apache.commons.math3.random;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BitsStreamGeneratorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 24;
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      int int1 = well1024a0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(1307152932, int1);
      
      int[] intArray0 = new int[8];
      intArray0[1] = int1;
      intArray0[5] = int0;
      intArray0[6] = int1;
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertNotNull(well44497a0);
      assertArrayEquals(new int[] {0, 1307152932, 0, 0, 0, 24, 1307152932, 0}, intArray0);
      
      int int2 = well44497a0.nextInt(intArray0[1]);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(151717598, int2);
      assertArrayEquals(new int[] {0, 1307152932, 0, 0, 0, 24, 1307152932, 0}, intArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      long long0 = well1024a0.nextLong();
      assertEquals(5614179097095692510L, long0);
      
      int int0 = 16;
      Well19937c well19937c0 = new Well19937c(long0);
      assertNotNull(well19937c0);
      
      int int1 = well19937c0.nextInt(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(4, int1);
  }

  @Test
  public void test2()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      int int0 = (-4781);
      try {
        int int1 = iSAACRandom0.nextInt(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,781 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      double double0 = mersenneTwister0.nextGaussian();
      assertEquals((-0.05019949134629049), double0, 0.01D);
      
      double double1 = mersenneTwister0.nextGaussian();
      assertFalse(double1 == double0);
      assertEquals(0.5100163916463146, double1, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      byte[] byteArray0 = new byte[10];
      well1024a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-110), (byte) (-23), (byte)77, (byte) (-34), (byte) (-32), (byte) (-49), (byte) (-61), (byte) (-96), (byte) (-46)}, byteArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      boolean boolean0 = iSAACRandom0.nextBoolean();
      assertTrue(boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      Well19937a well19937a0 = new Well19937a(int0);
      assertNotNull(well19937a0);
      
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      boolean boolean0 = well44497a0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      assertNotNull(well19937c0);
      
      float float0 = well19937c0.nextFloat();
      assertEquals(0.90262973F, float0, 0.01F);
  }
}
