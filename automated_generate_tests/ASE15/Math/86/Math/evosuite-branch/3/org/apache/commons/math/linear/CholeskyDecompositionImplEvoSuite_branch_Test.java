/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:37:10 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.linear.CholeskyDecompositionImpl;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.DenseRealMatrix;
import org.apache.commons.math.linear.NonSquareMatrixException;
import org.apache.commons.math.linear.NotPositiveDefiniteMatrixException;
import org.apache.commons.math.linear.NotSymmetricMatrixException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.RealVector;



import org.junit.runner.RunWith;


public class CholeskyDecompositionImplEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = (-1163.6748110398603);
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      
      int int0 = 7;
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.createMatrix(int0, int0);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl1.getColumnDimension());
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) realMatrixImpl1, double0, double0);
      assertNotNull(choleskyDecompositionImpl0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(7, realMatrixImpl1.getColumnDimension());
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      
      double double1 = choleskyDecompositionImpl0.getDeterminant();
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(7, realMatrixImpl1.getColumnDimension());
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = (-1163.6748110398603);
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      
      int int0 = 7;
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.createMatrix(int0, int0);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertEquals(7, realMatrixImpl1.getColumnDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) realMatrixImpl1, double0, double0);
      assertNotNull(choleskyDecompositionImpl0);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(7, realMatrixImpl1.getColumnDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      
      DenseRealMatrix denseRealMatrix0 = (DenseRealMatrix)choleskyDecompositionImpl0.getL();
      assertNotNull(denseRealMatrix0);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(7, denseRealMatrix0.getColumnDimension());
      assertEquals(7, denseRealMatrix0.getRowDimension());
      assertEquals(Double.NaN, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(7, realMatrixImpl1.getColumnDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      
      DenseRealMatrix denseRealMatrix1 = (DenseRealMatrix)choleskyDecompositionImpl0.getLT();
      assertNotNull(denseRealMatrix1);
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(denseRealMatrix1.equals((Object)denseRealMatrix0));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(denseRealMatrix1, denseRealMatrix0);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(7, realMatrixImpl1.getColumnDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(7, denseRealMatrix1.getColumnDimension());
      assertEquals(7, denseRealMatrix1.getRowDimension());
      assertEquals(Double.NaN, denseRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix1.isSquare());
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = (-1163.6748110398603);
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      
      int int0 = 7;
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.createMatrix(int0, int0);
      assertNotNull(realMatrixImpl1);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl1.getColumnDimension());
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) realMatrixImpl1, double0, double0);
      assertNotNull(choleskyDecompositionImpl0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl1.getColumnDimension());
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      
      DenseRealMatrix denseRealMatrix0 = (DenseRealMatrix)choleskyDecompositionImpl0.getL();
      assertNotNull(denseRealMatrix0);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl1.getColumnDimension());
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(Double.NaN, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(7, denseRealMatrix0.getRowDimension());
      assertEquals(7, denseRealMatrix0.getColumnDimension());
      
      DenseRealMatrix denseRealMatrix1 = (DenseRealMatrix)choleskyDecompositionImpl0.getL();
      assertNotNull(denseRealMatrix1);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertSame(denseRealMatrix1, denseRealMatrix0);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(7, realMatrixImpl1.getColumnDimension());
      assertEquals(7, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(7, denseRealMatrix1.getColumnDimension());
      assertEquals(Double.NaN, denseRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(7, denseRealMatrix1.getRowDimension());
      assertEquals(true, denseRealMatrix1.isSquare());
  }

  @Test
  public void test3()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      double double0 = (-1147.9247847928866);
      Double double1 = new Double(double0);
      assertEquals((-1147.9247847928866), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[1];
      double double2 = (-1623.40925507105);
      Double double3 = new Double(double2);
      assertEquals((-1623.40925507105), (double)double3, 0.01D);
      assertFalse(double3.equals((Object)double0));
      assertFalse(double3.equals((Object)double1));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double2 == double0);
      assertNotSame(double3, double1);
      
      doubleArray0[4] = double3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals((-1147.9247847928866), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapRint();
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals((-1147.9247847928866), openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals((-1147.9247847928866), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector1.outerProduct((RealVector) openMapRealVector0);
      assertNotNull(openMapRealMatrix0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals((-1147.9247847928866), openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(5, openMapRealMatrix0.getRowDimension());
      assertEquals(5, openMapRealMatrix0.getColumnDimension());
      assertEquals((-1147.9247847928866), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) openMapRealMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // not symmetric matrix
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      double double0 = (-1147.9247847928866);
      Double double1 = new Double(double0);
      assertEquals((-1147.9247847928866), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[1];
      doubleArray0[4] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals((-1147.9247847928866), openMapRealVector0.getEpsilon(), 0.01D);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals((-1147.9247847928866), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(5, openMapRealMatrix0.getRowDimension());
      assertEquals(5, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) openMapRealMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // not positive definite matrix
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(6, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 6x1 matrix was provided instead of a square matrix
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(0, realMatrixImpl0.getRowDimension());
      
      int int0 = 7;
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) realMatrixImpl0, (double) int0, (double) int0);
      assertNotNull(choleskyDecompositionImpl0);
      assertEquals(1.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(0, realMatrixImpl0.getRowDimension());
      
      DecompositionSolver decompositionSolver0 = choleskyDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(true, decompositionSolver0.isNonSingular());
      assertEquals(1.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(0, realMatrixImpl0.getRowDimension());
  }
}
