/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:56:31 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.MaxIterationsExceededException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.BisectionSolver;



import org.junit.runner.RunWith;


public class BisectionSolverEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1.0E-14;
      doubleArray0[0] = double0;
      double double1 = 3845.07627;
      doubleArray0[6] = double1;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(6, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {1.0E-14, 0.0, 0.0, 0.0, 0.0, 0.0, 3845.07627, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      BisectionSolver bisectionSolver0 = new BisectionSolver((UnivariateRealFunction) polynomialFunction0);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, bisectionSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, bisectionSolver0.getIterationCount());
      assertEquals(6, polynomialFunction0.degree());
      assertNotNull(bisectionSolver0);
      assertArrayEquals(new double[] {1.0E-14, 0.0, 0.0, 0.0, 0.0, 0.0, 3845.07627, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = bisectionSolver0.solve(doubleArray0[0], doubleArray0[6], doubleArray0[7]);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(31, bisectionSolver0.getIterationCount());
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, bisectionSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(6, polynomialFunction0.degree());
      assertEquals(3845.0762695523745, double2, 0.01D);
      assertArrayEquals(new double[] {1.0E-14, 0.0, 0.0, 0.0, 0.0, 0.0, 3845.07627, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test1()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      assertEquals(100, bisectionSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bisectionSolver0.getIterationCount());
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(bisectionSolver0);
      
      int int0 = 0;
      double[] doubleArray0 = new double[5];
      bisectionSolver0.setAbsoluteAccuracy((double) int0);
      assertEquals(100, bisectionSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bisectionSolver0.getIterationCount());
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bisectionSolver0.getAbsoluteAccuracy(), 0.01D);
      
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(0, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = 2150.8;
      try {
        double double1 = bisectionSolver0.solve((UnivariateRealFunction) polynomialFunction0, doubleArray0[2], double0, doubleArray0[0]);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Maximal number of iterations (100) exceeded
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      assertEquals(0, bisectionSolver0.getIterationCount());
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(100, bisectionSolver0.getMaximalIterationCount());
      assertNotNull(bisectionSolver0);
      
      double double0 = (-1394.8);
      // Undeclared exception!
      try {
        double double1 = bisectionSolver0.solve(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-1,394.8, -1,394.8]
         //
      }
  }
}
