/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:50:26 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.util.MathUtils;



import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.junit.runner.RunWith;


public class MathUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = 0L;
      // Undeclared exception!
      try {
        long long2 = MathUtils.subAndCheck(long1, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
      }
  }

  @Test
  public void test001()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = MathUtils.subAndCheck(long0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test002()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.subAndCheck(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test003()  throws Throwable  {
      short short0 = (short) (-1);
      short short1 = MathUtils.sign(short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short) (-1), short1);
  }

  @Test
  public void test004()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign(short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
  }

  @Test
  public void test005()  throws Throwable  {
      int int0 = (-1021);
      int int1 = MathUtils.sign(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      long long0 = MathUtils.sign((long) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1L), long0);
  }

  @Test
  public void test006()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.sign(long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test007()  throws Throwable  {
      double double0 = 962.388379921219;
      int int0 = MathUtils.hash(double0);
      assertEquals(643871587, int0);
      
      long long0 = MathUtils.sign((long) int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test008()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short)1, short1);
      
      int int0 = MathUtils.sign((int) short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals(1, int0);
  }

  @Test
  public void test009()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test010()  throws Throwable  {
      int int0 = (-2718);
      float float0 = MathUtils.sign((float) int0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test011()  throws Throwable  {
      float float0 = 1133.1714F;
      float float1 = MathUtils.sign(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test
  public void test012()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test013()  throws Throwable  {
      double double0 = (-15.395561136611239);
      double double1 = MathUtils.sign(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test014()  throws Throwable  {
      long long0 = 1290L;
      double double0 = MathUtils.sign((double) long0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test015()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = MathUtils.normalizeAngle(double0, double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = MathUtils.sign(double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test016()  throws Throwable  {
      byte byte0 = (byte) (-82);
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
  }

  @Test
  public void test017()  throws Throwable  {
      int int0 = (-43);
      int int1 = 7;
      // Undeclared exception!
      try {
        float float0 = MathUtils.round((float) int0, int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Inexact result from rounding
         //
      }
  }

  @Test
  public void test018()  throws Throwable  {
      short short0 = (short) (-363);
      int int0 = 1036;
      int int1 = 6;
      float float0 = MathUtils.round((float) short0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test019()  throws Throwable  {
      int int0 = (-980);
      int int1 = 5;
      float float0 = MathUtils.round((float) int0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test020()  throws Throwable  {
      short short0 = (short)503;
      short short1 = MathUtils.sign(short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((short)1, short1);
      
      double double0 = (-241.44801951111);
      int int0 = MathUtils.hash(double0);
      assertEquals((-311579735), int0);
      
      int int1 = 3;
      assertFalse(int1 == int0);
      
      float float0 = MathUtils.round((float) int0, (int) short1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals((-3.11579744E8F), float0, 0.01F);
  }

  @Test
  public void test021()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      float float0 = MathUtils.round((float) int0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test022()  throws Throwable  {
      int int0 = 1250;
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2500, int1);
      
      int int2 = 7;
      assertFalse(int2 == int1);
      
      float float0 = MathUtils.round((float) int1, int0, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test023()  throws Throwable  {
      short short0 = (short) (-363);
      int int0 = 6;
      float float0 = MathUtils.round((float) short0, (int) short0, int0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = (-980);
      int int1 = MathUtils.sign(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = 5;
      assertFalse(int2 == int1);
      
      float float0 = MathUtils.round((float) int1, int1, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = 19;
      int int1 = 3;
      float float0 = MathUtils.round((float) int0, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(19.0F, float0, 0.01F);
  }

  @Test
  public void test026()  throws Throwable  {
      float float0 = (-1772.641F);
      int int0 = 0;
      int int1 = 2;
      float float1 = MathUtils.round(float0, int0, int1);
      assertFalse(float1 == float0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
      assertEquals((-1772.0F), float1, 0.01F);
  }

  @Test
  public void test027()  throws Throwable  {
      byte byte0 = (byte)75;
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte)1, byte1);
      
      float float0 = MathUtils.round((float) byte1, (int) byte0, (int) byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test028()  throws Throwable  {
      float float0 = 852.7F;
      int int0 = 0;
      float float1 = MathUtils.round(float0, int0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(853.0F, float1, 0.01F);
  }

  @Test
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NaN;
      doubleArray0[1] = double0;
      int int0 = (-2718);
      double double1 = MathUtils.round(doubleArray0[1], int0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test030()  throws Throwable  {
      double double0 = (-1.0);
      int int0 = MathUtils.hash(double0);
      assertEquals((-1074790400), int0);
      
      double double1 = MathUtils.scalb((double) int0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0747904E9), double1, 0.01D);
  }

  @Test
  public void test031()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 1623;
      double double0 = MathUtils.scalb((double) float0, int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      int int0 = (-14);
      double double1 = MathUtils.scalb(double0, int0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test033()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.sign(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      int int0 = 3229;
      double double2 = MathUtils.scalb(double1, int0);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte)75;
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((byte)1, byte1);
      
      long long0 = MathUtils.subAndCheck((long) byte1, (long) byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals(0L, long0);
      
      double double0 = MathUtils.nextAfter((double) byte1, (double) long0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals(0.9999999999999999, double0, 0.01D);
  }

  @Test
  public void test035()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.sign((float) int0);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = (-1744.241);
      double double1 = MathUtils.nextAfter((double) float0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-4.9E-324), double1, 0.01D);
  }

  @Test
  public void test036()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = double0;
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals((-1007651745), int0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      
      float float0 = MathUtils.round((float) int0, int0);
      assertEquals(Float.NaN, float0, 0.01F);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test037()  throws Throwable  {
      short short0 = (short)0;
      int int0 = 1034;
      float float0 = MathUtils.round((float) short0, int0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = (-2432);
      int int1 = MathUtils.lcm(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(2432, int1);
      
      int int2 = 1159;
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int1, int2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test039()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(0L, long1);
  }

  @Test
  public void test040()  throws Throwable  {
      long long0 = 4503599627370496L;
      long long1 = (-4784L);
      // Undeclared exception!
      try {
        long long2 = MathUtils.mulAndCheck(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      int int0 = 2648;
      long long0 = (-4784L);
      long long1 = MathUtils.mulAndCheck((long) int0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-12668032L), long1);
  }

  @Test
  public void test042()  throws Throwable  {
      long long0 = (-405L);
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(164025L, long1);
  }

  @Test
  public void test043()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.mulAndCheck(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      byte byte0 = (byte)0;
      long long0 = (-4784L);
      long long1 = MathUtils.mulAndCheck((long) byte0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(0L, long1);
  }

  @Test
  public void test045()  throws Throwable  {
      int int0 = (-980);
      int int1 = MathUtils.mulAndCheck(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(960400, int1);
      
      // Undeclared exception!
      try {
        int int2 = MathUtils.mulAndCheck(int1, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      double double0 = 962.388379921219;
      int int0 = MathUtils.hash(double0);
      assertEquals(643871587, int0);
      
      int int1 = (-1021);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        int int2 = MathUtils.lcm(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      byte byte0 = (byte) (-53);
      short short0 = MathUtils.indicator((short) byte0);
      assertEquals((short) (-1), short0);
  }

  @Test
  public void test048()  throws Throwable  {
      int int0 = 1;
      long long0 = MathUtils.indicator((long) int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test049()  throws Throwable  {
      double double0 = (-1100.93096);
      int int0 = MathUtils.hash(double0);
      assertEquals((-1929038800), int0);
      
      long long0 = MathUtils.indicator((long) int0);
      assertEquals((-1L), long0);
  }

  @Test
  public void test050()  throws Throwable  {
      int int0 = (-980);
      int int1 = MathUtils.sign(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = MathUtils.indicator(int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals((-1), int2);
  }

  @Test
  public void test051()  throws Throwable  {
      short short0 = (short) (-363);
      // Undeclared exception!
      try {
        float float0 = MathUtils.round((float) short0, (int) short0, (int) short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.indicator(float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      double double0 = (-2608.125287149);
      double double1 = MathUtils.indicator(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test054()  throws Throwable  {
      int int0 = 1998;
      int int1 = (-423);
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = MathUtils.indicator(double0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test055()  throws Throwable  {
      int int0 = 4;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(24.0, double0, 0.01D);
      
      double double1 = MathUtils.indicator(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test056()  throws Throwable  {
      byte byte0 = (byte)20;
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte)1, byte1);
  }

  @Test
  public void test057()  throws Throwable  {
      byte byte0 = (byte) (-106);
      byte byte1 = MathUtils.indicator(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-1), byte1);
  }

  @Test
  public void test058()  throws Throwable  {
      int int0 = 4;
      int int1 = 0;
      int int2 = MathUtils.lcm(int0, int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0, int2);
  }

  @Test
  public void test059()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.gcd(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test060()  throws Throwable  {
      int int0 = (-2659);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialLog(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      int int0 = (-1876);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialDouble(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
      }
  }

  @Test
  public void test062()  throws Throwable  {
      int int0 = 1250;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      int int0 = 181;
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
      }
  }

  @Test
  public void test064()  throws Throwable  {
      int int0 = (-1182);
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
      }
  }

  @Test
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NaN;
      doubleArray0[1] = double0;
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test
  public void test069()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = MathUtils.normalizeAngle(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = double1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
  }

  @Test
  public void test070()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test071()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      
      int int2 = 2154;
      assertFalse(int2 == int1);
      
      double double0 = MathUtils.binomialCoefficientLog(int2, int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(7.675081857716334, double0, 0.01D);
  }

  @Test
  public void test072()  throws Throwable  {
      int int0 = 742;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test073()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientLog(int0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test074()  throws Throwable  {
      byte byte0 = (byte) (-106);
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientLog((int) byte0, (int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      int int0 = (-2926);
      int int1 = 9;
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientLog(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      int int0 = 818;
      int int1 = 643;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(421.2633115893677, double0, 0.01D);
  }

  @Test
  public void test077()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test078()  throws Throwable  {
      int int0 = 1;
      long long0 = (-1887L);
      long long1 = MathUtils.subAndCheck(long0, (long) int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-1888L), long1);
      
      int int1 = MathUtils.hash((double) long1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-1063419904), int1);
      
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      int int0 = 1;
      int int1 = 1998;
      double double0 = MathUtils.binomialCoefficientDouble(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1998.0, double0, 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = 2648;
      double double0 = MathUtils.binomialCoefficientDouble(int0, (int) byte0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = double0;
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals((-1007651745), int0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        double double1 = MathUtils.binomialCoefficientDouble(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = 154;
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble((int) byte0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      byte byte0 = (byte)0;
      double double0 = MathUtils.binomialCoefficientDouble((int) byte0, (int) byte0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      int int0 = (-980);
      int int1 = 5;
      int int2 = MathUtils.lcm(int0, int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(980, int2);
      
      long long0 = MathUtils.binomialCoefficient(int2, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7456083407696L, long0);
  }

  @Test
  public void test085()  throws Throwable  {
      int int0 = 66;
      int int1 = 15;
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(268367258592576L, long0);
  }

  @Test
  public void test086()  throws Throwable  {
      int int0 = 19;
      int int1 = 11;
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(75582L, long0);
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = 4;
      int int1 = 3;
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(4L, long0);
  }

  @Test
  public void test088()  throws Throwable  {
      byte byte0 = (byte)75;
      byte byte1 = MathUtils.sign(byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((byte)1, byte1);
      
      long long0 = MathUtils.binomialCoefficient((int) byte0, (int) byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals(75L, long0);
  }

  @Test
  public void test089()  throws Throwable  {
      int int0 = 0;
      int int1 = 6254;
      long long0 = MathUtils.binomialCoefficient(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test090()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.binomialCoefficient(int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test091()  throws Throwable  {
      int int0 = (-1306);
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      int int0 = 5;
      int int1 = 1987;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test093()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
      
      int int0 = (-700);
      double double0 = MathUtils.binomialCoefficientLog((int) byte1, int0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test094()  throws Throwable  {
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try {
        long long1 = MathUtils.addAndCheck(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
      }
  }

  @Test
  public void test095()  throws Throwable  {
      int int0 = (-1268);
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.addAndCheck((long) int0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
      }
  }

  @Test
  public void test096()  throws Throwable  {
      int int0 = 1250;
      long long0 = MathUtils.addAndCheck((long) int0, (long) int0);
      assertEquals(2500L, long0);
  }

  @Test
  public void test097()  throws Throwable  {
      int int0 = 3229;
      int int1 = MathUtils.hash((double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1084832256, int1);
      
      // Undeclared exception!
      try {
        int int2 = MathUtils.addAndCheck(int1, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
      }
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = (-1100.93096);
      int int0 = MathUtils.hash(double0);
      assertEquals((-1929038800), int0);
      
      // Undeclared exception!
      try {
        int int1 = MathUtils.addAndCheck(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
      }
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      int int0 = (-14);
      double double1 = MathUtils.round(double0, int0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      byte byte0 = (byte)0;
      double double0 = MathUtils.cosh((double) byte0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      int int0 = 1;
      double double0 = MathUtils.factorialLog(int0);
      assertEquals(0.0, double0, 0.01D);
      
      long long0 = MathUtils.subAndCheck((long) int0, (long) int0);
      assertEquals(0L, long0);
      
      double double1 = MathUtils.log((double) long0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test102()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.mulAndCheck(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = MathUtils.sinh((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }
}
