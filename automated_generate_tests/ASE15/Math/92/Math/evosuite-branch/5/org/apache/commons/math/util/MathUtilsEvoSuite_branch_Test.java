/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:01:02 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class MathUtilsEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      long long0 = 1774L;
      long long1 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long2 = MathUtils.subAndCheck(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
      }
  }

  @Test
  public void test001()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = MathUtils.subAndCheck(long0, long0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test002()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = MathUtils.subAndCheck(int1, int1);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test003()  throws Throwable  {
      short short0 = (short) (-493);
      short short1 = MathUtils.sign(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test004()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)0, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test005()  throws Throwable  {
      int int0 = 7;
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(7, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      long long0 = MathUtils.sign((long) int1);
      assertEquals(1L, long0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test006()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.sign(long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test007()  throws Throwable  {
      long long0 = (-584L);
      long long1 = MathUtils.addAndCheck(long0, long0);
      assertEquals((-1168L), long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      long long2 = MathUtils.sign(long1);
      assertEquals((-1L), long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test
  public void test008()  throws Throwable  {
      int int0 = 7200;
      int int1 = MathUtils.sign(int0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test009()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.sign(int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test010()  throws Throwable  {
      int int0 = 2;
      float float0 = MathUtils.sign((float) int0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test011()  throws Throwable  {
      int int0 = (-1064);
      float float0 = MathUtils.sign((float) int0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test012()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test
  public void test013()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = MathUtils.sign(float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test014()  throws Throwable  {
      short short0 = (short)21;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)1, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      
      double double0 = MathUtils.sign((double) short1);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test015()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.sign((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test016()  throws Throwable  {
      float float0 = Float.NaN;
      double double0 = MathUtils.sign((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test017()  throws Throwable  {
      long long0 = (-584L);
      double double0 = MathUtils.sign((double) long0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test018()  throws Throwable  {
      byte byte0 = (byte) (-110);
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test019()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
  }

  @Test
  public void test020()  throws Throwable  {
      float float0 = 89.0F;
      int int0 = 6;
      float float1 = MathUtils.round(float0, int0, int0);
      assertEquals(89.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test021()  throws Throwable  {
      int int0 = 5;
      float float0 = 0.3971027F;
      float float1 = MathUtils.round(float0, int0, int0);
      assertEquals(0.3971F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test022()  throws Throwable  {
      int int0 = (-10);
      int int1 = MathUtils.indicator(int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      short short0 = (short)3;
      float float0 = MathUtils.round((float) int1, int1, (int) short0);
      assertEquals((-10.0F), float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test023()  throws Throwable  {
      int int0 = 2;
      float float0 = (-1.0F);
      float float1 = MathUtils.round(float0, int0, int0);
      assertEquals((-0.99F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test024()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 7;
      float float1 = MathUtils.round(float0, int0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test025()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 7200;
      int int1 = 6;
      float float1 = MathUtils.round(float0, int0, int1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test026()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 0;
      float float1 = MathUtils.round(float0, int0, int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.log((double) int0, (double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = MathUtils.round(double0, int0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test028()  throws Throwable  {
      int int0 = (-1736);
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = (-1064);
      int int1 = MathUtils.sign(int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = MathUtils.scalb((double) int1, int0);
      assertEquals((-1.6349923815708425E296), double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test030()  throws Throwable  {
      double double0 = Double.NaN;
      int int0 = 0;
      double double1 = MathUtils.scalb(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test
  public void test031()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = MathUtils.scalb((double) int1, int0);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test032()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      short short0 = (short)3;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)1, short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      float float0 = MathUtils.round((float) short1, int1, (int) short0);
      assertEquals(0.9F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(short1 == short0);
      assertFalse(int0 == int1);
      assertFalse(short0 == short1);
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      double double0 = MathUtils.nextAfter((double) int1, (double) int0);
      assertEquals((-0.9999999999999999), double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test034()  throws Throwable  {
      long long0 = 2154L;
      int int0 = (-3948);
      int int1 = 1;
      float float0 = MathUtils.round((float) long0, int0, int1);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test035()  throws Throwable  {
      float float0 = 0.0F;
      short short0 = (short)2;
      float float1 = MathUtils.round(float0, (int) short0, (int) short0);
      assertEquals(0.01F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test036()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 5;
      float float1 = MathUtils.round(float0, int0, int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test037()  throws Throwable  {
      short short0 = (short)1196;
      int int0 = 0;
      long long0 = MathUtils.mulAndCheck((long) short0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test038()  throws Throwable  {
      long long0 = 2154L;
      long long1 = (-780L);
      long long2 = MathUtils.mulAndCheck(long0, long1);
      assertEquals((-1680120L), long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
  }

  @Test
  public void test039()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-1L);
      long long2 = MathUtils.mulAndCheck(long0, long1);
      assertEquals(0L, long2);
      assertTrue(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
  }

  @Test
  public void test040()  throws Throwable  {
      long long0 = (-772L);
      long long1 = (-9218868437227405313L);
      // Undeclared exception!
      try {
        long long2 = MathUtils.mulAndCheck(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      long long0 = (-2707L);
      long long1 = 121645100408832000L;
      // Undeclared exception!
      try {
        long long2 = MathUtils.mulAndCheck(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test042()  throws Throwable  {
      long long0 = (-2707L);
      long long1 = MathUtils.mulAndCheck(long0, long0);
      assertEquals(7327849L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals((-844471871), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        int int1 = MathUtils.mulAndCheck(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      int int0 = (-5247);
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertEquals((-10494), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[7];
      int int2 = MathUtils.hash(doubleArray0);
      assertEquals(1742810335, int2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try {
        int int3 = MathUtils.mulAndCheck(int2, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test045()  throws Throwable  {
      short short0 = (short)2;
      short short1 = MathUtils.indicator(short0);
      assertEquals((short)1, short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test046()  throws Throwable  {
      short short0 = (short) (-2140);
      short short1 = MathUtils.indicator(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test047()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.indicator((long) int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test048()  throws Throwable  {
      int int0 = (-333);
      long long0 = MathUtils.indicator((long) int0);
      assertEquals((-1L), long0);
  }

  @Test
  public void test049()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 7200;
      // Undeclared exception!
      try {
        float float1 = MathUtils.round(float0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      double double0 = (-1571.121292724);
      double double1 = MathUtils.indicator(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test051()  throws Throwable  {
      float float0 = Float.NaN;
      double double0 = MathUtils.indicator((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test052()  throws Throwable  {
      short short0 = (short)2;
      double double0 = MathUtils.indicator((double) short0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test053()  throws Throwable  {
      byte byte0 = (byte)115;
      byte byte1 = MathUtils.indicator(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test054()  throws Throwable  {
      int int0 = (-3948);
      int int1 = MathUtils.gcd(int0, int0);
      assertEquals(3948, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = MathUtils.hash(doubleArray0[1]);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = 1917;
      assertFalse(int1 == int0);
      
      int int2 = MathUtils.gcd(int1, int0);
      assertEquals(1917, int2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
  }

  @Test
  public void test056()  throws Throwable  {
      short short0 = (short)1196;
      int int0 = 0;
      int int1 = MathUtils.lcm(int0, (int) short0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test057()  throws Throwable  {
      int int0 = (-1);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialLog(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
      }
  }

  @Test
  public void test058()  throws Throwable  {
      short short0 = (short)21;
      double double0 = MathUtils.factorialDouble((int) short0);
      assertEquals(5.109094217170942E19, double0, 0.01D);
  }

  @Test
  public void test059()  throws Throwable  {
      short short0 = (short) (-493);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialDouble((int) short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
      }
  }

  @Test
  public void test060()  throws Throwable  {
      int int0 = 18;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(6.402373705728E15, double0, 0.01D);
  }

  @Test
  public void test061()  throws Throwable  {
      long long0 = 3264L;
      int int0 = MathUtils.hash((double) long0);
      assertEquals(1084850176, int0);
      
      // Undeclared exception!
      try {
        long long1 = MathUtils.factorial(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
      }
  }

  @Test
  public void test062()  throws Throwable  {
      int int0 = (-2516);
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.indicator(int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = MathUtils.factorialLog(int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-425.7);
      doubleArray0[2] = double0;
      double[] doubleArray1 = new double[10];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-425.7), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test068()  throws Throwable  {
      float float0 = Float.NaN;
      short short0 = (short)1196;
      int int0 = 0;
      float float1 = MathUtils.round((float) short0, int0);
      assertEquals(1196.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      
      boolean boolean0 = MathUtils.equals((double) float0, (double) float1);
      assertFalse(boolean0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test069()  throws Throwable  {
      float float0 = Float.NaN;
      boolean boolean0 = MathUtils.equals((double) float0, (double) float0);
      assertTrue(boolean0);
  }

  @Test
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test071()  throws Throwable  {
      int int0 = 2;
      int int1 = 67;
      double double0 = MathUtils.binomialCoefficientLog(int1, int0);
      assertEquals(7.701200180857446, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test072()  throws Throwable  {
      short short0 = (short)3012;
      short short1 = (short)782;
      double double0 = MathUtils.binomialCoefficientLog((int) short0, (int) short1);
      assertEquals(1720.7751861795073, double0, 0.01D);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test073()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test074()  throws Throwable  {
      short short0 = (short)21;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)1, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      
      double double0 = MathUtils.binomialCoefficientLog((int) short0, (int) short1);
      assertEquals(3.044522437723423, double0, 0.01D);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test075()  throws Throwable  {
      int int0 = 22;
      int int1 = MathUtils.gcd(int0, int0);
      assertEquals(22, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      double double0 = MathUtils.binomialCoefficientLog(int1, int2);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
  }

  @Test
  public void test076()  throws Throwable  {
      short short0 = (short)2;
      double double0 = MathUtils.binomialCoefficientLog((int) short0, (int) short0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test077()  throws Throwable  {
      int int0 = (-1064);
      int int1 = MathUtils.sign(int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientLog(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      byte byte0 = (byte)106;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientLog((int) byte1, (int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      int int0 = 871;
      int int1 = 1112;
      double double0 = MathUtils.binomialCoefficientDouble(int1, int0);
      assertEquals(8.11687447628332E250, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test080()  throws Throwable  {
      int int0 = (-1064);
      int int1 = MathUtils.sign(int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      double double0 = MathUtils.binomialCoefficientDouble(int2, int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test
  public void test081()  throws Throwable  {
      short short0 = (short)3;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)1, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      
      double double0 = MathUtils.binomialCoefficientDouble((int) short0, (int) short1);
      assertEquals(3.0, double0, 0.01D);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test082()  throws Throwable  {
      int int0 = 7;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test083()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      byte byte0 = (byte) (-110);
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble((int) byte0, (int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      short short0 = (short)1914;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)1, short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble((int) short1, (int) short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      int int0 = 2133;
      int int1 = (-1579);
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertEquals(1L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = 7;
      int int1 = 62;
      double double0 = MathUtils.binomialCoefficientLog(int1, int0);
      assertEquals(20.013574863396926, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test088()  throws Throwable  {
      int int0 = 18;
      int int1 = 4;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(8.026170194946426, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test089()  throws Throwable  {
      int int0 = 2133;
      int int1 = 2938;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test090()  throws Throwable  {
      int int0 = 0;
      int int1 = (-724);
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test091()  throws Throwable  {
      short short0 = (short)1914;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)1, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      
      long long0 = MathUtils.binomialCoefficient((int) short0, (int) short1);
      assertEquals(1914L, long0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test092()  throws Throwable  {
      int int0 = 0;
      int int1 = 1731;
      long long0 = MathUtils.binomialCoefficient(int1, int0);
      assertEquals(1L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test093()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertEquals(0L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test094()  throws Throwable  {
      int int0 = (-724);
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test095()  throws Throwable  {
      int int0 = 2;
      int int1 = 67;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test096()  throws Throwable  {
      short short0 = (short)2;
      long long0 = MathUtils.binomialCoefficient((int) short0, (int) short0);
      assertEquals(1L, long0);
  }

  @Test
  public void test097()  throws Throwable  {
      short short0 = (short)21;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)1, short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      long long0 = (-23L);
      long long1 = MathUtils.subAndCheck((long) short1, long0);
      assertEquals(24L, long1);
      assertFalse(short1 == short0);
      assertFalse(long1 == long0);
      assertFalse(short0 == short1);
      assertFalse(long0 == long1);
  }

  @Test
  public void test098()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      byte byte0 = (byte) (-46);
      byte byte1 = MathUtils.indicator(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      
      // Undeclared exception!
      try {
        long long1 = MathUtils.addAndCheck(long0, (long) byte1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
      }
  }

  @Test
  public void test099()  throws Throwable  {
      long long0 = 121645100408832000L;
      long long1 = (-9218868437227405313L);
      // Undeclared exception!
      try {
        long long2 = MathUtils.subAndCheck(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
      }
  }

  @Test
  public void test100()  throws Throwable  {
      int int0 = 6;
      long long0 = MathUtils.subAndCheck((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      int int0 = (-1);
      double double1 = MathUtils.round(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test102()  throws Throwable  {
      long long0 = (-584L);
      double double0 = MathUtils.cosh((double) long0);
      assertEquals(2.122987493922312E253, double0, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      int int0 = 7;
      double double0 = MathUtils.sinh((double) int0);
      assertEquals(548.3161232732465, double0, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      double double0 = MathUtils.normalizeAngle((double) long0, (double) long0);
      assertEquals((-9.223372036854776E18), double0, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      long long0 = (-584L);
      int int0 = 871;
      float float0 = MathUtils.round((float) long0, int0);
      assertEquals(Float.NaN, float0, 0.01F);
  }
}
