/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:30:25 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.exception.NoBracketingException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class FDistributionEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = Double.NaN;
      FDistribution fDistribution0 = new FDistribution(double0, double0, double0);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistribution0);
      
      // Undeclared exception!
      try {
        double double1 = fDistribution0.inverseCumulativeProbability(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 1], values: [\uFFFD, \uFFFD]
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      double double0 = 415.92;
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(double0, (double) byteArray0[5], double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      double double0 = (-620.0701399649048);
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((RandomGenerator) jDKRandomGenerator0, double0, double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-620.07)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 4.0;
      FDistribution fDistribution0 = new FDistribution(double0, double0, double0);
      assertEquals(4.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(4.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistribution0);
      
      double double1 = fDistribution0.density(double0);
      assertEquals(4.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(4.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.03839999999999998, double1, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 2.0;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(2.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertNotNull(fDistribution0);
      
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(2.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertFalse(boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 4.0;
      FDistribution fDistribution0 = new FDistribution(double0, double0, double0);
      assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(4.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(4.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertNotNull(fDistribution0);
      
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(4.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(4.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertFalse(boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 2.0;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(2.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertNotNull(fDistribution0);
      
      int int0 = 856;
      double[] doubleArray0 = fDistribution0.sample(int0);
      assertArrayEquals(new double[] {9.270079125735043, 1.6920194648900102, 1.2835762928992243, 0.9391547144463313, 0.9596417497416486, 0.14917223036489513, 10.174396331700377, 1.299924547535538, 0.5635383367517158, 0.6063031195059039, 1.2916954027610748, 0.06731958878200643, 0.2571563172125788, 0.5389508330025994, 9.732297467402969, 0.7433902647800362, 12.412556869109533, 0.1310257294215285, 0.2280693708297754, 1.5348946840138313, 0.35669053534258366, 2.314558439798427, 3.575617626400246, 0.900172187535375, 0.3798818218687604, 4.21324406870816, 0.5366482972030393, 0.8568830973909559, 0.20493390384444266, 0.10695195517582216, 0.8507564922115345, 0.4495479452320865, 0.13225813386916815, 0.5952008626655263, 0.9951928921814271, 0.1753029350618037, 0.0293614902807424, 0.15691609501833373, 1.0623460317938416, 6.343820583113192, 1.3072038355916256, 3.1888212661318187, 0.1953892434114469, 6.271072995389542, 16.483896456521624, 3.4344222134212083, 2.6527685156271823, 1.6702573764949542, 113.99323505952792, 0.03534102503849552, 7.101409341698012, 1.0748185497439233, 0.20954573047892314, 1.041173823848197, 3.8358684364671563, 1.0443688843101984, 2.153400364669754, 1.0211857227466692, 0.05112895232116701, 0.9125343584725084, 3.610118102184529, 27.757123485563767, 0.38019197014617634, 0.3697590022796787, 1.357572849908113, 0.22118695741691088, 0.06157531762264526, 0.31258841669382165, 0.7247069814448204, 0.8948255372019667, 0.1606037553731997, 2.2336713956019447, 12.61496403851535, 0.8236753221879115, 29.10013551508598, 0.6123721083684851, 0.20523772905500612, 0.02541639391152561, 0.7150018641207816, 6.442387189403733, 0.03248761592230867, 0.10008724481959166, 1.3289493568297737, 13.159719407442145, 1.7226873767868762, 34.5422125216854, 0.35135633482063816, 1.0968755579295957, 7.358776618287441, 0.30336290650981734, 0.7786573667870528, 0.1510354968351316, 2.95831669631287, 1.6601645792678734, 2.394759641723121, 4.540299985582085, 4.928583649619856, 0.0678839118984541, 1.632293143576295, 0.10157441368312271, 0.6860728285181167, 10.084008774999633, 0.014567013577281334, 2.380942647796461, 57.397284571072035, 13.210049583097092, 0.03344061737289685, 4.470225250290388, 0.3773536684248562, 1.285320673708131, 0.14051819780765012, 1.5229736156719218, 1.541903358468313, 1.9497899675346952, 0.7814784818670643, 1.216630085761205, 14.415859704162177, 0.5825840357969182, 0.49950072742509044, 1.1357761958447208, 25.22672612766716, 0.5835015572903969, 1.9363223688401692, 20.12502382222583, 2.946137766177132, 17.557528839898456, 0.02913946207008603, 1.1873574688887396, 0.3234448052294214, 2.1375591554124598, 2.665852494341013, 2.514770722028896, 0.46660560370336984, 0.7401672471419153, 0.3071225571501693, 4.207823049804643, 0.1215751217039809, 2.9787204279423327, 1.7361781173767896, 0.5722815816827616, 2.4454146938634933, 0.2530933469545661, 0.11223055657446453, 0.3493177292381773, 1.0494166718733922, 0.4555322292971518, 2.3589501565733064, 0.2283660292917471, 0.11147991301390915, 0.8151586870975555, 1.2124500884690543, 1.964215298621312, 0.04063703382785826, 13.460928809164514, 0.8303302749137984, 1.536551951426897, 1.0122856652680925, 0.14987430915946107, 0.3822204155476647, 2.5684345216981552, 11.961788748340618, 0.5527086916199053, 10.231452611048985, 0.3091070288281332, 9.121692832439493, 0.2015810513463814, 0.2667625685499708, 0.09018497845026327, 27.856559874875835, 25.150944905749096, 0.22444732051000457, 2.167585940564205, 14.678967872072135, 3.2856903629438845, 2.1602275721525768, 0.006478449044388062, 0.6364846425404538, 3.377870546978846, 0.9282373663587554, 0.12417754390549969, 2.389977631246239, 0.32207940489329345, 3.2339546682619584, 0.6601378900964604, 0.17437736225399528, 0.1266048330352907, 1.0478031538755561, 1.6469999324916922, 0.05278134606745287, 0.6967743958946184, 38.698192244301175, 0.9967935347978562, 0.8254042658040642, 0.6454973571574112, 3.0857655002730966, 7.5404029539341595, 2.345254559932984, 2.3522615012550143, 0.6311159407918144, 4.169529982461077, 0.3263470928665236, 4.038613281111343, 0.4575522496059168, 4.353558439959346, 1.241241260209674, 18.78122360141014, 22.398750770690334, 0.10264066396730571, 3.959563635182976, 1.9935719149551017, 2.365864899003789, 0.22279928920159775, 0.6889174517439893, 0.5955612482824136, 2.2453563492938398, 0.5423664998825327, 0.12485794492581377, 0.12007976821078449, 0.9024952046061339, 0.2079054493321437, 2.439009899164059, 0.555037175686987, 0.13944496762801056, 18.444392000822432, 2.349195593552193, 6.094662634302635, 1.7805164954728818, 3.2278493234785484, 0.556293253441765, 0.1572131021366667, 0.365842025048472, 4.406818911047281, 0.8102124773815494, 1.7815964117067145, 0.81019492793871, 0.5142609512417654, 0.24067673584676386, 9.979646023276924, 0.23135583561109765, 0.7500525719320135, 0.25213683099984135, 0.8364754670986176, 1.0308995583683582, 0.4736718328002533, 0.29322848847338484, 3.384015378395752, 0.639056500878451, 0.8116158645476603, 0.9405955269074147, 0.14637505114702018, 0.3414639087046194, 1.4525083485765602, 0.3963864485110173, 1.1331959708340313, 12.363105018439446, 2.0658305821187484, 0.8203391866035964, 0.7246990759011828, 0.147026676381448, 0.754373510478607, 0.11891602198869591, 0.13484681041100133, 1.9881969555836443, 4.481598660340082, 30.63279346808893, 0.8655271540472373, 0.7156622474305964, 0.4085364450264735, 1.239340819491132, 0.5682996429649336, 23.956305476592647, 1.2546558926105214, 0.198593328573423, 0.6204756571763177, 1.7857457849634017, 0.0759496560631989, 0.27132156243007866, 0.20404593095709148, 1.4675385995387333, 1.3373619402806167, 3.7858527065734227, 1.740387692950146, 0.021070211679652433, 3.9237538901358957, 0.8200179872255245, 0.663148661522671, 1.4674532953131572, 0.288750630761364, 3.42472046967946, 4.120023283064443, 0.9896514280619312, 2.096877287451134, 3.108036128163225, 8.393160870524346, 0.9407526056550732, 1.4912004535651329, 1.5580502729042014, 0.3403168250939691, 0.1017150128577121, 2.122851924102638, 23.606783104604588, 0.38495446586610527, 0.2005482291811393, 0.053318502734798566, 2.096717273073727, 1.529527248849979, 0.8925946510581181, 0.236092562069208, 0.24925382414642877, 11.560382127862873, 0.5010860116443039, 0.02419557965520938, 0.24104157982907706, 0.9203763657517879, 0.1279492845947203, 0.040541553629501056, 0.4275582313687924, 1.21735273231488, 0.006227514922804432, 3.0023685700346734, 1.6185927846422663, 2.2276134302878465, 1.2081751537523386, 0.07210913574326128, 0.9951540177419848, 8.499665261445802, 32.8293564964469, 14.218989709555691, 0.0529072470765049, 0.3006725353562169, 1.0100319724536553, 0.9530104198962339, 12.61366708113887, 12.112932761728924, 1.765012425599524, 3.553955174585018, 0.2726014737872029, 7.030365943526171, 52.25784038777682, 5.38372501176941, 3.254619564395597, 5.819912516228333, 0.8466815254345497, 0.11514716813774262, 90.64007785533406, 0.15612360609355774, 0.041374437711871825, 0.10714004332303735, 0.20999418766722383, 0.826484342168036, 1.0028808158987998, 0.1582164181024511, 0.33891252634094216, 0.12182673392052526, 1.6673257897881228, 0.5390759064504571, 4.628956114035193, 1.5945645386493086, 3.5439068139053345, 1.3246690632348106, 0.3623976804651762, 0.42908247282880446, 1.2944750527771964, 0.5274311386487792, 0.9768285468328785, 0.23130327577800758, 0.7307417851947459, 0.4008023548640263, 0.7638785613231698, 1.096639475060081, 0.12152900711677163, 0.19668125023426972, 0.05494952968694236, 0.013411094623242357, 5.922833621007342, 0.8415603376687613, 0.03335486577353834, 0.31692962606203884, 2.903242844398364, 3.539374529632121, 0.7518640207244359, 1.4135242520468416, 0.8441709992476417, 4.36381808345902, 3.1882508044937583, 3.3722438290796894, 0.3075562101745804, 0.9738779625377043, 0.030306633318317778, 0.12708851878972974, 0.10157372377248605, 148.6621166184251, 1.2684011735296128, 1.892313946385138, 0.5317110242713041, 0.7311427577522194, 5.766017587532502, 0.1467756274912517, 0.6385455742355876, 0.5942758803951204, 0.8274277220945987, 4.090816715377429, 0.490554444127958, 0.02150037496902963, 1.472377320930503, 0.0844513202157122, 14.104922504619077, 1.0637906913570552, 0.5169899825637786, 2.110787794814231, 0.03068079311134516, 0.49917306652724674, 0.2230736589152679, 1.368668177181659, 0.8417405314768901, 0.3005717611132511, 0.7857438309217559, 2.3353348036524477, 12.23490106963715, 0.139235511711118, 8.21958032767901, 297.90728475425215, 54.21368657298215, 3.054872257662651, 1.3541694140319496, 0.620909142339626, 3.1667854289930393, 1.311015461482923, 1.3242049151930746, 0.058372454523267024, 25.759296239279266, 0.2004071444844297, 0.5324650869901898, 0.09155784040556862, 6.449156020836431, 2.774727562351623, 0.24960491229323942, 0.15085289424638268, 0.23097510414867936, 24.5200357848971, 1.1672707141912109, 2.1079844338569167, 4.334915284796174, 4.046199131405889, 0.377179300348753, 3.959366261590165, 0.1450684883588372, 1.0436174710127393, 0.02259949800964733, 1.9131940608725755, 12.005057172938962, 1.5525578275662062, 1.910933894771435, 0.2467944709545365, 0.023224258465981706, 0.21835454520713038, 0.2301633079243904, 1.2317287744257341, 0.09907486832319688, 41.15549161651167, 4.9943142627200245, 0.1972697948525314, 0.537606247061676, 0.25012824045284465, 0.7406834277149011, 0.1548195279462731, 1.5273424277678056, 5.50903002554187, 0.3532033613453416, 1.106404995607007, 0.18719493844321136, 2.061865928961974, 5.387645574785072, 0.0347518405194027, 0.1013898789472788, 1.0435030909301353, 1.4929661106371972, 2.1805662893841333, 4.70537047107979, 36.16609366958554, 0.07573848694220264, 3.9740276398369345, 0.1829198982226764, 0.827839636910348, 0.7036245680539639, 0.3938099455497786, 0.6543900491499575, 10.680600251467753, 0.801592845382757, 6.157639244726432, 0.7437487106832752, 9.201787089862158, 1.269690219220269, 1.6167703991187732, 4.707074673196345, 10.344466084796895, 1.141469533882369, 0.4896137867601054, 0.14404462029116707, 0.9870997063966171, 0.29362489893865745, 0.9670478747811376, 0.809400014320128, 3.781068680349099, 2.0804144034785543, 5.532036697334168, 0.18709541659435627, 6.69993923610393, 1.9955977692810645, 1.7565855594387492, 0.23635659104439394, 1.6166424274980555, 7.454391294679203, 0.10894810009974834, 4.985770204263685, 0.8530107802735012, 0.606369607951752, 3.0138598543362036, 1.7540293113770489, 4.163899118459112, 0.09644485873357989, 0.1751069414462043, 6.776462919882849, 3.506850970335282, 182.1187766797786, 8.777968980720475, 2.2008401160171673, 0.3553221559852324, 0.41469209495212134, 8.836566427649545, 49.438030775507535, 0.38969339999272634, 2.4546746875140912, 0.8943303302108547, 0.4787980350056218, 0.5506545954530803, 2.338191790950367, 1.8556094000000483, 3.593468891169817, 4.7801696640271905, 0.5831856763097109, 0.6014223229897832, 0.8539459896866226, 0.9424436185363987, 1535.6853366586327, 2.2723267554614885, 0.44480943889579677, 0.9760185061997114, 0.5532724861985571, 0.1881602978784422, 0.08697558605543126, 0.48247006637582013, 0.03574416777120915, 0.02462552350219003, 0.26584854336110086, 0.6511391268312631, 0.28694151976642, 4.564985867968912, 0.2528112926332598, 0.48034443833411405, 0.19761772879568099, 2.8764348858251343, 0.17008513908007244, 0.5174790621177834, 0.27320255954453776, 0.749053278003438, 0.2845495952527457, 1.4447762688407397, 0.6009700487604793, 59.27800698785322, 0.7342273895769249, 0.11977592227317006, 0.07921936402072813, 0.16813875050856636, 3.2978249138308344, 2.8700914136301807, 0.22939608781670964, 0.33122443905309606, 0.5270097971286192, 4.955265244012302, 0.3025091352667141, 4.06279971057891, 0.0053879646614408624, 0.024570278769459122, 22.54472772817562, 0.11596795776548956, 3.0615616273173294, 0.4440052278889364, 0.07349589441685644, 0.1939301598734362, 0.24090851914259442, 1.0770397851441227, 2.1893286407164556, 5.085560108596509, 14.2668928003144, 1.0187121387021507, 7.415813747151581, 0.20231660066688475, 0.42205152972809956, 5.431649750544745, 6.792597717666716, 2.4178984774645773, 1.3250906677687024, 0.11530516010112714, 0.056922483860829695, 5.91794563621114, 5.153141471852382, 0.2452188054005303, 0.2935108504605959, 0.648371921385613, 2.7902177606405876, 0.37691054607304625, 1.8417757536996635, 0.10958748923758813, 0.5362693043105988, 1.6331755593346393, 0.6786626789364363, 0.07875931566922463, 2.413348142005972, 4.007101159340853, 0.06524555076792687, 1.2344463932386027, 0.45582832660345785, 1.2637389844920044, 3.6765279181058075, 6.969019997590899, 1.4734921876066605, 0.04496432122141497, 0.8951053972558294, 1.58201746663608, 7.926026642148517, 13.872469381401165, 0.2799101984817738, 1.8291839744427825, 0.03427106390280282, 0.3335205025531342, 6.863321549604973, 0.48221292946332556, 0.8218335122355844, 0.46950791021629396, 9.732292053881734, 0.8008775587371494, 0.10603833888568802, 1.4471504830127548, 0.19250069601008937, 0.3737849471124518, 1.2992971013833212, 1.687986902550885, 4.411321061857106, 0.1180664821323507, 2.822908065239068, 1.9192527731202564, 7.153749822826496, 0.09220264095054698, 0.0031393481075933953, 3.9207934820863466, 5.96473813985703, 0.63916988200409, 1.7401704641066371, 1.8449943376670916, 0.3069248656957377, 0.2564254438966189, 0.3852395755072528, 3.9223142997626588, 0.1701291829336023, 0.4915041591592606, 0.50326889246201, 2.7574807483591037, 1.1578385643251776, 0.002935623462361987, 6.9496369978796455, 0.9018239375729133, 3.905848453347528, 0.21982069506516042, 0.6675968660920013, 2.9388258548405464, 1.1311855240503341, 1.9454638603614862, 1.1187968574469942, 1.2411524549568353, 2.7290199960951695, 0.19724053714007653, 3.197943405115478, 0.10885175279448092, 0.5276841935990131, 2.8946578152312137, 0.009331070753437613, 1.077562791535556, 0.1294944337708541, 0.5235412011575177, 0.43679232807982443, 0.4509948902439485, 0.2434066668136764, 1.0889012379007958, 0.16821395718745155, 6.227099419952793, 0.09392792878006376, 2.053230203541364, 0.06115222042053092, 0.5021458279916803, 6.638876523253459, 2.5586303503403376, 1.2718774046572454, 0.4887436408467579, 2.0644984038838183, 0.41184000482369343, 2.4203050575912344, 1.9566615103010798, 2.5740912440934305, 0.6618880385197387, 12.715485565873651, 0.4101525927183584, 1.7519920900063175, 1.0134238547700796, 7.095296760222953, 0.39087682374980076, 4.039666405120237, 1.7527590281216001, 1.0576721134630331, 10.385382064333832, 1.9966220405938724, 0.24933658168369768, 0.0861153133232623, 0.3206212887131827, 0.7001932555743723, 0.6910403211752376, 0.4673512214490463, 0.39682994289258194, 12.356342824133247, 0.568206739750212, 11.700913217753534, 4.545085578916642, 0.5599573310796719, 1.8309689057703595, 0.4056795934955178, 12.76649860674304, 0.9060931891197412, 2.869106850683174, 1.429760097163447, 8.738323109852837, 0.5483233625896826, 2.9812045295680116, 1.7212503370899466, 0.7654927901783366, 0.1358492064299842, 0.6254809523886191, 0.3339233852995095, 0.33661240371534557, 0.331980744704901, 0.12505382981285695, 0.29298130821971063, 2.4175938572731153, 1.8850329187125703, 0.2480131012343751, 2.560797971073938, 3.4122439362052623, 0.40563392854333874, 15.426398451013428, 0.1007636395444239, 0.08477163776857652, 5.115531139597579, 0.21684497127194954, 5.548412905639679, 0.5041824385481846, 0.11090996943601679, 0.24184212928551846, 3.3673073765176755, 0.7693055271090877, 2.985647012998522, 1.219217517792612, 0.7455664235817144, 2.0792324649552727, 1.3416292160956806, 8.517442883756452, 0.3404396710025382, 0.15118536578387878, 0.04844307524904497, 0.5500705556432924, 0.5362398938464357, 12.81770073400003, 1.4381074082784424, 0.9888755071926836, 1.3786376673741223, 0.4455468399263754, 1.3015119078335118, 0.1435990501585395, 2.363998775510642, 0.602200743498598, 4.887031944108111, 0.07869087034959739, 7.079911620428943, 43.209997841923894, 0.5242119758792356, 0.8462200448453455, 0.39657906031778456, 0.4998517682667817, 5.847483244230457, 0.055242944110887995, 169.04136390840634, 0.02760923484424101, 2.511443159931282, 1.08074122036471, 3.7214209370366333, 2.287055555993826, 0.7394368172067997, 5.324051623503523, 2.0154518910902652, 2.374248740808741, 0.6088377925025835, 0.9157110471929784, 6.896946556396214, 0.17026613028503135, 1.6124217468239888, 0.8900893568636011, 0.09437577053484665, 38.02070475124058, 1.6028658719293445, 2.4035392749562, 0.2212525147514565, 0.8180651378228578, 1.4035757714091037, 10.592584912433487, 0.5722826756967517, 0.8933010797267394, 0.5614260263676807, 7.224124154607405, 0.09411448814805803, 1.9017108229276505, 22.727613699422875, 1.30093930780234, 2.5035933976643165, 0.34678982058924723, 4.428465090102904, 70.663029736597, 0.7547887382490301, 8.275724962858053E-4, 1.910994638566443, 0.9084127340431821, 1.7725573638197754, 0.026450402321552477, 25.372552004966316, 0.45364223390876196, 1.9973294011173002, 1.0364486528749675, 0.08971490570565462, 1.368741841596909, 2.1284458952639675, 0.6772280935508438, 0.8148571353991354, 17.28246908890795, 1.0312862905978215, 4.913495328194465, 0.8647592850935217, 7.482275239968825, 0.48019191595326355, 8.967831419488675}, doubleArray0, 0.01);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(2.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(2.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertNotNull(doubleArray0);
  }
}
