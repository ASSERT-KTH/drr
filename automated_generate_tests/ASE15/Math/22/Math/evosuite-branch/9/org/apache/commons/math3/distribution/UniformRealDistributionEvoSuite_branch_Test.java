/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:29:55 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.UniformRealDistribution;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class UniformRealDistributionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 2.718281828459045;
      double double1 = 12.0;
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(double0, double1);
      assertNotNull(uniformRealDistribution0);
      assertEquals(2.718281828459045, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(7.179191017992799, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(7.359140914229522, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(12.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = uniformRealDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(2.718281828459045, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(7.179191017992799, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(7.359140914229522, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(12.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0E-9, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = uniformRealDistribution0.probability(double2, double1);
      assertEquals(2.718281828459045, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(7.179191017992799, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(7.359140914229522, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(12.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
  }

  @Test
  public void test01()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertNotNull(uniformRealDistribution0);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      
      double double0 = 1.0E-6;
      double double1 = uniformRealDistribution0.cumulativeProbability(double0);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0E-6, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test02()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertNotNull(uniformRealDistribution0);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      
      double double0 = 12.0;
      double double1 = uniformRealDistribution0.density(double0);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test03()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertNotNull(uniformRealDistribution0);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      
      long long0 = (-1L);
      double double0 = uniformRealDistribution0.probability((double) long0);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = uniformRealDistribution0.density(double0);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test04()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertNotNull(uniformRealDistribution0);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      
      double double0 = (-3694.9994802187);
      double double1 = uniformRealDistribution0.density(double0);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 0.0;
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertNotNull(uniformRealDistribution0);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      
      double double1 = uniformRealDistribution0.probability(double0);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      UniformRealDistribution uniformRealDistribution1 = null;
      try {
        uniformRealDistribution1 = new UniformRealDistribution((RandomGenerator) well512a0, double1, double1, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (0) must be strictly less than upper bound (0)
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertNotNull(uniformRealDistribution0);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      
      int int0 = 57;
      double[] doubleArray0 = uniformRealDistribution0.sample(int0);
      assertArrayEquals(new double[] {0.9026297667469598, 0.6285316606947873, 0.5620903916754836, 0.4843113896130571, 0.4897026458359206, 0.12980841898165818, 0.9105097071630506, 0.5652031276090093, 0.3604250202297645, 0.3774524945779849, 0.5636418352987353, 0.06307350627642716, 0.20455397128558062, 0.3502066612121719, 0.9068233057239343, 0.4264049649685464, 0.9254430001877367, 0.1158468158694621, 0.1857137522090373, 0.6055062932963506, 0.26291223094035554, 0.6983006882621658, 0.7814502693078564, 0.4737319034951011, 0.27530025821652626, 0.8081808588240906, 0.34923300157543213, 0.461463136044985, 0.17007895884628987, 0.09661842564651724, 0.4596804040897544, 0.3101297522198012, 0.11680917090478715, 0.37311969708376735, 0.4987953274430088, 0.1491555324362519, 0.028523983563108368, 0.13563308150796782, 0.5151153178683947, 0.8638310959971263, 0.5665749230397539, 0.7612693556334997, 0.16345240219764134, 0.8624687167039891, 0.9428045114264565, 0.7744914778359648, 0.7262350472868029, 0.625504264569199, 0.9913038362693061, 0.03413467064553388, 0.8765646867325942, 0.5180301427715848, 0.17324333028398065, 0.5100858200691127, 0.7932119094764807, 0.5108514868890266, 0.6828820053413256}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 2.718281828459045;
      double double1 = 12.0;
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(double0, double1);
      assertNotNull(uniformRealDistribution0);
      assertEquals(12.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(7.179191017992799, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(7.359140914229522, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2.718281828459045, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      boolean boolean0 = uniformRealDistribution0.isSupportUpperBoundInclusive();
      assertEquals(12.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(7.179191017992799, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(7.359140914229522, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2.718281828459045, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertTrue(boolean0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test08()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertNotNull(uniformRealDistribution0);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      
      double double0 = uniformRealDistribution0.getSupportUpperBound();
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertNotNull(uniformRealDistribution0);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      
      boolean boolean0 = uniformRealDistribution0.isSupportConnected();
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertNotNull(uniformRealDistribution0);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      
      double double0 = uniformRealDistribution0.getNumericalMean();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.5, double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertNotNull(uniformRealDistribution0);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      
      double double0 = uniformRealDistribution0.getSupportLowerBound();
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertNotNull(uniformRealDistribution0);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      
      double double0 = uniformRealDistribution0.getNumericalVariance();
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.08333333333333333, double0, 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertNotNull(uniformRealDistribution0);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      
      boolean boolean0 = uniformRealDistribution0.isSupportLowerBoundInclusive();
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertTrue(boolean0);
  }
}
