/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:24:38 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.UniformRealDistribution;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class UniformRealDistributionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertNotNull(uniformRealDistribution0);
      
      double double0 = 743.6667446621592;
      double double1 = uniformRealDistribution0.cumulativeProbability(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test01()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertNotNull(uniformRealDistribution0);
      
      double double0 = (-1024.0);
      double double1 = uniformRealDistribution0.probability(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = (-2879.7763957256);
      assertFalse(double2 == double1);
      
      double double3 = 743.6667446621592;
      assertFalse(double3 == double1);
      
      UniformRealDistribution uniformRealDistribution1 = new UniformRealDistribution(double2, double3, double2);
      assertEquals(true, uniformRealDistribution1.isSupportLowerBoundInclusive());
      assertEquals((-2879.7763957256), uniformRealDistribution1.getSupportLowerBound(), 0.01D);
      assertEquals(743.6667446621592, uniformRealDistribution1.getSupportUpperBound(), 0.01D);
      assertEquals(1094111.6826352589, uniformRealDistribution1.getNumericalVariance(), 0.01D);
      assertEquals((-1068.0548255317206), uniformRealDistribution1.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution1.isSupportConnected());
      assertEquals(true, uniformRealDistribution1.isSupportUpperBoundInclusive());
      assertNotNull(uniformRealDistribution1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(uniformRealDistribution1.equals((Object)uniformRealDistribution0));
      assertNotSame(uniformRealDistribution1, uniformRealDistribution0);
      
      double double4 = uniformRealDistribution1.probability(double2, double1);
      assertEquals(0.7947624080606999, double4, 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution1.isSupportLowerBoundInclusive());
      assertEquals((-2879.7763957256), uniformRealDistribution1.getSupportLowerBound(), 0.01D);
      assertEquals(743.6667446621592, uniformRealDistribution1.getSupportUpperBound(), 0.01D);
      assertEquals(1094111.6826352589, uniformRealDistribution1.getNumericalVariance(), 0.01D);
      assertEquals((-1068.0548255317206), uniformRealDistribution1.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution1.isSupportConnected());
      assertEquals(true, uniformRealDistribution1.isSupportUpperBoundInclusive());
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(uniformRealDistribution0.equals((Object)uniformRealDistribution1));
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(uniformRealDistribution1.equals((Object)uniformRealDistribution0));
      assertNotSame(uniformRealDistribution0, uniformRealDistribution1);
      assertNotSame(uniformRealDistribution1, uniformRealDistribution0);
  }

  @Test
  public void test02()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertNotNull(uniformRealDistribution0);
      
      double double0 = 836.09132129991;
      double double1 = uniformRealDistribution0.density(double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test03()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertNotNull(uniformRealDistribution0);
      
      double double0 = uniformRealDistribution0.getNumericalMean();
      assertEquals(0.5, double0, 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      
      double double1 = uniformRealDistribution0.density(double0);
      assertEquals(1.0, double1, 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test04()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertNotNull(uniformRealDistribution0);
      
      double double0 = (-1024.0);
      double double1 = 743.6667446621592;
      UniformRealDistribution uniformRealDistribution1 = new UniformRealDistribution(double0, double1, double0);
      assertEquals((-1024.0), uniformRealDistribution1.getSupportLowerBound(), 0.01D);
      assertEquals((-140.1666276689204), uniformRealDistribution1.getNumericalMean(), 0.01D);
      assertEquals(260387.14334870956, uniformRealDistribution1.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution1.isSupportConnected());
      assertEquals(743.6667446621592, uniformRealDistribution1.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution1.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution1.isSupportLowerBoundInclusive());
      assertNotNull(uniformRealDistribution1);
      assertFalse(double0 == double1);
      assertFalse(uniformRealDistribution1.equals((Object)uniformRealDistribution0));
      assertFalse(double1 == double0);
      assertNotSame(uniformRealDistribution1, uniformRealDistribution0);
      
      double double2 = uniformRealDistribution1.getNumericalMean();
      assertEquals((-140.1666276689204), double2, 0.01D);
      assertEquals((-1024.0), uniformRealDistribution1.getSupportLowerBound(), 0.01D);
      assertEquals((-140.1666276689204), uniformRealDistribution1.getNumericalMean(), 0.01D);
      assertEquals(260387.14334870956, uniformRealDistribution1.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution1.isSupportConnected());
      assertEquals(743.6667446621592, uniformRealDistribution1.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution1.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution1.isSupportLowerBoundInclusive());
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(uniformRealDistribution1.equals((Object)uniformRealDistribution0));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertNotSame(uniformRealDistribution1, uniformRealDistribution0);
      
      double double3 = uniformRealDistribution0.density(double2);
      assertEquals(0.0, double3, 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals((-1024.0), uniformRealDistribution1.getSupportLowerBound(), 0.01D);
      assertEquals((-140.1666276689204), uniformRealDistribution1.getNumericalMean(), 0.01D);
      assertEquals(260387.14334870956, uniformRealDistribution1.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution1.isSupportConnected());
      assertEquals(743.6667446621592, uniformRealDistribution1.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution1.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution1.isSupportLowerBoundInclusive());
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(uniformRealDistribution0.equals((Object)uniformRealDistribution1));
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(uniformRealDistribution1.equals((Object)uniformRealDistribution0));
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertNotSame(uniformRealDistribution0, uniformRealDistribution1);
      assertNotSame(uniformRealDistribution1, uniformRealDistribution0);
  }

  @Test
  public void test05()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertNotNull(uniformRealDistribution0);
      
      double double0 = uniformRealDistribution0.getSupportLowerBound();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      
      UniformRealDistribution uniformRealDistribution1 = null;
      try {
        uniformRealDistribution1 = new UniformRealDistribution(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (0) must be strictly less than upper bound (0)
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertNotNull(uniformRealDistribution0);
      
      double double0 = uniformRealDistribution0.sample();
      assertEquals(0.9026297667469598, double0, 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertNotNull(uniformRealDistribution0);
      
      boolean boolean0 = uniformRealDistribution0.isSupportUpperBoundInclusive();
      assertTrue(boolean0);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
  }

  @Test
  public void test08()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertNotNull(uniformRealDistribution0);
      
      double double0 = uniformRealDistribution0.getSupportUpperBound();
      assertEquals(1.0, double0, 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertNotNull(uniformRealDistribution0);
      
      boolean boolean0 = uniformRealDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertNotNull(uniformRealDistribution0);
      
      double double0 = uniformRealDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(1.0E-9, double0, 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertNotNull(uniformRealDistribution0);
      
      double double0 = uniformRealDistribution0.getNumericalVariance();
      assertEquals(0.08333333333333333, double0, 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertNotNull(uniformRealDistribution0);
      
      boolean boolean0 = uniformRealDistribution0.isSupportLowerBoundInclusive();
      assertTrue(boolean0);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
  }
}
