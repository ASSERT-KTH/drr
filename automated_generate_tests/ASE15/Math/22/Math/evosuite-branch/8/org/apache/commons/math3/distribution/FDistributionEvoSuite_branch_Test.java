/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:29:20 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class FDistributionEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 0.5;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertNotNull(fDistribution0);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.5, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      
      int int0 = 635;
      double[] doubleArray0 = fDistribution0.sample(int0);
      assertNotNull(doubleArray0);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.5, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertArrayEquals(new double[] {941.0262453603775, 4.0589984254174025, 1.9290317329064723, 0.8482001714395436, 0.8976031174212673, 0.0033597213281285447, 1319.033207235643, 1.9948873755097614, 0.21609491822468352, 0.2642190982817778, 1.9615566138317526, 1.8703757684369518E-4, 0.020861094456939688, 0.1909279858792607, 1122.2953901169478, 0.4576862185039711, 2738.25559282766, 0.0021301737407268925, 0.014136054213200066, 3.1126478850243893, 0.05775358355425394, 9.82042084611077, 36.69462612074818, 0.7588568457987389, 0.06975156321618065, 62.1073001459741, 0.1886631259851617, 0.666601181596217, 0.009927263174553148, 0.001030214270629992, 0.6541216105628793, 0.11422005645762652, 0.0022019063005813333, 0.2511869808683854, 0.987444560414037, 0.0058624964756288055, 7.822595925110794E-6, 0.004005587534966696, 1.17188783217134, 245.73865344881375, 2.024679231679659, 25.655591218593436, 0.008463301606451135, 236.1296810301877, 7907.187644649207, 32.32398902176019, 14.669765085007281, 3.9174964364842166, 1.479722462271006E7, 1.6043323485457427E-5, 364.13030072206317, 1.2083372816282802, 0.01069017507470099, 1.1116073915446514, 45.8809760422883, 1.1205768685616921, 7.975608037398637, 1.0565103739246005, 6.615519628682103E-5, 0.786536611147459, 37.826020051224425, 57872.1847578811, 0.06992126843471311, 0.06434736665911595, 2.238897683786059, 0.0127828766089185, 1.3376898490380506E-4, 0.03859200685583267, 0.42765719817039743, 0.7470708568212826, 0.004340588613107137, 8.859965015489601, 2907.350292420051, 0.6006375222750118, 69464.41985350507, 0.27150460474957483, 0.009976393774539793, 4.460449420224245E-6, 0.41252725541988017, 259.22145609480594, 1.1583571996655882E-5, 8.099458228360824E-4, 2.115418234230265, 3401.407249021309, 4.264368382805876, 135041.62690510304, 0.05518471413734847, 1.274526186203125, 412.70662212956984, 0.03516649858107125, 0.517661434326994, 0.0035081550662225554, 20.377823177567798, 3.853044567374167, 10.844871909428297, 79.33128847477698, 104.14362739158989, 1.929804539178713E-4, 3.6788665703482417, 8.545534450747956E-4, 0.36930163894761175, 1276.8578244233831, 5.020138768906687E-7, 10.663106926869002, 984150.5663737678, 3450.0321044892776, 1.295584557695276E-5, 75.37343693236825, 0.06837740562820092, 1.9359896069881906, 0.0027258587713100946, 3.047727043089108, 3.1512522528260876, 6.017267997507863, 0.5226477018064231, 1.674179146513209, 4778.875969221097, 0.23683760098267517, 0.15426468532702733, 1.3967582024220113, 40037.14455791277, 0.23786468896309235, 5.901245852415823, 16852.705517635495, 20.12336308976997, 10035.854999092011, 7.595202384104622E-6, 1.5700044548331216, 0.04287659579308268, 7.808887131532867, 14.886718181118317, 12.519670430812154, 0.12710826066187308, 0.4524206335467726, 0.0365388259702531, 61.847720095270276, 0.0016325173338362369, 20.809425401212263, 4.356953867576561, 0.22548078316856826, 11.530512547575187, 0.019820588471771386, 0.0012257079575307187, 0.054221544095915446, 1.1348394046876582, 0.11864989256810647, 10.378359329024367, 0.014196363971915614, 0.00119645621280954, 0.5843771292240375, 1.65903836454845, 6.143323518973751, 2.7479227180261123E-5, 3700.231701279505, 0.6135288197722423, 3.121747014565143, 1.0325358109681986, 0.00341514157127129, 0.07103726460752127, 13.326340188789965, 2388.2409395258765, 0.2047879374461495, 1346.1883176814295, 0.037276284239851944, 887.7856674860491, 0.009395545390325282, 0.023456748814138263, 5.535298881638527E-4, 58676.79337345876, 39576.397916084556, 0.013412967276542462, 8.12705734182266, 5113.603162365285, 28.15023465237889, 8.048242121969391, 2.0511962907287268E-8, 0.3015903174728396, 30.68655859760742, 0.8225683882247007, 0.0017605447446198811, 10.781711613265434, 0.04232249061021804, 26.796620564229784, 0.33289636616755214, 0.00575753654431763, 0.0018860401564862479, 1.1302681427655628, 3.7700816465359464, 7.466051495175767E-5, 0.38496717639646416, 210171.2009912265, 0.9916143077587393, 0.6039709800485131, 0.31330783923358274, 23.185045270093024, 449.79918195841276, 10.20384289028787, 10.292861342542135, 0.2947330920135141, 60.03705018346267, 0.04406907374603829, 54.14374262007291, 0.12016751670224471, 69.11320067655252, 1.7651435885446338, 12956.577929492032, 25366.172906490418, 8.875744968453933E-4, 50.8007123342401, 6.405623276514947, 10.467286663388046, 0.013092026393974991, 0.3734287978418837, 0.2516040337728624, 8.994331862630748, 0.19431661187404184, 0.0017951239780397206, 0.0015619376266839471, 0.7640124475385031, 0.01041460844797634, 11.442129771075267, 0.20718942452699862, 0.0026534282500707117, 12096.346570767928, 10.253842188045432, 213.99701513569468, 4.671107540808979, 26.64011805434937, 0.2084916102543133, 0.004031900908491248, 0.06232599832915061, 71.92091888564642, 0.5750551366607481, 4.678950497964205, 0.5750222201302096, 0.1674527708854125, 0.016846879766120867, 1229.4283080181604, 0.01481343988718534, 0.46868425763713767, 0.01958051962634932, 0.6255778765535925, 1.0830685922080625, 0.13268436299181674, 0.031627444812387676, 30.861436309377858, 0.30490764459798425, 0.5776910169082322, 0.8516187959239913, 0.003144965835900884, 0.050606306463126055, 2.6826235910415335, 0.07912707111739524, 1.3884298345171544, 2698.088926654057, 7.085056233325782, 0.5942363655922849, 0.4276447438962478, 0.0031941374759780114, 0.47589931856349965, 0.0015084896712302136, 0.0023579353065510626, 6.357014949327437, 76.00556729111644, 84730.39741936508, 0.6844497567207379, 0.41354668020900137, 0.0864825335423234, 1.7580078885595636, 0.22117756600909838, 32825.17045781376, 1.816048901823374, 0.008937738485733126, 0.2814116671593877, 4.709171222812951, 2.934237397770048E-4, 0.024756348014364354, 0.009784578171091926, 2.757870704384695, 2.151229090418521, 43.99592235450621, 4.386127636357909, 2.1430805030683098E-6, 49.33797966183688, 0.5936222226516417, 0.33701029532515836, 2.7574396735932813, 0.03013724564936416, 32.03858545342554, 57.75504571238356, 0.9730925275788609, 7.392182177599372, 23.703370762162816, 658.3766814646318, 0.8519920051744853, 2.8791963980171147, 3.2414302316024086, 0.0500908991648595, 8.588576789895792E-4, 7.656350565043946, 31024.506061102195, 0.07255819477960328, 0.009235591906389801, 7.75881320194784E-5, 7.3905753051626135, 3.0833022114842317, 0.7421861036584381, 0.01582586865399786, 0.01886812505993012, 2105.814148983483, 0.15565106888338787, 3.6808287156734844E-6, 0.016929898607524883, 0.8044080973834932, 0.001958131760728185, 2.7231866901717116E-5, 0.09878371763451288, 1.6768057454767011, 1.755677670273428E-8, 21.318036784092573, 3.5952716654343955, 8.790875707346041, 1.6436455838217576, 2.418554871906796E-4, 0.9873434257583791, 688.7668528134147, 110831.82632511326, 4539.375798417675, 7.533940311798634E-5, 0.034204307178956235, 1.0265190335039276, 0.8814247287873219, 2906.2424850746706, 2501.6181291389676, 4.559518268603162, 35.99719519950855, 0.025129144573666082, 351.5108768033446, 680808.6456335923, 140.13654058840055, 27.331385629090192, 182.66578770860986, 0.6458992108789594, 0.0013440844900069165, 5968055.856751244, 0.003935943620759617, 2.944521543245563E-5, 0.0010367783178917196, 0.010766333060713316, 0.6060589797653415, 1.0075713279093583, 0.004121650277386547, 0.04946427490162726, 0.0016446056777911697, 3.898699353662423, 0.19105146088255684, 84.55844758595522, 3.4518280237094943, 35.67704560711889, 2.0973499272826013, 0.06058046314548209, 0.09981137584670977, 1.9727738881104098, 0.17975303011193908, 0.9403775020593309, 0.014802445898010256, 0.43722633434724706, 0.08175557164282973, 0.49199938255080655, 1.2738059318813877, 0.0016303084937833645, 0.00865257082939896, 8.69864506852107E-5, 3.6231856252170353E-7, 193.9692026573339, 0.6356538639463759, 1.2827721466536787E-5, 0.04027215685232954, 19.24572604052109, 35.533336450548646, 0.4717011137957115, 2.4939131113384074, 0.6408644632226419, 69.6475845187823, 25.64140319384316, 30.52707071783529, 0.03669920294829546, 0.9329470020921559, 8.846981018581924E-6, 0.0019117622099497848, 8.545323617799598E-4, 4.245595740175898E7, 1.8691917971624947, 5.533144089824058, 0.18385929659453415, 0.43786653438061734, 176.94727504040156, 0.003175132038608258, 0.30424694926677304, 0.2501183840112104, 0.6078862318154733, 56.439454792848316, 0.14657558134479162, 2.3195539572722236E-6, 2.7823946106944604, 4.3468025113268003E-4, 4404.794798599377, 1.176073827154252, 0.16996008067947813, 7.532829790962627, 9.278546351833634E-6, 0.15397903325592863, 0.013145109863581484, 2.28801759329309, 0.6360126946772028, 0.034168586125171985, 0.5302402992847512, 10.078773512947533, 2596.013818501425, 0.0026394471121514596, 611.0145901064486, 6.755183011879591E8, 786462.2327047138, 22.479941708151323, 2.2239719382659247, 0.28194742233783354, 25.111734622146308, 2.040395096151095, 2.0953967741891737, 1.0934667500449222E-4, 43389.62097918986, 0.009213881477808479, 0.18458833947950587, 5.850670650981975E-4, 260.16724364637815, 16.78427102207963, 0.018953983783518355, 0.0034934160605690507, 0.014733920443080436, 35893.13452520672, 1.5009950127384073, 7.504332609857059, 68.14998648651647, 54.47294234181981, 0.06828323162130263, 50.79256278445635, 0.0030479249247619797, 1.1184633805097532, 2.8191993763445797E-6, 5.705704724413226, 2420.2955866896236, 3.210560930988264, 5.6868450078497945, 0.018273616930274114, 3.136374669010427E-6, 0.012251290987405034, 0.014565285993935103, 1.7296144092658048, 7.805295483006437E-4, 267243.4649195983, 108.85757707816688, 0.008739701057385313, 0.18960350087588076, 0.01908242399895101, 0.45326153752444726, 0.003823125826726883, 3.0714111193218696, 151.49989165060458, 0.05606623270285376, 1.3038144279807098, 0.007325991343648126, 7.046503959851082, 140.48209835217756, 1.503410757355792E-5, 8.489271228401142E-4, 1.118141884029123, 2.888391771765304, 8.267437919421873, 89.26647724494224, 161464.7419784465, 2.9040156386607425E-4, 51.40058430557124, 0.006774938536911153, 0.6086851063149746, 0.3951943812904712, 0.07761697509498582, 0.32512378396334113, 1574.8582646111759, 0.5590221390574338, 221.71143560991035, 0.45827403673039324, 916.2344330055004, 1.8742270102752914, 3.5842515092111533, 89.37365748932558, 1401.2105876786532, 1.4152473958138299, 0.14578036761124663, 0.002973316649943954, 0.9665273052601943, 0.03176152406684274, 0.9158855073567008, 0.5735324170087546, 43.818684410886334, 7.2281656594847306, 153.658900281093, 0.007312837921115574, 297.06825738284607, 6.424012367883279, 4.499654056131026, 0.015883569004969067, 3.583478525169911, 431.93524617220436, 0.0011013713968924007, 108.23598889199744, 0.6586970495844207, 0.2642982937530784, 21.568463485639512, 4.481603488157366, 59.774167646758485, 7.076213492952509E-4, 0.0058401654085694435, 309.070911899867, 34.51464171049933, 9.515302969660132E7, 773.1453494380403, 8.490169467667698, 0.057087862013161045, 0.09035774064677532, 791.8555186509594, 547675.4609077179, 0.07524009179290221, 11.659171005486415, 0.7459848782489206, 0.13681719708011897, 0.20268287223096426, 10.114680346789669, 5.238776956533258, 37.27684910752941, 94.06190452416092, 0.2375107968337851, 0.258442940766846, 0.6606008155667071, 0.8560160710516567, 4.718899413082805E11, 9.310067702138271, 0.11078226201753186, 0.9383339526098977, 0.20536792278384858, 0.007454390624453787, 4.845106593375633E-4, 0.13982315624133937, 1.676186707432917E-5, 3.94285296220945E-6, 0.023201480513964413, 0.3207747828920699, 0.029547822098949825, 80.7618175109037, 0.01974960478760211, 0.1380784591865854, 0.008791480118363051, 18.711729527355306, 0.005287144854559956, 0.17041170905827088, 0.02530542913455874, 0.4670248594166569, 0.028779607416401783, 2.6444581233564635, 0.25791143356846324, 1117188.5934315706, 0.44280986845407916, 0.0015478585721102767, 3.431270501742158E-4, 0.0050825742931286345, 28.474907776992954, 18.586982446640768, 0.014407056332207001, 0.04611823521508007, 0.17935168329615392, 106.03834219081178, 0.034859366838732773, 55.19854774391051, 9.934116782868882E-9, 3.908437217081924E-6, 26005.135485730018, 0.001378775072649108, 22.631258752746813, 0.11020491355199619, 2.5965976913558685E-4, 0.008252850389438049, 0.016899590964790732, 1.2149022980410402, 8.36318056129128, 115.66345207744578, 4596.803579443758, 1.0498128431923268, 424.0980823294776, 0.009510558085792155, 0.0951231339576945, 144.40449189620384, 311.6473044735107, 11.154284424648658, 2.0991250965487356, 0.001350714442333424, 9.942348502851612E-5, 193.42083494711628, 120.9055519149588, 0.017899070364418398, 0.031722913001118146, 0.31709961666547987, 17.06795957319597, 0.06813823286540809, 5.130751965317275, 0.0011248685959432197, 0.18829183327524543, 3.68429617738773, 0.35867559760245643, 3.357969062155223E-4, 11.092937925431034, 52.79205737081975, 1.6631911195501045E-4, 1.7397168675778796, 0.11887164222097546, 1.8510543627921108, 40.07649223003057, 340.8801472422134, 2.788065832815461, 4.0511866805309894E-5, 0.7476850063747236, 3.3785085841471703, 536.7850600633311, 4139.820258079341, 0.02732535567328045, 5.033793988360333, 1.4245703620569832E-5}, doubleArray0, 0.01);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.5;
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(double1, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 0.5;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertNotNull(fDistribution0);
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.5, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      
      double double1 = fDistribution0.getSupportLowerBound();
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.5, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(0.0, double1, 0.01D);
      
      FDistribution fDistribution1 = null;
      try {
        fDistribution1 = new FDistribution(double1, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 0.5;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      //  // Unstable assertion: assertNotNull(fDistribution0);
      //  // Unstable assertion: assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      //  // Unstable assertion: assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      //  // Unstable assertion: assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, fDistribution0.isSupportConnected());
      
      double double1 = fDistribution0.calculateNumericalVariance();
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      //  // Unstable assertion: assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      //  // Unstable assertion: assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, fDistribution0.isSupportConnected());
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = fDistribution0.density(double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      //  // Unstable assertion: assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      //  // Unstable assertion: assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, fDistribution0.isSupportConnected());
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 0.5;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertNotNull(fDistribution0);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(0.5, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertFalse(boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 2.3024744987487793;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertNotNull(fDistribution0);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(2.3024744987487793, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(2.3024744987487793, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(7.612127661251547, fDistribution0.getNumericalMean(), 0.01D);
      
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(2.3024744987487793, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(2.3024744987487793, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(7.612127661251547, fDistribution0.getNumericalMean(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 1873.159044455;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertNotNull(fDistribution0);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1873.159044455, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0010688562289383, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1873.159044455, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      
      double double1 = fDistribution0.sample();
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1873.159044455, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0010688562289383, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1873.159044455, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1.0617655147199498, double1, 0.01D);
  }
}
