/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:22:20 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.distribution.UniformRealDistribution;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497b;



import org.junit.runner.RunWith;


public class UniformRealDistributionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = (-1807.06124);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertNotNull(uniformRealDistribution0);
      
      double double1 = uniformRealDistribution0.cumulativeProbability(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      
      UniformRealDistribution uniformRealDistribution1 = new UniformRealDistribution(double0, double1, double0);
      assertFalse(uniformRealDistribution0.equals((Object)uniformRealDistribution1));
      assertFalse(double0 == double1);
      assertFalse(uniformRealDistribution1.equals((Object)uniformRealDistribution0));
      assertFalse(double1 == double0);
      assertNotSame(uniformRealDistribution0, uniformRealDistribution1);
      assertNotSame(uniformRealDistribution1, uniformRealDistribution0);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals((-903.53062), uniformRealDistribution1.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution1.isSupportConnected());
      assertEquals(272122.5270925281, uniformRealDistribution1.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution1.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution1.isSupportUpperBoundInclusive());
      assertEquals((-1807.06124), uniformRealDistribution1.getSupportLowerBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution1.getSupportUpperBound(), 0.01D);
      assertNotNull(uniformRealDistribution1);
      
      double double2 = (-1122.7);
      assertFalse(double2 == double1);
      
      double double3 = uniformRealDistribution1.probability(double2, double1);
      assertFalse(uniformRealDistribution0.equals((Object)uniformRealDistribution1));
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(uniformRealDistribution1.equals((Object)uniformRealDistribution0));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertNotSame(uniformRealDistribution0, uniformRealDistribution1);
      assertNotSame(uniformRealDistribution1, uniformRealDistribution0);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals((-903.53062), uniformRealDistribution1.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution1.isSupportConnected());
      assertEquals(272122.5270925281, uniformRealDistribution1.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution1.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution1.isSupportUpperBoundInclusive());
      assertEquals((-1807.06124), uniformRealDistribution1.getSupportLowerBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution1.getSupportUpperBound(), 0.01D);
      assertEquals(0.6212849764848036, double3, 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertNotNull(uniformRealDistribution0);
      
      double double0 = 3203.1;
      double double1 = uniformRealDistribution0.density(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = (-1807.06124);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertNotNull(uniformRealDistribution0);
      
      double double1 = uniformRealDistribution0.cumulativeProbability(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = uniformRealDistribution0.density(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 0;
      int int1 = (-2249);
      int int2 = (-158);
      intArray0[7] = int2;
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-158), 0, 0}, intArray0);
      assertNotNull(well44497b0);
      
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((RandomGenerator) well44497b0, (double) intArray0[7], (double) intArray0[2], (double) int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((-158.0), uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals((-79.0), uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(2080.3333333333335, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-158), 0, 0}, intArray0);
      assertNotNull(uniformRealDistribution0);
      
      double double0 = uniformRealDistribution0.density((double) int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((-158.0), uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals((-79.0), uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(2080.3333333333335, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, (-158), 0, 0}, intArray0);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = (-1810.5455);
      UniformRealDistribution uniformRealDistribution0 = null;
      try {
        uniformRealDistribution0 = new UniformRealDistribution(double0, double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (-1,810.546) must be strictly less than upper bound (-1,810.546)
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertNotNull(uniformRealDistribution0);
      
      double double0 = uniformRealDistribution0.sample();
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.9026297667469598, double0, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertNotNull(uniformRealDistribution0);
      
      boolean boolean0 = uniformRealDistribution0.isSupportUpperBoundInclusive();
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertTrue(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertNotNull(uniformRealDistribution0);
      
      double double0 = uniformRealDistribution0.getSupportUpperBound();
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertNotNull(uniformRealDistribution0);
      
      boolean boolean0 = uniformRealDistribution0.isSupportConnected();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertNotNull(uniformRealDistribution0);
      
      double double0 = uniformRealDistribution0.getNumericalMean();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.5, double0, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertNotNull(uniformRealDistribution0);
      
      double double0 = uniformRealDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(1.0E-9, double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertNotNull(uniformRealDistribution0);
      
      double double0 = uniformRealDistribution0.getSupportLowerBound();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertNotNull(uniformRealDistribution0);
      
      double double0 = uniformRealDistribution0.getNumericalVariance();
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.08333333333333333, double0, 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertNotNull(uniformRealDistribution0);
      
      boolean boolean0 = uniformRealDistribution0.isSupportLowerBoundInclusive();
      assertEquals(0.08333333333333333, uniformRealDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, uniformRealDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, uniformRealDistribution0.isSupportConnected());
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01D);
      assertTrue(boolean0);
  }
}
