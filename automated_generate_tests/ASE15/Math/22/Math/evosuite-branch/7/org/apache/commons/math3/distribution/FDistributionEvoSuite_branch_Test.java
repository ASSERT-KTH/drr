/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:26:20 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class FDistributionEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 1217.4;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertEquals(1.0016455487905216, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1217.4, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1217.4, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistribution0);
      
      double double1 = fDistribution0.getNumericalVariance();
      assertEquals(1.0016455487905216, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1217.4, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1217.4, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0033046635144262184, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 4.0;
      FDistribution fDistribution0 = new FDistribution(double0, double0, double0);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(4.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(4.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertNotNull(fDistribution0);
      
      double double1 = fDistribution0.sample();
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(4.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(4.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(4.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = 0.0;
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(double0, double1, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 1.0;
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      FDistribution fDistribution0 = new FDistribution((RandomGenerator) well44497a0, double0, double0, double0);
      assertEquals(1.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(1.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistribution0);
      
      double double1 = fDistribution0.getNumeratorDegreesOfFreedom();
      assertEquals(1.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(1.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      FDistribution fDistribution1 = null;
      try {
        fDistribution1 = new FDistribution((RandomGenerator) well44497a0, double2, double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 4.0;
      FDistribution fDistribution0 = new FDistribution(double0, double0, double0);
      assertEquals(4.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(4.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertNotNull(fDistribution0);
      
      double double1 = fDistribution0.density(double0);
      assertEquals(4.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(4.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(0.03839999999999998, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 1217.4;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0016455487905216, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1217.4, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1217.4, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistribution0);
      
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0016455487905216, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1217.4, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1217.4, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 1217.4;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0016455487905216, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1217.4, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(1217.4, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistribution0);
      
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0016455487905216, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1217.4, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(1217.4, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = 1.0;
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      FDistribution fDistribution0 = new FDistribution((RandomGenerator) well44497a0, double0, double0, double0);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertNotNull(fDistribution0);
      
      int int0 = 300;
      double[] doubleArray0 = fDistribution0.sample(int0);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertArrayEquals(new double[] {28.05155432262225, 1.0, 0.5, 100.96426301175114, 2.0, 2523.458341374403, 0.5, 2.0, 0.0, 1.0, 40.48096494091694, 2.0, 4.0, 0.5, 4.0, 0.5, 0.5, 23.101961955699824, 1.0, 0.5, 4.0, 1.0, 4.0, 0.5, 4.0, 0.0, 0.5, 2.0, 0.5, 9.952905552408827, 1.0, 4.0, 0.0, 21.971359909423757, 0.5, 11.705376015489449, 83.09428572429226, 0.0, 10.200005385688058, 1.0, 0.0, 0.5, 0.5, 0.5, 4.0, 4.0, 0.5, 5.00000000000008, 0.5, 0.5, 0.5, 683.0248970918369, 2.0, 0.5, 0.5, 46.82412610985663, 55.02071030439433, 1.0, 1.0, 12.275036106485345, 0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 9.653814064667163, 8.0, 6.99999999999984, 5.174889732488973, 1.0, 6.366825610330519, 0.5, 634.9484937298975, 2.0, 0.5, 0.0, 0.5, 1.0, 0.5, 0.5, 20.89159354425845, 2.0, 0.0, 0.5, 0.5, 0.5, 4.0, 0.0, 2.0, 0.5, 0.0, 0.0, 13.048791970156705, 393.9594835032517, 0.5, 0.0, 1.0, 2.0, 0.5, 0.0, 2.0, 4.0, 4.0, 5.7287892822787825, 0.5, 0.0, 0.5, 0.0, 4.0, 0.5, 2.0, 0.5, 2.0, 9.554150095568152, 5.930581353038472, 0.5, 1.0, 1.0, 0.0, 2.0, 4.0, 0.0, 1972.5322642679926, 9.683748051051206, 0.0, 0.0, 0.0, 0.5, 11.01383715907858, 2.0, 53.62904837837999, 3753.9599996370216, 175.22608828178838, 0.5, 5.022621524364464, 2.0, 1.0, 0.5, 4.0, 130.09275728490437, 0.0, 60.82894226830419, 0.5, 0.5, 1.0, 53.71595708118964, 0.0, 2.0, 1.0, 0.0, 4.0, 2.0, 0.5, 2.0, 0.5, 0.5, 175.88490097919194, 1.0, 4.0, 150.6987007256488, 47.20520927810469, 4.0, 1.0, 0.5, 0.5, 0.5, 169.9669353358781, 0.0, 0.0, 1.0, 328.1616194669685, 0.0, 1.0, 0.5, 194.45127447160976, 4.0, 0.5, 514.2721293922136, 0.0, 4.0, 4.0, 5.00000000000008, 22.17708983142785, 0.5, 0.5, 0.0, 0.0, 1.0, 2.0, 0.0, 2.0, 0.5, 2.0, 2.0, 1.0, 0.5, 6.99999999999984, 9.841569000784128, 0.0, 1.0, 0.5, 0.5, 0.5, 8108.563975487615, 0.5, 18.959722666896468, 22.253914451183164, 4.0, 4.0, 0.5, 91.66186155179028, 1.0, 1.0, 0.5, 0.5, 5238.724501059303, 0.5, 1.0, 4.0, 0.5, 0.0, 0.5, 0.5, 0.5, 9.460503705407355, 0.5, 0.5, 0.0, 0.5, 1.0, 0.0, 228.10701444781418, 1.0, 0.0, 0.5, 0.5, 0.0, 0.5, 0.0, 0.0, 2.0, 0.5, 0.5, 0.5, 1.0, 2.0, 0.0, 9.738484002392875, 0.0, 0.0, 0.0, 14.99999999999968, 0.5, 0.0, 19.229867074270427, 0.0, 0.5, 0.5, 0.0, 6.954205192773051, 0.0, 0.5, 0.0, 2.0, 70.13576177518989, 2.0, 25.127867954993448, 0.0, 70.3505265408467, 0.5, 1.0, 47.35825158381254, 0.0, 0.0, 2.0, 16.0, 0.5, 0.5, 0.5, 2.0, 2.0, 83.1798362208367, 6.99999999999984, 13.821410731840018, 5.767480595901419, 2.0, 0.5, 1.0, 0.5, 2.0, 5.529761183481698, 0.0, 0.5, 6.6471298870895055, 0.5, 14.99999999999968, 0.0, 0.5, 2.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }
}
