/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:39:55 GMT 2014
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.exception.MathInternalError;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;



import org.junit.runner.RunWith;


public class PolygonsSetEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double0, double0, double0);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      
      // Undeclared exception!
      try {
        Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 8.0E298;
      double double1 = (-1117.7);
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double1);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      // Undeclared exception!
      try {
        double double2 = polygonsSet0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 3.4028234663852886E38;
      double double1 = 0.0;
      double double2 = (-2603.3437278782);
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double1, double2);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      assertNotNull(vector2DArray0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 2.0E-10;
      double double1 = 0.0;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double1);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = polygonsSet0.getSize();
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(4.0E-20, double2, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = (-39.79026535796317);
      double double1 = 40.86829638544832;
      double double2 = 1.304E19;
      PolygonsSet polygonsSet0 = new PolygonsSet(double2, double1, double1, double0);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertNotNull(vector0);
      assertEquals(true, vector0.isNaN());
      assertEquals(Double.NaN, vector0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector0.getNormSq(), 0.01D);
      assertEquals(false, vector0.isInfinite());
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = (-3303.906589452458);
      double double1 = 1178.0860846525354;
      PolygonsSet polygonsSet0 = new PolygonsSet(double1, double0, double1, double0);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      polygonsSet0.computeGeometricalProperties();
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      assertNotNull(vector2DArray0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<SubLine> linkedList0 = new LinkedList<SubLine>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Vector2D vector2D0 = Vector2D.NaN;
      assertNotNull(vector2D0);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertNotNull(subLine0);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      
      boolean boolean0 = linkedList0.add(subLine0);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      LinkedList<SubHyperplane<Euclidean2D>> linkedList1 = new LinkedList<SubHyperplane<Euclidean2D>>((Collection<? extends SubHyperplane<Euclidean2D>>) linkedList0);
      assertNotNull(linkedList1);
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList0.size());
      
      PolygonsSet polygonsSet0 = new PolygonsSet((Collection<SubHyperplane<Euclidean2D>>) linkedList1);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList0.size());
      
      polygonsSet0.computeGeometricalProperties();
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      PolygonsSet polygonsSet0 = new PolygonsSet((Collection<SubHyperplane<Euclidean2D>>) linkedList0);
      assertNotNull(polygonsSet0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, polygonsSet0.isEmpty());
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>((Object) boolean0);
      assertNotNull(bSPTree0);
      
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree0);
      assertNotNull(polygonsSet1);
      assertEquals(true, polygonsSet1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(polygonsSet1.equals((Object)polygonsSet0));
      assertFalse(polygonsSet0.equals((Object)polygonsSet1));
      assertNotSame(polygonsSet1, polygonsSet0);
      assertNotSame(polygonsSet0, polygonsSet1);
      
      polygonsSet1.computeGeometricalProperties();
      assertEquals(true, polygonsSet1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(polygonsSet1.equals((Object)polygonsSet0));
      assertFalse(polygonsSet0.equals((Object)polygonsSet1));
      assertNotSame(polygonsSet1, polygonsSet0);
      assertNotSame(polygonsSet0, polygonsSet1);
  }

  @Test
  public void test8()  throws Throwable  {
      double double0 = (-39.79026535796317);
      double double1 = 40.86829638544832;
      double double2 = 1.304E19;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double2);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertNotNull(vector0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(0.0, vector0.getNormInf(), 0.01D);
      assertEquals(false, vector0.isNaN());
      assertEquals(0.0, vector0.getNorm1(), 0.01D);
      assertEquals(0.0, vector0.getNormSq(), 0.01D);
      assertEquals(0.0, vector0.getNorm(), 0.01D);
      assertEquals(false, vector0.isInfinite());
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test9()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      PolygonsSet polygonsSet0 = new PolygonsSet((Collection<SubHyperplane<Euclidean2D>>) linkedList0);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      polygonsSet0.computeGeometricalProperties();
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }
}
