/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:50:19 GMT 2014
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.exception.MathInternalError;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class PolygonsSetEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = (-2322.2005570929855);
      double double1 = (-2230.716017278315);
      double double2 = 3.4028234663852886E38;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      boolean boolean0 = true;
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(boolean0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.getMinus();
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(bSPTree1);
      
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertNotNull(subLine0);
      
      BSPTree<Euclidean2D> bSPTree2 = bSPTree1.split((SubHyperplane<Euclidean2D>) subLine0);
      assertNotSame(bSPTree2, bSPTree0);
      assertNotSame(bSPTree2, bSPTree1);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree0, bSPTree2);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotSame(bSPTree1, bSPTree2);
      assertFalse(bSPTree2.equals((Object)bSPTree0));
      assertFalse(bSPTree2.equals((Object)bSPTree1));
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree0.equals((Object)bSPTree2));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(bSPTree1.equals((Object)bSPTree2));
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(bSPTree2);
      
      line0.setAngle(double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree2);
      assertNotSame(bSPTree2, bSPTree0);
      assertNotSame(bSPTree2, bSPTree1);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree0, bSPTree2);
      assertNotSame(polygonsSet1, polygonsSet0);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotSame(bSPTree1, bSPTree2);
      assertNotSame(polygonsSet0, polygonsSet1);
      assertFalse(bSPTree2.equals((Object)bSPTree0));
      assertFalse(bSPTree2.equals((Object)bSPTree1));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree0.equals((Object)bSPTree2));
      assertFalse(polygonsSet1.equals((Object)polygonsSet0));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(bSPTree1.equals((Object)bSPTree2));
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(polygonsSet0.equals((Object)polygonsSet1));
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(false, polygonsSet1.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet1);
      
      polygonsSet1.computeGeometricalProperties();
      assertNotSame(bSPTree2, bSPTree0);
      assertNotSame(bSPTree2, bSPTree1);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree0, bSPTree2);
      assertNotSame(polygonsSet1, polygonsSet0);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotSame(bSPTree1, bSPTree2);
      assertNotSame(polygonsSet0, polygonsSet1);
      assertFalse(bSPTree2.equals((Object)bSPTree0));
      assertFalse(bSPTree2.equals((Object)bSPTree1));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree0.equals((Object)bSPTree2));
      assertFalse(polygonsSet1.equals((Object)polygonsSet0));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(bSPTree1.equals((Object)bSPTree2));
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(polygonsSet0.equals((Object)polygonsSet1));
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(false, polygonsSet1.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(false, polygonsSet0.isEmpty());
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = Double.NaN;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double0, double0, double0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      // Undeclared exception!
      try {
        polygonsSet0.computeGeometricalProperties();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = (-2320.6674290937626);
      double double1 = 3.4028234663852886E38;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      boolean boolean0 = true;
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(boolean0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(bSPTree0);
      
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(subLine0);
      
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.split((SubHyperplane<Euclidean2D>) subLine0);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotSame(bSPTree0, bSPTree1);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(bSPTree1);
      
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotSame(polygonsSet0, polygonsSet1);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(polygonsSet1, polygonsSet0);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(polygonsSet0.equals((Object)polygonsSet1));
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(double1 == double0);
      assertFalse(polygonsSet1.equals((Object)polygonsSet0));
      assertFalse(double0 == double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(false, polygonsSet1.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(polygonsSet1);
      
      Vector<Euclidean2D> vector0 = polygonsSet1.getBarycenter();
      assertNotSame(bSPTree1, bSPTree0);
      assertNotSame(polygonsSet0, polygonsSet1);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(polygonsSet1, polygonsSet0);
      assertNotSame(vector2D0, vector0);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(polygonsSet0.equals((Object)polygonsSet1));
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(double1 == double0);
      assertFalse(polygonsSet1.equals((Object)polygonsSet0));
      assertFalse(double0 == double1);
      assertFalse(vector2D0.equals((Object)vector0));
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(false, vector0.isInfinite());
      assertEquals(0.0, vector0.getNorm(), 0.01D);
      assertEquals(0.0, vector0.getNorm1(), 0.01D);
      assertEquals(0.0, vector0.getNormSq(), 0.01D);
      assertEquals(false, vector0.isNaN());
      assertEquals(0.0, vector0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(false, polygonsSet1.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(vector0);
  }

  @Test
  public void test3()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      double double0 = polygonsSet0.getSize();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertEquals(false, polygonsSet0.isEmpty());
      
      polygonsSet0.computeGeometricalProperties();
      assertEquals(false, polygonsSet0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 3.4028234663852886E38;
      double double1 = (-328.0155657758863);
      double double2 = 1300.6196200399395;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double2, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      polygonsSet0.computeGeometricalProperties();
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(false, polygonsSet0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PolygonsSet polygonsSet0 = new PolygonsSet((Collection<SubHyperplane<Euclidean2D>>) linkedList0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(polygonsSet0);
      
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>((Object) boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(bSPTree0);
      
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree0);
      assertNotSame(polygonsSet0, polygonsSet1);
      assertNotSame(polygonsSet1, polygonsSet0);
      assertFalse(polygonsSet0.equals((Object)polygonsSet1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(polygonsSet1.equals((Object)polygonsSet0));
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(true, polygonsSet1.isEmpty());
      assertNotNull(polygonsSet1);
      
      Vector<Euclidean2D> vector0 = polygonsSet1.getBarycenter();
      assertNotSame(polygonsSet0, polygonsSet1);
      assertNotSame(polygonsSet1, polygonsSet0);
      assertFalse(polygonsSet0.equals((Object)polygonsSet1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(polygonsSet1.equals((Object)polygonsSet0));
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, vector0.isNaN());
      assertEquals(0.0, vector0.getNormSq(), 0.01D);
      assertEquals(0.0, vector0.getNormInf(), 0.01D);
      assertEquals(0.0, vector0.getNorm(), 0.01D);
      assertEquals(false, vector0.isInfinite());
      assertEquals(0.0, vector0.getNorm1(), 0.01D);
      assertEquals(true, polygonsSet1.isEmpty());
      assertNotNull(vector0);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-38.9);
      double double2 = (-121.6304417953856);
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double1, double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(false, vector0.isInfinite());
      assertEquals(false, vector0.isNaN());
      assertEquals(80.2652208976928, vector0.getNormInf(), 0.01D);
      assertEquals(82.58818429869628, vector0.getNorm(), 0.01D);
      assertEquals(99.7152208976928, vector0.getNorm1(), 0.01D);
      assertEquals(6820.808185755422, vector0.getNormSq(), 0.01D);
      assertNotNull(vector0);
  }
}
