/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:14:37 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.function.Sqrt;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.exception.NoBracketingException;
import org.apache.commons.math.exception.NumberIsTooSmallException;



import org.junit.runner.RunWith;


public class BracketingNthOrderBrentSolverEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      
      Sinh sinh0 = new Sinh();
      assertNotNull(sinh0);
      
      double double0 = (-552.189);
      int int0 = 613;
      double double1 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sinh0, double0, (double) int0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(30.40549999999996, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals((-552.189), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(613, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(20, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(613.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test01()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      
      double double0 = bracketingNthOrderBrentSolver0.getStartValue();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 31;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) tanh0, double0, (double) int0, allowedSolution0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(2, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(15.5, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(31.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(31, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = (-779.5106872151171);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) tanh0, double2, (double) int0);
      assertEquals((-1.8033224913338586E-10), double3, 0.01D);
      assertEquals((-374.25534360755853), bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(31.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(15, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(31, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-779.5106872151171), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
  }

  @Test
  public void test02()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 2336;
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      double double0 = (-1096.749972);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double1 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) cos0, double0, (double) int0, allowedSolution0);
      assertEquals(1939.9334635895111, double1, 0.01D);
      assertEquals(2336.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals((-1096.749972), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(2336, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(16, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(619.625014, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 2190;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      int int1 = 2333;
      double double0 = 2500.102087437289;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = bracketingNthOrderBrentSolver0.solve(int1, (UnivariateFunction) cos0, (double) int0, double0, (double) int1, allowedSolution0);
      assertEquals(2335.774138624509, double1, 0.01D);
      assertEquals(2190.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(2333, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(2333.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(22, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2500.102087437289, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 2190;
      int int1 = 0;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) cos0, (double) int1, (double) int0, allowedSolution0);
      assertEquals(1094.84503977544, double0, 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1095.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(2190.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(2190, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(11, bracketingNthOrderBrentSolver0.getEvaluations());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 2149.972951271116;
      int int0 = 794;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double0, double1, int0);
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2149.972951271116, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(794, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int1 = 2111;
      boolean boolean0 = true;
      Sinc sinc0 = new Sinc(boolean0);
      assertNotNull(sinc0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = bracketingNthOrderBrentSolver0.solve(int1, (UnivariateFunction) sinc0, (double) int0, (double) int1, allowedSolution0);
      assertEquals(1452.5, double2, 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2149.972951271116, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(794.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1452.5, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(2111.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(794, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(2111, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertFalse(int0 == int1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test06()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      
      Sqrt sqrt0 = new Sqrt();
      assertNotNull(sqrt0);
      
      int int0 = 3;
      // Undeclared exception!
      try {
        double double0 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sqrt0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [\uFFFD, \uFFFD]
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      
      double double0 = bracketingNthOrderBrentSolver0.getStartValue();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      
      int int0 = 31;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      UnivariateFunction univariateFunction0 = tanh0.derivative();
      assertNotNull(univariateFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = bracketingNthOrderBrentSolver0.solve(int0, univariateFunction0, double0, (double) int0, allowedSolution0);
      assertEquals(31.0, double1, 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(3, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(31.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(31, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(15.5, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test08()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 1222;
      Expm1 expm1_0 = new Expm1();
      assertNotNull(expm1_0);
      
      int int1 = bracketingNthOrderBrentSolver0.getMaximalOrder();
      assertEquals(5, int1);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(int1 == int0);
      
      double double0 = (-663.34685698);
      double double1 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) expm1_0, double0, (double) int1);
      assertEquals(2.5568700878775275E-8, double1, 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals((-663.34685698), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1222, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals((-329.17342849), bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(22, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test09()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      
      int int0 = 1222;
      Expm1 expm1_0 = new Expm1();
      assertNotNull(expm1_0);
      
      double double0 = 0.0;
      double double1 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) expm1_0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(1222, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(Double.NaN, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(Double.NaN, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 2190;
      int int1 = 0;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((double) int0, (double) int0, (double) int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (2)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 2190;
      int int1 = 0;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) cos0, (double) int1, (double) int0, allowedSolution0);
      assertEquals(1094.8450397760807, double0, 0.01D);
      assertEquals(2190, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(11, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1095.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(2190.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver1 = null;
      try {
        bracketingNthOrderBrentSolver1 = new BracketingNthOrderBrentSolver((double) int1, double0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (2)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 2211;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      double double0 = (-583.2410632491107);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) cos0, double0, (double) int0, allowedSolution0);
      assertEquals(190.0663555421712, double1, 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(2211.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(813.8794683754446, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(2211, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(14, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals((-583.2410632491107), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver1 = new BracketingNthOrderBrentSolver(double0, double1, int0);
      assertNotNull(bracketingNthOrderBrentSolver1);
      assertNotSame(bracketingNthOrderBrentSolver1, bracketingNthOrderBrentSolver0);
      assertNotSame(bracketingNthOrderBrentSolver0, bracketingNthOrderBrentSolver1);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver1.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver1.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver1.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver1.getMin(), 0.01D);
      assertEquals((-583.2410632491107), bracketingNthOrderBrentSolver1.getRelativeAccuracy(), 0.01D);
      assertEquals(2211, bracketingNthOrderBrentSolver1.getMaximalOrder());
      assertEquals(0, bracketingNthOrderBrentSolver1.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver1.getStartValue(), 0.01D);
      assertEquals(190.0663555421712, bracketingNthOrderBrentSolver1.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(2211.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(813.8794683754446, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(2211, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(14, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals((-583.2410632491107), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertFalse(bracketingNthOrderBrentSolver1.equals((Object)bracketingNthOrderBrentSolver0));
      assertFalse(bracketingNthOrderBrentSolver0.equals((Object)bracketingNthOrderBrentSolver1));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 2211;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      double double0 = (-583.2410632491107);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) cos0, double0, (double) int0, allowedSolution0);
      assertEquals(190.0663555421712, double1, 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-583.2410632491107), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2211.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(14, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(813.8794683754446, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(2211, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int1 = (-7);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver1 = null;
      try {
        bracketingNthOrderBrentSolver1 = new BracketingNthOrderBrentSolver(double1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -7 is smaller than the minimum (2)
         //
      }
  }
}
