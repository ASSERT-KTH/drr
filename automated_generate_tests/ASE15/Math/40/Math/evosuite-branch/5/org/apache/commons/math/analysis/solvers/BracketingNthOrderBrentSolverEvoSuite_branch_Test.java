/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:25:01 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.exception.NoBracketingException;
import org.apache.commons.math.exception.NumberIsTooSmallException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BracketingNthOrderBrentSolverEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 717.6581307123081;
      int int0 = 5;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, int0);
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(717.6581307123081, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      
      double double1 = (-1.0);
      Minus minus0 = new Minus();
      assertNotNull(minus0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) minus0, double1, (double) int0, allowedSolution0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-1.0), double2, 0.01D);
      assertEquals(5.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(2, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(2.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals((-1.0), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(717.6581307123081, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 731.147404;
      int int0 = 25;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, int0);
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(731.147404, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(25, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      
      double double1 = (-169.3445484910266);
      Minus minus0 = new Minus();
      assertNotNull(minus0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) minus0, double1, (double) int0, allowedSolution0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(25.0, double2, 0.01D);
      assertEquals(731.147404, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-169.3445484910266), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(25, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(25, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(25.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals((-72.1722742455133), bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      
      int int0 = 1948;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[3] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {1948.0, 0.0, 0.0, 1948.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(3, polynomialFunction0.degree());
      
      double double0 = (-992.7946866);
      double double1 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) polynomialFunction0, double0, doubleArray0[0]);
      assertArrayEquals(new double[] {1948.0, 0.0, 0.0, 1948.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0000000281236925), double1, 0.01D);
      assertEquals(29, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1948.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(477.6026567000001, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1948, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals((-992.7946866), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(3, polynomialFunction0.degree());
      
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double2 = 668.389953115;
      assertFalse(double2 == double1);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) atan0, double1, (double) int0, double2, allowedSolution0);
      assertArrayEquals(new double[] {1948.0, 0.0, 0.0, 1948.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertEquals(2.2143398226148747E-13, double3, 0.01D);
      assertEquals(1948.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.0000000281236925), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1948, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(13, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(668.389953115, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(3, polynomialFunction0.degree());
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 700.3711971430142;
      int int0 = 12;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, int0);
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(700.3711971430142, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(12, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      
      double double1 = (-5.666070806327792);
      Minus minus0 = new Minus();
      assertNotNull(minus0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) minus0, double1, double0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(347.3525631683432, double2, 0.01D);
      assertEquals(700.3711971430142, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(700.3711971430142, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(12, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(347.3525631683432, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(12, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-5.666070806327792), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(2, bracketingNthOrderBrentSolver0.getEvaluations());
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = (-0.10610100919220451);
      int int0 = 1147;
      double double1 = (-1974.9279039174);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double1, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals((-1974.9279039174), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1147, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals((-0.10610100919220451), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int1 = 2528;
      Sinh sinh0 = new Sinh();
      assertNotNull(sinh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = bracketingNthOrderBrentSolver0.solve(int1, (UnivariateFunction) sinh0, double1, (double) int1, allowedSolution0);
      assertFalse(int0 == int1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(int1 == int0);
      assertEquals((-3.469446951953614E-18), double2, 0.01D);
      assertEquals(2528, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals((-1974.9279039174), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(276.53604804129986, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals((-1974.9279039174), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1147, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(25, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals((-0.10610100919220451), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2528.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 1212;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((double) int0, int0);
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1212.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1212, bracketingNthOrderBrentSolver0.getMaximalOrder());
      
      Sinh sinh0 = new Sinh();
      assertNotNull(sinh0);
      
      // Undeclared exception!
      try {
        double double0 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sinh0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [\uFFFD, \uFFFD]
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 16.527731457370905;
      int int0 = 2851;
      double double1 = (-1991.0441676632104);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double1, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(16.527731457370905, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(2851, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals((-1991.0441676632104), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      
      Sinh sinh0 = new Sinh();
      assertNotNull(sinh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sinh0, double1, (double) int0, allowedSolution0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals((-1991.0441676632104), double2, 0.01D);
      assertEquals(2851, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(429.97791616839504, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(2, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(16.527731457370905, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2851.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(2851, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals((-1991.0441676632104), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1991.0441676632104), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      
      double double3 = 0.0;
      assertFalse(double3 == double2);
      
      double double4 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sinh0, double2, double3, allowedSolution0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertTrue(double1 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertTrue(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double4 == double0);
      assertTrue(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertTrue(double2 == double1);
      assertEquals(0.0, double4, 0.01D);
      assertEquals(2851, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-995.5220838316052), bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(3, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(16.527731457370905, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2851, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals((-1991.0441676632104), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1991.0441676632104), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 3054.6416563226744;
      int int0 = 16;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, (double) int0, double0, int0);
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(3054.6416563226744, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(16, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(3054.6416563226744, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(16.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      
      Identity identity0 = new Identity();
      assertNotNull(identity0);
      
      double double1 = (-1660.0);
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) identity0, double1, (double) int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(16.0, double2, 0.01D);
      assertEquals(3, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(16.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(3054.6416563226744, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-822.0), bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(16, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals((-1660.0), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(3054.6416563226744, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(16, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(16.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 1.3117850277833614;
      int int0 = 9;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, (double) int0, (double) int0, int0);
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(1.3117850277833614, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(9, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(9.0, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(9.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      
      Identity identity0 = new Identity();
      assertNotNull(identity0);
      
      double double1 = 0.0;
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) identity0, double1, (double) int0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(9, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(2, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(1.3117850277833614, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(9, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(4.5, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(9.0, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(9.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(9.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-0.3302813724148563);
      int int0 = 642;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, int0);
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-0.3302813724148563), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(642, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      
      Ceil ceil0 = new Ceil();
      assertNotNull(ceil0);
      
      double double1 = (-1751.2289063306557);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double2 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) ceil0, double1, (double) int0, double0, allowedSolution0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertEquals((-0.3302813724148563), double2, 0.01D);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(642, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals((-0.3302813724148563), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1751.2289063306557), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals((-0.3302813724148563), bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(642, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(642.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 1.3117850277833614;
      int int0 = 9;
      int int1 = 0;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((double) int0, (double) int0, double0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (2)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = Double.NaN;
      int int0 = (-2559);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,559 is smaller than the minimum (2)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 642;
      int int1 = 0;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((double) int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (2)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-0.10610100919220451);
      int int0 = 1147;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, double0, int0);
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(1147, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-0.10610100919220451), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals((-0.10610100919220451), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      
      Sinh sinh0 = new Sinh();
      assertNotNull(sinh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = bracketingNthOrderBrentSolver0.solve(int0, (UnivariateFunction) sinh0, double0, (double) int0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(1147, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(1147.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(573.4469494954038, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(1147, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-0.10610100919220451), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(17, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals((-0.10610100919220451), bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals((-0.10610100919220451), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = 3054.6416563226744;
      int int0 = 16;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(double0, (double) int0, double0, int0);
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(3054.6416563226744, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(16.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(3054.6416563226744, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(16, bracketingNthOrderBrentSolver0.getMaximalOrder());
      
      int int1 = bracketingNthOrderBrentSolver0.getMaximalOrder();
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(16, int1);
      assertEquals(3054.6416563226744, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getEvaluations());
      assertEquals(16.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01D);
      assertEquals(3054.6416563226744, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01D);
      assertEquals(0, bracketingNthOrderBrentSolver0.getMaxEvaluations());
      assertEquals(16, bracketingNthOrderBrentSolver0.getMaximalOrder());
  }
}
