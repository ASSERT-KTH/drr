/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:30:23 GMT 2014
 */

package org.apache.commons.math3.fraction;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.apache.commons.math3.fraction.FractionField;



import org.junit.runner.RunWith;


public class FractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(string0);
      assertEquals("2", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 754.690154389093;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(754, fraction0.intValue());
      assertEquals(75469.01544401544, fraction0.percentageValue(), 0.01D);
      assertEquals(754.6901F, fraction0.floatValue(), 0.01F);
      assertEquals(-14, fraction0.byteValue());
      assertEquals(754, fraction0.shortValue());
      assertEquals(781859, fraction0.getNumerator());
      assertEquals(754.6901544401544, fraction0.doubleValue(), 0.01D);
      assertEquals(754L, fraction0.longValue());
      assertEquals(1036, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals(754, fraction0.intValue());
      assertEquals(75469.01544401544, fraction0.percentageValue(), 0.01D);
      assertEquals(754.6901F, fraction0.floatValue(), 0.01F);
      assertEquals(-14, fraction0.byteValue());
      assertEquals(754, fraction0.shortValue());
      assertEquals(781859, fraction0.getNumerator());
      assertEquals(754.6901544401544, fraction0.doubleValue(), 0.01D);
      assertEquals(754L, fraction0.longValue());
      assertEquals(1036, fraction0.getDenominator());
      assertNotNull(string0);
      assertEquals("781859 / 1036", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-1907);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,907, cannot negate
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 41;
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 41/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      int int1 = (-120);
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
  }

  @Test
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      short short0 = fraction0.shortValue();
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, short0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getReducedFraction((int) short0, (int) short0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 443;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(443, fraction0.shortValue());
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443, fraction0.getNumerator());
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(443, fraction0.intValue());
      assertEquals(443L, fraction0.longValue());
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(25.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction0, fraction2);
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(25.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction2);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.multiply(int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.divide(fraction0);
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertNotNull(fraction2);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 12;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(12, fraction0.intValue());
      assertEquals(12.0F, fraction0.floatValue(), 0.01F);
      assertEquals(12.0, fraction0.doubleValue(), 0.01D);
      assertEquals(12L, fraction0.longValue());
      assertEquals(12, fraction0.shortValue());
      assertEquals(12, fraction0.byteValue());
      assertEquals(1200.0, fraction0.percentageValue(), 0.01D);
      assertEquals(12, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 623.740297;
      double double1 = 0.0;
      int int0 = 102;
      Fraction fraction0 = new Fraction(double0, double1, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(623L, fraction0.longValue());
      assertEquals(623, fraction0.intValue());
      assertEquals(623740297, fraction0.getNumerator());
      assertEquals(1000000, fraction0.getDenominator());
      assertEquals(623.7403F, fraction0.floatValue(), 0.01F);
      assertEquals(111, fraction0.byteValue());
      assertEquals(623.740297, fraction0.doubleValue(), 0.01D);
      assertEquals(623, fraction0.shortValue());
      assertEquals(62374.02970000001, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.divide(int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(623L, fraction0.longValue());
      assertEquals(623, fraction0.intValue());
      assertEquals(623740297, fraction0.getNumerator());
      assertEquals(1000000, fraction0.getDenominator());
      assertEquals(623.7403F, fraction0.floatValue(), 0.01F);
      assertEquals(111, fraction0.byteValue());
      assertEquals(623.740297, fraction0.doubleValue(), 0.01D);
      assertEquals(623, fraction0.shortValue());
      assertEquals(62374.02970000001, fraction0.percentageValue(), 0.01D);
      assertEquals(611.5100950980392, fraction1.percentageValue(), 0.01D);
      assertEquals(6.115101F, fraction1.floatValue(), 0.01F);
      assertEquals(102000000, fraction1.getDenominator());
      assertEquals(6, fraction1.intValue());
      assertEquals(6, fraction1.shortValue());
      assertEquals(6, fraction1.byteValue());
      assertEquals(6.115100950980392, fraction1.doubleValue(), 0.01D);
      assertEquals(6L, fraction1.longValue());
      assertEquals(623740297, fraction1.getNumerator());
      assertNotNull(fraction1);
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 64,245,250,591
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = 754.690154389093;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(754, fraction0.intValue());
      assertEquals(-14, fraction0.byteValue());
      assertEquals(754.6901F, fraction0.floatValue(), 0.01F);
      assertEquals(75469.01544401544, fraction0.percentageValue(), 0.01D);
      assertEquals(781859, fraction0.getNumerator());
      assertEquals(1036, fraction0.getDenominator());
      assertEquals(754L, fraction0.longValue());
      assertEquals(754, fraction0.shortValue());
      assertEquals(754.6901544401544, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(754, fraction0.intValue());
      assertEquals(-14, fraction0.byteValue());
      assertEquals(754.6901F, fraction0.floatValue(), 0.01F);
      assertEquals(75469.01544401544, fraction0.percentageValue(), 0.01D);
      assertEquals(781859, fraction0.getNumerator());
      assertEquals(1036, fraction0.getDenominator());
      assertEquals(754L, fraction0.longValue());
      assertEquals(754, fraction0.shortValue());
      assertEquals(754.6901544401544, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertNotNull(fraction1);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 443;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(443, fraction0.getNumerator());
      assertEquals(443L, fraction0.longValue());
      assertEquals(-69, fraction0.byteValue());
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(443, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(886.0, fraction1.doubleValue(), 0.01D);
      assertEquals(118, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(88600.0, fraction1.percentageValue(), 0.01D);
      assertEquals(886, fraction1.intValue());
      assertEquals(886, fraction1.shortValue());
      assertEquals(886, fraction1.getNumerator());
      assertEquals(886.0F, fraction1.floatValue(), 0.01F);
      assertEquals(886L, fraction1.longValue());
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(443, fraction0.getNumerator());
      assertEquals(443L, fraction0.longValue());
      assertEquals(-69, fraction0.byteValue());
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(443, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443, fraction0.intValue());
      assertNotNull(fraction1);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 443;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(443, fraction0.intValue());
      assertEquals(443L, fraction0.longValue());
      assertEquals(443, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(-69, fraction0.byteValue());
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(443, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(443, fraction0.intValue());
      assertEquals(443L, fraction0.longValue());
      assertEquals(443, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(-69, fraction0.byteValue());
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(443, fraction0.getNumerator());
      assertNotNull(fraction1);
  }

  @Test
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(25.0, fraction1.percentageValue(), 0.01D);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertEquals(4, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(25.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0.25, fraction2.doubleValue(), 0.01D);
      assertEquals(0.25F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(25.0, fraction1.percentageValue(), 0.01D);
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction2);
  }

  @Test
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.add(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = new Fraction((double) int0);
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(-2147483648, fraction0.intValue());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(-2147483648, fraction0.getNumerator());
      assertEquals((-2.147483648E11), fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      short short0 = fraction0.shortValue();
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals((short)0, short0);
      
      Fraction fraction1 = fraction0.add((int) short0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(50.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction1);
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(50.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertTrue(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(50.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(50.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = (-14);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-14), (int)integer0);
      
      boolean boolean0 = fraction0.equals((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 443;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(443, fraction0.getNumerator());
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(443, fraction0.intValue());
      assertEquals(443, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int1 = fraction0.getDenominator();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(443, fraction0.getNumerator());
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(443, fraction0.intValue());
      assertEquals(443, fraction0.shortValue());
      assertEquals(1, int1);
      
      Fraction fraction1 = new Fraction(int1);
      assertFalse(int1 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(443, fraction0.getNumerator());
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(443, fraction0.intValue());
      assertEquals(443, fraction0.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertFalse(int1 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(443, fraction0.getNumerator());
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(443, fraction0.intValue());
      assertEquals(443, fraction0.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 443;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443L, fraction0.longValue());
      assertEquals(443, fraction0.shortValue());
      assertEquals(443, fraction0.intValue());
      assertEquals(443, fraction0.getNumerator());
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int1 = fraction0.getDenominator();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443L, fraction0.longValue());
      assertEquals(443, fraction0.shortValue());
      assertEquals(443, fraction0.intValue());
      assertEquals(443, fraction0.getNumerator());
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, int1);
      
      Fraction fraction1 = new Fraction(int1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443L, fraction0.longValue());
      assertEquals(443, fraction0.shortValue());
      assertEquals(443, fraction0.intValue());
      assertEquals(443, fraction0.getNumerator());
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      
      int int2 = fraction0.compareTo(fraction1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443L, fraction0.longValue());
      assertEquals(443, fraction0.shortValue());
      assertEquals(443, fraction0.intValue());
      assertEquals(443, fraction0.getNumerator());
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, int2);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 0;
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.multiply(int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction1);
      
      int int1 = fraction1.compareTo(fraction0);
      assertFalse(int0 == int1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals((-1), int1);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 443;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(443, fraction0.intValue());
      assertEquals(443L, fraction0.longValue());
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(443, fraction0.shortValue());
      assertEquals(443, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int1 = fraction0.compareTo(fraction0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(443, fraction0.intValue());
      assertEquals(443L, fraction0.longValue());
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(443, fraction0.shortValue());
      assertEquals(443, fraction0.getNumerator());
      assertEquals(0, int1);
  }

  @Test
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(50.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertNotNull(fraction1);
  }

  @Test
  public void test27()  throws Throwable  {
      double double0 = 754.690154389093;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(754, fraction0.intValue());
      assertEquals(754.6901F, fraction0.floatValue(), 0.01F);
      assertEquals(75469.01544401544, fraction0.percentageValue(), 0.01D);
      assertEquals(754.6901544401544, fraction0.doubleValue(), 0.01D);
      assertEquals(754, fraction0.shortValue());
      assertEquals(-14, fraction0.byteValue());
      assertEquals(754L, fraction0.longValue());
      assertEquals(1036, fraction0.getDenominator());
      assertEquals(781859, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = (-1954);
      Fraction fraction1 = fraction0.multiply(int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(-763876243, fraction1.getNumerator());
      assertEquals((-1.4746645617760617E8), fraction1.percentageValue(), 0.01D);
      assertEquals((-1474664.5F), fraction1.floatValue(), 0.01F);
      assertEquals((-1474664L), fraction1.longValue());
      assertEquals(-104, fraction1.byteValue());
      assertEquals(-1474664, fraction1.intValue());
      assertEquals((-1474664.5617760618), fraction1.doubleValue(), 0.01D);
      assertEquals(518, fraction1.getDenominator());
      assertEquals(32664, fraction1.shortValue());
      assertEquals(754, fraction0.intValue());
      assertEquals(754.6901F, fraction0.floatValue(), 0.01F);
      assertEquals(75469.01544401544, fraction0.percentageValue(), 0.01D);
      assertEquals(754.6901544401544, fraction0.doubleValue(), 0.01D);
      assertEquals(754, fraction0.shortValue());
      assertEquals(-14, fraction0.byteValue());
      assertEquals(754L, fraction0.longValue());
      assertEquals(1036, fraction0.getDenominator());
      assertEquals(781859, fraction0.getNumerator());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.abs();
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertEquals(-763876243, fraction1.getNumerator());
      assertEquals((-1.4746645617760617E8), fraction1.percentageValue(), 0.01D);
      assertEquals((-1474664.5F), fraction1.floatValue(), 0.01F);
      assertEquals((-1474664L), fraction1.longValue());
      assertEquals(-104, fraction1.byteValue());
      assertEquals(-1474664, fraction1.intValue());
      assertEquals((-1474664.5617760618), fraction1.doubleValue(), 0.01D);
      assertEquals(518, fraction1.getDenominator());
      assertEquals(32664, fraction1.shortValue());
      assertEquals(1.4746645617760617E8, fraction2.percentageValue(), 0.01D);
      assertEquals(-32664, fraction2.shortValue());
      assertEquals(1474664.5F, fraction2.floatValue(), 0.01F);
      assertEquals(763876243, fraction2.getNumerator());
      assertEquals(518, fraction2.getDenominator());
      assertEquals(104, fraction2.byteValue());
      assertEquals(1474664L, fraction2.longValue());
      assertEquals(1474664.5617760618, fraction2.doubleValue(), 0.01D);
      assertEquals(1474664, fraction2.intValue());
      assertEquals(754, fraction0.intValue());
      assertEquals(754.6901F, fraction0.floatValue(), 0.01F);
      assertEquals(75469.01544401544, fraction0.percentageValue(), 0.01D);
      assertEquals(754.6901544401544, fraction0.doubleValue(), 0.01D);
      assertEquals(754, fraction0.shortValue());
      assertEquals(-14, fraction0.byteValue());
      assertEquals(754L, fraction0.longValue());
      assertEquals(1036, fraction0.getDenominator());
      assertEquals(781859, fraction0.getNumerator());
      assertNotNull(fraction2);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = (-1022);
      int int1 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -1,022/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = (-3158);
      Fraction fraction1 = fraction0.divide(int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals((-2.3749208359721342E-4), fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(12632, fraction1.getDenominator());
      assertEquals(-3, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals((-0.02374920835972134), fraction1.percentageValue(), 0.01D);
      assertEquals((-2.3749209E-4F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertNotNull(fraction1);
  }

  @Test
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals((byte)0, byte0);
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((int) byte0, (int) byte0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = (-54.50276444922405);
      int int0 = (-3151);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -54.503 to fraction after -3,151 iterations
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      short short0 = fraction0.shortValue();
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(200.0, fraction0.percentageValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((short)2, short0);
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) short0, (int) short0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2 to fraction (-1/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) int0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (2,147,483,649/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      double double0 = 1.6331239353195332E16;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 16,331,239,353,195,332 to fraction (16,331,239,353,195,332/1)
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertNotNull(fraction1);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 443;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(443, fraction0.intValue());
      assertEquals(443, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443, fraction0.shortValue());
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443L, fraction0.longValue());
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int1 = fraction0.hashCode();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(443, fraction0.intValue());
      assertEquals(443, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443, fraction0.shortValue());
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443L, fraction0.longValue());
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(39665, int1);
  }

  @Test
  public void test38()  throws Throwable  {
      double double0 = (-54.50276444922405);
      int int0 = (-3151);
      Fraction fraction0 = new Fraction(double0, int0);
      assertEquals((-55L), fraction0.longValue());
      assertEquals(-55, fraction0.getNumerator());
      assertEquals((-55.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-55, fraction0.shortValue());
      assertEquals((-5500.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-55.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-55, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-55, fraction0.byteValue());
      assertNotNull(fraction0);
  }

  @Test
  public void test39()  throws Throwable  {
      double double0 = 623.740297;
      int int0 = 102;
      Fraction fraction0 = new Fraction(double0, double0, int0);
      assertEquals(62300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(623, fraction0.shortValue());
      assertEquals(623.0F, fraction0.floatValue(), 0.01F);
      assertEquals(623.0, fraction0.doubleValue(), 0.01D);
      assertEquals(111, fraction0.byteValue());
      assertEquals(623L, fraction0.longValue());
      assertEquals(623, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(623, fraction0.intValue());
      assertNotNull(fraction0);
      
      double double1 = fraction0.percentageValue();
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(62300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(623, fraction0.shortValue());
      assertEquals(623.0F, fraction0.floatValue(), 0.01F);
      assertEquals(623.0, fraction0.doubleValue(), 0.01D);
      assertEquals(111, fraction0.byteValue());
      assertEquals(623L, fraction0.longValue());
      assertEquals(623, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(623, fraction0.intValue());
      assertEquals(62300.0, double1, 0.01D);
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 443;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(443, fraction0.intValue());
      assertEquals(443, fraction0.shortValue());
      assertEquals(443L, fraction0.longValue());
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int1 = fraction0.getNumerator();
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(443, fraction0.intValue());
      assertEquals(443, fraction0.shortValue());
      assertEquals(443L, fraction0.longValue());
      assertEquals(443.0F, fraction0.floatValue(), 0.01F);
      assertEquals(44300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(443.0, fraction0.doubleValue(), 0.01D);
      assertEquals(-69, fraction0.byteValue());
      assertEquals(443, fraction0.getNumerator());
      assertEquals(443, int1);
  }

  @Test
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      FractionField fractionField0 = fraction0.getField();
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fractionField0);
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 0;
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(int0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.25, fraction1.doubleValue(), 0.01D);
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(25.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction1);
  }

  @Test
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.intValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(0, fraction0.intValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25F, float0, 0.01F);
  }

  @Test
  public void test44()  throws Throwable  {
      double double0 = 623.740297;
      int int0 = 102;
      Fraction fraction0 = new Fraction(double0, double0, int0);
      assertEquals(62300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(623.0F, fraction0.floatValue(), 0.01F);
      assertEquals(623, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(623, fraction0.shortValue());
      assertEquals(623L, fraction0.longValue());
      assertEquals(623, fraction0.intValue());
      assertEquals(111, fraction0.byteValue());
      assertEquals(623.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(62300.0, fraction0.percentageValue(), 0.01D);
      assertEquals(623.0F, fraction0.floatValue(), 0.01F);
      assertEquals(623, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(623, fraction0.shortValue());
      assertEquals(623L, fraction0.longValue());
      assertEquals(623, fraction0.intValue());
      assertEquals(111, fraction0.byteValue());
      assertEquals(623.0, fraction0.doubleValue(), 0.01D);
      assertEquals(623L, long0);
  }

  @Test
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.divide(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertNotNull(fraction1);
  }

  @Test
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction1);
  }
}
