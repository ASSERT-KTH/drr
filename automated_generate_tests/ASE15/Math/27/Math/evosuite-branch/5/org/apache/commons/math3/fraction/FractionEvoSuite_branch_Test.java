/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:19:55 GMT 2014
 */

package org.apache.commons.math3.fraction;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.apache.commons.math3.fraction.FractionField;



import org.junit.runner.RunWith;


public class FractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals("1", string0);
      assertNotNull(string0);
  }

  @Test
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals(4, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals("3 / 4", string0);
      assertNotNull(string0);
  }

  @Test
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = 885;
      Fraction fraction1 = fraction0.subtract(int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(-116, fraction1.byteValue());
      assertEquals((-884L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-884, fraction1.shortValue());
      assertEquals((-884.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-884.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-884, fraction1.getNumerator());
      assertEquals(-884, fraction1.intValue());
      assertEquals((-88400.0), fraction1.percentageValue(), 0.01D);
      assertNotNull(fraction1);
      
      short short0 = fraction1.shortValue();
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(-116, fraction1.byteValue());
      assertEquals((-884L), fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-884, fraction1.shortValue());
      assertEquals((-884.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-884.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-884, fraction1.getNumerator());
      assertEquals(-884, fraction1.intValue());
      assertEquals((-88400.0), fraction1.percentageValue(), 0.01D);
      assertEquals((short) (-884), short0);
      
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction2 = Fraction.getReducedFraction(int1, (int) short0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-884, cannot negate
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 33;
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 33/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 639;
      int int1 = 0;
      Fraction fraction0 = Fraction.getReducedFraction(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 0.0;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertNotNull(fraction0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals((byte)1, byte0);
      
      Fraction fraction1 = fraction0.subtract((int) byte0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertNotNull(fraction2);
  }

  @Test
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.divide(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertNotNull(fraction2);
  }

  @Test
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(50.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      double double0 = 2339.2579800930926;
      Fraction fraction1 = new Fraction(double0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(35, fraction1.byteValue());
      assertEquals(233925.79787234045, fraction1.percentageValue(), 0.01D);
      assertEquals(376, fraction1.getDenominator());
      assertEquals(2339, fraction1.shortValue());
      assertEquals(879561, fraction1.getNumerator());
      assertEquals(2339, fraction1.intValue());
      assertEquals(2339L, fraction1.longValue());
      assertEquals(2339.258F, fraction1.floatValue(), 0.01F);
      assertEquals(2339.2579787234044, fraction1.doubleValue(), 0.01D);
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertEquals(2338L, fraction2.longValue());
      assertEquals(1880, fraction2.getDenominator());
      assertEquals(4396301, fraction2.getNumerator());
      assertEquals(2338, fraction2.shortValue());
      assertEquals(2338.458F, fraction2.floatValue(), 0.01F);
      assertEquals(34, fraction2.byteValue());
      assertEquals(2338, fraction2.intValue());
      assertEquals(2338.4579787234043, fraction2.doubleValue(), 0.01D);
      assertEquals(233845.79787234042, fraction2.percentageValue(), 0.01D);
      assertEquals(35, fraction1.byteValue());
      assertEquals(233925.79787234045, fraction1.percentageValue(), 0.01D);
      assertEquals(376, fraction1.getDenominator());
      assertEquals(2339, fraction1.shortValue());
      assertEquals(879561, fraction1.getNumerator());
      assertEquals(2339, fraction1.intValue());
      assertEquals(2339L, fraction1.longValue());
      assertEquals(2339.258F, fraction1.floatValue(), 0.01F);
      assertEquals(2339.2579787234044, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getNumerator());
      assertNotNull(fraction2);
      
      short short0 = fraction2.shortValue();
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertEquals(2338L, fraction2.longValue());
      assertEquals(1880, fraction2.getDenominator());
      assertEquals(4396301, fraction2.getNumerator());
      assertEquals(2338, fraction2.shortValue());
      assertEquals(2338.458F, fraction2.floatValue(), 0.01F);
      assertEquals(34, fraction2.byteValue());
      assertEquals(2338, fraction2.intValue());
      assertEquals(2338.4579787234043, fraction2.doubleValue(), 0.01D);
      assertEquals(233845.79787234042, fraction2.percentageValue(), 0.01D);
      assertEquals(35, fraction1.byteValue());
      assertEquals(233925.79787234045, fraction1.percentageValue(), 0.01D);
      assertEquals(376, fraction1.getDenominator());
      assertEquals(2339, fraction1.shortValue());
      assertEquals(879561, fraction1.getNumerator());
      assertEquals(2339, fraction1.intValue());
      assertEquals(2339L, fraction1.longValue());
      assertEquals(2339.258F, fraction1.floatValue(), 0.01F);
      assertEquals(2339.2579787234044, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getNumerator());
      assertEquals((short)2338, short0);
      
      Fraction fraction3 = fraction0.divide((int) short0);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction3));
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction3);
      assertEquals(2338L, fraction2.longValue());
      assertEquals(1880, fraction2.getDenominator());
      assertEquals(4396301, fraction2.getNumerator());
      assertEquals(2338, fraction2.shortValue());
      assertEquals(2338.458F, fraction2.floatValue(), 0.01F);
      assertEquals(34, fraction2.byteValue());
      assertEquals(2338, fraction2.intValue());
      assertEquals(2338.4579787234043, fraction2.doubleValue(), 0.01D);
      assertEquals(233845.79787234042, fraction2.percentageValue(), 0.01D);
      assertEquals(0.03421727972626176, fraction3.percentageValue(), 0.01D);
      assertEquals(3.4217279726261765E-4, fraction3.doubleValue(), 0.01D);
      assertEquals(2, fraction3.getNumerator());
      assertEquals(0, fraction3.shortValue());
      assertEquals(0, fraction3.byteValue());
      assertEquals(0, fraction3.intValue());
      assertEquals(5845, fraction3.getDenominator());
      assertEquals(0L, fraction3.longValue());
      assertEquals(3.421728E-4F, fraction3.floatValue(), 0.01F);
      assertEquals(35, fraction1.byteValue());
      assertEquals(233925.79787234045, fraction1.percentageValue(), 0.01D);
      assertEquals(376, fraction1.getDenominator());
      assertEquals(2339, fraction1.shortValue());
      assertEquals(879561, fraction1.getNumerator());
      assertEquals(2339, fraction1.intValue());
      assertEquals(2339L, fraction1.longValue());
      assertEquals(2339.258F, fraction1.floatValue(), 0.01F);
      assertEquals(2339.2579787234044, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getNumerator());
      assertNotNull(fraction3);
      
      // Undeclared exception!
      try {
        Fraction fraction4 = fraction3.subtract(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -5,139,275,117
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(150.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1.5, fraction1.doubleValue(), 0.01D);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
  }

  @Test
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.byteValue());
      assertEquals(100.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertNotNull(fraction2);
  }

  @Test
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)1, byte0);
      
      Fraction fraction1 = fraction0.subtract((int) byte0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(100.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1, fraction2.intValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertNotNull(fraction2);
  }

  @Test
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals((-100.0), fraction2.percentageValue(), 0.01D);
      assertEquals(-1, fraction2.getNumerator());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals(-1, fraction2.byteValue());
      assertEquals((-1.0), fraction2.doubleValue(), 0.01D);
      assertEquals(-1, fraction2.intValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-1L), fraction2.longValue());
      assertEquals(-1, fraction2.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction2);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = (-17.80087519425);
      int int0 = (-4109);
      Fraction fraction0 = new Fraction(double0, int0);
      assertEquals(-18, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-18, fraction0.byteValue());
      assertEquals(-18, fraction0.shortValue());
      assertEquals((-1800.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-18L), fraction0.longValue());
      assertEquals(-18, fraction0.intValue());
      assertEquals((-18.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-18.0F), fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.subtract(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(-2147483648, fraction0.getNumerator());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01D);
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(-2147483648, fraction0.intValue());
      assertEquals((-2.147483648E11), fraction0.percentageValue(), 0.01D);
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertNotNull(fraction1);
      
      Fraction fraction2 = Fraction.ONE_HALF;
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertEquals(2, fraction2.getDenominator());
      assertEquals(0.5F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(50.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0.5, fraction2.doubleValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getNumerator());
      assertNotNull(fraction2);
      
      boolean boolean0 = fraction2.equals((Object) fraction1);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertEquals(2, fraction2.getDenominator());
      assertEquals(0.5F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(50.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0.5, fraction2.doubleValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reciprocal();
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertNotNull(fraction1);
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertTrue(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertNotNull(fraction1);
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(3, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      String string0 = "mV'-";
      boolean boolean0 = fraction0.equals((Object) string0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.MINUS_ONE;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.getNumerator());
      assertNotNull(fraction1);
      
      int int0 = fraction0.compareTo(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getDenominator();
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, int0);
      
      Fraction fraction1 = new Fraction((double) int0, (double) int0, int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(4, fraction1.shortValue());
      assertEquals(4L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(400.0, fraction1.percentageValue(), 0.01D);
      assertEquals(4, fraction1.byteValue());
      assertEquals(4, fraction1.intValue());
      assertEquals(4.0F, fraction1.floatValue(), 0.01F);
      assertEquals(4.0, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction1);
      
      int int1 = fraction0.compareTo(fraction1);
      assertFalse(int0 == int1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(4, fraction1.shortValue());
      assertEquals(4L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(400.0, fraction1.percentageValue(), 0.01D);
      assertEquals(4, fraction1.byteValue());
      assertEquals(4, fraction1.intValue());
      assertEquals(4.0F, fraction1.floatValue(), 0.01F);
      assertEquals(4.0, fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals((-1), int1);
  }

  @Test
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, int0);
  }

  @Test
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(75.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.75, fraction1.doubleValue(), 0.01D);
      assertNotNull(fraction1);
  }

  @Test
  public void test26()  throws Throwable  {
      double double0 = (-17.80087519425);
      int int0 = (-4109);
      Fraction fraction0 = new Fraction(double0, int0);
      assertEquals((-18.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-18.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-18L), fraction0.longValue());
      assertEquals(-18, fraction0.getNumerator());
      assertEquals((-1800.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-18, fraction0.intValue());
      assertEquals(-18, fraction0.byteValue());
      assertEquals(-18, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(18.0F, fraction1.floatValue(), 0.01F);
      assertEquals(18, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(18.0, fraction1.doubleValue(), 0.01D);
      assertEquals(18, fraction1.shortValue());
      assertEquals(18L, fraction1.longValue());
      assertEquals(18, fraction1.byteValue());
      assertEquals(18, fraction1.getNumerator());
      assertEquals(1800.0, fraction1.percentageValue(), 0.01D);
      assertEquals((-18.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-18.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-18L), fraction0.longValue());
      assertEquals(-18, fraction0.getNumerator());
      assertEquals((-1800.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-18, fraction0.intValue());
      assertEquals(-18, fraction0.byteValue());
      assertEquals(-18, fraction0.shortValue());
      assertNotNull(fraction1);
  }

  @Test
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = (-1430);
      Fraction fraction1 = fraction0.add(int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(107, fraction1.byteValue());
      assertEquals(-1429, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1429L), fraction1.longValue());
      assertEquals((-1429.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-142900.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-1429, fraction1.getNumerator());
      assertEquals((-1429.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1429, fraction1.shortValue());
      assertNotNull(fraction1);
      
      Fraction fraction2 = fraction1.divide(fraction1);
      assertTrue(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1L, fraction2.longValue());
      assertEquals(100.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(107, fraction1.byteValue());
      assertEquals(-1429, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1429L), fraction1.longValue());
      assertEquals((-1429.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-142900.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-1429, fraction1.getNumerator());
      assertEquals((-1429.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1429, fraction1.shortValue());
      assertNotNull(fraction2);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertNotNull(fraction0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals((byte)1, byte0);
      
      double double0 = (-1375.210328167);
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(double0, double0, (int) byte0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -1,375.21 to fraction after 1 iterations
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      double double0 = fraction0.doubleValue();
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, double0, 0.01D);
      
      int int0 = 203;
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(double0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(33.33333333333333, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(33.33333333333333, fraction0.percentageValue(), 0.01D);
      assertEquals((byte)0, byte0);
      
      int int0 = fraction0.getDenominator();
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.33333334F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.3333333333333333, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(33.33333333333333, fraction0.percentageValue(), 0.01D);
      assertEquals(3, int0);
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) int0, (double) byte0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 3 to fraction (9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = 2.85040095144011776E17;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 285,040,095,144,011,776 to fraction (285,040,095,144,011,776/1)
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      double double0 = (-17.80087519425);
      int int0 = (-4109);
      Fraction fraction0 = new Fraction(double0, int0);
      assertEquals(-18, fraction0.byteValue());
      assertEquals(-18, fraction0.getNumerator());
      assertEquals(-18, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-18L), fraction0.longValue());
      assertEquals((-18.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1800.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-18.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-18, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(-18, fraction0.byteValue());
      assertEquals(-18, fraction0.getNumerator());
      assertEquals(-18, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-18L), fraction0.longValue());
      assertEquals((-18.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1800.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-18.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-18, fraction0.intValue());
      assertEquals(-36, fraction1.intValue());
      assertEquals(-36, fraction1.byteValue());
      assertEquals((-36.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-3600.0), fraction1.percentageValue(), 0.01D);
      assertEquals((-36L), fraction1.longValue());
      assertEquals((-36.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-36, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-36, fraction1.getNumerator());
      assertNotNull(fraction1);
  }

  @Test
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      double double0 = fraction0.percentageValue();
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(75.0, double0, 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(75.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(3, int0);
  }

  @Test
  public void test37()  throws Throwable  {
      double double0 = (-17.80087519425);
      int int0 = (-4109);
      Fraction fraction0 = new Fraction(double0, int0);
      assertEquals(-18, fraction0.shortValue());
      assertEquals((-18.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-18.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-18, fraction0.getNumerator());
      assertEquals(-18, fraction0.intValue());
      assertEquals(-18, fraction0.byteValue());
      assertEquals((-1800.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-18L), fraction0.longValue());
      assertNotNull(fraction0);
      
      FractionField fractionField0 = fraction0.getField();
      assertEquals(-18, fraction0.shortValue());
      assertEquals((-18.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-18.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-18, fraction0.getNumerator());
      assertEquals(-18, fraction0.intValue());
      assertEquals(-18, fraction0.byteValue());
      assertEquals((-1800.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-18L), fraction0.longValue());
      assertNotNull(fractionField0);
  }

  @Test
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.hashCode();
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(23311, int0);
      
      Fraction fraction1 = fraction0.multiply(int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(23311.0F, fraction1.floatValue(), 0.01F);
      assertEquals(15, fraction1.byteValue());
      assertEquals(23311.0, fraction1.doubleValue(), 0.01D);
      assertEquals(23311, fraction1.shortValue());
      assertEquals(23311L, fraction1.longValue());
      assertEquals(23311, fraction1.getNumerator());
      assertEquals(2331100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(23311, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertNotNull(fraction1);
  }

  @Test
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, long0);
  }

  @Test
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      short short0 = fraction0.shortValue();
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals((short)0, short0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide((int) short0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 4/0
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertNotNull(fraction1);
  }
}
