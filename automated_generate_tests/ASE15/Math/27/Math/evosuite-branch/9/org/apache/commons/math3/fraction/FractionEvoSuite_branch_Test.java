/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:01:50 GMT 2014
 */

package org.apache.commons.math3.fraction;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.apache.commons.math3.fraction.FractionField;



import org.junit.runner.RunWith;


public class FractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      
      String string0 = fraction0.toString();
      assertNotNull(string0);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals("-1", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      
      String string0 = fraction0.toString();
      assertNotNull(string0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals("3 / 5", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-703);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-703, cannot negate
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-2147483647);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,647/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      int int1 = (-2555);
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = (-5224);
      double double0 = 0.5000000000042687;
      Fraction fraction0 = new Fraction(double0, int0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      
      int int1 = fraction0.intValue();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, int1);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getReducedFraction(int1, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      
      int int0 = 0;
      Fraction fraction1 = new Fraction(int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-631.7736);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-789717, fraction0.getNumerator());
      assertEquals(-631, fraction0.intValue());
      assertEquals((-631L), fraction0.longValue());
      assertEquals((-631.7736), fraction0.doubleValue(), 0.01D);
      assertEquals((-631.7736F), fraction0.floatValue(), 0.01F);
      assertEquals((-63177.36), fraction0.percentageValue(), 0.01D);
      assertEquals(1250, fraction0.getDenominator());
      assertEquals(-631, fraction0.shortValue());
      assertEquals(-119, fraction0.byteValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 0.0;
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = new Fraction(double0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotNull(fraction2);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-5224);
      double double0 = 0.5000000000042687;
      Fraction fraction0 = new Fraction(double0, int0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
  }

  @Test
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      
      int int0 = 300;
      Fraction fraction1 = fraction0.divide(int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(375, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0026666666666666666, fraction1.doubleValue(), 0.01D);
      assertEquals(0.26666666666666666, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0026666666F, fraction1.floatValue(), 0.01F);
      
      int int1 = (-2147483617);
      Fraction fraction2 = fraction0.subtract(int1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(int1 == int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(429496699, fraction2.intValue());
      assertEquals(2147483497, fraction2.getNumerator());
      assertEquals(4.294966994E10, fraction2.percentageValue(), 0.01D);
      assertEquals(123, fraction2.byteValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(4.29496704E8F, fraction2.floatValue(), 0.01F);
      assertEquals(-26245, fraction2.shortValue());
      assertEquals(429496699L, fraction2.longValue());
      assertEquals(4.294966994E8, fraction2.doubleValue(), 0.01D);
      
      // Undeclared exception!
      try {
        Fraction fraction3 = fraction2.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 161,061,262,274
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-2, fraction1.byteValue());
      assertEquals(-2, fraction1.shortValue());
      assertEquals((-2L), fraction1.longValue());
      assertEquals(-2, fraction1.intValue());
      assertEquals((-200.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-2, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-2.0F), fraction1.floatValue(), 0.01F);
  }

  @Test
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      
      int int0 = (-1528);
      Fraction fraction1 = new Fraction((double) int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1528L), fraction1.longValue());
      assertEquals((-1528.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1528, fraction1.shortValue());
      assertEquals((-1528.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-152800.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-1528, fraction1.getNumerator());
      assertEquals(8, fraction1.byteValue());
      assertEquals(-1528, fraction1.intValue());
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1528L), fraction1.longValue());
      assertEquals((-1528.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1528, fraction1.shortValue());
      assertEquals((-1528.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-152800.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-1528, fraction1.getNumerator());
      assertEquals(8, fraction1.byteValue());
      assertEquals(-1528, fraction1.intValue());
      assertEquals(1528L, fraction2.longValue());
      assertEquals(1528.2, fraction2.doubleValue(), 0.01D);
      assertEquals(1528, fraction2.shortValue());
      assertEquals(7641, fraction2.getNumerator());
      assertEquals(1528.2F, fraction2.floatValue(), 0.01F);
      assertEquals(152820.0, fraction2.percentageValue(), 0.01D);
      assertEquals(-8, fraction2.byteValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(1528, fraction2.intValue());
  }

  @Test
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      
      int int0 = (-3053);
      Fraction fraction1 = Fraction.getReducedFraction(int0, int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotNull(fraction2);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.intValue());
      assertEquals(100.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
  }

  @Test
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      
      int int0 = 0;
      Fraction fraction1 = new Fraction(int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction2);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(3, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.6, fraction2.doubleValue(), 0.01D);
      assertEquals(0.6F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.shortValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(60.0, fraction2.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
  }

  @Test
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      
      int int0 = 0;
      Fraction fraction1 = new Fraction(int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotNull(fraction2);
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals((-60.0), fraction2.percentageValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals((-0.6), fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(-3, fraction2.getNumerator());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0, fraction2.intValue());
      assertEquals((-0.6F), fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.byteValue());
  }

  @Test
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.subtract(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = new Fraction(int0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01D);
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals((-2.147483648E11), fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(-2147483648, fraction0.getNumerator());
      assertEquals(-2147483648, fraction0.intValue());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01D);
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(3, fraction1.getDenominator());
      assertEquals(33.33333333333333, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.33333334F, fraction1.floatValue(), 0.01F);
      assertEquals(0.3333333333333333, fraction1.doubleValue(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      
      int int0 = 0;
      Fraction fraction1 = fraction0.subtract(int0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(60.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(60.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertTrue(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fraction0.equals(object0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      
      Fraction fraction1 = Fraction.ONE;
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      
      int int0 = 0;
      Fraction fraction1 = new Fraction(int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      
      int int1 = fraction0.compareTo(fraction1);
      assertFalse(int1 == int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, int1);
  }

  @Test
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.divide(fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1), int0);
  }

  @Test
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, int0);
  }

  @Test
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
  }

  @Test
  public void test28()  throws Throwable  {
      double double0 = (-631.7736);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-119, fraction0.byteValue());
      assertEquals((-63177.36), fraction0.percentageValue(), 0.01D);
      assertEquals(1250, fraction0.getDenominator());
      assertEquals((-631L), fraction0.longValue());
      assertEquals(-631, fraction0.shortValue());
      assertEquals(-789717, fraction0.getNumerator());
      assertEquals(-631, fraction0.intValue());
      assertEquals((-631.7736F), fraction0.floatValue(), 0.01F);
      assertEquals((-631.7736), fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = fraction0.abs();
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(119, fraction1.byteValue());
      assertEquals(631.7736, fraction1.doubleValue(), 0.01D);
      assertEquals(631L, fraction1.longValue());
      assertEquals(1250, fraction1.getDenominator());
      assertEquals(631.7736F, fraction1.floatValue(), 0.01F);
      assertEquals(63177.36, fraction1.percentageValue(), 0.01D);
      assertEquals(631, fraction1.shortValue());
      assertEquals(631, fraction1.intValue());
      assertEquals(789717, fraction1.getNumerator());
      assertEquals(-119, fraction0.byteValue());
      assertEquals((-63177.36), fraction0.percentageValue(), 0.01D);
      assertEquals(1250, fraction0.getDenominator());
      assertEquals((-631L), fraction0.longValue());
      assertEquals(-631, fraction0.shortValue());
      assertEquals(-789717, fraction0.getNumerator());
      assertEquals(-631, fraction0.intValue());
      assertEquals((-631.7736F), fraction0.floatValue(), 0.01F);
      assertEquals((-631.7736), fraction0.doubleValue(), 0.01D);
  }

  @Test
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      double double0 = 0.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = 0.19999999999923582;
      int int0 = (-20);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.2 to fraction after -20 iterations
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      
      int int0 = 3610;
      short short0 = fraction0.shortValue();
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals((short)1, short0);
      
      double double0 = (-1.7976931348623157E308);
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) int0, double0, (int) short0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 3,610 to fraction (-3,609/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      double double0 = (-5175.0);
      int int0 = 1789;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -5,175 to fraction (-9,223,372,036,854,770,632/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      
      int int0 = (-1528);
      int int1 = fraction0.getDenominator();
      assertFalse(int1 == int0);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(5, int1);
      
      double double0 = (-8.0E298);
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(double0, (double) int0, int1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -80,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (-9,223,372,036,854,775,808/1)
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertNotNull(fraction0);
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.4F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.4, fraction1.doubleValue(), 0.01D);
      assertEquals(40.0, fraction1.percentageValue(), 0.01D);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
  }

  @Test
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      
      int int0 = fraction0.hashCode();
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(23426, int0);
  }

  @Test
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      
      int int0 = 300;
      Fraction fraction1 = fraction0.add(int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(300L, fraction1.longValue());
      assertEquals(300, fraction1.shortValue());
      assertEquals(300.8, fraction1.doubleValue(), 0.01D);
      assertEquals(300, fraction1.intValue());
      assertEquals(30080.0, fraction1.percentageValue(), 0.01D);
      assertEquals(300.8F, fraction1.floatValue(), 0.01F);
      assertEquals(1504, fraction1.getNumerator());
      assertEquals(44, fraction1.byteValue());
  }

  @Test
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      
      double double0 = fraction0.percentageValue();
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(60.0, double0, 0.01D);
  }

  @Test
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      
      int int0 = fraction0.getNumerator();
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1), int0);
  }

  @Test
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.getNumerator());
      
      FractionField fractionField0 = fraction0.getField();
      assertNotNull(fractionField0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.getNumerator());
  }

  @Test
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      
      int int0 = (-3);
      Fraction fraction1 = fraction0.multiply(int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotNull(fraction1);
      assertEquals(3, fraction1.intValue());
      assertEquals(300.0, fraction1.percentageValue(), 0.01D);
      assertEquals(3.0, fraction1.doubleValue(), 0.01D);
      assertEquals(3L, fraction1.longValue());
      assertEquals(3.0F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.byteValue());
      assertEquals(3, fraction1.shortValue());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      
      float float0 = fraction0.floatValue();
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-100.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      
      long long0 = fraction0.longValue();
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(60.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, long0);
  }

  @Test
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertNotNull(fraction0);
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotNull(fraction1);
      assertEquals(80.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
  }
}
