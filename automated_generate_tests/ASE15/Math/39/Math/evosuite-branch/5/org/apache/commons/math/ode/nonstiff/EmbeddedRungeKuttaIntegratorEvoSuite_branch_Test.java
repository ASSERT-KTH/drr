/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:23:57 GMT 2014
 */

package org.apache.commons.math.ode.nonstiff;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class EmbeddedRungeKuttaIntegratorEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = (-1808.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(double0, double0, double0, double0);
      assertNotNull(highamHall54Integrator0);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(1808.0, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertEquals(1808.0, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals(1808.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      
      double double1 = highamHall54Integrator0.getMaxGrowth();
      assertEquals(10.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(1808.0, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertEquals(1808.0, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals(1808.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 276.8358534011386;
      double[] doubleArray0 = new double[8];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(double0, double0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(highamHall54Integrator0);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertEquals(276.8358534011386, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(276.8358534011386, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals(276.8358534011386, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      
      double double1 = highamHall54Integrator0.getMinReduction();
      assertEquals(0.2, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertEquals(276.8358534011386, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(276.8358534011386, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals(276.8358534011386, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 276.8358534011386;
      double[] doubleArray0 = new double[8];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(double0, double0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(highamHall54Integrator0);
      assertEquals(276.8358534011386, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(276.8358534011386, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals(276.8358534011386, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      
      double double1 = highamHall54Integrator0.getSafety();
      assertEquals(0.9, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(276.8358534011386, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(276.8358534011386, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals(276.8358534011386, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
  }
}
