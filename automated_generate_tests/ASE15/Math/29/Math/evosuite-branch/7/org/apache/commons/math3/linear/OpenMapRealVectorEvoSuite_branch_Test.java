/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:08:02 GMT 2014
 */

package org.apache.commons.math3.linear;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Asin;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;



import org.junit.runner.RunWith;


public class OpenMapRealVectorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 0;
      int int1 = 3176;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertFalse(int0 == int1);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, int1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(3176, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      assertFalse(int0 == int1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(int1 == int0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapAdd((double) int1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(3176, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(3176, openMapRealVector2.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector2);
      assertFalse(int0 == int1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(int1 == int0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(3176, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(3176, openMapRealVector2.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertFalse(boolean0);
      assertFalse(int0 == int1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(int1 == int0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1349.283293202);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test02()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[1];
      double double2 = 340.0;
      Double double3 = new Double(double2);
      assertNotSame(double3, double1);
      assertEquals(340.0, (double)double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double0));
      assertTrue(double3.equals((Object)double2));
      
      doubleArray0[4] = double3;
      doubleArray0[5] = doubleArray0[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector0.getSparsity(), 0.01D);
      assertTrue(boolean0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 426;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(426, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(426, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(426, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(426, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(426, openMapRealVector0.getDimension());
      assertFalse(boolean0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertFalse(boolean0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test05()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertTrue(boolean0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      boolean boolean0 = openMapRealVector0.equals((Object) doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double double0 = 1.2953059265290543;
      doubleArray0[0] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[0]);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      int int0 = openMapRealVector0.hashCode();
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(978976682, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double[] doubleArray1 = openMapRealVector0.toArray();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test09()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)openMapRealVector0.subtract((RealVector) arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 1.0E-12;
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0E-12}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0E-12}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.subtract((RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0E-12}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(4, openMapRealVector2.getDimension());
      assertEquals(0.25, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      openMapRealVector0.setSubVector(int0, (RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      double double0 = 0.5125439546638425;
      Double double1 = new Double(double0);
      assertEquals(0.5125439546638425, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = (Double) double0;
      doubleArray0[2] = (Double) double0;
      doubleArray0[5] = double1;
      doubleArray0[3] = doubleArray0[5];
      doubleArray0[4] = doubleArray0[2];
      double double2 = Double.NaN;
      Double double3 = new Double(double2);
      assertNotSame(double3, double1);
      assertEquals(Double.NaN, (double)double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double3.equals((Object)double0));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double1));
      
      doubleArray0[5] = double3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 426;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(426, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertEquals(426, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(426, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.subtract((RealVector) openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector2);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector2);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector2, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector2, openMapRealVector0);
      //  // Unstable assertion: assertEquals(426, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(426, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(426, openMapRealVector2.getDimension());
      //  // Unstable assertion: assertNotNull(openMapRealVector2);
      //  // Unstable assertion: assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector2);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector2);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector2);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector2, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector2, openMapRealVector0);
      //  // Unstable assertion: assertEquals(426, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(426, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(426, openMapRealVector2.getDimension());
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1349.283293202);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(2, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertEquals(2, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(2, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      double double1 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertEquals(2, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(2, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test16()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      int int0 = (-4307);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(-4307, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      double double0 = openMapRealVector0.getL1Distance(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(-4307, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1349.283293202);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double double1 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 426;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(426, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(426, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      double double0 = openMapRealVector0.getDistance((RealVector) arrayRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-591.0352414317989);
      doubleArray0[2] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-591.0352414317989), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      double double1 = openMapRealVector1.getDistance(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, (-591.0352414317989), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(591.0352414317989, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test22()  throws Throwable  {
      double double0 = 1.0E-12;
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0E-12}, doubleArray0, 0.01);
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      double double1 = openMapRealVector0.getDistance(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0E-12}, doubleArray0, 0.01);
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 0;
      int int1 = 3176;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertFalse(int0 == int1);
      
      int int2 = 4218;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, int2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4218, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4218, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(4218, openMapRealVector2.getDimension());
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(4218, openMapRealVector3.getDimension());
      assertEquals(0.0, openMapRealVector3.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4218, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(4218, openMapRealVector2.getDimension());
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector3));
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector3.mapAdd((double) int2);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(4218, openMapRealVector3.getDimension());
      assertEquals(0.0, openMapRealVector3.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4218, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01D);
      assertEquals(4218, openMapRealVector4.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(4218, openMapRealVector2.getDimension());
      assertNotNull(openMapRealVector4);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector4));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector3));
      
      int int3 = 24;
      OpenMapRealVector openMapRealVector5 = openMapRealVector4.getSubVector(int3, int1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector5);
      assertNotSame(openMapRealVector0, openMapRealVector5);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector5);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector5);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector5);
      assertNotSame(openMapRealVector5, openMapRealVector2);
      assertNotSame(openMapRealVector5, openMapRealVector0);
      assertNotSame(openMapRealVector5, openMapRealVector3);
      assertNotSame(openMapRealVector5, openMapRealVector4);
      assertNotSame(openMapRealVector5, openMapRealVector1);
      assertEquals(4218, openMapRealVector3.getDimension());
      assertEquals(0.0, openMapRealVector3.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4218, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01D);
      assertEquals(4218, openMapRealVector4.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(4218, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector5.getSparsity(), 0.01D);
      assertEquals(3176, openMapRealVector5.getDimension());
      assertNotNull(openMapRealVector5);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector5));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector5));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector5.equals((Object)openMapRealVector1));
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 158;
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((double) int0);
      assertEquals(158.0, (double)double0, 0.01D);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[2];
      doubleArray0[6] = doubleArray0[5];
      doubleArray0[7] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[6]);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(int0, int0, (double) doubleArray0[0]);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(158, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.append(openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(158, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(0.04819277108433735, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(166, openMapRealVector2.getDimension());
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      
      int int1 = (-4686);
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector3 = openMapRealVector2.getSubVector(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of elements should be positive (-4,686)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      double double1 = 0.8618852059965191;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      openMapRealVector0.set(double1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertFalse(double1 == double0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertFalse(double0 == double1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(double0 == double1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
  }

  @Test
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-591.0352414317989);
      doubleArray0[2] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-591.0352414317989), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.1111111111111111, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      Asin asin0 = new Asin();
      assertNotNull(asin0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapToSelf((UnivariateFunction) asin0);
      assertArrayEquals(new double[] {0.0, 0.0, (-591.0352414317989), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.1111111111111111, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.1111111111111111, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, (-591.0352414317989), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertEquals(9, openMapRealVector2.getDimension());
      assertEquals(0.1111111111111111, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.1111111111111111, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.1111111111111111, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 1053.65798755262;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      RealVector realVector0 = RealVector.unmodifiableRealVector((RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, realVector0.getDimension());
      assertNotNull(realVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection(realVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(7, realVector0.getDimension());
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.8618852059965191;
      doubleArray0[1] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.8618852059965191, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      double double1 = openMapRealVector0.cosine((RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.8618852059965191, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
  }

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double double0 = (-1919.9248753085662);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(6, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      
      double double1 = openMapRealVector2.dotProduct((RealVector) openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(6, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
  }

  @Test
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-1.0);
      doubleArray0[5] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.1, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(20, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-1.0);
      double double1 = 1.0800340064859439E241;
      doubleArray0[5] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1.0800340064859439E241, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.1, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1.0800340064859439E241, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.1, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(double0 == double1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1.0800340064859439E241, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.1, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.9, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(double0 == double1);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.add(openMapRealVector2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1.0800340064859439E241, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertEquals(0.1, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.9, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector3.getDimension());
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(double0 == double1);
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = 1.0E-12;
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0E-12}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0E-12}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0E-12}, doubleArray0, 0.01);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(0.25, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector2.getDimension());
      assertNotNull(openMapRealVector2);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
  }

  @Test
  public void test34()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      double double0 = (-2.0961068531216087E-7);
      Double double1 = new Double(double0);
      assertEquals((-2.0961068531216087E-7), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      byte byte0 = double1.byteValue();
      assertEquals((byte)0, byte0);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) byte0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertTrue(double1.equals((Object)double0));
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(double1.equals((Object)double0));
  }

  @Test
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)openMapRealVector0.add((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1000.22304876;
      doubleArray0[0] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {1000.22304876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1000.22304876, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1000.22304876, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(1000.22304876, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {1000.22304876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1000.22304876, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1000.22304876, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(1000.22304876, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(openMapRealVector0);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = (-31);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(-31, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      assertEquals(-31, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      
      // Undeclared exception!
      try {
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      double double0 = openMapRealVector0.getSparsity();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.subtract((RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
  }
}
