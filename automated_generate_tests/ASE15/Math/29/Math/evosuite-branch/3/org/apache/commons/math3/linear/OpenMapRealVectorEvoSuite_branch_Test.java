/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:46:12 GMT 2014
 */

package org.apache.commons.math3.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Tanh;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealMatrix;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class OpenMapRealVectorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 824;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(824, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((double) int0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(824, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(824, openMapRealVector1.getDimension());
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(824, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(824, openMapRealVector1.getDimension());
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 3013;
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) arrayRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector1);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(5, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = openMapRealVector2.equals((Object) openMapRealVector1);
      assertTrue(boolean1);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(5, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 3013;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {3013.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3013.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(3013.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(3013.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {3013.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) arrayRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.8, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3013.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(3013.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(3013.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {3013.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.8, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3013.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(3013.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(3013.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {3013.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 94;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(94, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(int0, int0);
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(94, openMapRealVector1.getDimension());
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(94, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(94, openMapRealVector0.getDimension());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-2866);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(-2866, openMapRealVector0.getDimension());
      
      double double0 = openMapRealVector0.getSparsity();
      assertEquals(-0.0, double0, 0.01D);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(-2866, openMapRealVector0.getDimension());
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = (Double) double0;
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(-2866, openMapRealVector0.getDimension());
      
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = (Double) double0;
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(-2866, openMapRealVector0.getDimension());
      
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[0];
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(-2866, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = (-2866);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(-2866, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(-2866, openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(-2866, openMapRealVector0.getDimension());
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertTrue(boolean0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(-2866, openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(-2866, openMapRealVector0.getDimension());
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = (-364);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(-364, openMapRealVector0.getDimension());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = openMapRealVector0.equals(object0);
      assertFalse(boolean0);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(-364, openMapRealVector0.getDimension());
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 4070;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4070, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtractToSelf((double) int0);
      assertNotNull(openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(4070, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4070, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      
      int int1 = openMapRealVector0.hashCode();
      assertEquals((-697765921), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(4070, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = openMapRealVector0.toArray();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 3701;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(3701, openMapRealVector0.getDimension());
      
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-2866);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(-2866, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.subtract((RealVector) openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(-2866, openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(-2866, openMapRealVector0.getDimension());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 3013;
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)openMapRealVector0.subtract((RealVector) arrayRealVector0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(5, arrayRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 824;
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((double) int0);
      assertEquals(824.0, (double)double0, 0.01D);
      
      doubleArray0[2] = double0;
      doubleArray0[4] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(824, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((double) doubleArray0[4]);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(824, openMapRealVector1.getDimension());
      assertEquals(824, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(openMapRealVector1);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(824, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(824, openMapRealVector1.getDimension());
      assertEquals(824, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 3013;
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      openMapRealVector0.set(doubleArray0[0]);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      openMapRealVector0.setSubVector(int0, (RealVector) openMapRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 4070;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(4070, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtractToSelf((double) int0);
      assertNotNull(openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(4070, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4070, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(4070, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4070, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 94;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(94, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(94, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(94, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      
      boolean boolean0 = openMapRealVector1.isInfinite();
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(94, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(94, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 3477;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(3477, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(205025.10171439985, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3477.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3477, arrayRealVector0.getDimension());
      assertEquals(1.2089529E7, arrayRealVector0.getL1Norm(), 0.01D);
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) arrayRealVector0);
      assertEquals(3477.0, double0, 0.01D);
      assertEquals(3477, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(205025.10171439985, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3477.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3477, arrayRealVector0.getDimension());
      assertEquals(1.2089529E7, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 3013;
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertEquals(5, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      //  // Unstable assertion: assertNotNull(arrayRealVector0);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(5, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) arrayRealVector0);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(5, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(5, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(5, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(5, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(5, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(5, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-2866);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((double) int0);
      assertEquals((-2866.0), (double)double0, 0.01D);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide((double) int0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
      
      double double1 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      assertEquals(2867.0, double1, 0.01D);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 3013;
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 4510;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(4510, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      UnivariateFunction univariateFunction0 = tanh0.derivative();
      assertNotNull(univariateFunction0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.map(univariateFunction0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(4510, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4510, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);
      assertEquals(4510.0, double0, 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(4510, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4510, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = openMapRealVector0.getDistance((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 824;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(824, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((double) int0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(824, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(824, openMapRealVector0.getDimension());
      
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector1);
      assertEquals(23653.24975558327, double0, 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(824, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(824, openMapRealVector0.getDimension());
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = openMapRealVector0.getDistance(openMapRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 1896;
      int int1 = 832;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(openMapRealVector0);
      assertEquals(1896, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      int int2 = (-1451);
      // Undeclared exception!
      try {
        RealVector realVector0 = openMapRealVector0.getSubVector(int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of elements should be positive (-1,451)
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = (-2866);
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((double) int0);
      assertEquals((-2866.0), (double)double0, 0.01D);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      double double1 = 0.0;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[1]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(double1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector2.getDimension());
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 824;
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((double) int0);
      assertEquals(824.0, (double)double0, 0.01D);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double0;
      double double1 = Double.NaN;
      Double double2 = new Double(double1);
      assertEquals(Double.NaN, (double)double2, 0.01D);
      assertFalse(double2.equals((Object)double0));
      assertTrue(double2.equals((Object)double1));
      assertNotSame(double2, double0);
      
      doubleArray0[4] = double2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double0);
      assertFalse(double0.equals((Object)double2));
      assertFalse(double0.equals((Object)double1));
      assertNotNull(openMapRealVector0);
      assertNotSame(double0, double2);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(double0.equals((Object)double2));
      assertFalse(double0.equals((Object)double1));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(double0, double2);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
  }

  @Test
  public void test31()  throws Throwable  {
      double double0 = 1411.6164;
      Double double1 = new Double(double0);
      assertEquals(1411.6164, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) double1;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(1411.6164, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1411.6164, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1411.6164, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 1411.6164, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(1411.6164, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1411.6164, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1411.6164, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 1411.6164, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) arrayRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1411.6164, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1411.6164, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1411.6164, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.3333333333333333, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 1411.6164, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 31;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(31, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(31, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      double double0 = openMapRealVector0.dotProduct((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(31, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = 3013;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {3013.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = openMapRealVector0.dotProduct((RealVector) openMapRealVector0);
      assertEquals(9078169.0, double0, 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {3013.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 3013;
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(double0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = openMapRealVector0.dotProduct((RealVector) openMapRealVector1);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 3013;
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 3013;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.2, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {3013.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(3013.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3013.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3013.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {3013.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) arrayRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(3013.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3013.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3013.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.8, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {3013.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(3013.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3013.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3013.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.8, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector2.getDimension());
      assertArrayEquals(new double[] {3013.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertNotNull(openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 31;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(31, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)openMapRealVector0.add((RealVector) arrayRealVector0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(31, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(31, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 4510;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(4510, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      assertEquals(4510, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      // Undeclared exception!
      try {
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0[2]);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test42()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.append((RealVector) openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertNotNull(openMapRealVector0);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(int0, int0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(7, openMapRealMatrix0.getRowDimension());
      assertEquals(7, openMapRealMatrix0.getColumnDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test46()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double double0 = 0.0;
      int int0 = (-1487);
      doubleArray0[1] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, double0);
      assertNotNull(openMapRealVector0);
      assertEquals(-1487, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      int int1 = openMapRealVector0.getDimension();
      assertEquals((-1487), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(-1487, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      Double double1 = Double.valueOf((double) int1);
      assertEquals((-1487.0), (double)double1, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(double1.equals((Object)double0));
      assertEquals(-1487, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      doubleArray0[0] = double1;
      assertEquals(-1487, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.5, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.mapDivide((double) int0);
      assertTrue(int0 == int1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(0.5, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(0.5, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector2.getDimension());
  }
}
