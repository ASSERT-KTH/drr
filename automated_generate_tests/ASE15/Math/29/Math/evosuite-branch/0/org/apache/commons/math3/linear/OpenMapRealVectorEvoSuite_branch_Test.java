/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:20:20 GMT 2014
 */

package org.apache.commons.math3.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Sqrt;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class OpenMapRealVectorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.5;
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.1, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0.1, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0.1, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertArrayEquals(new double[] {0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 2024.0889;
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) double0;
      doubleArray1[1] = (Double) doubleArray0[1];
      doubleArray1[2] = (Double) doubleArray0[0];
      doubleArray1[3] = (Double) doubleArray0[1];
      doubleArray1[4] = (Double) doubleArray0[0];
      doubleArray1[5] = (Double) double0;
      doubleArray1[6] = (Double) doubleArray0[0];
      doubleArray1[7] = (Double) doubleArray0[0];
      doubleArray1[8] = (Double) doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.2222222222222222, openMapRealVector0.getSparsity(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 217;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(217, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double[] doubleArray0 = openMapRealVector0.toArray();
      assertEquals(217, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, (double) int0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(217, openMapRealVector1.getDimension());
      assertEquals(217, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(217, openMapRealVector1.getDimension());
      assertEquals(217, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = (-372.068);
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, double0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = (-372.068);
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(int0, int0, doubleArray0[0]);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = openMapRealVector0.equals((Object) doubleArray0);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int int0 = 1414;
      doubleArray0[6] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.14285714285714285, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1414.0}, doubleArray0, 0.01);
      
      int int1 = openMapRealVector0.hashCode();
      assertFalse(int1 == int0);
      assertEquals(0.14285714285714285, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1414.0}, doubleArray0, 0.01);
      assertEquals(1472841920, int1);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 1414;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      //  // Unstable assertion: assertEquals(1414, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      
      int int1 = openMapRealVector0.hashCode();
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(1414, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals((-768806585), int1);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-372.068);
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = openMapRealVector0.toArray();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = (-2215);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {(-2215.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(0.25, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {(-2215.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.subtract((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 217;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(217, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      int int1 = 0;
      openMapRealVector0.setSubVector(int1, (RealVector) openMapRealVector0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(217, openMapRealVector0.getDimension());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 2713;
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.14285714285714285, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2713.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(0.14285714285714285, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.14285714285714285, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2713.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1.0E-12;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = Double.NaN;
      openMapRealVector0.set(double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertFalse(double0 == double1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = (-372.068);
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, double0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      double double1 = openMapRealVector0.getLInfDistance((RealVector) arrayRealVector0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-2215);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      //  // Unstable assertion: assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(4, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-2215.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(4, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(4, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-2215.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(4, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(4, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-2215.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-2215);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {(-2215.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {(-2215.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 177;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(177, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((double) int0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(177, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(177, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      double double0 = openMapRealVector0.getL1Distance(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(177, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(177, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(31329.0, double0, 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1.0E-12;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      openMapRealVector0.set(double0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 1414;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1414, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1414, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = openMapRealVector0.getDistance((RealVector) arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      double double0 = (-372.068);
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(int0, int0, doubleArray0[0]);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = openMapRealVector1.getDistance(openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(double0 == double1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test23()  throws Throwable  {
      double double0 = (-372.068);
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = openMapRealVector0.getDistance(openMapRealVector0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.5;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(int0, int0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.2, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.5;
      doubleArray0[0] = double0;
      doubleArray0[8] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.2, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(int0, int0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0.2, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[6]);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      int int1 = (-2263);
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of elements should be positive (-2,263)
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-2215);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {(-2215.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {(-2215.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector2.getDimension());
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector2);
      assertArrayEquals(new double[] {(-2215.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((double) int0);
      assertEquals(0.0, (double)double0, 0.01D);
      
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      Sqrt sqrt0 = new Sqrt();
      assertNotNull(sqrt0);
      
      UnivariateFunction univariateFunction0 = sqrt0.derivative();
      assertNotNull(univariateFunction0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapToSelf(univariateFunction0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.ebeMultiply((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector2.getDimension());
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector2);
  }

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      // Undeclared exception!
      try {
        double double0 = openMapRealVector0.dotProduct((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = (-2215);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {(-2215.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.25, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {(-2215.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 177;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(177, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((double) int0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(177, openMapRealVector1.getDimension());
      assertEquals(177, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      double double0 = openMapRealVector0.dotProduct(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(177, openMapRealVector1.getDimension());
      assertEquals(177, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(14, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 3647.662;
      doubleArray0[0] = double0;
      double double1 = 1.0E-12;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double1);
      assertFalse(double1 == double0);
      assertEquals(0.14285714285714285, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {3647.662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(doubleArray0[0]);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertFalse(double1 == double0);
      assertEquals(0.14285714285714285, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.14285714285714285, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {3647.662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(double1 == double0);
      assertEquals(0.14285714285714285, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.14285714285714285, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector2.getDimension());
      assertNotNull(openMapRealVector2);
      assertArrayEquals(new double[] {3647.662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.subtract(openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(double1 == double0);
      assertEquals(0.14285714285714285, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.14285714285714285, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector2.getDimension());
      assertEquals(7, openMapRealVector3.getDimension());
      assertEquals(0.8571428571428571, openMapRealVector3.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector3);
      assertArrayEquals(new double[] {3647.662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.add(openMapRealVector3);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector4);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector4);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector4, openMapRealVector3);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector4, openMapRealVector2);
      assertNotSame(openMapRealVector4, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector4));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(double1 == double0);
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector4.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector4.equals((Object)openMapRealVector1));
      assertEquals(0.14285714285714285, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.14285714285714285, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector2.getDimension());
      assertEquals(7, openMapRealVector3.getDimension());
      assertEquals(0.8571428571428571, openMapRealVector3.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector4.getDimension());
      assertNotNull(openMapRealVector4);
      assertArrayEquals(new double[] {3647.662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.5;
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) double0;
      doubleArray1[1] = (Double) double0;
      doubleArray1[2] = (Double) double0;
      doubleArray1[3] = doubleArray1[1];
      doubleArray1[4] = (Double) double0;
      doubleArray1[5] = doubleArray1[3];
      doubleArray1[6] = doubleArray1[3];
      doubleArray1[7] = (Double) doubleArray0[0];
      doubleArray1[8] = doubleArray1[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      assertEquals(0.8888888888888888, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((double) doubleArray1[3]);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.8888888888888888, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.8888888888888888, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector2.getDimension());
      assertNotNull(openMapRealVector2);
  }

  @Test
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.5;
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) double0;
      doubleArray1[1] = (Double) double0;
      doubleArray1[2] = (Double) double0;
      doubleArray1[3] = doubleArray1[1];
      doubleArray1[4] = (Double) double0;
      doubleArray1[5] = doubleArray1[4];
      doubleArray1[6] = doubleArray1[3];
      doubleArray1[7] = (Double) doubleArray0[0];
      doubleArray1[8] = doubleArray1[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.8888888888888888, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.8888888888888888, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.8888888888888888, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector2 = (ArrayRealVector)openMapRealVector0.add((RealVector) arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4, arrayRealVector2.getDimension());
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(0.0, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(arrayRealVector2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.5865923166275024;
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.5865923166275024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(0.1, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.5865923166275024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double double0 = (-3134.865046082554);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(14, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      assertEquals(14, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 2713;
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((double) int0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.125, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test40()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
  }

  @Test
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = openMapRealVector0.getSparsity();
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test42()  throws Throwable  {
      double double0 = (-372.068);
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      double double0 = (-372.068);
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)openMapRealVector0.subtract((RealVector) arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(2, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }
}
