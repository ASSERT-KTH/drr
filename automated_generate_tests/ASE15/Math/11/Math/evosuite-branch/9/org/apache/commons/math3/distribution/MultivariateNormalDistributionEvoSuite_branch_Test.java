/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:43:58 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.distribution.MultivariateNormalDistribution;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;



import org.junit.runner.RunWith;


public class MultivariateNormalDistributionEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 211;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertNotNull(mersenneTwister0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) mersenneTwister0, doubleArray0, doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertArrayEquals(new double[] {211.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray2 = multivariateNormalDistribution0.sample();
      assertNotNull(doubleArray2);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {217.04602378652245}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {211.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 211;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertNotNull(mersenneTwister0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) mersenneTwister0, doubleArray0, doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertArrayEquals(new double[] {211.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray2 = multivariateNormalDistribution0.getStandardDeviations();
      assertNotNull(doubleArray2);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {211.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {14.52583904633395}, doubleArray2, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1492.6957644510953);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray1[0];
      assertNotNull(doubleArray1[1]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray1[1], doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0): not positive definite matrix: value -0 at index 0
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[][] doubleArray1 = new double[7][3];
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[1];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertNotNull(mersenneTwister0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[][] doubleArray0 = new double[1][4];
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) mersenneTwister0, doubleArray0[0], doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      long long0 = 198L;
      ISAACRandom iSAACRandom0 = new ISAACRandom(long0);
      assertNotNull(iSAACRandom0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) long0;
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) iSAACRandom0, doubleArray0, doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertArrayEquals(new double[] {198.0}, doubleArray0, 0.01);
      
      double double0 = multivariateNormalDistribution0.density(doubleArray0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertArrayEquals(new double[] {198.0}, doubleArray0, 0.01);
      assertEquals(0.028351593322042082, double0, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      long long0 = 198L;
      ISAACRandom iSAACRandom0 = new ISAACRandom(long0);
      assertNotNull(iSAACRandom0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) long0;
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) iSAACRandom0, doubleArray0, doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertArrayEquals(new double[] {198.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)multivariateNormalDistribution0.getCovariances();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertArrayEquals(new double[] {198.0}, doubleArray0, 0.01);
  }
}
