/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:21:32 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.distribution.MultivariateNormalDistribution;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;



import org.junit.runner.RunWith;


public class MultivariateNormalDistributionEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 372;
      intArray0[1] = int0;
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertNotNull(well44497a0);
      assertArrayEquals(new int[] {0, 372}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) intArray0[1];
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) well44497a0, doubleArray0, doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertArrayEquals(new double[] {372.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 372}, intArray0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      
      double[][] doubleArray2 = multivariateNormalDistribution0.sample(int0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {372.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 372}, intArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, multivariateNormalDistribution0.getDimension());
  }

  @Test
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 372;
      intArray0[1] = int0;
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertNotNull(well44497a0);
      assertArrayEquals(new int[] {0, 372}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) intArray0[1];
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) well44497a0, doubleArray0, doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertArrayEquals(new double[] {372.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 372}, intArray0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      
      double[] doubleArray2 = multivariateNormalDistribution0.getStandardDeviations();
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {372.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {19.28730152198591}, doubleArray2, 0.01);
      assertArrayEquals(new int[] {0, 372}, intArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, multivariateNormalDistribution0.getDimension());
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 2.4875248571153216E73;
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double0;
      double[][] doubleArray2 = new double[1][4];
      doubleArray2[0] = doubleArray1;
      assertNotNull(doubleArray2[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(multivariateNormalDistribution0);
      assertArrayEquals(new double[] {2.4875248571153216E73}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      
      try {
        double double1 = multivariateNormalDistribution0.density(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 1
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-2047.608029703864);
      doubleArray0[0] = double0;
      double double1 = (-2190.451062079);
      doubleArray0[2] = double1;
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray1[1];
      assertNotNull(doubleArray1[2]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,238.059 is smaller than, or equal to, the minimum (0): not positive definite matrix: value -4,238.059 at index 0
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 3
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      double[][] doubleArray1 = new double[3][6];
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 16
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[17];
      int int0 = 441;
      intArray0[1] = int0;
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertNotNull(well44497a0);
      assertArrayEquals(new int[] {0, 441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][9];
      double[] doubleArray2 = new double[1];
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) intArray0[1];
      doubleArray1[0] = doubleArray2;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) well44497a0, doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(multivariateNormalDistribution0);
      assertArrayEquals(new int[] {0, 441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      
      double double0 = multivariateNormalDistribution0.density(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(3.286680676251057E-98, double0, 0.01D);
      assertArrayEquals(new double[] {441.0}, doubleArray2, 0.01);
      assertArrayEquals(new int[] {0, 441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(1, multivariateNormalDistribution0.getDimension());
  }

  @Test
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[17];
      int int0 = 441;
      intArray0[1] = int0;
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertNotNull(well44497a0);
      assertArrayEquals(new int[] {0, 441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][9];
      double[] doubleArray2 = new double[1];
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) intArray0[1];
      doubleArray1[0] = doubleArray2;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) well44497a0, doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(multivariateNormalDistribution0);
      assertArrayEquals(new int[] {0, 441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)multivariateNormalDistribution0.getCovariances();
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new int[] {0, 441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
  }
}
