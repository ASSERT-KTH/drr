/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:18:48 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.MultivariateNormalDistribution;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class MultivariateNormalDistributionEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      byte byte0 = (byte)21;
      double[] doubleArray0 = new double[2];
      double double0 = 7.393196131284108E-271;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) byte0;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray1[0], doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertEquals(2, multivariateNormalDistribution0.getDimension());
      
      double[] doubleArray2 = multivariateNormalDistribution0.sample();
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(2, multivariateNormalDistribution0.getDimension());
      assertArrayEquals(new double[] {1.0788091636966595, 22.07880916369666}, doubleArray2, 0.01);
  }

  @Test
  public void test1()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      byte[] byteArray0 = new byte[7];
      well512a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)120, (byte)53, (byte) (-116), (byte) (-123), (byte)105, (byte) (-58)}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      double double0 = 7.393196131284108E-271;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) byteArray0[2];
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray1[0], doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertEquals(2, multivariateNormalDistribution0.getDimension());
      
      double[] doubleArray2 = multivariateNormalDistribution0.getStandardDeviations();
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(2, multivariateNormalDistribution0.getDimension());
      assertArrayEquals(new double[] {8.598369689239994E-136, 7.280109889280518}, doubleArray2, 0.01);
  }

  @Test
  public void test2()  throws Throwable  {
      byte byte0 = (byte)21;
      double[] doubleArray0 = new double[2];
      double double0 = 7.393196131284108E-271;
      doubleArray0[0] = double0;
      doubleArray0[1] = (double) byte0;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray1[0], doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertEquals(2, multivariateNormalDistribution0.getDimension());
      
      double[] doubleArray2 = new double[4];
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try {
        double double1 = multivariateNormalDistribution0.density(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      double[] doubleArray0 = new double[3];
      double double0 = 2102.97519;
      doubleArray0[0] = double0;
      double double1 = 851.28;
      doubleArray0[1] = double1;
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) well19937a0, doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0): not positive definite matrix: value -0 at index 1
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[4][7];
      long long0 = 787L;
      Well1024a well1024a0 = new Well1024a(long0);
      assertNotNull(well1024a0);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) well1024a0, doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0[0], doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 8
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      byte[] byteArray0 = new byte[7];
      well512a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)120, (byte)53, (byte) (-116), (byte) (-123), (byte)105, (byte) (-58)}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) byteArray0[1];
      doubleArray0[1] = (double) byteArray0[1];
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray1[0], doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertEquals(2, multivariateNormalDistribution0.getDimension());
      
      double double0 = multivariateNormalDistribution0.density(doubleArray0);
      assertEquals(2, multivariateNormalDistribution0.getDimension());
      assertArrayEquals(new double[] {120.0, 120.0}, doubleArray0, 0.01);
      assertEquals(60938.17072923939, double0, 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      byte[] byteArray0 = new byte[7];
      well512a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)120, (byte)53, (byte) (-116), (byte) (-123), (byte)105, (byte) (-58)}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) byteArray0[5];
      doubleArray0[1] = doubleArray0[0];
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray1[0], doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertEquals(2, multivariateNormalDistribution0.getDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)multivariateNormalDistribution0.getCovariances();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(2, multivariateNormalDistribution0.getDimension());
      assertEquals(2, array2DRowRealMatrix0.getRowDimension());
      assertEquals(2, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
  }
}
