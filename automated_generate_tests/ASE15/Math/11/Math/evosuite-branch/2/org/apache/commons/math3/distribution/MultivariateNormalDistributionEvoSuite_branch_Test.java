/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:17:35 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.MultivariateNormalDistribution;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class MultivariateNormalDistributionEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 1.6706397224969805;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray1[0], doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      
      double[] doubleArray2 = multivariateNormalDistribution0.sample();
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertArrayEquals(new double[] {2.6903326044651674}, doubleArray2, 0.01);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 1.6706397224969805;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray1[0], doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      
      double[] doubleArray2 = multivariateNormalDistribution0.getStandardDeviations();
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertArrayEquals(new double[] {1.292532290697985}, doubleArray2, 0.01);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 5.421151468356834;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertArrayEquals(new double[] {5.421151468356834}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      
      doubleArray1[0] = doubleArray2;
      assertNotNull(doubleArray1[0]);
      
      try {
        double double1 = multivariateNormalDistribution0.density(doubleArray1[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = (-5.508287292477368);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -5.508 is smaller than, or equal to, the minimum (0): not positive definite matrix: value -5.508 at index 0
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[][] doubleArray1 = new double[9][8];
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 9
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[2][8];
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 1.6706397224969805;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray1[0], doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      
      double double1 = multivariateNormalDistribution0.density(doubleArray1[0]);
      assertEquals(0.308651693479935, double1, 0.01D);
      assertFalse(double1 == double0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = 5.421151468356834;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
      assertNotNull(multivariateNormalDistribution0);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertArrayEquals(new double[] {5.421151468356834}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)multivariateNormalDistribution0.getCovariances();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertArrayEquals(new double[] {5.421151468356834}, doubleArray0, 0.01);
  }
}
