/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:05:03 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.SingularValueDecompositionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class SingularValueDecompositionImplEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix0);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(true, decompositionSolver0.isNonSingular());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 2;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertNotNull(blockRealMatrix0);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) blockRealMatrix0);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(2, blockRealMatrix0.getRowDimension());
      
      // Undeclared exception!
      try {
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getCovariance((double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cutoff singular value is 2, should be at most 0
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[10][6];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray1[0];
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      doubleArray1[9] = doubleArray1[8];
      assertNotNull(doubleArray1[9]);
      
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1, boolean0);
      assertNotNull(realMatrixImpl0);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getCovariance(doubleArray0[1]);
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(4, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(4, array2DRowRealMatrix1.getRowDimension());
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertNotNull(realMatrixImpl0);
      assertEquals(22, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(22, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getS();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(22, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getS();
      assertNotNull(array2DRowRealMatrix1);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(22, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 60;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(60, openMapRealMatrix0.getColumnDimension());
      assertEquals(60, openMapRealMatrix0.getRowDimension());
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) openMapRealMatrix0);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(60, openMapRealMatrix0.getColumnDimension());
      assertEquals(60, openMapRealMatrix0.getRowDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getUT();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(60, openMapRealMatrix0.getColumnDimension());
      assertEquals(60, openMapRealMatrix0.getRowDimension());
      assertEquals(60, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(60, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(60, openMapRealMatrix0.getColumnDimension());
      assertEquals(60, openMapRealMatrix0.getRowDimension());
  }

  @Test
  public void test5()  throws Throwable  {
      double[][] doubleArray0 = new double[10][6];
      boolean boolean0 = true;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0, boolean0);
      assertNotNull(realMatrixImpl0);
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(6, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.transpose();
      assertNotNull(realMatrixImpl1);
      assertEquals(10, realMatrixImpl1.getColumnDimension());
      assertEquals(6, realMatrixImpl1.getRowDimension());
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(6, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl1);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(10, realMatrixImpl1.getColumnDimension());
      assertEquals(6, realMatrixImpl1.getRowDimension());
      assertEquals(false, realMatrixImpl1.isSquare());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(6, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 60;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(60, openMapRealMatrix0.getColumnDimension());
      assertEquals(60, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) openMapRealMatrix0);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(60, openMapRealMatrix0.getColumnDimension());
      assertEquals(60, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      
      double double0 = singularValueDecompositionImpl0.getConditionNumber();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(60, openMapRealMatrix0.getColumnDimension());
      assertEquals(60, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = 60;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(60, openMapRealMatrix0.getColumnDimension());
      assertEquals(60, openMapRealMatrix0.getRowDimension());
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) openMapRealMatrix0);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(60, openMapRealMatrix0.getColumnDimension());
      assertEquals(60, openMapRealMatrix0.getRowDimension());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      
      double[] doubleArray0 = singularValueDecompositionImpl0.getSingularValues();
      assertNotNull(doubleArray0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(60, openMapRealMatrix0.getColumnDimension());
      assertEquals(60, openMapRealMatrix0.getRowDimension());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 60;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(60, openMapRealMatrix0.getColumnDimension());
      assertEquals(60, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) openMapRealMatrix0);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(60, openMapRealMatrix0.getColumnDimension());
      assertEquals(60, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      
      double double0 = singularValueDecompositionImpl0.getNorm();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(60, openMapRealMatrix0.getColumnDimension());
      assertEquals(60, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
  }
}
