/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:59:10 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.SingularValueDecompositionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class SingularValueDecompositionImplEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-4888.257052);
      doubleArray0[1] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4888.257052), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4888.257052, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4888.257052, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(4888.257052, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4888.257052), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(4888.257052, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4888.257052, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(4888.257052, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertNotNull(array2DRowRealMatrix0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, (-4888.257052), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(4888.257052, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4888.257052, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(4888.257052, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(2.389505700642773E7, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertNotNull(singularValueDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertArrayEquals(new double[] {0.0, (-4888.257052), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(4888.257052, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4888.257052, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(4888.257052, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(Double.POSITIVE_INFINITY, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(2.389505700642773E7, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertNotNull(decompositionSolver0);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 106;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertEquals(106, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(106, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) blockRealMatrix0);
      assertEquals(106, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(106, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertNotNull(singularValueDecompositionImpl0);
      
      // Undeclared exception!
      try {
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getCovariance((double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cutoff singular value is 106, should be at most 0
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 106;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int0);
      assertEquals(106, blockRealMatrix0.getColumnDimension());
      assertEquals(106, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertNotNull(blockRealMatrix0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) blockRealMatrix0);
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(106, blockRealMatrix0.getColumnDimension());
      assertEquals(106, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertNotNull(singularValueDecompositionImpl0);
      
      BlockRealMatrix blockRealMatrix1 = (BlockRealMatrix)singularValueDecompositionImpl0.getS();
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(106, blockRealMatrix0.getColumnDimension());
      assertEquals(106, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(106, blockRealMatrix1.getRowDimension());
      assertEquals(106, blockRealMatrix1.getColumnDimension());
      assertEquals(0.0, blockRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(true, blockRealMatrix1.isSquare());
      assertTrue(blockRealMatrix0.equals((Object)blockRealMatrix1));
      assertTrue(blockRealMatrix1.equals((Object)blockRealMatrix0));
      assertNotNull(blockRealMatrix1);
      assertNotSame(blockRealMatrix0, blockRealMatrix1);
      assertNotSame(blockRealMatrix1, blockRealMatrix0);
      
      BlockRealMatrix blockRealMatrix2 = (BlockRealMatrix)singularValueDecompositionImpl0.getS();
      assertEquals(true, blockRealMatrix2.isSquare());
      assertEquals(106, blockRealMatrix2.getColumnDimension());
      assertEquals(0.0, blockRealMatrix2.getFrobeniusNorm(), 0.01D);
      assertEquals(106, blockRealMatrix2.getRowDimension());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(106, blockRealMatrix0.getColumnDimension());
      assertEquals(106, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertTrue(blockRealMatrix2.equals((Object)blockRealMatrix0));
      assertTrue(blockRealMatrix0.equals((Object)blockRealMatrix2));
      assertTrue(blockRealMatrix0.equals((Object)blockRealMatrix1));
      assertNotNull(blockRealMatrix2);
      assertNotSame(blockRealMatrix2, blockRealMatrix0);
      assertSame(blockRealMatrix2, blockRealMatrix1);
      assertNotSame(blockRealMatrix0, blockRealMatrix2);
      assertNotSame(blockRealMatrix0, blockRealMatrix1);
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-2919.9737561644456);
      doubleArray0[5] = double0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-2919.9737561644456), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-2919.9737561644456), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2919.9737561644456, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(singularValueDecompositionImpl0);
  }

  @Test
  public void test4()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(2, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getColumnDimension());
      assertNotNull(singularValueDecompositionImpl0);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 158;
      int int1 = 57;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int1);
      assertEquals(158, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(false, blockRealMatrix0.isSquare());
      assertEquals(57, blockRealMatrix0.getColumnDimension());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(blockRealMatrix0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) blockRealMatrix0);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(158, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(false, blockRealMatrix0.isSquare());
      assertEquals(57, blockRealMatrix0.getColumnDimension());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(singularValueDecompositionImpl0);
      
      double double0 = singularValueDecompositionImpl0.getConditionNumber();
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(158, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(false, blockRealMatrix0.isSquare());
      assertEquals(57, blockRealMatrix0.getColumnDimension());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 158;
      int int1 = 57;
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(int0, int1);
      assertEquals(false, blockRealMatrix0.isSquare());
      assertEquals(158, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(57, blockRealMatrix0.getColumnDimension());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(blockRealMatrix0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) blockRealMatrix0);
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(false, blockRealMatrix0.isSquare());
      assertEquals(158, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(57, blockRealMatrix0.getColumnDimension());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(singularValueDecompositionImpl0);
      
      double double0 = singularValueDecompositionImpl0.getNorm();
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(false, blockRealMatrix0.isSquare());
      assertEquals(158, blockRealMatrix0.getRowDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(57, blockRealMatrix0.getColumnDimension());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertNotNull(singularValueDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(6, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertNotNull(decompositionSolver0);
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[10];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(singularValueDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getCovariance((double) int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(0.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(10, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertNotNull(array2DRowRealMatrix0);
  }
}
