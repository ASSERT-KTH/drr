/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:27:06 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.apache.commons.math.exception.NotStrictlyPositiveException;



import org.junit.runner.RunWith;


public class NormalDistributionImplEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = 0.5;
      double double1 = normalDistributionImpl0.getInitialDomain(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-2912.3);
      double double1 = 420.0544152911958;
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(420.0544152911958, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals((-2912.3), normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double2 = 0.041666666666666664;
      double double3 = normalDistributionImpl0.inverseCumulativeProbability(double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertEquals(420.0544152911958, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals((-2912.3), normalDistributionImpl0.getMean(), 0.01D);
      assertEquals((-3639.6932753937117), double3, 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = 1187.12081158367;
      double double1 = normalDistributionImpl0.getInitialDomain(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = normalDistributionImpl0.sample();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = normalDistributionImpl0.getDomainUpperBound(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = 1187.12081158367;
      double double1 = normalDistributionImpl0.getDomainUpperBound(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.7976931348623157E308, double1, 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = 1187.12081158367;
      double double1 = normalDistributionImpl0.getDomainLowerBound(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = normalDistributionImpl0.getDomainLowerBound(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals((-1.7976931348623157E308), double2, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = 0.0;
      double double1 = normalDistributionImpl0.inverseCumulativeProbability(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = normalDistributionImpl0.getStandardDeviation();
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = normalDistributionImpl0.inverseCumulativeProbability(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = normalDistributionImpl0.getStandardDeviation();
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(1.0, double0, 0.01D);
      
      int int0 = (-670);
      double double1 = normalDistributionImpl0.cumulativeProbability((double) int0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.841344746068543, double1, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = 1187.12081158367;
      double double1 = normalDistributionImpl0.cumulativeProbability(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = normalDistributionImpl0.sample();
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.0, double2, 0.01D);
      
      NormalDistributionImpl normalDistributionImpl1 = null;
      try {
        normalDistributionImpl1 = new NormalDistributionImpl(double1, double2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0): standard deviation (0)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = 1187.12081158367;
      double double1 = normalDistributionImpl0.cumulativeProbability(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = normalDistributionImpl0.density(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.24197072451914337, double2, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = normalDistributionImpl0.getMean();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }
}
