/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:25:48 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class NormalDistributionImplEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 0.14982303977012634;
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(double0, double0, double0);
      assertEquals(0.14982303977012634, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.14982303977012634, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      NormalDistributionImpl normalDistributionImpl1 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl1.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl1.getMean(), 0.01D);
      assertFalse(normalDistributionImpl1.equals((Object)normalDistributionImpl0));
      assertNotSame(normalDistributionImpl1, normalDistributionImpl0);
      assertNotNull(normalDistributionImpl1);
      
      double double1 = normalDistributionImpl1.cumulativeProbability(double0);
      assertEquals(1.0, normalDistributionImpl1.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl1.getMean(), 0.01D);
      assertEquals(0.5595478842910391, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(normalDistributionImpl1.equals((Object)normalDistributionImpl0));
      assertNotSame(normalDistributionImpl1, normalDistributionImpl0);
      
      double double2 = normalDistributionImpl0.inverseCumulativeProbability(double1);
      assertEquals(0.14982303977012634, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.14982303977012634, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(1.0, normalDistributionImpl1.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl1.getMean(), 0.01D);
      assertEquals(0.14982303977012634, double2, 0.01D);
      assertFalse(normalDistributionImpl0.equals((Object)normalDistributionImpl1));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(normalDistributionImpl1.equals((Object)normalDistributionImpl0));
      assertNotSame(normalDistributionImpl0, normalDistributionImpl1);
      assertNotSame(normalDistributionImpl1, normalDistributionImpl0);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 0.14982303977012634;
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(double0, double0, double0);
      assertEquals(0.14982303977012634, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.14982303977012634, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double1 = normalDistributionImpl0.cumulativeProbability(double0);
      assertEquals(0.14982303977012634, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.14982303977012634, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.5, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = normalDistributionImpl0.inverseCumulativeProbability(double1);
      assertEquals(0.14982303977012634, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.14982303977012634, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.14982303977012634, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 1.0;
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double1 = normalDistributionImpl0.inverseCumulativeProbability(double0);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test3()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = 0.0;
      double double1 = normalDistributionImpl0.inverseCumulativeProbability(double0);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 2779.40277;
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double1 = normalDistributionImpl0.cumulativeProbability(double0);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test5()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      long long0 = (-239L);
      double double0 = normalDistributionImpl0.sample();
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = normalDistributionImpl0.cumulativeProbability((double) long0, double0);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.5, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test6()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = 1.3245471311735498E-8;
      double double1 = normalDistributionImpl0.inverseCumulativeProbability(double0);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals((-5.563175371992972), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test7()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = normalDistributionImpl0.getMean();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      
      NormalDistributionImpl normalDistributionImpl1 = null;
      try {
        normalDistributionImpl1 = new NormalDistributionImpl(double0, double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0): standard deviation (0)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      double double0 = (-3123.886928853);
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double1 = normalDistributionImpl0.density(double0);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test9()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = normalDistributionImpl0.getStandardDeviation();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.0, double0, 0.01D);
  }
}
