/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:17:51 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;



import org.junit.runner.RunWith;


public class BaseSecantSolverEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = (-17.0);
      int int0 = 82;
      double[] doubleArray0 = new double[2];
      double double1 = 961.72867162;
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(1, polynomialFunction0.degree());
      assertArrayEquals(new double[] {961.72867162, 82.0}, doubleArray0, 0.01);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(doubleArray0[0], double0, double0);
      assertFalse(double0 == double1);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-17.0), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-17.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(961.72867162, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertArrayEquals(new double[] {961.72867162, 82.0}, doubleArray0, 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double0, doubleArray0[0], doubleArray0[1], allowedSolution0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(961.72867162, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(82, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-17.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-17.0), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(82.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-17.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(961.72867162, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1, polynomialFunction0.degree());
      assertArrayEquals(new double[] {961.72867162, 82.0}, doubleArray0, 0.01);
      assertEquals((-11.728398434390215), double2, 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-40.15300398479582);
      int int0 = 103;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(1, polynomialFunction0.degree());
      assertArrayEquals(new double[] {103.0, 103.0}, doubleArray0, 0.01);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(doubleArray0[0], (double) int0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-40.15300398479582), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(103.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(103.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertArrayEquals(new double[] {103.0, 103.0}, doubleArray0, 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double0, doubleArray0[0], doubleArray0[1], allowedSolution0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(1, polynomialFunction0.degree());
      assertEquals((-40.15300398479582), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(103, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(103.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(103.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-40.15300398479582), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(103.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(103.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertArrayEquals(new double[] {103.0, 103.0}, doubleArray0, 0.01);
      assertEquals((-40.15300398479582), double1, 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = (-521.00231);
      int int0 = 90;
      double[] doubleArray0 = new double[2];
      double double1 = 961.72867162;
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(1, polynomialFunction0.degree());
      assertArrayEquals(new double[] {961.72867162, 90.0}, doubleArray0, 0.01);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(doubleArray0[0], (double) int0, double0);
      assertFalse(double0 == double1);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-521.00231), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(90.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(961.72867162, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertArrayEquals(new double[] {961.72867162, 90.0}, doubleArray0, 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double0, doubleArray0[0], doubleArray0[1], allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-521.00231), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(90.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(961.72867162, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(90, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-521.00231), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(961.72867162, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(90.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1, polynomialFunction0.degree());
      assertArrayEquals(new double[] {961.72867162, 90.0}, doubleArray0, 0.01);
      assertEquals((-10.685874129111085), double2, 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = (-3464.0365543492785);
      double double1 = 1518.257427;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double1);
      assertFalse(double1 == double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1518.257427, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1518.257427, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = 1235;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, (double) int0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-3464.0365543492785), illinoisSolver0.getMin(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(1518.257427, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1235.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1235.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1235, illinoisSolver0.getMaxEvaluations());
      assertEquals(1518.257427, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-714.5816575264616), double2, 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = (-17.0);
      int int0 = 91;
      double[] doubleArray0 = new double[8];
      double double1 = 961.728672;
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(1, polynomialFunction0.degree());
      assertArrayEquals(new double[] {961.728672, 91.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(doubleArray0[0], (double) int0, double0);
      assertFalse(double0 == double1);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(961.728672, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-17.0), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(91.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertArrayEquals(new double[] {961.728672, 91.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = (-1659.0);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double2, doubleArray0[0], doubleArray0[1], allowedSolution0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertEquals(1, polynomialFunction0.degree());
      assertEquals(961.728672, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-17.0), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals((-1659.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(91.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(961.728672, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(91.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(91, regulaFalsiSolver0.getMaxEvaluations());
      assertArrayEquals(new double[] {961.728672, 91.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-10.56844694505503), double3, 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 564;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(564.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(564.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(564.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double0 = 0.0;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sinc0, double0, (double) int0, (double) int0, allowedSolution0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(564.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(564.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(564.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(564, pegasusSolver0.getMaxEvaluations());
      assertEquals(564.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(564.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = (-17.0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 91;
      double[] doubleArray0 = new double[8];
      double double1 = 961.728672;
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(1, polynomialFunction0.degree());
      assertArrayEquals(new double[] {961.728672, 91.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double0, doubleArray0[0]);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1, polynomialFunction0.degree());
      assertEquals(91, illinoisSolver0.getMaxEvaluations());
      assertEquals(472.364336, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-17.0), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(4, illinoisSolver0.getEvaluations());
      assertEquals(961.728672, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertArrayEquals(new double[] {961.728672, 91.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-10.568446945055086), double2, 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = (-667.1752534894775);
      double double1 = 2490.6678293764635;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(pegasusSolver0);
      assertEquals((-667.1752534894775), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(2490.6678293764635, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals((-667.1752534894775), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 1959;
      int int1 = (-1225);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(2, polynomialFunction0.degree());
      assertArrayEquals(new double[] {2490.6678293764635, 1959.0, (-1225.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = 0.2;
      double double3 = 536.07;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double4 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double2, double3, allowedSolution0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertEquals(2, polynomialFunction0.degree());
      assertEquals((-667.1752534894775), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.2, pegasusSolver0.getMin(), 0.01D);
      assertEquals(13, pegasusSolver0.getEvaluations());
      assertEquals(536.07, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1959, pegasusSolver0.getMaxEvaluations());
      assertEquals(2490.6678293764635, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(268.135, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-667.1752534894775), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertArrayEquals(new double[] {2490.6678293764635, 1959.0, (-1225.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2.4033814945762466, double4, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 600;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(600.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(600.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(600.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double0 = (-3630.39161027);
      double double1 = sinc0.value((double) int0);
      assertFalse(double1 == double0);
      assertEquals(7.363741388645533E-5, double1, 0.01D);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sinc0, double0, (double) int0, double1, allowedSolution0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-3630.39161027), pegasusSolver0.getMin(), 0.01D);
      assertEquals(600.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(600.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(600.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(7.363741388645533E-5, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(600, pegasusSolver0.getMaxEvaluations());
      assertEquals(600.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-320.9248826537083), double2, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 594;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0, (double) int0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(594.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(594.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(594.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double0 = (-0.77865);
      double double1 = sinc0.value((double) int0);
      assertFalse(double1 == double0);
      assertEquals((-3.9851846628079256E-4), double1, 0.01D);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sinc0, double0, (double) int0, double1, allowedSolution0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(594, pegasusSolver0.getMaxEvaluations());
      assertEquals((-3.9851846628079256E-4), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-0.77865), pegasusSolver0.getMin(), 0.01D);
      assertEquals(594.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(594.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(594.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(594.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(594.0, double2, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 0.7876694337897026;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.7876694337897026, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.7876694337897026, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.7876694337897026, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 196;
      double[] doubleArray0 = new double[15];
      doubleArray0[1] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(1, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 196.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = (-303.3133152418431);
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, doubleArray0[1]);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1, polynomialFunction0.degree());
      assertEquals(196, pegasusSolver0.getMaxEvaluations());
      assertEquals(196.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-303.3133152418431), pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.7876694337897026, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-53.65665762092155), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.7876694337897026, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.7876694337897026, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertArrayEquals(new double[] {0.0, 196.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-2.8421709430404007E-14), double2, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 0.08360802188447791;
      double double1 = 1895.00738;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.08360802188447791, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1895.00738, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      
      int int0 = 451;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, double1, allowedSolution0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertEquals(451, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.08360802188447791, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.08360802188447791, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(947.5454940109423, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(1895.00738, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1895.00738, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.08360802188447791, double2, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 564;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double0 = 0.0;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sinc0, double0, (double) int0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(13, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(282.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(564.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(564, illinoisSolver0.getMaxEvaluations());
      assertEquals(562.3450849925729, double1, 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-619.12);
      double double1 = 2465.570951249751;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(pegasusSolver0);
      assertEquals(2465.570951249751, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-619.12), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals((-619.12), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = (-1231);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = double1;
      doubleArray0[3] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(3, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 2465.570951249751, 0.0, (-1231.0)}, doubleArray0, 0.01);
      
      int int1 = 551;
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = pegasusSolver0.solve(int1, (UnivariateRealFunction) polynomialFunction0, doubleArray0[3], double1, allowedSolution0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2465.570951249751, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2465.570951249751, pegasusSolver0.getMax(), 0.01D);
      assertEquals(551, pegasusSolver0.getMaxEvaluations());
      assertEquals((-619.12), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(42, pegasusSolver0.getEvaluations());
      assertEquals((-619.12), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1231.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals(617.2854756248755, pegasusSolver0.getStartValue(), 0.01D);
      assertArrayEquals(new double[] {0.0, 2465.570951249751, 0.0, (-1231.0)}, doubleArray0, 0.01);
      assertEquals((-1.4152387975109717), double2, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = 0.053073743;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.053073743, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.053073743, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.053073743, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      
      int int0 = 963;
      Rint rint0 = new Rint();
      assertNotNull(rint0);
      
      double double1 = (-249.83339121832122);
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) rint0, double1, (double) int0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(356.5833043908393, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(963, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-249.83339121832122), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.053073743, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(963.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.053073743, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.053073743, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.13227061562793097, double2, 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = 0.053073743;
      int int0 = 963;
      Rint rint0 = new Rint();
      assertNotNull(rint0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, (double) int0);
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(963.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(963.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) rint0, (double) int0, double0, (double) int0, allowedSolution0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(963.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(963.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(963.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(0.053073743, illinoisSolver0.getMax(), 0.01D);
      assertEquals(963.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(963, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.053073743, double1, 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = (-17.0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 91;
      double[] doubleArray0 = new double[8];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(0, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double0, doubleArray0[0]);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals((-8.5), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-17.0), illinoisSolver0.getMin(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(91, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-17.0), double1, 0.01D);
  }
}
