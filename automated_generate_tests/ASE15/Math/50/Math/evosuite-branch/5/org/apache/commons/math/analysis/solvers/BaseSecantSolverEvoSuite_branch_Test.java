/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:36:17 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.TooManyEvaluationsException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BaseSecantSolverEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 205.061390531989;
      double double1 = 402.981610895927;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double1);
      assertEquals(402.981610895927, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(205.061390531989, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(pegasusSolver0);
      
      int int0 = 2199;
      double double2 = pegasusSolver0.getRelativeAccuracy();
      assertEquals(205.061390531989, double2, 0.01D);
      assertEquals(402.981610895927, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(205.061390531989, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double1, (double) int0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, double1, double2, allowedSolution0);
      assertEquals(320.6678584957924, double3, 0.01D);
      assertEquals(402.981610895927, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(402.981610895927, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2199, pegasusSolver0.getMaxEvaluations());
      assertEquals(205.061390531989, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(205.061390531989, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(205.061390531989, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double3);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 427.0270340935;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(427.0270340935, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 1343;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, (double) int0, (double) int0);
      assertNotNull(harmonicOscillator0);
      
      double double1 = (-630.208084102356);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, double0, double0, allowedSolution0);
      assertEquals(261.40844089220536, double2, 0.01D);
      assertEquals(427.0270340935, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(4, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-630.208084102356), pegasusSolver0.getMin(), 0.01D);
      assertEquals(427.0270340935, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(427.0270340935, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1343, pegasusSolver0.getMaxEvaluations());
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 11;
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      double double0 = (-36.163);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) asinh0, double0, (double) int0, allowedSolution0);
      assertEquals(2.8585184015191185E-13, double1, 0.01D);
      assertEquals(9, regulaFalsiSolver0.getEvaluations());
      assertEquals(11.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(11, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-36.163), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-12.581499999999998), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 14;
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      double double0 = (-37.4180895252);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) asinh0, double0, (double) int0, allowedSolution0);
      assertEquals(1.9139408410828523E-21, double1, 0.01D);
      assertEquals(10, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-11.709044762600001), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-37.4180895252), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(14.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(14, regulaFalsiSolver0.getMaxEvaluations());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 51;
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      double double0 = (-49.657);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) asinh0, double0, (double) int0, allowedSolution0);
      assertEquals((-3.539312487646221E-19), double1, 0.01D);
      assertEquals(51.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(9, regulaFalsiSolver0.getEvaluations());
      assertEquals(51, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.6715000000000018, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-49.657), regulaFalsiSolver0.getMin(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 9;
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      double double0 = (-37.418);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) asinh0, double0, (double) int0, allowedSolution0);
      assertEquals(2.0442202452135424E-11, double1, 0.01D);
      assertEquals((-37.418), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(9, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(9, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-14.209), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(9.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 25;
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      double double0 = (-36.43257063794357);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) asinh0, double0, (double) int0, allowedSolution0);
      assertEquals((-4.494543243961872E-19), double1, 0.01D);
      assertEquals(10, regulaFalsiSolver0.getEvaluations());
      assertEquals(25, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-5.716285318971785), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-36.43257063794357), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(25.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 12;
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      double double0 = (-770.249184);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) asinh0, double0, (double) int0, allowedSolution0);
      assertEquals(1.224934200955296E-9, double1, 0.01D);
      assertEquals((-770.249184), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(12, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-379.124592), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(12, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(12.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 1288;
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      double double0 = (-37.959270887981425);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) asinh0, double0, (double) int0, allowedSolution0);
      assertEquals((-8.06659804002584E-12), double1, 0.01D);
      assertEquals(1288.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(13, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1288, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-37.959270887981425), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(625.0203645560092, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 1344;
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      double double0 = (-39.38300380000677);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) asinh0, double0, (double) int0, allowedSolution0);
      assertEquals(8.75674075963949E-22, double1, 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1344.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-39.38300380000677), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(13, regulaFalsiSolver0.getEvaluations());
      assertEquals(652.3084980999965, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1344, regulaFalsiSolver0.getMaxEvaluations());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-846.5566745868994);
      double double1 = 0.625;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 46;
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) asinh0, double0, double1, allowedSolution0);
      assertEquals(2.550368951490206E-19, double2, 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.625, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(9, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-422.9658372934497), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(46, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-846.5566745868994), regulaFalsiSolver0.getMin(), 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 95;
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double0 = (-0.229545);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((double) int0, (double) int0, (double) int0);
      assertEquals(95.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(95.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(95.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) inverse0, double0, (double) int0, allowedSolution0);
      assertEquals((-0.229545), double1, 0.01D);
      assertEquals(95.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(95.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(95, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(95.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(47.3852275, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(95.0, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-0.229545), regulaFalsiSolver0.getMin(), 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      double double0 = (-1904.9784953244136);
      double double1 = illinoisSolver0.getStartValue();
      assertEquals(0.0, double1, 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      
      int int0 = 843;
      double double2 = (-2181.768);
      assertFalse(double2 == double1);
      
      Logit logit0 = new Logit(double1, double2);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertNotNull(logit0);
      
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertNotNull(univariateRealFunction0);
      
      // Undeclared exception!
      try {
        double double3 = illinoisSolver0.solve(int0, univariateRealFunction0, double2, double0, double1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (843) exceeded: evaluations
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-846.5566745868994);
      double double1 = 0.625;
      int int0 = 46;
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertEquals((-846.5566745868994), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-846.5566745868994), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-846.5566745868994), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertFalse(double0 == double1);
      assertNotNull(pegasusSolver0);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) asinh0, double0, double1, double0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals((-846.5566745868994), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(46, pegasusSolver0.getMaxEvaluations());
      assertEquals((-846.5566745868994), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(11, pegasusSolver0.getEvaluations());
      assertEquals((-846.5566745868994), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.625, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-846.5566745868994), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-846.5566745868994), pegasusSolver0.getMin(), 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 2;
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      double double0 = 0.0;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) asinh0, (double) int0, double0, allowedSolution0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(2, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(2, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(2.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      double double0 = (-1904.9784953244136);
      double double1 = illinoisSolver0.getStartValue();
      assertEquals(0.0, double1, 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertFalse(double1 == double0);
      
      int int0 = 843;
      Ceil ceil0 = new Ceil();
      assertNotNull(ceil0);
      
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) ceil0, double1, (double) int0, double0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals((-1904.9784953244136), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(843.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(843, illinoisSolver0.getMaxEvaluations());
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 95;
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double0 = (-1028.0);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) inverse0, double0, (double) int0, allowedSolution0);
      assertEquals((-8.140167515511563E-7), double1, 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(95, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1028.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-466.5), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(95.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(73, pegasusSolver0.getEvaluations());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) inverse0, double1, (double) int0, double1);
      assertEquals(1.0393006200989755E-7, double2, 0.01D);
      assertEquals((-8.140167515511563E-7), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(95, pegasusSolver0.getMaxEvaluations());
      assertEquals(45, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-8.140167515511563E-7), pegasusSolver0.getMin(), 0.01D);
      assertEquals(95.0, pegasusSolver0.getMax(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }
}
