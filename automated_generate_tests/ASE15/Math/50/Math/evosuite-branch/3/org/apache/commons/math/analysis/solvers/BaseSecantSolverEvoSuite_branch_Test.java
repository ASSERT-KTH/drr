/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:15:28 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BaseSecantSolverEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 186.2359393969511;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(186.2359393969511, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(186.2359393969511, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 2003;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = (-0.851721611298191);
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) asinh0, double1, (double) int0, allowedSolution0);
      assertEquals((-0.851721611298191), pegasusSolver0.getMin(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(2003, pegasusSolver0.getMaxEvaluations());
      assertEquals(1001.0741391943509, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(186.2359393969511, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(186.2359393969511, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2003.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(169.86467943962612, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-1.881731829577988);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1.881731829577988), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 4420;
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      double double1 = (-2041.3800108962348);
      double double2 = 1933.4475999807933;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cos0, double1, double2, double2, allowedSolution0);
      assertEquals(1933.4475999807933, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(18, pegasusSolver0.getEvaluations());
      assertEquals((-1.881731829577988), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(4420, pegasusSolver0.getMaxEvaluations());
      assertEquals(1933.4475999807933, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-2041.3800108962348), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1349.3140447168162), double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 186.2359393969511;
      int int0 = 2003;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertEquals(186.2359393969511, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, (double) int0, (double) int0);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int0, allowedSolution0);
      assertEquals(2003, illinoisSolver0.getMaxEvaluations());
      assertEquals(186.2359393969511, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(186.2359393969511, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1094.6179696984755, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2003.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(324.56770415659275, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 518;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, (double) int0, (double) int0);
      assertEquals(518.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(518.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(518.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0);
      assertEquals(518.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(518.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertNotNull(pegasusSolver0);
      
      double double0 = (-1359.0782815295843);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, allowedSolution0);
      assertEquals(518.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(518.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1359.0782815295843), illinoisSolver0.getMin(), 0.01D);
      assertEquals(518.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-420.53914076479214), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(518, illinoisSolver0.getMaxEvaluations());
      assertEquals(518.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals((-270.9419756605588), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, (double) int0, (double) int0);
      assertEquals((-270.9419756605588), pegasusSolver0.getMin(), 0.01D);
      assertEquals(518.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(518.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(518, pegasusSolver0.getMaxEvaluations());
      assertEquals(518.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(518.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(518.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(518.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1359.0782815295843), illinoisSolver0.getMin(), 0.01D);
      assertEquals(518.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-420.53914076479214), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(518, illinoisSolver0.getMaxEvaluations());
      assertEquals(518.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(81.08643121254698, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 443;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, (double) int0, (double) int0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(443.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(443.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(443.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = (-1826.5050942035584);
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, (double) int0, allowedSolution0);
      assertEquals(443.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(443.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(443.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(443, illinoisSolver0.getMaxEvaluations());
      assertEquals((-1826.5050942035584), illinoisSolver0.getMin(), 0.01D);
      assertEquals(443.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(443.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(443.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 392;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = 0.031;
      double double1 = (-186.39090968742153);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, double1, (double) int0);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(392.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(392.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-186.39090968742153), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertNotNull(illinoisSolver0);
      assertFalse(double1 == double0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, double0, double0, allowedSolution0);
      assertEquals(0.031, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-186.39090968742153), illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.031, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(392, illinoisSolver0.getMaxEvaluations());
      assertEquals(392.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(392.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-186.39090968742153), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-9.686609443329866), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 31.185527642247642;
      int int0 = 2704;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, double0, (double) int0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(31.185527642247642, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(2704.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(2704.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double1 = (-0.21124013282310694);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) inverse0, double1, double0, double0, allowedSolution0);
      assertEquals(31.185527642247642, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-0.21124013282310694), illinoisSolver0.getMin(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(2704, illinoisSolver0.getMaxEvaluations());
      assertEquals(31.185527642247642, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(31.185527642247642, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2704.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2704.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-0.21124013282310694), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 443;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = (-22.200385940915112);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, double0, (double) int0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(443.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(443.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-22.200385940915112), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertNotNull(illinoisSolver0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, double0, allowedSolution0);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals((-22.200385940915112), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(443.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(443.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(443.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-22.200385940915112), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-22.200385940915112), illinoisSolver0.getMin(), 0.01D);
      assertEquals(443, illinoisSolver0.getMaxEvaluations());
      assertEquals(103.11075593954683, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 0.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertNotNull(pegasusSolver0);
      
      int int0 = 756;
      Cos cos0 = new Cos();
      assertNotNull(cos0);
      
      double double1 = 1.570796251296997;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cos0, double1, (double) int0, (double) int0, allowedSolution0);
      assertEquals(756.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(756.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(756, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(7, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.570796251296997, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.5707963267948968, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 388;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = (-231.66725);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, double0, (double) int0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(388.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals((-231.66725), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(388.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, double0, allowedSolution0);
      assertEquals(388.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-231.66725), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(388.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-231.66725), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-231.66725), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(388, illinoisSolver0.getMaxEvaluations());
      assertEquals(388.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-231.66725), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 184.634520607888;
      int int0 = 1933;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(184.634520607888, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, double0, (double) int0);
      assertNotNull(harmonicOscillator0);
      
      double double1 = 404.575;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, (double) int0, allowedSolution0);
      assertEquals(404.575, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1168.7875, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(5, illinoisSolver0.getEvaluations());
      assertEquals(1933.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(184.634520607888, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1933, illinoisSolver0.getMaxEvaluations());
      assertEquals(1862.471788330669, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = (-1724.637279860256);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertEquals((-1724.637279860256), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-1724.637279860256), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1724.637279860256), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 1085;
      Ceil ceil0 = new Ceil();
      assertNotNull(ceil0);
      
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) ceil0, double0, (double) int0);
      assertEquals((-1724.637279860256), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1085, pegasusSolver0.getMaxEvaluations());
      assertEquals(1085.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-319.81863993012803), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-1724.637279860256), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1724.637279860256), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1724.637279860256), pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-0.24615473420362832), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 388;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = (-231.66725);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, double0, (double) int0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(388.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-231.66725), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(388.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0);
      assertEquals(388.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-231.66725), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(78.16637499999999, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(388.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(388.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-231.66725), illinoisSolver0.getMin(), 0.01D);
      assertEquals(388, illinoisSolver0.getMaxEvaluations());
      assertEquals(51.601390387999686, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, double2, allowedSolution0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(388.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-231.66725), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(25.800695193999843, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(388.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(51.601390387999686, illinoisSolver0.getMin(), 0.01D);
      assertEquals(388, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 392;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0, (double) int0, (double) int0);
      assertEquals(392.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(392.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(392.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = 0.0;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, allowedSolution0);
      assertEquals(392.0, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(392, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(196.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(392.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(392.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(392.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = (-869.974);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 240;
      Sin sin0 = new Sin();
      assertNotNull(sin0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) sin0, double0, (double) int0, allowedSolution0);
      assertEquals((-869.974), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-314.98699999999997), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(12, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(240.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(240, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-81.68140899333699), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }
}
