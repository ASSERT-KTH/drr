/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:57:05 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Abs;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;



import org.junit.runner.RunWith;


public class BaseSecantSolverEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      double double0 = pegasusSolver0.getRelativeAccuracy();
      assertEquals(1.0E-14, double0, 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      
      int int0 = 951;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) tan0, double0, (double) int0, double0, allowedSolution0);
      assertEquals(1.5707962946241014, double1, 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(56, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(951, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(951.0, pegasusSolver0.getMax(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 572.8848216;
      int int0 = 2895;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, double0, (double) int0);
      assertNotNull(harmonicOscillator0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((double) int0, (double) int0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(2895.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2895.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertNotNull(regulaFalsiSolver0);
      
      int int1 = 537;
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = regulaFalsiSolver0.solve(int1, (UnivariateRealFunction) harmonicOscillator0, (double) int1, (double) int0, (double) int0, allowedSolution0);
      assertEquals(1699.7487303240569, double1, 0.01D);
      assertEquals(2895.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2895.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2895.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2895.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals(537.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(537, regulaFalsiSolver0.getMaxEvaluations());
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 571.3058708093935;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertEquals(571.3058708093935, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(571.3058708093935, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(571.3058708093935, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 2883;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, double0, double0);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int0, double0, allowedSolution0);
      assertEquals(2883.0, double1, 0.01D);
      assertEquals(571.3058708093935, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(571.3058708093935, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(571.3058708093935, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(571.3058708093935, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2883, pegasusSolver0.getMaxEvaluations());
      assertEquals(2883.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(571.3058708093935, pegasusSolver0.getMin(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 572.8848215523;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertEquals(572.8848215523, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 2895;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, double0, double0);
      assertNotNull(harmonicOscillator0);
      
      double double1 = pegasusSolver0.getMax();
      assertEquals(0.0, double1, 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      UnivariateRealFunction univariateRealFunction0 = harmonicOscillator0.derivative();
      assertFalse(double0 == double1);
      assertNotNull(univariateRealFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, univariateRealFunction0, double1, (double) int0, double0, allowedSolution0);
      assertEquals(1741.2956968827405, double2, 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2895, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(2895.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 2954.29865553;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertEquals(2954.29865553, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(2954.29865553, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 3928;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, double0, (double) int0);
      assertNotNull(harmonicOscillator0);
      
      double double1 = 8.0E298;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, (double) int0, double1);
      assertEquals(2.6532009119983273E298, double2, 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(2954.29865553, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2954.29865553, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(8.0E298, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3928, pegasusSolver0.getMaxEvaluations());
      assertEquals(3928.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(4.0E298, pegasusSolver0.getStartValue(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 572.8848215523;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(572.8848215523, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(572.8848215523, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 663;
      double double1 = (-1.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double1, double0, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int0, double0, allowedSolution0);
      assertEquals(609.0508323969095, double2, 0.01D);
      assertEquals(663.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(663, pegasusSolver0.getMaxEvaluations());
      assertEquals(572.8848215523, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(572.8848215523, pegasusSolver0.getMin(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 572.8848216;
      int int0 = 2895;
      double double1 = (-1.2496143509671502);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double1, double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(harmonicOscillator0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double1, double1, double0);
      assertEquals((-1.2496143509671502), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(572.8848216, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.2496143509671502), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(pegasusSolver0);
      
      double double2 = (-2618.806);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double2, double1, allowedSolution0);
      assertEquals((-2614.0789171475467), double3, 0.01D);
      assertEquals((-1.2496143509671502), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(572.8848216, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.2496143509671502), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-2618.806), pegasusSolver0.getMin(), 0.01D);
      assertEquals(2895, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1.2496143509671502), pegasusSolver0.getMax(), 0.01D);
      assertEquals(4, pegasusSolver0.getEvaluations());
      assertEquals((-1310.0278071754835), pegasusSolver0.getStartValue(), 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 572.8848215523;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(572.8848215523, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(572.8848215523, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 663;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, double0, (double) int0);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int0, double0, allowedSolution0);
      assertEquals(572.8848215523, double1, 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(663, pegasusSolver0.getMaxEvaluations());
      assertEquals(572.8848215523, pegasusSolver0.getMin(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(572.8848215523, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(663.0, pegasusSolver0.getMax(), 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 1.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertEquals(1.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 2895;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, double0, double0);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int0, double0, allowedSolution0);
      assertEquals(1493.7020625026114, double1, 0.01D);
      assertEquals(1.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(4, pegasusSolver0.getEvaluations());
      assertEquals(2895.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2895, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 572.8848216;
      int int0 = 2895;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double0, double0, double0);
      assertNotNull(harmonicOscillator0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0, double0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(572.8848216, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(2895.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2895.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      double double1 = (-2618.806);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, double0, allowedSolution0);
      assertEquals((-2618.806), double2, 0.01D);
      assertEquals(572.8848216, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2895, pegasusSolver0.getMaxEvaluations());
      assertEquals(572.8848216, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2895.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-2618.806), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1022.9605892), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(2895.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 572.8848215523;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertNotNull(pegasusSolver0);
      
      int int0 = 663;
      double double1 = (-1.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(double1, double0, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(harmonicOscillator0);
      
      double double2 = (-449.0439882132911);
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double2, double0, double1);
      assertEquals(171.66545799601232, double3, 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals((-449.0439882132911), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(663, pegasusSolver0.getMaxEvaluations());
      assertEquals(572.8848215523, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
  }

  @Test
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      double double0 = regulaFalsiSolver0.getAbsoluteAccuracy();
      assertEquals(1.0E-6, double0, 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      
      double double1 = regulaFalsiSolver0.getStartValue();
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1, double1);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      assertNotNull(illinoisSolver0);
      
      int int0 = 651;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double2 = (-2787.5111);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double2, double0, allowedSolution0);
      assertEquals(4.169051363132191E-46, double3, 0.01D);
      assertEquals((-2787.5111), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(114, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1393.7555495000001), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(651, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 572.8848215523;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      int int0 = 3029;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, double0, double0);
      assertNotNull(harmonicOscillator0);
      
      double double1 = 0.0;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double1, (double) int0, double0, allowedSolution0);
      assertEquals(1510.6410571059848, double2, 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3029.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(3029, pegasusSolver0.getMaxEvaluations());
      assertEquals(572.8848215523, pegasusSolver0.getStartValue(), 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = (-23.486943877773);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0, double0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-23.486943877773), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-23.486943877773), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-23.486943877773), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 2317;
      Log log0 = new Log();
      assertNotNull(log0);
      
      double double1 = 0.7;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) log0, double1, (double) int0, (double) int0);
      assertEquals(1.0, double2, 0.01D);
      assertEquals(2317.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(2317.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.7, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-23.486943877773), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2317, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(25, regulaFalsiSolver0.getEvaluations());
      assertEquals((-23.486943877773), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-23.486943877773), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      double double0 = regulaFalsiSolver0.getAbsoluteAccuracy();
      assertEquals(1.0E-6, double0, 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 651;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double1 = (-2787.5111);
      assertFalse(double1 == double0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, double0, allowedSolution0);
      assertEquals(3.977962742268088E-7, double2, 0.01D);
      assertEquals(9, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(651, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-2787.5111), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-1393.7555495000001), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = 572.8848215523;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertEquals(572.8848215523, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertNotNull(pegasusSolver0);
      
      int int0 = 3029;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = pegasusSolver0.getMin();
      assertEquals(0.0, double1, 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      Abs abs0 = new Abs();
      assertNotNull(abs0);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) abs0, (double) int0, double1, allowedSolution0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(3029.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(572.8848215523, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1514.5, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(3029, pegasusSolver0.getMaxEvaluations());
      assertEquals(2, pegasusSolver0.getEvaluations());
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = (-9.4806);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertEquals((-9.4806), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 28;
      double[] doubleArray0 = new double[21];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(0, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, (double) int0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertEquals(Double.NaN, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(28, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-9.4806), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(Double.NaN, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(28.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }
}
