/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:16:39 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math.exception.NullArgumentException;
import org.apache.commons.math.exception.ZeroException;
import org.apache.commons.math.fraction.BigFraction;
import org.apache.commons.math.fraction.BigFractionField;
import org.apache.commons.math.fraction.FractionConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class BigFractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 302.61671368681624;
      int int0 = 1189;
      BigFraction bigFraction0 = new BigFraction(double0, double0, int0);
      assertEquals(46, bigFraction0.byteValue());
      assertEquals(302, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      String string0 = bigFraction0.toString();
      assertEquals(46, bigFraction0.byteValue());
      assertEquals(302, bigFraction0.shortValue());
      assertEquals("302", string0);
      assertNotNull(string0);
  }

  @Test
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      String string0 = bigFraction0.toString();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals("1 / 2", string0);
      assertNotNull(string0);
  }

  @Test
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
  }

  @Test
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      double double0 = 0.0;
      BigFraction bigFraction1 = new BigFraction(double0);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
  }

  @Test
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction(int0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.pow((long) int0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = (-2299);
      BigFraction bigFraction1 = bigFraction0.pow(int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction2.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 0.0;
      BigFraction bigFraction0 = new BigFraction(double0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = 1325;
      BigFraction bigFraction1 = bigFraction0.pow(int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      
      float float0 = bigFraction1.floatValue();
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      float float0 = bigFraction0.floatValue();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0.2F, float0, 0.01F);
  }

  @Test
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      String string0 = "{K.y{V|R8h%!";
      boolean boolean0 = bigFraction0.equals((Object) string0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = (-1070L);
      BigFraction bigFraction1 = bigFraction0.pow(long0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(14879, bigFraction1.shortValue());
      assertEquals(31, bigFraction1.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      
      double double0 = bigFraction1.percentageValue();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(14879, bigFraction1.shortValue());
      assertEquals(31, bigFraction1.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(4.939851785515915E105, double0, 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction2.shortValue());
      assertEquals(2, bigFraction2.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
  }

  @Test
  public void test17()  throws Throwable  {
      double double0 = 0.0;
      BigFraction bigFraction0 = new BigFraction(double0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigFraction1, bigFraction0);
      assertSame(bigFraction0, bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction1);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(int0, int0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test22()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.percentageValue();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(33.333333333333336, double0, 0.01D);
      
      int int0 = Integer.MAX_VALUE;
      BigFraction bigFraction1 = new BigFraction(double0, int0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(33, bigFraction1.shortValue());
      assertEquals(33, bigFraction1.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.doubleValue();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0.25, double0, 0.01D);
      
      int int0 = (-2030);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(double0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.25 to fraction after -2,030 iterations
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      double double0 = (-89.1652357059);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)98;
      byteArray0[0] = byte0;
      byteArray0[2] = byteArray0[0];
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(double0, double0, (int) byteArray0[2]);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -89.165 to fraction (-415,399,384,813/4,658,759,454)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 1189;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) int0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,189 to fraction (9,223,372,036,854,774,620/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      byte byte0 = (byte)100;
      double double0 = (-2.738246981762776E132);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(double0, (int) byte0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,738,246,981,762,776,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (-9,223,372,036,854,775,808/1)
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.percentageValue();
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals((-100.0), double0, 0.01D);
      
      BigFraction bigFraction1 = new BigFraction(double0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(-100, bigFraction1.shortValue());
      assertEquals(-100, bigFraction1.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals(-1, bigInteger0.shortValue());
      assertEquals(-1, bigInteger0.byteValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(-1, bigFraction1.shortValue());
      assertEquals(-1, bigFraction1.byteValue());
      assertEquals(-1, bigInteger0.shortValue());
      assertEquals(-1, bigInteger0.byteValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test29()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.divide((int) byteArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(4, int0);
  }

  @Test
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test33()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertEquals(10, bigFraction0.shortValue());
      assertEquals(10, bigFraction0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(3, int0);
      
      BigFraction bigFraction1 = bigFraction0.add(int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(3, bigFraction1.shortValue());
      assertEquals(3, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = 412;
      BigFraction bigFraction1 = bigFraction0.divide((long) int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test37()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(5, int0);
      
      double double0 = 1672.3324378521238;
      BigFraction bigFraction1 = new BigFraction(double0, int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(1672, bigFraction1.shortValue());
      assertEquals(-120, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(0, int0);
      
      BigFraction bigFraction1 = bigFraction0.multiply((long) int0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(1, bigInteger0.shortValue());
      assertEquals(1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
  }

  @Test
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals(-1, bigDecimal0.byteValue());
      assertEquals(-1, bigDecimal0.shortValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.longValue();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0L, long0);
      
      BigFraction bigFraction1 = bigFraction0.subtract(long0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(0, int0);
      
      double double0 = bigFraction0.pow((double) int0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte byte0 = bigFraction0.byteValue();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 412;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(int0, int0);
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFractionField0);
  }

  @Test
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(0, int0);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(int0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigDecimal0.byteValue());
      assertEquals(-1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test47()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.hashCode();
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(23237, int0);
  }

  @Test
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(0, int0);
      
      BigFraction bigFraction1 = bigFraction0.subtract(int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(-1, bigFraction1.shortValue());
      assertEquals(-1, bigFraction1.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(4L, long0);
  }

  @Test
  public void test50()  throws Throwable  {
      double double0 = 0.0;
      BigFraction bigFraction0 = new BigFraction(double0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0L, long0);
  }

  @Test
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = 1055;
      BigFraction bigFraction1 = bigFraction0.add((long) int0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(1055, bigFraction1.shortValue());
      assertEquals(31, bigFraction1.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test52()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = 1055;
      BigFraction bigFraction1 = bigFraction0.multiply(int0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(76, bigFraction1.byteValue());
      assertEquals(844, bigFraction1.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
  }

  @Test
  public void test53()  throws Throwable  {
      int int0 = 412;
      BigFraction bigFraction0 = new BigFraction((long) int0);
      assertEquals(412, bigFraction0.shortValue());
      assertEquals(-100, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test54()  throws Throwable  {
      double double0 = 0.0;
      BigFraction bigFraction0 = new BigFraction(double0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = 0;
      int int1 = bigFraction0.getDenominatorAsInt();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(int1, int0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = 1055;
      BigFraction bigFraction0 = new BigFraction((long) int0, (long) int0);
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }
}
