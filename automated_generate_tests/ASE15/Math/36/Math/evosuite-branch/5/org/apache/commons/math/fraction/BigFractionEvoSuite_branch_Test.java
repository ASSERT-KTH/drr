/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:52:26 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math.exception.NullArgumentException;
import org.apache.commons.math.exception.ZeroException;
import org.apache.commons.math.fraction.BigFraction;
import org.apache.commons.math.fraction.BigFractionField;
import org.apache.commons.math.fraction.FractionConversionException;



import org.junit.runner.RunWith;


public class BigFractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 26;
      BigFraction bigFraction0 = new BigFraction(int0, int0);
      assertNotNull(bigFraction0);
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("1", string0);
      assertNotNull(string0);
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
  }

  @Test
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("1 / 2", string0);
      assertNotNull(string0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
  }

  @Test
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction2.shortValue());
      assertEquals(-1, bigFraction2.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
  }

  @Test
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertNotNull(bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertSame(bigFraction0, bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
  }

  @Test
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.not();
      assertNotNull(bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(-1, bigInteger1.byteValue());
      assertEquals(-1, bigInteger1.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger1);
      assertNotNull(bigFraction1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(-1, bigInteger1.byteValue());
      assertEquals(-1, bigInteger1.shortValue());
      assertEquals(2, bigFraction1.byteValue());
      assertEquals(2, bigFraction1.shortValue());
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = (-1143L);
      BigFraction bigFraction0 = new BigFraction(long0, long0);
      assertNotNull(bigFraction0);
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(long0);
      assertNotNull(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
  }

  @Test
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = BigFraction.ZERO;
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      
      long long0 = bigFraction1.longValue();
      assertEquals(0L, long0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.pow(long0);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertEquals(1, bigFraction2.byteValue());
      assertEquals(1, bigFraction2.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
  }

  @Test
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      
      byte byte0 = bigFraction0.byteValue();
      assertEquals((byte) (-1), byte0);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow((int) byte0);
      assertNotNull(bigFraction1);
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction1.byteValue());
      assertEquals(-1, bigFraction1.shortValue());
  }

  @Test
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      int int0 = 0;
      BigFraction bigFraction1 = bigFraction0.pow(int0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
  }

  @Test
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = BigFraction.ZERO;
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertSame(bigFraction1, bigFraction2);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
  }

  @Test
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertNotNull(bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertSame(bigFraction0, bigFraction1);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = 949.587;
      BigFraction bigFraction0 = new BigFraction(double0);
      assertNotNull(bigFraction0);
      assertEquals(-75, bigFraction0.byteValue());
      assertEquals(949, bigFraction0.shortValue());
      
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      float float0 = bigFraction0.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
  }

  @Test
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      int int0 = 1862;
      BigFraction bigFraction1 = bigFraction0.divide(int0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      boolean boolean0 = bigFraction0.equals((Object) bigFraction1);
      assertFalse(boolean0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      String string0 = " / ";
      boolean boolean0 = bigFraction0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test17()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertNotNull(bigFraction2);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(1, bigFraction2.byteValue());
      assertEquals(1, bigFraction2.shortValue());
  }

  @Test
  public void test21()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertNotNull(bigFraction1);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
  }

  @Test
  public void test22()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertNotNull(bigFraction0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertNotNull(bigFraction1);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(int0, int0);
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test26()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      int int0 = bigFraction0.intValue();
      assertEquals(0, int0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      double double0 = (-3369.6217113316);
      int int1 = 100;
      assertFalse(int1 == int0);
      
      BigFraction bigFraction1 = new BigFraction(double0, (double) int0, int1);
      assertNotNull(bigFraction1);
      assertFalse(int1 == int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(int0 == int1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(-3369, bigFraction1.shortValue());
      assertEquals(-41, bigFraction1.byteValue());
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 0;
      double double0 = (-1393.7044706);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(double0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -1,393.704 to fraction after 0 iterations
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      double double0 = bigFraction0.percentageValue();
      assertEquals(50.0, double0, 0.01D);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      int int0 = 0;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 50 to fraction (-49/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      double double0 = 135.0;
      int int0 = 1098;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 135 to fraction (9,223,372,036,854,775,674/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = (-1.3850458263351744E91);
      int int0 = 3710;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -13,850,458,263,351,744,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (-9,223,372,036,854,775,808/1)
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      double double0 = (-1.3850458263351744E91);
      BigFraction bigFraction0 = new BigFraction(double0);
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction((double) int0);
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
  }

  @Test
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(2, int0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      
      double double0 = (-5.159602957634814E-9);
      BigFraction bigFraction1 = new BigFraction(double0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      
      short short0 = bigFraction1.shortValue();
      assertEquals((short)0, short0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = BigFraction.getReducedFraction(int0, (int) short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
  }

  @Test
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertNotNull(bigInteger0);
      assertEquals(-1, bigInteger0.shortValue());
      assertEquals(-1, bigInteger0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
  }

  @Test
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
  }

  @Test
  public void test37()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(2, int0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.add(int0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(4, bigFraction1.shortValue());
      assertEquals(4, bigFraction1.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
  }

  @Test
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      
      long long0 = 9007199254740990L;
      BigFraction bigFraction1 = bigFraction0.divide(long0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = (-4424);
      double double0 = (-7.96118345325538E-8);
      BigFraction bigFraction0 = new BigFraction(double0, int0);
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
  }

  @Test
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      
      byte byte0 = bigFraction0.byteValue();
      assertEquals((byte) (-1), byte0);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply((long) byte0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
  }

  @Test
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertNotNull(bigInteger0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(3, bigInteger0.byteValue());
      assertEquals(3, bigInteger0.shortValue());
  }

  @Test
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertNotNull(bigDecimal0);
      assertEquals(-1, bigDecimal0.byteValue());
      assertEquals(-1, bigDecimal0.shortValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
  }

  @Test
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(2, int0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract((long) int0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
  }

  @Test
  public void test44()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(2, int0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      
      double double0 = bigFraction0.pow((double) int0);
      assertEquals(4.0, double0, 0.01D);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
  }

  @Test
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertNotNull(bigFractionField0);
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
  }

  @Test
  public void test46()  throws Throwable  {
      double double0 = 135.0;
      int int0 = 1098;
      BigFraction bigFraction0 = new BigFraction(double0, double0, int0);
      assertNotNull(bigFraction0);
      assertEquals(-121, bigFraction0.byteValue());
      assertEquals(135, bigFraction0.shortValue());
  }

  @Test
  public void test47()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(2, int0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      int int0 = bigFraction0.hashCode();
      assertEquals(23313, int0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
  }

  @Test
  public void test50()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      int int0 = bigFraction0.hashCode();
      assertEquals(23313, int0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(int0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(-23312, bigFraction1.shortValue());
      assertEquals(-16, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(1L, long0);
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
  }

  @Test
  public void test52()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(2L, long0);
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
  }

  @Test
  public void test53()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      int int0 = bigFraction0.hashCode();
      assertEquals(23313, int0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = new BigFraction(int0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(17, bigFraction1.byteValue());
      assertEquals(23313, bigFraction1.shortValue());
  }

  @Test
  public void test54()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      
      int int0 = 1098;
      BigFraction bigFraction1 = bigFraction0.add((long) int0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(73, bigFraction1.byteValue());
      assertEquals(1097, bigFraction1.shortValue());
  }

  @Test
  public void test55()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(2, int0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(int0);
      assertNotNull(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(4, bigFraction1.byteValue());
      assertEquals(4, bigFraction1.shortValue());
  }

  @Test
  public void test56()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      
      long long0 = bigFraction0.longValue();
      assertEquals((-1L), long0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = new BigFraction(long0);
      assertNotNull(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertEquals(-1, bigFraction1.shortValue());
      assertEquals(-1, bigFraction1.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
  }

  @Test
  public void test57()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      int int0 = bigFraction0.hashCode();
      assertEquals(23313, int0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertNotNull(bigFraction0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, int0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
  }
}
