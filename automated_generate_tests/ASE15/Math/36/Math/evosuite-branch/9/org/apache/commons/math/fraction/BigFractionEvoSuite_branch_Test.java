/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:38:09 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math.exception.NullArgumentException;
import org.apache.commons.math.exception.ZeroException;
import org.apache.commons.math.fraction.BigFraction;
import org.apache.commons.math.fraction.BigFractionField;
import org.apache.commons.math.fraction.FractionConversionException;



import org.junit.runner.RunWith;


public class BigFractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 2322.0;
      BigFraction bigFraction0 = new BigFraction(double0);
      assertNotNull(bigFraction0);
      assertEquals(18, bigFraction0.byteValue());
      assertEquals(2322, bigFraction0.shortValue());
      
      String string0 = bigFraction0.toString();
      assertNotNull(string0);
      assertEquals(18, bigFraction0.byteValue());
      assertEquals(2322, bigFraction0.shortValue());
      assertEquals("2322", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      String string0 = bigFraction0.toString();
      assertNotNull(string0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals("3 / 5", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals(-1, bigFraction1.shortValue());
      assertEquals(-1, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertNotNull(bigFraction2);
      assertEquals(-1, bigFraction1.shortValue());
      assertEquals(-1, bigFraction1.byteValue());
      assertEquals(-1, bigFraction2.byteValue());
      assertEquals(-1, bigFraction2.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 0.0;
      BigFraction bigFraction0 = new BigFraction(double0);
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
  }

  @Test
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotNull(bigInteger1);
      assertEquals(1, bigInteger1.shortValue());
      assertEquals(1, bigInteger1.byteValue());
      
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotNull(bigInteger2);
      assertEquals(-1, bigInteger2.byteValue());
      assertEquals(-1, bigInteger2.shortValue());
      assertEquals(1, bigInteger1.shortValue());
      assertEquals(1, bigInteger1.byteValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotNull(bigFraction1);
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(-1, bigInteger2.byteValue());
      assertEquals(-1, bigInteger2.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(1, bigInteger1.shortValue());
      assertEquals(1, bigInteger1.byteValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
  }

  @Test
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(2, int0);
      
      BigFraction bigFraction1 = bigFraction0.pow((long) int0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
  }

  @Test
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      int int0 = (-925);
      BigFraction bigFraction1 = bigFraction0.pow(int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertEquals(-4330, bigFraction1.shortValue());
      assertEquals(22, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      int int0 = 1;
      BigFraction bigFraction1 = bigFraction0.pow(int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = BigFraction.ZERO;
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction1, bigFraction0);
      assertSame(bigFraction1, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = 0L;
      BigFraction bigFraction0 = new BigFraction(long0);
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      float float0 = bigFraction0.floatValue();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0.25F, float0, 0.01F);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 52;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(int0, int0);
      assertNotNull(bigFraction0);
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      
      boolean boolean0 = bigFraction1.equals((Object) bigFraction0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      String string0 = null;
      boolean boolean0 = bigFraction0.equals((Object) string0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      int int0 = (-2515);
      BigFraction bigFraction1 = bigFraction0.pow((long) int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertEquals(23321, bigFraction1.shortValue());
      assertEquals(25, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      double double0 = bigFraction1.percentageValue();
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(23321, bigFraction1.shortValue());
      assertEquals(25, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
  }

  @Test
  public void test17()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertNotNull(bigFraction2);
      assertEquals(1, bigFraction2.shortValue());
      assertEquals(1, bigFraction2.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction(int0);
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertSame(bigFraction1, bigFraction0);
      assertSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
  }

  @Test
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test21()  throws Throwable  {
      double double0 = 2322.0;
      BigFraction bigFraction0 = new BigFraction(double0);
      assertNotNull(bigFraction0);
      assertEquals(2322, bigFraction0.shortValue());
      assertEquals(18, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      assertEquals(2322, bigFraction0.shortValue());
      assertEquals(18, bigFraction0.byteValue());
      assertEquals(18, bigFraction1.byteValue());
      assertEquals(2322, bigFraction1.shortValue());
  }

  @Test
  public void test22()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.negate();
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction1.abs();
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertNotNull(bigFraction2);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = (-1824);
      int int1 = 0;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test24()  throws Throwable  {
      double double0 = (-1960.26634234629);
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(2, int0);
      
      BigFraction bigFraction1 = new BigFraction(double0, int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertEquals(-1960, bigFraction1.shortValue());
      assertEquals(88, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test25()  throws Throwable  {
      double double0 = 3143.5;
      int int0 = 52;
      long long0 = (-3241L);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(double0, (double) long0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 3,143.5 to fraction (9,223,372,036,854,772,664/-1)
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-673);
      double double0 = (-5.156097914033476E-8);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(double0, (double) int0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -0 to fraction after -673 iterations
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      int int0 = 1;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertEquals(6, bigFraction1.byteValue());
      assertEquals(6, bigFraction1.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      double double0 = bigFraction1.pow((double) int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(6, bigFraction1.byteValue());
      assertEquals(6, bigFraction1.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(6.0, double0, 0.01D);
      
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 6 to fraction (-5/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      int int0 = 1099;
      long long0 = (-3241L);
      BigFraction bigFraction1 = bigFraction0.add(long0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertEquals(-3240, bigFraction1.shortValue());
      assertEquals(88, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      int int1 = bigFraction1.getNumeratorAsInt();
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(int1 == int0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(-3240, bigFraction1.shortValue());
      assertEquals(88, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals((-16203), int1);
      
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((double) int0, (double) int1, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,099 to fraction (9,223,372,036,854,774,710/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      double double0 = (-3.0635272288480756E25);
      int int0 = (-60);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(double0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -30,635,272,288,480,756,000,000,000 to fraction (-9,223,372,036,854,775,808/1)
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      
      byte byte0 = bigFraction0.byteValue();
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals((byte) (-1), byte0);
      
      BigFraction bigFraction1 = new BigFraction((double) byte0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertEquals(-1, bigFraction1.shortValue());
      assertEquals(-1, bigFraction1.byteValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
  }

  @Test
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      int int0 = 52;
      BigFraction bigFraction1 = bigFraction0.divide(int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test32()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
  }

  @Test
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertNotNull(bigInteger0);
      assertEquals(3, bigInteger0.byteValue());
      assertEquals(3, bigInteger0.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = (-1597);
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigFraction bigFraction1 = bigFraction0.add(int0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(-1596, bigFraction1.shortValue());
      assertEquals(-60, bigFraction1.byteValue());
  }

  @Test
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      byte byte0 = bigFraction0.byteValue();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals((byte)0, byte0);
      
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.divide((long) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      double double0 = 3143.5;
      int int0 = 52;
      BigFraction bigFraction0 = new BigFraction(double0, int0);
      assertNotNull(bigFraction0);
      assertEquals(71, bigFraction0.byteValue());
      assertEquals(3143, bigFraction0.shortValue());
  }

  @Test
  public void test37()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      int int0 = 52;
      BigFraction bigFraction1 = bigFraction0.multiply((long) int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertEquals(20, bigFraction1.shortValue());
      assertEquals(20, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
  }

  @Test
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertNotNull(bigInteger0);
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
  }

  @Test
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
  }

  @Test
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      double double0 = bigFraction0.percentageValue();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(40.0, double0, 0.01D);
  }

  @Test
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertNotNull(bigFraction0);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      
      long long0 = 363L;
      BigFraction bigFraction1 = bigFraction0.subtract(long0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-108, bigFraction1.byteValue());
      assertEquals(-364, bigFraction1.shortValue());
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = (-156);
      BigFraction bigFraction0 = new BigFraction(int0, int0);
      assertNotNull(bigFraction0);
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
  }

  @Test
  public void test43()  throws Throwable  {
      double double0 = 2322.0;
      BigFraction bigFraction0 = new BigFraction(double0);
      assertNotNull(bigFraction0);
      assertEquals(2322, bigFraction0.shortValue());
      assertEquals(18, bigFraction0.byteValue());
      
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertNotNull(bigFractionField0);
      assertEquals(2322, bigFraction0.shortValue());
      assertEquals(18, bigFraction0.byteValue());
  }

  @Test
  public void test44()  throws Throwable  {
      double double0 = 893.6276395310947;
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      byte byte0 = bigFraction0.byteValue();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals((byte)0, byte0);
      
      BigFraction bigFraction1 = new BigFraction(double0, double0, (int) byte0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertEquals(893, bigFraction1.shortValue());
      assertEquals(125, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(5, int0);
  }

  @Test
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      int int0 = (-1824);
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
  }

  @Test
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      int int0 = bigFraction0.hashCode();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(23352, int0);
  }

  @Test
  public void test49()  throws Throwable  {
      double double0 = 2322.0;
      BigFraction bigFraction0 = new BigFraction(double0);
      assertNotNull(bigFraction0);
      assertEquals(2322, bigFraction0.shortValue());
      assertEquals(18, bigFraction0.byteValue());
      
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(2322, bigFraction0.shortValue());
      assertEquals(18, bigFraction0.byteValue());
      assertEquals(0, int0);
      
      BigFraction bigFraction1 = bigFraction0.subtract(int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertEquals(2322, bigFraction1.shortValue());
      assertEquals(18, bigFraction1.byteValue());
      assertEquals(2322, bigFraction0.shortValue());
      assertEquals(18, bigFraction0.byteValue());
  }

  @Test
  public void test50()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(4L, long0);
  }

  @Test
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(3L, long0);
  }

  @Test
  public void test52()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      int int0 = 52;
      BigFraction bigFraction1 = bigFraction0.multiply(int0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(20, bigFraction1.shortValue());
      assertEquals(20, bigFraction1.byteValue());
  }

  @Test
  public void test53()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      int int0 = (-156);
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      int int0 = 3109;
      BigFraction bigFraction0 = new BigFraction((long) int0, (long) int0);
      assertNotNull(bigFraction0);
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
  }

  @Test
  public void test55()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertNotNull(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      long long0 = bigFraction0.longValue();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0L, long0);
  }
}
