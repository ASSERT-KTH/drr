/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:57:03 GMT 2014
 */

package org.apache.commons.math.stat;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.stat.Frequency;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class FrequencyEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      Frequency frequency1 = new Frequency();
      assertTrue(frequency1.equals((Object)frequency0));
      assertNotNull(frequency1);
      assertNotSame(frequency1, frequency0);
      
      char char0 = '\\';
      frequency1.addValue(char0);
      assertFalse(frequency1.equals((Object)frequency0));
      assertNotSame(frequency1, frequency0);
      
      boolean boolean0 = frequency0.equals((Object) frequency1);
      assertFalse(frequency1.equals((Object)frequency0));
      assertFalse(frequency0.equals((Object)frequency1));
      assertNotSame(frequency1, frequency0);
      assertNotSame(frequency0, frequency1);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      Frequency frequency1 = new Frequency();
      assertTrue(frequency1.equals((Object)frequency0));
      assertNotNull(frequency1);
      assertNotSame(frequency1, frequency0);
      
      boolean boolean0 = frequency0.equals((Object) frequency1);
      assertTrue(frequency0.equals((Object)frequency1));
      assertTrue(frequency1.equals((Object)frequency0));
      assertNotSame(frequency0, frequency1);
      assertNotSame(frequency1, frequency0);
      assertTrue(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      Object object0 = null;
      boolean boolean0 = frequency0.equals(object0);
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      long long0 = (-44L);
      long long1 = frequency0.getCount(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      boolean boolean0 = frequency0.equals((Object) long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      int int0 = 368;
      long long0 = frequency0.getCount(int0);
      assertEquals(0L, long0);
      
      frequency0.addValue((Comparable<?>) int0);
      long long1 = frequency0.getCumFreq(long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test05()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      int int0 = (-2066);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-2066), (int)integer0);
      
      frequency0.addValue(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      double double0 = frequency0.getPct((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      int int0 = 368;
      frequency0.addValue((Comparable<?>) int0);
      frequency0.addValue(int0);
  }

  @Test
  public void test07()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      long long0 = (-3L);
      Long long1 = new Long(long0);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-3L), (long)long1);
      
      frequency0.addValue((Object) long1);
      assertTrue(long1.equals((Object)long0));
  }

  @Test
  public void test08()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try {
        frequency0.addValue(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class (java.lang.Object) does not implement Comparable
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      char char0 = '';
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      Integer integer0 = new Integer((int) char0);
      assertEquals(127, (int)integer0);
      
      frequency0.addValue(integer0);
      String string0 = frequency0.toString();
      assertNotNull(string0);
      assertEquals("Value \t Freq. \t Pct. \t Cum Pct. \n127\t1\t100%\t100%\n", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      frequency0.clear();
  }

  @Test
  public void test11()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      long long0 = (-44L);
      long long1 = frequency0.getCount(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(0L, long1);
      
      int int0 = frequency0.hashCode();
      assertEquals(31, int0);
      
      frequency0.addValue(long0);
      assertFalse(long0 == long1);
      
      frequency0.addValue((Integer) int0);
      double double0 = frequency0.getCumPct((Comparable<?>) long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(0.5, double0, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      // Undeclared exception!
      try {
        long long0 = frequency0.getCount((Object) frequency0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = '';
      long long0 = frequency0.getCumFreq(char0);
      assertEquals(0L, long0);
  }

  @Test
  public void test14()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      int int0 = 368;
      long long0 = frequency0.getCumFreq(int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test15()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      int int0 = (-2066);
      double double0 = frequency0.getCumPct(int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      int int0 = (-76);
      double double0 = frequency0.getPct(int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = '';
      double double0 = frequency0.getPct(char0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = '2';
      double double0 = frequency0.getCumPct(char0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      char char0 = '';
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      long long0 = frequency0.getCount(char0);
      assertEquals(0L, long0);
  }

  @Test
  public void test20()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      long long0 = (-3L);
      double double0 = frequency0.getPct(long0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      // Undeclared exception!
      try {
        long long0 = frequency0.getCumFreq((Object) frequency0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.math.stat.Frequency cannot be cast to java.lang.Comparable
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      int int0 = (-76);
      frequency0.addValue((long) int0);
      double double0 = frequency0.getCumPct((Object) int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test23()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      long long0 = (-44L);
      double double0 = frequency0.getCumPct(long0);
      assertEquals(Double.NaN, double0, 0.01D);
  }
}
