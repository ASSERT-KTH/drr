/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:06:19 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.InvalidMatrixException;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class EigenDecompositionImplEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1817.139806723;
      doubleArray0[1] = double0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[6]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1817.139806723, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1817.139806723, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      double double1 = 1827.3209996509163;
      double double2 = 144.538;
      double double3 = 2725.2;
      double double4 = 0.08325;
      doubleArray0[1] = double3;
      doubleArray0[2] = double4;
      doubleArray0[3] = double3;
      doubleArray0[4] = double4;
      doubleArray0[5] = double4;
      doubleArray0[6] = double3;
      doubleArray0[7] = double1;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = doubleArray0[4];
      doubleArray1[0] = double3;
      doubleArray1[2] = double4;
      doubleArray1[3] = double1;
      doubleArray1[4] = doubleArray0[2];
      doubleArray1[5] = double1;
      doubleArray1[6] = doubleArray0[4];
      doubleArray1[7] = double2;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 2725.2, 0.08325, 2725.2, 0.08325, 0.08325, 2725.2, 1827.3209996509163, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2725.2, 0.08325, 0.08325, 1827.3209996509163, 0.08325, 1827.3209996509163, 0.08325, 144.538}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.4399434831983203E23, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      double double1 = 1826.4930533334737;
      double double2 = 144.538;
      doubleArray0[2] = double2;
      double double3 = 2725.2;
      doubleArray0[3] = double3;
      double double4 = 0.08325;
      doubleArray0[0] = doubleArray0[2];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double3;
      doubleArray1[1] = double3;
      doubleArray1[2] = double4;
      doubleArray1[3] = double1;
      double double5 = (-1.0);
      doubleArray1[4] = double5;
      doubleArray1[5] = double1;
      doubleArray1[6] = double5;
      doubleArray1[7] = double2;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double5);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2725.2, 2725.2, 0.08325, 1826.4930533334737, (-1.0), 1826.4930533334737, (-1.0), 144.538}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {144.538, 0.0, 144.538, 2725.2, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4.991659794659369E26, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      double double1 = 1826.4930533334737;
      double double2 = 144.538;
      doubleArray0[2] = double2;
      double double3 = 2725.2;
      doubleArray0[3] = double3;
      double double4 = 12.858521021590748;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double1;
      doubleArray1[2] = double4;
      doubleArray1[3] = double3;
      doubleArray1[1] = double4;
      double double5 = (-1.0);
      doubleArray1[4] = double5;
      doubleArray1[5] = double1;
      doubleArray1[6] = double5;
      doubleArray1[7] = double2;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double5);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1826.4930533334737, 12.858521021590748, 12.858521021590748, 2725.2, (-1.0), 1826.4930533334737, (-1.0), 144.538}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 144.538, 2725.2, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2.495829897329709E26, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      double double1 = 1827.3209996509163;
      double double2 = 144.538;
      double double3 = 0.08325;
      double double4 = 2691.302088839;
      doubleArray0[2] = double3;
      doubleArray0[3] = double2;
      doubleArray0[6] = double2;
      doubleArray0[7] = double4;
      doubleArray0[0] = doubleArray0[2];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = doubleArray0[3];
      doubleArray1[0] = double1;
      doubleArray1[2] = double3;
      doubleArray1[3] = double1;
      doubleArray1[4] = doubleArray0[2];
      doubleArray1[5] = double1;
      doubleArray1[6] = doubleArray0[0];
      doubleArray1[7] = double2;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertArrayEquals(new double[] {1827.3209996509163, 144.538, 0.08325, 1827.3209996509163, 0.08325, 1827.3209996509163, 0.08325, 144.538}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.08325, 0.0, 0.08325, 144.538, 0.0, 0.0, 144.538, 2691.302088839, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6.515475443869391E22, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1817.139806723;
      doubleArray0[1] = double0;
      doubleArray0[3] = double0;
      doubleArray0[6] = double0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = 1139.2789243016541;
      doubleArray1[3] = double0;
      doubleArray1[4] = double0;
      doubleArray1[5] = double0;
      doubleArray1[6] = double1;
      doubleArray1[7] = doubleArray0[1];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {0.0, 1817.139806723, 0.0, 1817.139806723, 0.0, 0.0, 1817.139806723, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1817.139806723, 1817.139806723, 1817.139806723, 1139.2789243016541, 1817.139806723}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1817.139806723;
      doubleArray0[1] = double0;
      double double1 = (-599.8068);
      doubleArray0[6] = double0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = double0;
      doubleArray1[4] = double1;
      doubleArray1[5] = double0;
      doubleArray1[6] = double1;
      doubleArray1[2] = double0;
      doubleArray1[3] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 1817.139806723, 1817.139806723, 1817.139806723, (-599.8068), 1817.139806723, (-599.8068), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1817.139806723, 0.0, 0.0, 0.0, 0.0, 1817.139806723, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1817.139806723;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = double0;
      doubleArray1[4] = double0;
      doubleArray1[5] = double0;
      doubleArray1[2] = double0;
      doubleArray1[3] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[3]);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1817.139806723, 1817.139806723, 1817.139806723, 1817.139806723, 1817.139806723, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1817.139806723;
      doubleArray0[1] = double0;
      double double1 = (-599.8068);
      doubleArray0[3] = double1;
      doubleArray0[6] = double0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = double0;
      doubleArray1[5] = double0;
      doubleArray1[2] = double0;
      doubleArray1[3] = double0;
      double double2 = (-1.0);
      doubleArray1[4] = double2;
      doubleArray1[6] = double2;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[5]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 1817.139806723, 1817.139806723, 1817.139806723, (-1.0), 1817.139806723, (-1.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1817.139806723, 0.0, (-599.8068), 0.0, 0.0, 1817.139806723, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      double double1 = 1827.3209996509163;
      double double2 = 2725.2;
      double double3 = 0.08325;
      doubleArray0[0] = double1;
      doubleArray0[1] = double2;
      doubleArray0[3] = double2;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = doubleArray0[0];
      doubleArray1[2] = double3;
      doubleArray1[3] = double1;
      doubleArray1[4] = doubleArray1[2];
      doubleArray1[5] = double1;
      doubleArray1[6] = doubleArray1[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1827.3209996509163, 2725.2, 0.0, 2725.2, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1827.3209996509163, 0.08325, 1827.3209996509163, 0.08325, 1827.3209996509163, 0.08325, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 3.6168486376938818;
      double double1 = 340.158687;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      double double2 = 0.08325;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double0;
      double double3 = 1139.34;
      doubleArray1[4] = double2;
      doubleArray1[5] = doubleArray1[4];
      doubleArray1[7] = double3;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 340.158687, 340.158687, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.6168486376938818, 0.0, 0.0, 0.0, 0.08325, 0.08325, 0.0, 1139.34}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6.801421506643367E-7, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      double double4 = eigenDecompositionImpl0.getDeterminant();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 340.158687, 340.158687, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.6168486376938818, 0.0, 0.0, 0.0, 0.08325, 0.08325, 0.0, 1139.34}, doubleArray1, 0.01);
      assertEquals(6.801421506643367E-7, double4, 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6.801421506643367E-7, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      double double5 = (-1729.160560087212);
      assertFalse(double5 == double4);
      
      doubleArray1[0] = double4;
      assertEquals(6.801421506643367E-7, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      doubleArray0[6] = double0;
      doubleArray1[3] = double2;
      doubleArray1[6] = double0;
      doubleArray1[1] = double5;
      doubleArray1[2] = doubleArray0[2];
      doubleArray1[4] = double4;
      assertEquals(6.801421506643367E-7, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      
      doubleArray1[5] = double1;
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double5);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double5 == double1);
      assertFalse(double5 == double4);
      assertFalse(double5 == double2);
      assertFalse(double5 == double3);
      assertFalse(double5 == double0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 340.158687, 340.158687, 0.0, 0.0, 3.6168486376938818, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.801421506643367E-7, (-1729.160560087212), 340.158687, 0.08325, 6.801421506643367E-7, 340.158687, 3.6168486376938818, 1139.34}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1415.399832582407), eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl1);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1040.301288982;
      doubleArray0[0] = double0;
      double double1 = (-1554.7398265261384);
      doubleArray0[3] = double1;
      doubleArray0[5] = doubleArray0[0];
      double double2 = (-2339.0);
      doubleArray0[7] = double2;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1040.301288982, 0.0, 0.0, (-1554.7398265261384), 0.0, 1040.301288982, 0.0, (-2339.0), 0.0}, doubleArray0, 0.01);
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(1.363543705494487E8, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(11948.684808980277, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4483.88012148, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(arrayRealVector0);
      assertArrayEquals(new double[] {1040.301288982, 0.0, 0.0, (-1554.7398265261384), 0.0, 1040.301288982, 0.0, (-2339.0), 0.0}, doubleArray0, 0.01);
      assertEquals(18, array2DRowRealMatrix0.getRowDimension());
      assertEquals(18, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(1.363543705494487E8, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(11948.684808980277, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4483.88012148, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[3]);
      assertArrayEquals(new double[] {1040.301288982, 0.0, 0.0, (-1554.7398265261384), 0.0, 1040.301288982, 0.0, (-2339.0), 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(18, array2DRowRealMatrix0.getRowDimension());
      assertEquals(18, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(18, arrayRealVector0.getDimension());
      assertEquals(1.363543705494487E8, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(11948.684808980277, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4483.88012148, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1826.4930533334737;
      double double1 = 2715.5511602741612;
      doubleArray0[3] = double0;
      double double2 = 0.08325;
      double double3 = 12.767231588026762;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double1;
      doubleArray1[1] = double3;
      doubleArray1[2] = double2;
      doubleArray1[3] = double1;
      doubleArray1[4] = double0;
      doubleArray1[5] = double3;
      doubleArray1[6] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2715.5511602741612, 12.767231588026762, 0.08325, 2715.5511602741612, 1826.4930533334737, 12.767231588026762, 2715.5511602741612, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1826.4930533334737, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1827.3209996509163;
      double double1 = 2725.2;
      double double2 = 0.08325;
      doubleArray0[1] = double1;
      doubleArray0[2] = double2;
      doubleArray0[3] = double1;
      doubleArray0[4] = double2;
      double double3 = 12.858521021590748;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[1] = double3;
      doubleArray1[3] = double0;
      doubleArray1[2] = double3;
      doubleArray1[4] = doubleArray1[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[0]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 12.858521021590748, 12.858521021590748, 1827.3209996509163, 12.858521021590748, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2725.2, 0.08325, 2725.2, 0.08325, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-0.7773073233678964);
      double double1 = 1826.4930533334737;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[3] = double1;
      doubleArray0[8] = double0;
      double double2 = 1.0E-12;
      doubleArray1[4] = double2;
      doubleArray1[5] = double1;
      doubleArray1[6] = double2;
      doubleArray1[7] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-0.7773073233678964)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1826.4930533334737, 1.0E-12, 1826.4930533334737, 1.0E-12, 1826.4930533334737}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1826.4930533334737;
      double double1 = 144.538;
      doubleArray0[2] = double1;
      double double2 = 2725.2;
      doubleArray0[3] = double2;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      double double3 = (-1.0);
      doubleArray1[4] = double3;
      doubleArray1[5] = double0;
      doubleArray1[6] = double3;
      doubleArray1[7] = double2;
      doubleArray1[3] = double0;
      doubleArray1[0] = double1;
      doubleArray1[1] = doubleArray1[5];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[4]);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 144.538, 2725.2, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {144.538, 1826.4930533334737, 0.0, 1826.4930533334737, (-1.0), 1826.4930533334737, (-1.0), 2725.2}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.4843664930878858E27, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 2003.89;
      double[][] doubleArray1 = new double[4][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotNull(eigenDecompositionImpl0);
      
      doubleArray0[1] = double0;
      double double1 = 1.232595164407831E-28;
      double double2 = eigenDecompositionImpl0.getDeterminant();
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      
      doubleArray0[0] = double0;
      doubleArray0[2] = double1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      
      doubleArray2[0] = double0;
      doubleArray2[1] = doubleArray0[2];
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(doubleArray0, doubleArray2, double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(eigenDecompositionImpl0.equals((Object)eigenDecompositionImpl1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertArrayEquals(new double[] {2003.89, 1.232595164407831E-28, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2003.89, 2003.89, 1.232595164407831E-28, 0.0}, doubleArray0, 0.01);
      assertNotSame(eigenDecompositionImpl0, eigenDecompositionImpl1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(-0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl1);
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      double[] doubleArray1 = new double[7];
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, doubleArray1[1]);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertNotNull(decompositionSolver0);
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 2003.89;
      double[][] doubleArray1 = new double[4][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(eigenDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertEquals(4, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(4, array2DRowRealMatrix1.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix1);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(decompositionSolver0);
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 2003.89;
      double[][] doubleArray1 = new double[4][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(4, array2DRowRealMatrix1.getRowDimension());
      assertEquals(4, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(array2DRowRealMatrix1);
      
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(int0);
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(true, arrayRealVector0.isNaN());
      assertEquals(Double.NaN, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(arrayRealVector0);
  }

  @Test
  public void test21()  throws Throwable  {
      double double0 = 2728.9611840121775;
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotNull(eigenDecompositionImpl0);
      
      int int0 = 0;
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(int0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotNull(arrayRealVector1);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotNull(array2DRowRealMatrix1);
  }

  @Test
  public void test22()  throws Throwable  {
      double double0 = 2728.9611840121775;
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(eigenDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix1);
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix2.isSquare());
      assertEquals(1, array2DRowRealMatrix2.getRowDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix2);
  }

  @Test
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 2003.89;
      double[][] doubleArray1 = new double[4][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertTrue(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertTrue(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(4, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(4, array2DRowRealMatrix1.getColumnDimension());
      assertNotNull(array2DRowRealMatrix1);
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertTrue(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertTrue(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertTrue(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(true, array2DRowRealMatrix2.isSquare());
      assertEquals(4, array2DRowRealMatrix2.getRowDimension());
      assertEquals(4, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(array2DRowRealMatrix2);
  }

  @Test
  public void test24()  throws Throwable  {
      double double0 = 2728.9611840121775;
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      int int0 = 0;
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(int0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(1.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(arrayRealVector1);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(array2DRowRealMatrix1);
  }

  @Test
  public void test25()  throws Throwable  {
      double double0 = 2728.9611840121775;
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(eigenDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix1);
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix2.getRowDimension());
      assertEquals(true, array2DRowRealMatrix2.isSquare());
      assertEquals(1, array2DRowRealMatrix2.getColumnDimension());
      assertNotNull(array2DRowRealMatrix2);
  }

  @Test
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-890.445685496266);
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      BlockRealMatrix blockRealMatrix0 = new BlockRealMatrix(doubleArray1);
      assertEquals(1542.2971686600301, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(8, blockRealMatrix0.getColumnDimension());
      assertEquals(false, blockRealMatrix0.isSquare());
      assertEquals(3, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) blockRealMatrix0, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertNotNull(realMatrixImpl0);
      
      double double0 = 2.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) realMatrixImpl0, double0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      int int0 = (-1339);
      try {
        double double1 = eigenDecompositionImpl0.getRealEigenvalue(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1339
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(doubleArray2);
  }

  @Test
  public void test29()  throws Throwable  {
      double double0 = 2728.9611840121775;
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      int int0 = 0;
      double double1 = eigenDecompositionImpl0.getImagEigenvalue(int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = 2728.9611840121775;
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(arrayRealVector0);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(eigenDecompositionImpl0);
      
      double[] doubleArray1 = eigenDecompositionImpl0.getImagEigenvalues();
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(7447229.143845146, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2728.9611840121775, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2728.9611840121775, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2728.9611840121775, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(doubleArray1);
  }
}
