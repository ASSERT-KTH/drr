/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:14:01 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import org.apache.commons.math.fraction.Fraction;
import org.apache.commons.math.fraction.ProperFractionFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;


public class ProperFractionFormatEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ProperFractionFormat properFractionFormat0 = null;
      try {
        properFractionFormat0 = new ProperFractionFormat(numberFormat0, numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // whole format can not be null.
         //
      }
  }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
//       assertNotNull(decimalFormat0);
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(2, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
//       assertEquals(2, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       
//       String string0 = "g>zD/Tz=2PM(uf.{wI";
//       ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
//       assertNotNull(choiceFormat0);
//       assertEquals(false, choiceFormat0.isParseIntegerOnly());
//       assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
//       assertEquals("", choiceFormat0.toPattern());
//       assertEquals(3, choiceFormat0.getMaximumFractionDigits());
//       assertEquals(true, choiceFormat0.isGroupingUsed());
//       assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
//       assertEquals(0, choiceFormat0.getMinimumFractionDigits());
//       
//       ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) choiceFormat0, (NumberFormat) choiceFormat0, (NumberFormat) decimalFormat0);
//       assertNotNull(properFractionFormat0);
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(2, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
//       assertEquals(2, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(false, choiceFormat0.isParseIntegerOnly());
//       assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
//       assertEquals("", choiceFormat0.toPattern());
//       assertEquals(3, choiceFormat0.getMaximumFractionDigits());
//       assertEquals(true, choiceFormat0.isGroupingUsed());
//       assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
//       assertEquals(0, choiceFormat0.getMinimumFractionDigits());
//       
//       String string1 = " / ";
//       assertNotSame(string1, string0);
//       
//       int int0 = 0;
//       ParsePosition parsePosition0 = new ParsePosition(int0);
//       assertNotNull(parsePosition0);
//       assertEquals(0, parsePosition0.getIndex());
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       
//       Object object0 = properFractionFormat0.parseObject(string1, parsePosition0);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNull(object0);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(2, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
//       assertEquals(2, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=2]", parsePosition0.toString());
//       assertEquals(2, parsePosition0.getErrorIndex());
//       assertEquals(0, parsePosition0.getIndex());
//       assertEquals(false, choiceFormat0.isParseIntegerOnly());
//       assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
//       assertEquals("", choiceFormat0.toPattern());
//       assertEquals(3, choiceFormat0.getMaximumFractionDigits());
//       assertEquals(true, choiceFormat0.isGroupingUsed());
//       assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
//       assertEquals(0, choiceFormat0.getMinimumFractionDigits());
//   }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      String[] stringArray0 = new String[6];
      String string0 = "tQqqr4|#&eGCc.x1";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[1];
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[0];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[0];
      assertNotNull(stringArray0[5]);
      
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(choiceFormat0);
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals("0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'", choiceFormat0.toPattern());
      
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) choiceFormat0, (NumberFormat) choiceFormat0, (NumberFormat) choiceFormat0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(properFractionFormat0);
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals("0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'", choiceFormat0.toPattern());
      
      int int0 = 1;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertNotNull(parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(-1, parsePosition0.getErrorIndex());
      
      Fraction fraction0 = properFractionFormat0.parse(stringArray0[4], parsePosition0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNull(fraction0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
      assertEquals(1, parsePosition0.getErrorIndex());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals("0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'|0.0#'tQqqr4|#&eGCc.x1'", choiceFormat0.toPattern());
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      String[] stringArray0 = new String[6];
      String string0 = "";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[1];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[0];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[4];
      assertNotNull(stringArray0[5]);
      
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(choiceFormat0);
      assertEquals("0.0#|0.0#|0.0#|0.0#|0.0#|0.0#", choiceFormat0.toPattern());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) choiceFormat0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(properFractionFormat0);
      assertEquals("0.0#|0.0#|0.0#|0.0#|0.0#|0.0#", choiceFormat0.toPattern());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      
      String string1 = ";9sDq~GhPc-{(We9";
      assertNotSame(string1, string0);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertNotNull(parsePosition0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(-1, parsePosition0.getErrorIndex());
      
      Fraction fraction0 = properFractionFormat0.parse(string1, parsePosition0);
      assertNotSame(string1, string0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(fraction0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals("java.text.ParsePosition[index=16,errorIndex=15]", parsePosition0.toString());
      assertEquals(15, parsePosition0.getErrorIndex());
      assertEquals(16, parsePosition0.getIndex());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals("0.0#|0.0#|0.0#;9sDq~GhPc-{(We9|0.0#|0.0#|0.0#", choiceFormat0.toPattern());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
  }

  @Test
  public void test4()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      int int0 = (-235);
      Integer integer0 = new Integer(int0);
      assertEquals((-235), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = properFractionFormat0.format((Object) integer0);
      assertEquals("-235 0 / 1", string0);
      assertNotNull(string0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 0;
      ParsePosition parsePosition0 = new ParsePosition(int1);
      assertNotNull(parsePosition0);
      assertFalse(int1 == int0);
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(-1, parsePosition0.getErrorIndex());
      
      Fraction fraction0 = (Fraction)properFractionFormat0.parseObject(string0, parsePosition0);
      assertNotNull(fraction0);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertEquals(21, fraction0.byteValue());
      assertEquals((-235L), fraction0.longValue());
      assertEquals(-235, fraction0.getNumerator());
      assertEquals((-235.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-235, fraction0.intValue());
      assertEquals(-235, fraction0.shortValue());
      assertEquals((-235.0), fraction0.doubleValue(), 0.01D);
      assertEquals(4, parsePosition0.getErrorIndex());
      assertEquals(10, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=10,errorIndex=4]", parsePosition0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      String string0 = "fLf,[TwZ6*J-#}YA9";
      try {
        Object object0 = properFractionFormat0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      String[] stringArray0 = new String[6];
      String string0 = "tQqqr4|#&eGCc.x1";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[1];
      assertNotNull(stringArray0[2]);
      
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(choiceFormat0);
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) choiceFormat0, (NumberFormat) choiceFormat0, (NumberFormat) choiceFormat0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(properFractionFormat0);
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      
      Fraction fraction0 = properFractionFormat0.parse(stringArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(fraction0);
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
  }

  @Test
  public void test7() {}
//   @Test
//   public void test7()  throws Throwable  {
//       DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
//       assertNotNull(decimalFormat0);
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(2, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals(2, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       
//       ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
//       assertNotNull(properFractionFormat0);
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(2, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals(2, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       
//       Fraction fraction0 = Fraction.ZERO;
//       assertNotNull(fraction0);
//       assertEquals(0, fraction0.byteValue());
//       assertEquals(1, fraction0.getDenominator());
//       assertEquals(0, fraction0.intValue());
//       assertEquals(0, fraction0.shortValue());
//       assertEquals(0.0, fraction0.doubleValue(), 0.01D);
//       assertEquals(0L, fraction0.longValue());
//       assertEquals(0, fraction0.getNumerator());
//       assertEquals(0.0F, fraction0.floatValue(), 0.01F);
//       
//       String string0 = "g>zD/Tz=2PM(uf.{wI";
//       StringBuffer stringBuffer0 = new StringBuffer(string0);
//       assertNotNull(stringBuffer0);
//       assertEquals("g>zD/Tz=2PM(uf.{wI", stringBuffer0.toString());
//       assertEquals(34, stringBuffer0.capacity());
//       assertEquals(18, stringBuffer0.length());
//       
//       int int0 = 2600;
//       FieldPosition fieldPosition0 = new FieldPosition(int0);
//       assertNotNull(fieldPosition0);
//       assertEquals(2600, fieldPosition0.getField());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals("java.text.FieldPosition[field=2600,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       
//       StringBuffer stringBuffer1 = properFractionFormat0.format(fraction0, stringBuffer0, fieldPosition0);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertNotNull(stringBuffer1);
//       assertEquals(33, stringBuffer1.length());
//       assertEquals("g>zD/Tz=2PM(uf.{wI\u00A4 0.00 / \u00A4 1.00", stringBuffer1.toString());
//       assertEquals(34, stringBuffer1.capacity());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toLocalizedPattern());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(2, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals(2, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(2600, fieldPosition0.getField());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals("java.text.FieldPosition[field=2600,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(33, stringBuffer0.length());
//       assertEquals("g>zD/Tz=2PM(uf.{wI\u00A4 0.00 / \u00A4 1.00", stringBuffer0.toString());
//       assertEquals(34, stringBuffer0.capacity());
//       assertEquals(0, fraction0.byteValue());
//       assertEquals(1, fraction0.getDenominator());
//       assertEquals(0, fraction0.intValue());
//       assertEquals(0, fraction0.shortValue());
//       assertEquals(0.0, fraction0.doubleValue(), 0.01D);
//       assertEquals(0L, fraction0.longValue());
//       assertEquals(0, fraction0.getNumerator());
//       assertEquals(0.0F, fraction0.floatValue(), 0.01F);
//   }

  @Test
  public void test8()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      String string0 = "8oh*AGP.RInd";
      try {
        Object object0 = properFractionFormat0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }
}
