/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:57:11 GMT 2014
 */

package org.apache.commons.math3.fraction;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.exception.ZeroException;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.apache.commons.math3.fraction.FractionConversionException;



import org.junit.runner.RunWith;


public class BigFractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      String string0 = bigFraction0.toString();
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertNotNull(string0);
      assertEquals("1", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      String string0 = bigFraction0.toString();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(string0);
      assertEquals("4 / 5", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = (-4);
      BigFraction bigFraction1 = new BigFraction((long) int0, (long) int0);
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotNull(bigFraction2);
  }

  @Test
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 0.0;
      BigFraction bigFraction0 = new BigFraction(double0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-113);
      byteArray0[0] = byte0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
      assertArrayEquals(new byte[] {(byte) (-113), (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = (-4);
      BigFraction bigFraction1 = bigFraction0.pow((long) int0);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(256, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = (-1);
      BigFraction bigFraction1 = bigFraction0.pow(int0);
      assertEquals(3, bigFraction1.shortValue());
      assertEquals(3, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = 614;
      BigFraction bigFraction1 = bigFraction0.pow(int0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotNull(bigFraction2);
  }

  @Test
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = 0.0;
      BigFraction bigFraction1 = new BigFraction(double0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotNull(bigFraction2);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-305);
      BigFraction bigFraction0 = new BigFraction(int0);
      assertEquals(-305, bigFraction0.shortValue());
      assertEquals(-49, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = 913;
      BigFraction bigFraction1 = bigFraction0.pow((long) int0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      
      float float0 = bigFraction1.floatValue();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      
      boolean boolean0 = bigFraction0.equals((Object) bigFraction1);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = 0.0;
      BigFraction bigFraction0 = new BigFraction(double0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigFraction0.equals(object0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = 0.0;
      BigFraction bigFraction1 = new BigFraction(double0);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(0, bigFraction2.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertNotNull(bigFraction2);
  }

  @Test
  public void test17()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      double double0 = 0.0;
      BigFraction bigFraction1 = new BigFraction(double0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.divide((long) int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertEquals(2, bigFraction2.shortValue());
      assertEquals(2, bigFraction2.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction2);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 1155;
      BigFraction bigFraction0 = new BigFraction(int0);
      assertEquals(1155, bigFraction0.shortValue());
      assertEquals(-125, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertEquals(4, bigFraction1.byteValue());
      assertEquals(4, bigFraction1.shortValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertSame(bigFraction1, bigFraction0);
      assertSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test25()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.negate();
      assertEquals(-1, bigFraction1.shortValue());
      assertEquals(-1, bigFraction1.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.abs();
      assertEquals(1, bigFraction2.shortValue());
      assertEquals(1, bigFraction2.byteValue());
      assertEquals(-1, bigFraction1.shortValue());
      assertEquals(-1, bigFraction1.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertTrue(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotNull(bigFraction2);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(int0, int0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 913;
      double double0 = 2148.958;
      BigFraction bigFraction0 = new BigFraction(double0, int0);
      assertEquals(100, bigFraction0.byteValue());
      assertEquals(2148, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test28()  throws Throwable  {
      byte byte0 = (byte)45;
      double double0 = 4777.5;
      double double1 = 0.0;
      BigFraction bigFraction0 = new BigFraction(double0, double1, (int) byte0);
      assertEquals(4777, bigFraction0.shortValue());
      assertEquals(-87, bigFraction0.byteValue());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(bigFraction0);
  }

  @Test
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      double double0 = 2100.48158069;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(double0, (double) byteArray0[1], (int) byteArray0[0]);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 2,100.482 to fraction after 0 iterations
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      long long0 = 0L;
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) long0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 183;
      double double0 = (-793.3331691035626);
      BigFraction bigFraction0 = new BigFraction(double0);
      assertEquals(-793, bigFraction0.shortValue());
      assertEquals(-25, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      short short0 = bigFraction0.shortValue();
      assertEquals(-793, bigFraction0.shortValue());
      assertEquals(-25, bigFraction0.byteValue());
      assertEquals((short) (-793), short0);
      
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((double) int0, (double) short0, (int) short0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 183 to fraction (9,223,372,036,854,775,626/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(double0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0 to fraction after 0 iterations
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      float float0 = bigFraction0.floatValue();
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2.0F, float0, 0.01F);
      
      BigFraction bigFraction1 = new BigFraction((double) float0);
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction1.byteValue());
      assertEquals(2, bigFraction1.shortValue());
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(1, int0);
  }

  @Test
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = 65L;
      BigFraction bigFraction1 = bigFraction0.subtract(long0);
      assertEquals(-64, bigFraction1.byteValue());
      assertEquals(-64, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test37()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(4L, long0);
  }

  @Test
  public void test38()  throws Throwable  {
      long long0 = 1L;
      int int0 = 2109;
      BigFraction bigFraction0 = new BigFraction((double) long0, (double) long0, int0);
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = 522;
      BigFraction bigFraction1 = bigFraction0.divide(int0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = 534L;
      BigFraction bigFraction1 = bigFraction0.add(long0);
      assertEquals(534, bigFraction1.shortValue());
      assertEquals(22, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.hashCode();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(23426, int0);
      
      BigFraction bigFraction1 = bigFraction0.multiply((long) int0);
      assertEquals(52, bigFraction1.byteValue());
      assertEquals(18740, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      short short0 = bigFraction0.shortValue();
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertEquals((short)2, short0);
      
      byte byte0 = bigFraction0.byteValue();
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertEquals((byte)2, byte0);
      
      BigFraction bigFraction1 = BigFraction.getReducedFraction((int) byte0, (int) short0);
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFractionField0);
  }

  @Test
  public void test44()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.longValue();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0L, long0);
  }

  @Test
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = 0;
      BigFraction bigFraction1 = bigFraction0.add(int0);
      assertEquals(2, bigFraction1.shortValue());
      assertEquals(2, bigFraction1.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = 0;
      double double0 = bigFraction0.pow((double) int0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[5];
      BigFraction bigFraction1 = bigFraction0.subtract((int) byteArray0[0]);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, int0);
  }

  @Test
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = 0;
      byte byte0 = bigFraction0.byteValue();
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertEquals((byte)2, byte0);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue((int) byte0, int0);
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigDecimal0.shortValue());
      assertEquals(2, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test50()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.percentageValue();
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(100.0, double0, 0.01D);
  }

  @Test
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test52()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(1L, long0);
  }

  @Test
  public void test53()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test54()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = (-4);
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertNotNull(bigInteger0);
  }

  @Test
  public void test56()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      double double0 = 631.0710793687;
      short short0 = bigFraction0.shortValue();
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals((short)2, short0);
      
      BigFraction bigFraction1 = new BigFraction(double0, (int) short0);
      assertEquals(119, bigFraction1.byteValue());
      assertEquals(631, bigFraction1.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test57()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte byte0 = bigFraction0.byteValue();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals((byte)0, byte0);
      
      BigFraction bigFraction1 = bigFraction0.multiply((int) byte0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test58()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(5, int0);
  }

  @Test
  public void test59()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.hashCode();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(23426, int0);
      
      BigFraction bigFraction1 = new BigFraction((long) int0);
      assertEquals(23426, bigFraction1.shortValue());
      assertEquals(-126, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }
}
