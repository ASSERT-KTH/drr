/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:49:21 GMT 2014
 */

package org.apache.commons.math3.fraction;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.exception.ZeroException;
import org.apache.commons.math3.fraction.BigFraction;
import org.apache.commons.math3.fraction.BigFractionField;
import org.apache.commons.math3.fraction.FractionConversionException;



import org.junit.runner.RunWith;


public class BigFractionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      long long0 = 0L;
      BigFraction bigFraction0 = new BigFraction((double) long0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      String string0 = bigFraction0.toString();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      String string0 = bigFraction0.toString();
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertNotNull(string0);
      assertEquals("-1", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      String string0 = bigFraction0.toString();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(string0);
      assertEquals("4 / 5", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = (-2926L);
      BigFraction bigFraction0 = new BigFraction(long0, long0);
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
  }

  @Test
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.ZERO;
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test05()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = (-513);
      BigFraction bigFraction1 = bigFraction0.pow((long) int0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(-71, bigFraction1.byteValue());
      assertEquals(-12615, bigFraction1.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test
  public void test09()  throws Throwable  {
      long long0 = 4146L;
      BigFraction bigFraction0 = new BigFraction(long0);
      assertEquals(50, bigFraction0.byteValue());
      assertEquals(4146, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.pow(long0);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(50, bigFraction0.byteValue());
      assertEquals(4146, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.negate();
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      
      int int0 = bigFraction1.getNumeratorAsInt();
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals((-3), int0);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.pow(int0);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(-4, bigFraction2.byteValue());
      assertEquals(-4, bigFraction2.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = 4146L;
      BigFraction bigFraction0 = new BigFraction(long0);
      assertEquals(50, bigFraction0.byteValue());
      assertEquals(4146, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      byte byte0 = bigFraction0.byteValue();
      assertEquals(50, bigFraction0.byteValue());
      assertEquals(4146, bigFraction0.shortValue());
      assertEquals((byte)50, byte0);
      
      BigFraction bigFraction1 = bigFraction0.pow((int) byte0);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(50, bigFraction0.byteValue());
      assertEquals(4146, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = (-4150L);
      BigFraction bigFraction0 = new BigFraction((double) long0);
      assertEquals(-4150, bigFraction0.shortValue());
      assertEquals(-54, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long1 = 0L;
      BigFraction bigFraction1 = new BigFraction(long1);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(long1 == long0);
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(-4150, bigFraction0.shortValue());
      assertEquals(-54, bigFraction0.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(long0 == long1);
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(long1 == long0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = 1.6026840209960938;
      int int0 = 3110;
      BigFraction bigFraction0 = new BigFraction(double0, int0);
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      byte byte0 = bigFraction1.byteValue();
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, byte0);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = BigFraction.getReducedFraction((int) byte0, (int) byte0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction2.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      
      BigFraction bigFraction3 = bigFraction2.divide(bigFraction0);
      assertEquals(0, bigFraction3.byteValue());
      assertEquals(0, bigFraction3.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction2.shortValue());
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertNotNull(bigFraction3);
      assertSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertSame(bigFraction2, bigFraction3);
  }

  @Test
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      float float0 = bigFraction0.floatValue();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0.8F, float0, 0.01F);
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = (-4150L);
      BigFraction bigFraction0 = new BigFraction((double) long0);
      assertEquals(-54, bigFraction0.byteValue());
      assertEquals(-4150, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigFraction0.equals(object0);
      assertEquals(-54, bigFraction0.byteValue());
      assertEquals(-4150, bigFraction0.shortValue());
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.ZERO;
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      double double0 = (-845.5649463);
      double double1 = 4.85165184E8;
      int int0 = 0;
      BigFraction bigFraction1 = new BigFraction(double0, double1, int0);
      assertEquals(-78, bigFraction1.byteValue());
      assertEquals(-846, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertEquals(-77, bigFraction2.byteValue());
      assertEquals(-845, bigFraction2.shortValue());
      assertEquals(-78, bigFraction1.byteValue());
      assertEquals(-846, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(double1 == double0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(double0 == double1);
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = 0;
      BigFraction bigFraction1 = new BigFraction(int0);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(-1, bigFraction2.shortValue());
      assertEquals(-1, bigFraction2.byteValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-2, bigFraction1.byteValue());
      assertEquals(-2, bigFraction1.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test22()  throws Throwable  {
      double double0 = (-1555.3);
      int int0 = 394;
      BigFraction bigFraction0 = new BigFraction(double0, int0);
      assertEquals(-19, bigFraction0.byteValue());
      assertEquals(-1555, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 0;
      double double0 = 2908.672;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(double0, (double) int0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 2,908.672 to fraction after 0 iterations
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(5, int0);
      
      BigFraction bigFraction1 = new BigFraction((double) int0, int0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(5, bigFraction1.shortValue());
      assertEquals(5, bigFraction1.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test
  public void test25()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      byte byte0 = bigFraction0.byteValue();
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertEquals((byte)1, byte0);
      
      int int0 = 0;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((double) int0, (int) byte0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = (-3827);
      double double0 = bigFraction0.doubleValue();
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals((-1.0), double0, 0.01D);
      
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((double) int0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -3,827 to fraction (-9,223,372,036,854,771,980/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction(int0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int1 = bigFraction0.getDenominatorAsInt();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      
      double double0 = 1.0672499803427623E292;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(double0, int1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 10,672,499,803,427,623,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(5, int0);
      
      long long0 = 0L;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((long) int0, long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = (-3827);
      BigFraction bigFraction1 = bigFraction0.subtract((long) int0);
      assertEquals(-13, bigFraction1.byteValue());
      assertEquals(3827, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test30()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(5L, long0);
  }

  @Test
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte byte0 = bigFraction0.byteValue();
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertEquals((byte)1, byte0);
      
      BigFraction bigFraction1 = bigFraction0.divide((int) byte0);
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = (-3827);
      BigFraction bigFraction1 = bigFraction0.add((long) int0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(14, bigFraction1.byteValue());
      assertEquals(-3826, bigFraction1.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(3, int0);
      
      BigFraction bigFraction1 = bigFraction0.multiply((long) int0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 4272;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(int0, int0);
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFractionField0);
  }

  @Test
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.longValue();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0L, long0);
  }

  @Test
  public void test37()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(4, bigInteger0.byteValue());
      assertEquals(4, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test
  public void test39()  throws Throwable  {
      long long0 = 4146L;
      BigFraction bigFraction0 = new BigFraction(long0);
      assertEquals(4146, bigFraction0.shortValue());
      assertEquals(50, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = 3051;
      BigFraction bigFraction1 = bigFraction0.add(int0);
      assertEquals(7197, bigFraction1.shortValue());
      assertEquals(29, bigFraction1.byteValue());
      assertEquals(4146, bigFraction0.shortValue());
      assertEquals(50, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test40()  throws Throwable  {
      long long0 = (-113L);
      BigFraction bigFraction0 = new BigFraction(long0);
      assertEquals(-113, bigFraction0.shortValue());
      assertEquals(-113, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals(113, bigFraction1.byteValue());
      assertEquals(113, bigFraction1.shortValue());
      assertEquals(-113, bigFraction0.shortValue());
      assertEquals(-113, bigFraction0.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 1075;
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.pow((double) int0);
      assertEquals(-1, bigFraction0.shortValue());
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      byte byte0 = bigFraction0.byteValue();
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertEquals((byte)1, byte0);
      
      BigFraction bigFraction1 = bigFraction0.subtract((int) byte0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.hashCode();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(23389, int0);
  }

  @Test
  public void test44()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = (-462);
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.percentageValue();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(60.0, double0, 0.01D);
  }

  @Test
  public void test46()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test47()  throws Throwable  {
      long long0 = (-4150L);
      BigFraction bigFraction0 = new BigFraction((double) long0);
      assertEquals(-4150, bigFraction0.shortValue());
      assertEquals(-54, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long1 = bigFraction0.getNumeratorAsLong();
      assertEquals(-4150, bigFraction0.shortValue());
      assertEquals(-54, bigFraction0.byteValue());
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-4150L), long1);
  }

  @Test
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, int0);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(int0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test50()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(5, bigInteger0.shortValue());
      assertEquals(5, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
  }

  @Test
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.getNumeratorAsInt();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(3, int0);
      
      BigFraction bigFraction1 = bigFraction0.multiply(int0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test
  public void test52()  throws Throwable  {
      double double0 = 1.6026840209960938;
      int int0 = 3110;
      BigFraction bigFraction0 = new BigFraction(double0, int0);
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      byte byte0 = bigFraction0.byteValue();
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertEquals((byte)1, byte0);
      
      BigFraction bigFraction1 = bigFraction0.divide((long) byte0);
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertTrue(bigFraction0.equals((Object)bigFraction1));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
  }

  @Test
  public void test53()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotNull(bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
  }
}
