/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:00:04 GMT 2014
 */

package org.apache.commons.math.stat.correlation;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.stat.correlation.Covariance;
import org.apache.commons.math.stat.correlation.PearsonsCorrelation;



import org.junit.runner.RunWith;


public class PearsonsCorrelationEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      
      PearsonsCorrelation pearsonsCorrelation0 = null;
      try {
        pearsonsCorrelation0 = new PearsonsCorrelation((RealMatrix) array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // insufficient data: only 4 rows and 1 columns.
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0, realMatrixImpl0.getRowDimension());
      
      PearsonsCorrelation pearsonsCorrelation0 = null;
      try {
        pearsonsCorrelation0 = new PearsonsCorrelation((RealMatrix) realMatrixImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // insufficient data: only 0 rows and 0 columns.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[3][10];
      double[] doubleArray1 = new double[1];
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation(doubleArray0);
      assertNotNull(pearsonsCorrelation0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      try {
        double double0 = pearsonsCorrelation0.correlation(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid array dimensions. xArray has size 5; yArray has 1 elements
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation(doubleArray1);
      assertNotNull(pearsonsCorrelation0);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)pearsonsCorrelation0.getCorrelationPValues();
      assertNotNull(blockRealMatrix0);
      assertEquals(2, blockRealMatrix0.getColumnDimension());
      assertEquals(Double.NaN, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(2, blockRealMatrix0.getRowDimension());
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      int int0 = 39;
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation((RealMatrix) array2DRowRealMatrix0, int0);
      assertNotNull(pearsonsCorrelation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)pearsonsCorrelation0.getCorrelationPValues();
      assertNotNull(blockRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertEquals(1, blockRealMatrix0.getColumnDimension());
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      int int0 = 48;
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation((RealMatrix) array2DRowRealMatrix0, int0);
      assertNotNull(pearsonsCorrelation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)pearsonsCorrelation0.getCorrelationStandardErrors();
      assertNotNull(blockRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertEquals(1, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
  }

  @Test
  public void test06()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertNotNull(covariance0);
      assertEquals(0, covariance0.getN());
      
      PearsonsCorrelation pearsonsCorrelation0 = null;
      try {
        pearsonsCorrelation0 = new PearsonsCorrelation(covariance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // covariance matrix is null
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      Covariance covariance0 = new Covariance(doubleArray0);
      assertNotNull(covariance0);
      assertEquals(2, covariance0.getN());
      
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation(covariance0);
      assertNotNull(pearsonsCorrelation0);
      assertEquals(2, covariance0.getN());
  }

  @Test
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[1][10];
      double[] doubleArray1 = new double[8];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      int int0 = 39;
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation((RealMatrix) array2DRowRealMatrix0, int0);
      assertNotNull(pearsonsCorrelation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      // Undeclared exception!
      try {
        RealMatrix realMatrix0 = pearsonsCorrelation0.computeCorrelationMatrix(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid array dimensions. xArray has size 1; yArray has 1 elements
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation();
      assertNotNull(pearsonsCorrelation0);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      int int0 = 39;
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation((RealMatrix) array2DRowRealMatrix0, int0);
      assertNotNull(pearsonsCorrelation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)pearsonsCorrelation0.getCorrelationMatrix();
      assertNotNull(blockRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(1, blockRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
  }
}
