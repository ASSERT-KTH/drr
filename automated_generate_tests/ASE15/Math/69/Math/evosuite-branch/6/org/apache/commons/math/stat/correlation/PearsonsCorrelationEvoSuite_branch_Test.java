/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 07:06:55 GMT 2014
 */

package org.apache.commons.math.stat.correlation;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.stat.correlation.Covariance;
import org.apache.commons.math.stat.correlation.PearsonsCorrelation;



import org.junit.runner.RunWith;


public class PearsonsCorrelationEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      PearsonsCorrelation pearsonsCorrelation0 = null;
      try {
        pearsonsCorrelation0 = new PearsonsCorrelation(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // insufficient data: only 3 rows and 1 columns.
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      PearsonsCorrelation pearsonsCorrelation0 = null;
      try {
        pearsonsCorrelation0 = new PearsonsCorrelation(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // insufficient data: only 1 rows and 8 columns.
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation();
      assertNotNull(pearsonsCorrelation0);
      
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      try {
        double double0 = pearsonsCorrelation0.correlation(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid array dimensions. xArray has size 5; yArray has 10 elements
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation(doubleArray0);
      assertNotNull(pearsonsCorrelation0);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)pearsonsCorrelation0.getCorrelationPValues();
      assertEquals(Double.NaN, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(9, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(9, blockRealMatrix0.getRowDimension());
      assertNotNull(blockRealMatrix0);
  }

  @Test
  public void test4()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation(doubleArray0);
      assertNotNull(pearsonsCorrelation0);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)pearsonsCorrelation0.getCorrelationStandardErrors();
      assertEquals(Double.NaN, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(9, blockRealMatrix0.getRowDimension());
      assertEquals(9, blockRealMatrix0.getColumnDimension());
      assertEquals(true, blockRealMatrix0.isSquare());
      assertNotNull(blockRealMatrix0);
  }

  @Test
  public void test5()  throws Throwable  {
      Covariance covariance0 = new Covariance();
      assertEquals(0, covariance0.getN());
      assertNotNull(covariance0);
      
      PearsonsCorrelation pearsonsCorrelation0 = null;
      try {
        pearsonsCorrelation0 = new PearsonsCorrelation(covariance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // covariance matrix is null
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      Covariance covariance0 = new Covariance(doubleArray0);
      assertEquals(2, covariance0.getN());
      assertNotNull(covariance0);
      
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation(covariance0);
      assertEquals(2, covariance0.getN());
      assertNotNull(pearsonsCorrelation0);
  }

  @Test
  public void test7()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation(doubleArray0);
      assertNotNull(pearsonsCorrelation0);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)pearsonsCorrelation0.computeCorrelationMatrix(doubleArray0);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(3, blockRealMatrix0.getRowDimension());
      assertEquals(Double.NaN, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(3, blockRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      int int0 = 0;
      PearsonsCorrelation pearsonsCorrelation1 = new PearsonsCorrelation((RealMatrix) blockRealMatrix0, int0);
      assertFalse(pearsonsCorrelation1.equals((Object)pearsonsCorrelation0));
      assertFalse(pearsonsCorrelation0.equals((Object)pearsonsCorrelation1));
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(3, blockRealMatrix0.getRowDimension());
      assertEquals(Double.NaN, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(3, blockRealMatrix0.getColumnDimension());
      assertNotNull(pearsonsCorrelation1);
      assertNotSame(pearsonsCorrelation1, pearsonsCorrelation0);
      assertNotSame(pearsonsCorrelation0, pearsonsCorrelation1);
  }

  @Test
  public void test8()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation();
      assertNotNull(pearsonsCorrelation0);
      
      // Undeclared exception!
      try {
        RealMatrix realMatrix0 = pearsonsCorrelation0.computeCorrelationMatrix(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid array dimensions. xArray has size 1; yArray has 1 elements
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      PearsonsCorrelation pearsonsCorrelation0 = new PearsonsCorrelation();
      assertNotNull(pearsonsCorrelation0);
      
      RealMatrix realMatrix0 = pearsonsCorrelation0.getCorrelationMatrix();
      assertNull(realMatrix0);
  }
}
