/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:28:00 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class DiscreteDistributionEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      double double0 = 48.3;
      Integer integer0 = null;
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, (Double) double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      int int0 = (-18);
      try {
        Object[] objectArray0 = discreteDistribution0.sample(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-18)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = "TRUTREGON_SEP_FAtLED";
      double double0 = 4819.612351416971;
      Double double1 = new Double(double0);
      assertEquals(4819.612351416971, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      Pair<String, Double> pair0 = new Pair<String, Double>(string0, double1);
      assertNotNull(pair0);
      assertTrue(double1.equals((Object)double0));
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(double1.equals((Object)double0));
      
      boolean boolean1 = linkedList0.offerLast(pair0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(double1.equals((Object)double0));
      assertTrue(boolean1 == boolean0);
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((List<Pair<String, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList0.size());
      
      int int0 = 2865;
      Object[] objectArray0 = discreteDistribution0.sample(int0);
      assertNotNull(objectArray0);
      assertEquals(2, linkedList0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      double double0 = 48.3;
      Integer integer0 = null;
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, (Double) double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = "TRUTREGON_SEP_FAtLED";
      double double0 = 4819.612351416971;
      Double double1 = new Double(double0);
      assertEquals(4819.612351416971, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      Pair<String, Double> pair0 = new Pair<String, Double>(string0, double1);
      assertNotNull(pair0);
      assertTrue(double1.equals((Object)double0));
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(double1.equals((Object)double0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((List<Pair<String, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      String string1 = "_i7jAw=";
      assertNotSame(string1, string0);
      
      double double2 = discreteDistribution0.probability(string1);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(1, linkedList0.size());
      assertNotSame(string1, string0);
      assertFalse(double2 == double0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      double double0 = 48.3;
      Double double1 = new Double(double0);
      assertEquals(48.3, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) linkedList0, double1);
      assertNotNull(pair0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertTrue(double1.equals((Object)double0));
      
      linkedList0.addFirst(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(double1.equals((Object)double0));
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution1 = null;
      double double2 = discreteDistribution0.probability(discreteDistribution1);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(1, linkedList0.size());
      assertFalse(double2 == double0);
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      double double0 = 48.3;
      Integer integer0 = null;
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, (Double) double0);
      assertNotNull(pair0);
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution1 = null;
      double double1 = discreteDistribution0.probability(discreteDistribution1);
      assertEquals(1.0, double1, 0.01D);
      assertEquals(1, linkedList0.size());
      assertFalse(double1 == double0);
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = "TRUTREGON_SEP_FAtLED";
      double double0 = 4819.612351416971;
      Double double1 = new Double(double0);
      assertEquals(4819.612351416971, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      Pair<String, Double> pair0 = new Pair<String, Double>(string0, double1);
      assertNotNull(pair0);
      assertTrue(double1.equals((Object)double0));
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(double1.equals((Object)double0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((List<Pair<String, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      double double2 = discreteDistribution0.probability(string0);
      assertEquals(1.0, double2, 0.01D);
      assertEquals(1, linkedList0.size());
      assertFalse(double2 == double0);
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<Pair<Double, Double>> linkedList0 = new LinkedList<Pair<Double, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      double double0 = (-2091.084002489836);
      Double double1 = new Double(double0);
      assertEquals((-2091.084002489836), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double1, double1);
      assertNotNull(pair0);
      assertTrue(double1.equals((Object)double0));
      
      boolean boolean0 = linkedList0.offerFirst(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(double1.equals((Object)double0));
      
      DiscreteDistribution<Double> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Double>((List<Pair<Double, Double>>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,091.084 is smaller than the minimum (0)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = "TRUTREGON_SEP_FAtLED";
      double double0 = 4819.612351416971;
      Double double1 = new Double(double0);
      assertEquals(4819.612351416971, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      Pair<String, Double> pair0 = new Pair<String, Double>(string0, double1);
      assertNotNull(pair0);
      assertTrue(double1.equals((Object)double0));
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(double1.equals((Object)double0));
      
      DiscreteDistribution<String> discreteDistribution0 = new DiscreteDistribution<String>((List<Pair<String, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      int int0 = 2865;
      discreteDistribution0.reseedRandomGenerator((long) int0);
      assertEquals(1, linkedList0.size());
  }
}
