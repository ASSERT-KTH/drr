/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:30:20 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class DiscreteDistributionEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      short short0 = (short)4;
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)4, (short)short1);
      
      Double double0 = new Double((double) short0);
      assertEquals(4.0, (double)double0, 0.01D);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      assertNotNull(pair0);
      assertTrue(short1.equals((Object)short0));
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      int int0 = (-2206);
      try {
        Object[] objectArray0 = discreteDistribution0.sample(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,206)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      short short0 = (short)14;
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)14, (short)short1);
      
      Double double0 = new Double((double) short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals(14.0, (double)double0, 0.01D);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) linkedList0, double0);
      assertNotNull(pair0);
      assertTrue(short1.equals((Object)short0));
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(pair0);
      assertTrue(boolean1 == boolean0);
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList0.size());
      
      Object[] objectArray0 = discreteDistribution0.sample((int) short0);
      assertNotNull(objectArray0);
      assertEquals(2, linkedList0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      short short0 = (short)4;
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)4, (short)short1);
      
      Double double0 = new Double((double) short0);
      assertEquals(4.0, (double)double0, 0.01D);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      assertNotNull(pair0);
      assertTrue(short1.equals((Object)short0));
      
      Pair<Object, Double> pair1 = new Pair<Object, Double>(pair0);
      assertNotNull(pair1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = linkedList0.add(pair1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((List<Pair<Object, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = null;
      double double0 = 219.36538137;
      byte byte1 = (byte)10;
      Byte byte2 = new Byte(byte1);
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)10, (byte)byte2);
      
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(219.36538137, (double)double1, 0.01D);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double1);
      assertNotNull(pair0);
      assertTrue(double1.equals((Object)double0));
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(double1.equals((Object)double0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>((List<Pair<Byte, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      double double2 = discreteDistribution0.probability(byte2);
      assertFalse(double2 == double0);
      assertTrue(byte2.equals((Object)byte1));
      assertEquals(0.0, double2, 0.01D);
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Byte byte0 = null;
      double double0 = 219.36538137;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(219.36538137, (double)double1, 0.01D);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte0, double1);
      assertNotNull(pair0);
      assertTrue(double1.equals((Object)double0));
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(double1.equals((Object)double0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>((List<Pair<Byte, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      double double2 = discreteDistribution0.probability(byte0);
      assertFalse(double2 == double0);
      assertEquals(1.0, double2, 0.01D);
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      double double0 = 219.36538137;
      byte byte0 = (byte)10;
      Byte byte1 = new Byte(byte0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)10, (byte)byte1);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, (Double) double0);
      assertNotNull(pair0);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>((List<Pair<Byte, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      double double1 = discreteDistribution0.probability(byte1);
      assertFalse(double1 == double0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(1.0, double1, 0.01D);
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Byte byte0 = null;
      double double0 = 219.36538137;
      byte byte1 = (byte)10;
      Byte byte2 = new Byte(byte1);
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)10, (byte)byte2);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte2, (Double) double0);
      assertNotNull(pair0);
      assertTrue(byte2.equals((Object)byte1));
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>((List<Pair<Byte, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      double double1 = discreteDistribution0.probability(byte0);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<Pair<Short, Double>> linkedList0 = new LinkedList<Pair<Short, Double>>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      short short0 = (short) (-5493);
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-5493), (short)short1);
      
      Double double0 = new Double((double) short0);
      assertEquals((-5493.0), (double)double0, 0.01D);
      
      Pair<Short, Double> pair0 = new Pair<Short, Double>(short1, double0);
      assertNotNull(pair0);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Short> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Short>((List<Pair<Short, Double>>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -5,493 is smaller than the minimum (0)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      LinkedList<Pair<Byte, Double>> linkedList0 = new LinkedList<Pair<Byte, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      double double0 = 219.36538137;
      byte byte0 = (byte)10;
      Byte byte1 = new Byte(byte0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)10, (byte)byte1);
      
      Pair<Byte, Double> pair0 = new Pair<Byte, Double>(byte1, (Double) double0);
      assertNotNull(pair0);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Byte> discreteDistribution0 = new DiscreteDistribution<Byte>((List<Pair<Byte, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      discreteDistribution0.reseedRandomGenerator((long) byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(1, linkedList0.size());
  }
}
