/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:59:08 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class DiscreteDistributionEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      long long0 = 1L;
      Well19937c well19937c0 = new Well19937c(long0);
      assertNotNull(well19937c0);
      
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Long long1 = new Long(long0);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Double double0 = new Double((double) long1);
      assertEquals(1.0, (double)double0, 0.01D);
      assertTrue(long1.equals((Object)long0));
      
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) long0, double0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) well19937c0, (List<Pair<Long, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      int int0 = 0;
      try {
        Object[] objectArray0 = discreteDistribution0.sample(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = 117;
      Integer integer0 = new Integer(int0);
      assertEquals(117, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Double double0 = new Double((double) integer0);
      assertEquals(117.0, (double)double0, 0.01D);
      assertTrue(integer0.equals((Object)int0));
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(pair0);
      assertTrue(boolean1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(2, linkedList0.size());
      
      Object[] objectArray0 = discreteDistribution0.sample(int0);
      assertNotNull(objectArray0);
      assertEquals(2, linkedList0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = 117;
      Integer integer0 = new Integer(int0);
      assertEquals(117, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Double double0 = new Double((double) integer0);
      assertEquals(117.0, (double)double0, 0.01D);
      assertTrue(integer0.equals((Object)int0));
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      List<Pair<Integer, Double>> list0 = discreteDistribution0.getSamples();
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      long long0 = 1L;
      Well19937c well19937c0 = new Well19937c(long0);
      assertNotNull(well19937c0);
      
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Long long1 = new Long(long0);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Double double0 = new Double((double) long1);
      assertEquals(1.0, (double)double0, 0.01D);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = null;
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long2, double0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) well19937c0, (List<Pair<Long, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      double double1 = discreteDistribution0.probability(long1);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      long long0 = 1L;
      Well19937c well19937c0 = new Well19937c(long0);
      assertNotNull(well19937c0);
      
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Long long1 = new Long(long0);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Double double0 = new Double((double) long1);
      assertEquals(1.0, (double)double0, 0.01D);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = null;
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) well19937c0, (List<Pair<Long, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      double double1 = discreteDistribution0.probability(long2);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      long long0 = 1L;
      Well19937c well19937c0 = new Well19937c(long0);
      assertNotNull(well19937c0);
      
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Long long1 = new Long(long0);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Double double0 = new Double((double) long1);
      assertEquals(1.0, (double)double0, 0.01D);
      assertTrue(long1.equals((Object)long0));
      
      Long long2 = null;
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long2, double0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) well19937c0, (List<Pair<Long, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      double double1 = discreteDistribution0.probability(long2);
      assertEquals(1.0, double1, 0.01D);
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      long long0 = 1L;
      Well19937c well19937c0 = new Well19937c(long0);
      assertNotNull(well19937c0);
      
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Long long1 = new Long(long0);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Double double0 = new Double((double) long1);
      assertEquals(1.0, (double)double0, 0.01D);
      assertTrue(long1.equals((Object)long0));
      
      Pair<Long, Double> pair0 = new Pair<Long, Double>((Long) long0, double0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) well19937c0, (List<Pair<Long, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      double double1 = discreteDistribution0.probability(long1);
      assertEquals(1.0, double1, 0.01D);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = (-812);
      Double double0 = new Double((double) int0);
      assertEquals((-812.0), (double)double0, 0.01D);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>((Integer) int0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Integer> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -812 is smaller than the minimum (0)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      long long0 = 1L;
      Well19937c well19937c0 = new Well19937c(long0);
      assertNotNull(well19937c0);
      
      LinkedList<Pair<Long, Double>> linkedList0 = new LinkedList<Pair<Long, Double>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Long long1 = new Long(long0);
      assertEquals(1L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      Double double0 = new Double((double) long1);
      assertEquals(1.0, (double)double0, 0.01D);
      assertTrue(long1.equals((Object)long0));
      
      Pair<Long, Double> pair0 = new Pair<Long, Double>(long1, double0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertTrue(boolean0);
      assertTrue(long1.equals((Object)long0));
      assertEquals(1, linkedList0.size());
      
      DiscreteDistribution<Long> discreteDistribution0 = new DiscreteDistribution<Long>((RandomGenerator) well19937c0, (List<Pair<Long, Double>>) linkedList0);
      assertNotNull(discreteDistribution0);
      assertEquals(1, linkedList0.size());
      
      int int0 = 0;
      discreteDistribution0.reseedRandomGenerator((long) int0);
      assertEquals(1, linkedList0.size());
  }
}
