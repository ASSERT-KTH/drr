/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:26:04 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.GammaDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.TDistribution;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class HypergeometricDistributionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 480;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(480, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(480, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(480, hypergeometricDistribution0.getPopulationSize());
      assertEquals(480, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(480, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(480.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertEquals(480, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(480, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(480, hypergeometricDistribution0.getPopulationSize());
      assertEquals(480, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(480, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(480.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(480, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int[] intArray0 = hypergeometricDistribution0.sample(int1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(480, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(480, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(480, hypergeometricDistribution0.getPopulationSize());
      assertEquals(480, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(480, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(480.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 1099;
      int int1 = 245;
      TDistribution tDistribution0 = new TDistribution((double) int0);
      assertNotNull(tDistribution0);
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1099.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1.0018231540565177, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      assertFalse(int0 == int1);
      
      Well19937c well19937c0 = (Well19937c)tDistribution0.random;
      assertNotNull(well19937c0);
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1099.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1.0018231540565177, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      assertFalse(int0 == int1);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well19937c0, int0, int1, int1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1099.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1.0018231540565177, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      assertEquals(54.61783439490446, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(245, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1099, hypergeometricDistribution0.getPopulationSize());
      assertEquals(245, hypergeometricDistribution0.getSampleSize());
      assertEquals(245, hypergeometricDistribution0.getNumberOfSuccesses());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int1);
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1099.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1.0018231540565177, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      assertEquals(54.61783439490446, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(245, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1099, hypergeometricDistribution0.getPopulationSize());
      assertEquals(245, hypergeometricDistribution0.getSampleSize());
      assertEquals(245, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.964755423879993E-252, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 1099;
      int int1 = 0;
      int int2 = 245;
      TDistribution tDistribution0 = new TDistribution((double) int2);
      assertNotNull(tDistribution0);
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(245.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1.008230452674897, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Well19937c well19937c0 = (Well19937c)tDistribution0.random;
      assertNotNull(well19937c0);
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(245.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1.008230452674897, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well19937c0, int0, int1, int2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1099, hypergeometricDistribution0.getPopulationSize());
      assertEquals(245, hypergeometricDistribution0.getSampleSize());
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(245.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1.008230452674897, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int2);
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1099, hypergeometricDistribution0.getPopulationSize());
      assertEquals(245, hypergeometricDistribution0.getSampleSize());
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(245.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1.008230452674897, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 480;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(480, hypergeometricDistribution0.getSampleSize());
      assertEquals(480.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(480, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(480, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(480, hypergeometricDistribution0.getPopulationSize());
      assertEquals(480, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = 1729;
      double double0 = hypergeometricDistribution0.probability(int1);
      assertEquals(480, hypergeometricDistribution0.getSampleSize());
      assertEquals(480.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(480, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(480, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(480, hypergeometricDistribution0.getPopulationSize());
      assertEquals(480, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 2651;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2651, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2651, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2651, hypergeometricDistribution0.getSampleSize());
      assertEquals(2651, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2651, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2651.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      
      int int1 = 0;
      double double0 = hypergeometricDistribution0.probability(int1);
      assertEquals(2651, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2651, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2651, hypergeometricDistribution0.getSampleSize());
      assertEquals(2651, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2651, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2651.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 1463;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1463, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1463, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1463.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1463, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1463, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1463, hypergeometricDistribution0.getSampleSize());
      
      int int1 = 0;
      double double0 = hypergeometricDistribution0.cumulativeProbability(int1, int0);
      assertEquals(1463, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1463, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1463.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1463, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1463, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1463, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 1099;
      int int1 = 245;
      TDistribution tDistribution0 = new TDistribution((double) int0);
      assertNotNull(tDistribution0);
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1099.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(1.0018231540565177, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertFalse(int0 == int1);
      
      Well19937c well19937c0 = (Well19937c)tDistribution0.random;
      assertNotNull(well19937c0);
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1099.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(1.0018231540565177, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertFalse(int0 == int1);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well19937c0, int0, int1, int1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1099.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(1.0018231540565177, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertEquals(245, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(54.61783439490446, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(245, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1099, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(245, hypergeometricDistribution0.getSampleSize());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = hypergeometricDistribution0.sample();
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1099.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(1.0018231540565177, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertEquals(245, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(54.61783439490446, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(245, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1099, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(245, hypergeometricDistribution0.getSampleSize());
      assertEquals(62, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = (-907L);
      Well44497b well44497b0 = new Well44497b(long0);
      assertNotNull(well44497b0);
      
      int int0 = 788;
      int int1 = 1115;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well44497b0, int1, int1, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(788, hypergeometricDistribution0.getSampleSize());
      assertEquals(788.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(788, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(788, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1115, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1115, hypergeometricDistribution0.getPopulationSize());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(788, hypergeometricDistribution0.getSampleSize());
      assertEquals(788.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(788, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(788, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1115, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1115, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1115, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution((RandomGenerator) well44497b0, int0, int0, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,115) must be less than or equal to population size (788)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 577;
      int int1 = 802;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (802) must be less than or equal to population size (577)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 7.174547784678893E-8;
      GammaDistribution gammaDistribution0 = new GammaDistribution(double0, double0, double0);
      assertNotNull(gammaDistribution0);
      assertEquals(3.6930364779464646E-22, gammaDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(5.147413591464081E-15, gammaDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, gammaDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, gammaDistribution0.isSupportLowerBoundInclusive());
      assertEquals(7.174547784678893E-8, gammaDistribution0.getAlpha(), 0.01D);
      assertEquals(7.174547784678893E-8, gammaDistribution0.getBeta(), 0.01D);
      assertEquals(false, gammaDistribution0.isSupportUpperBoundInclusive());
      assertEquals(7.174547784678893E-8, gammaDistribution0.getScale(), 0.01D);
      assertEquals(0.0, gammaDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, gammaDistribution0.isSupportConnected());
      assertEquals(7.174547784678893E-8, gammaDistribution0.getShape(), 0.01D);
      
      Well19937c well19937c0 = (Well19937c)gammaDistribution0.random;
      assertNotNull(well19937c0);
      assertEquals(3.6930364779464646E-22, gammaDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(5.147413591464081E-15, gammaDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, gammaDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(true, gammaDistribution0.isSupportLowerBoundInclusive());
      assertEquals(7.174547784678893E-8, gammaDistribution0.getAlpha(), 0.01D);
      assertEquals(7.174547784678893E-8, gammaDistribution0.getBeta(), 0.01D);
      assertEquals(false, gammaDistribution0.isSupportUpperBoundInclusive());
      assertEquals(7.174547784678893E-8, gammaDistribution0.getScale(), 0.01D);
      assertEquals(0.0, gammaDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, gammaDistribution0.isSupportConnected());
      assertEquals(7.174547784678893E-8, gammaDistribution0.getShape(), 0.01D);
      
      int int0 = 2014;
      int int1 = (-3544);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well19937c0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-3,544)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      int int0 = 193;
      int int1 = (-2792);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well44497b0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,792)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, intArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1463;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1463, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1463, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1463, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1463, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1463.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1463, hypergeometricDistribution0.getSampleSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1463, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1463, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1463, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1463, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1463.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1463, hypergeometricDistribution0.getSampleSize());
      assertTrue(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1099;
      TDistribution tDistribution0 = new TDistribution((double) int0);
      assertNotNull(tDistribution0);
      assertEquals(1099.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1.0018231540565177, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      
      Well19937c well19937c0 = (Well19937c)tDistribution0.random;
      assertNotNull(well19937c0);
      assertEquals(1099.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1.0018231540565177, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well19937c0, int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1099, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1099, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1099, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1099, hypergeometricDistribution0.getSampleSize());
      assertEquals(1099.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1099, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1099.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1.0018231540565177, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int0);
      assertEquals(1099, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1099, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1099, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1099, hypergeometricDistribution0.getSampleSize());
      assertEquals(1099.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1099, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1099.0, tDistribution0.getDegreesOfFreedom(), 0.01D);
      assertEquals(1.0018231540565177, tDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, tDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, tDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, tDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, tDistribution0.isSupportLowerBoundInclusive());
      assertEquals(0.0, tDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, tDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0, double0, 0.01D);
  }
}
