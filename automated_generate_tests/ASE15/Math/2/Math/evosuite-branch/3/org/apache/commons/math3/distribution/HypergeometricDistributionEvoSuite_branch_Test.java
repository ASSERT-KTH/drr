/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:23:46 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class HypergeometricDistributionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      int int0 = 1709;
      int int1 = 620;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well19937a0, int0, int1, int1);
      assertNotNull(hypergeometricDistribution0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1709, hypergeometricDistribution0.getPopulationSize());
      assertEquals(620, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(620, hypergeometricDistribution0.getSampleSize());
      assertEquals(224.92685781158573, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(620, hypergeometricDistribution0.getSupportUpperBound());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1709, hypergeometricDistribution0.getPopulationSize());
      assertEquals(620, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(620, hypergeometricDistribution0.getSampleSize());
      assertEquals(224.92685781158573, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(620, hypergeometricDistribution0.getSupportUpperBound());
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 213;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(213, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(213.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(213, hypergeometricDistribution0.getSampleSize());
      assertEquals(213, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(213, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(213, hypergeometricDistribution0.getSupportUpperBound());
      
      int int1 = 405;
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(213, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(213.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(213, hypergeometricDistribution0.getSampleSize());
      assertEquals(213, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(213, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(213, hypergeometricDistribution0.getSupportUpperBound());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 2;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2, hypergeometricDistribution0.getSupportLowerBound());
      
      int int1 = 760;
      double double0 = hypergeometricDistribution0.probability(int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2, hypergeometricDistribution0.getSupportLowerBound());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 123;
      Well512a well512a0 = new Well512a(int0);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well512a0, int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(123, hypergeometricDistribution0.getPopulationSize());
      assertEquals(123, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(123, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(123, hypergeometricDistribution0.getSampleSize());
      assertEquals(123.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(123, hypergeometricDistribution0.getSupportLowerBound());
      
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(int0, int0, int1);
      assertNotNull(hypergeometricDistribution1);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertFalse(int1 == int0);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertFalse(int0 == int1);
      assertEquals(0, hypergeometricDistribution1.getSupportUpperBound());
      assertEquals(123, hypergeometricDistribution1.getPopulationSize());
      assertEquals(0, hypergeometricDistribution1.getSampleSize());
      assertEquals(0, hypergeometricDistribution1.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution1.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution1.getNumericalMean(), 0.01D);
      assertEquals(123, hypergeometricDistribution1.getNumberOfSuccesses());
      
      int int2 = hypergeometricDistribution1.getSupportLowerBound();
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0, hypergeometricDistribution1.getSupportUpperBound());
      assertEquals(123, hypergeometricDistribution1.getPopulationSize());
      assertEquals(0, hypergeometricDistribution1.getSampleSize());
      assertEquals(0, hypergeometricDistribution1.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution1.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution1.getNumericalMean(), 0.01D);
      assertEquals(123, hypergeometricDistribution1.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.probability(int2);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(123, hypergeometricDistribution0.getPopulationSize());
      assertEquals(123, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(123, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(123, hypergeometricDistribution0.getSampleSize());
      assertEquals(123.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(123, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0, hypergeometricDistribution1.getSupportUpperBound());
      assertEquals(123, hypergeometricDistribution1.getPopulationSize());
      assertEquals(0, hypergeometricDistribution1.getSampleSize());
      assertEquals(0, hypergeometricDistribution1.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution1.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution1.getNumericalMean(), 0.01D);
      assertEquals(123, hypergeometricDistribution1.getNumberOfSuccesses());
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 0L;
      int int0 = 123;
      Well512a well512a0 = new Well512a(int0);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well512a0, int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(123.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(123, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(123, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(123, hypergeometricDistribution0.getPopulationSize());
      assertEquals(123, hypergeometricDistribution0.getSampleSize());
      assertEquals(123, hypergeometricDistribution0.getSupportLowerBound());
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(123, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(123.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(123, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(123, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(123, hypergeometricDistribution0.getPopulationSize());
      assertEquals(123, hypergeometricDistribution0.getSampleSize());
      assertEquals(123, hypergeometricDistribution0.getSupportLowerBound());
      
      int int2 = 969;
      assertFalse(int2 == int1);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(int2, int2, int2);
      assertNotNull(hypergeometricDistribution1);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(969, hypergeometricDistribution1.getSupportUpperBound());
      assertEquals(969, hypergeometricDistribution1.getPopulationSize());
      assertEquals(969, hypergeometricDistribution1.getSampleSize());
      assertEquals(969, hypergeometricDistribution1.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution1.isSupportConnected());
      assertEquals(969, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(969.0, hypergeometricDistribution1.getNumericalMean(), 0.01D);
      
      Well19937a well19937a0 = new Well19937a(long0);
      assertNotNull(well19937a0);
      
      int int3 = hypergeometricDistribution1.getNumberOfSuccesses();
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(969, int3);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertEquals(969, hypergeometricDistribution1.getSupportUpperBound());
      assertEquals(969, hypergeometricDistribution1.getPopulationSize());
      assertEquals(969, hypergeometricDistribution1.getSampleSize());
      assertEquals(969, hypergeometricDistribution1.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution1.isSupportConnected());
      assertEquals(969, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(969.0, hypergeometricDistribution1.getNumericalMean(), 0.01D);
      
      HypergeometricDistribution hypergeometricDistribution2 = new HypergeometricDistribution((RandomGenerator) well19937a0, int3, int1, int1);
      assertNotNull(hypergeometricDistribution2);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution2);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertNotSame(hypergeometricDistribution2, hypergeometricDistribution1);
      assertNotSame(hypergeometricDistribution2, hypergeometricDistribution0);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution2);
      assertFalse(int1 == int3);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution2));
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertFalse(hypergeometricDistribution2.equals((Object)hypergeometricDistribution1));
      assertFalse(hypergeometricDistribution2.equals((Object)hypergeometricDistribution0));
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution2));
      assertFalse(int0 == int3);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertEquals(969, hypergeometricDistribution1.getSupportUpperBound());
      assertEquals(969, hypergeometricDistribution1.getPopulationSize());
      assertEquals(969, hypergeometricDistribution1.getSampleSize());
      assertEquals(969, hypergeometricDistribution1.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution1.isSupportConnected());
      assertEquals(969, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(969.0, hypergeometricDistribution1.getNumericalMean(), 0.01D);
      assertEquals(15.613003095975232, hypergeometricDistribution2.getNumericalMean(), 0.01D);
      assertEquals(123, hypergeometricDistribution2.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution2.isSupportConnected());
      assertEquals(969, hypergeometricDistribution2.getPopulationSize());
      assertEquals(123, hypergeometricDistribution2.getSampleSize());
      assertEquals(123, hypergeometricDistribution2.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution2.getSupportLowerBound());
      assertEquals(123.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(123, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(123, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(123, hypergeometricDistribution0.getPopulationSize());
      assertEquals(123, hypergeometricDistribution0.getSampleSize());
      assertEquals(123, hypergeometricDistribution0.getSupportLowerBound());
      
      int[] intArray0 = hypergeometricDistribution2.sample(int0);
      assertNotNull(intArray0);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution2);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertNotSame(hypergeometricDistribution2, hypergeometricDistribution1);
      assertNotSame(hypergeometricDistribution2, hypergeometricDistribution0);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution2);
      assertFalse(int1 == int3);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution2));
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertFalse(hypergeometricDistribution2.equals((Object)hypergeometricDistribution1));
      assertFalse(hypergeometricDistribution2.equals((Object)hypergeometricDistribution0));
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution2));
      assertFalse(int0 == int3);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertArrayEquals(new int[] {14, 22, 12, 21, 20, 20, 12, 9, 18, 13, 15, 13, 16, 16, 17, 16, 17, 13, 17, 11, 17, 17, 15, 19, 17, 14, 15, 16, 20, 14, 13, 14, 18, 17, 15, 20, 13, 16, 16, 17, 13, 13, 14, 7, 15, 19, 14, 26, 17, 12, 19, 20, 21, 14, 15, 11, 10, 13, 17, 15, 13, 16, 16, 12, 17, 12, 19, 12, 11, 12, 11, 20, 12, 20, 15, 9, 11, 19, 18, 18, 14, 16, 16, 15, 16, 12, 16, 12, 16, 11, 25, 12, 14, 19, 16, 13, 13, 13, 17, 16, 18, 14, 10, 11, 14, 17, 20, 13, 12, 17, 16, 15, 9, 13, 17, 15, 16, 11, 19, 17, 16, 17, 15}, intArray0);
      assertEquals(969, hypergeometricDistribution1.getSupportUpperBound());
      assertEquals(969, hypergeometricDistribution1.getPopulationSize());
      assertEquals(969, hypergeometricDistribution1.getSampleSize());
      assertEquals(969, hypergeometricDistribution1.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution1.isSupportConnected());
      assertEquals(969, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(969.0, hypergeometricDistribution1.getNumericalMean(), 0.01D);
      assertEquals(15.613003095975232, hypergeometricDistribution2.getNumericalMean(), 0.01D);
      assertEquals(123, hypergeometricDistribution2.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution2.isSupportConnected());
      assertEquals(969, hypergeometricDistribution2.getPopulationSize());
      assertEquals(123, hypergeometricDistribution2.getSampleSize());
      assertEquals(123, hypergeometricDistribution2.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution2.getSupportLowerBound());
      assertEquals(123.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(123, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(123, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(123, hypergeometricDistribution0.getPopulationSize());
      assertEquals(123, hypergeometricDistribution0.getSampleSize());
      assertEquals(123, hypergeometricDistribution0.getSupportLowerBound());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 123;
      Well512a well512a0 = new Well512a(int0);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well512a0, int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(123, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(123, hypergeometricDistribution0.getSampleSize());
      assertEquals(123.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(123, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(123, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(123, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = 0;
      double double0 = hypergeometricDistribution0.cumulativeProbability(int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(123, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(123, hypergeometricDistribution0.getSampleSize());
      assertEquals(123.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(123, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(123, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(123, hypergeometricDistribution0.getPopulationSize());
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 2;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSupportLowerBound());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2.0, double0, 0.01D);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSupportLowerBound());
      
      int int1 = 3724;
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability(double0, int0, int1);
      assertEquals(3724, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSupportLowerBound());
  }

  @Test
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 2;
      int int1 = 922;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int0, intArray0[0], int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (922) must be less than or equal to population size (2)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 2;
      int int1 = 1239;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,239) must be less than or equal to population size (2)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 123;
      int int1 = (-2079);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,079)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1189;
      int int1 = (-3487);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-3,487)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 2910;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int1, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 2;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 2910;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2910, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2910, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2910.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2910, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2910, hypergeometricDistribution0.getSampleSize());
      assertEquals(2910, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int0);
      assertEquals(1.0, double0, 0.01D);
      assertEquals(2910, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(2910, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2910.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2910, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2910, hypergeometricDistribution0.getSampleSize());
      assertEquals(2910, hypergeometricDistribution0.getPopulationSize());
  }
}
