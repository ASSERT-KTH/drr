/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:30:25 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.distribution.ExponentialDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;



import org.junit.runner.RunWith;


public class HypergeometricDistributionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 170;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(170, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(170, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(170.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(170, hypergeometricDistribution0.getPopulationSize());
      assertEquals(170, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(170, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(170, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(170, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(170.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(170, hypergeometricDistribution0.getPopulationSize());
      assertEquals(170, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(170, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(intArray0);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 508;
      double double0 = 0.0;
      PascalDistribution pascalDistribution0 = new PascalDistribution(int0, double0);
      assertEquals(508, pascalDistribution0.getNumberOfSuccesses());
      assertEquals(true, pascalDistribution0.isSupportConnected());
      assertEquals(0, pascalDistribution0.getSupportLowerBound());
      assertEquals(Double.POSITIVE_INFINITY, pascalDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, pascalDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, pascalDistribution0.getProbabilityOfSuccess(), 0.01D);
      assertEquals(2147483647, pascalDistribution0.getSupportUpperBound());
      assertNotNull(pascalDistribution0);
      
      Well19937c well19937c0 = (Well19937c)pascalDistribution0.random;
      assertEquals(508, pascalDistribution0.getNumberOfSuccesses());
      assertEquals(true, pascalDistribution0.isSupportConnected());
      assertEquals(0, pascalDistribution0.getSupportLowerBound());
      assertEquals(Double.POSITIVE_INFINITY, pascalDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, pascalDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, pascalDistribution0.getProbabilityOfSuccess(), 0.01D);
      assertEquals(2147483647, pascalDistribution0.getSupportUpperBound());
      assertNotNull(well19937c0);
      
      int int1 = 118;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well19937c0, int0, int1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(508, pascalDistribution0.getNumberOfSuccesses());
      assertEquals(true, pascalDistribution0.isSupportConnected());
      assertEquals(0, pascalDistribution0.getSupportLowerBound());
      assertEquals(Double.POSITIVE_INFINITY, pascalDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, pascalDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, pascalDistribution0.getProbabilityOfSuccess(), 0.01D);
      assertEquals(2147483647, pascalDistribution0.getSupportUpperBound());
      assertEquals(118, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(118, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(508, hypergeometricDistribution0.getPopulationSize());
      assertEquals(27.409448818897637, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(118, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(int1);
      assertEquals(6.258458939537311E-119, double1, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(508, pascalDistribution0.getNumberOfSuccesses());
      assertEquals(true, pascalDistribution0.isSupportConnected());
      assertEquals(0, pascalDistribution0.getSupportLowerBound());
      assertEquals(Double.POSITIVE_INFINITY, pascalDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, pascalDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(0.0, pascalDistribution0.getProbabilityOfSuccess(), 0.01D);
      assertEquals(2147483647, pascalDistribution0.getSupportUpperBound());
      assertEquals(118, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(118, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(508, hypergeometricDistribution0.getPopulationSize());
      assertEquals(27.409448818897637, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(118, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 1041;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(1041, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1041, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1041, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1041.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1041, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1041, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int0);
      assertEquals(1.0, double0, 0.01D);
      assertEquals(1041, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1041, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1041, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1041.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1041, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1041, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 748;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(748, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(748, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(748, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(748.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(748, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(748, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = 1116;
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(748, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(748, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(748, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(748.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(748, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(748, hypergeometricDistribution0.getSampleSize());
  }

  @Test
  public void test04()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      int int0 = 1172;
      byte byte0 = (byte)12;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) jDKRandomGenerator0, int0, int0, (int) byte0);
      assertEquals(12.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(12, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1172, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getSupportUpperBound());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(int0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(12.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(12, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1172, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getSupportUpperBound());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 445;
      int[] intArray0 = new int[3];
      int int1 = 1890;
      intArray0[0] = int1;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int1, int1, intArray0[0]);
      assertArrayEquals(new int[] {1890, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(1890, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1890, hypergeometricDistribution0.getSampleSize());
      assertEquals(1890, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1890.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1890, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1890, hypergeometricDistribution0.getSupportUpperBound());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(int0);
      assertArrayEquals(new int[] {1890, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1890, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1890, hypergeometricDistribution0.getSampleSize());
      assertEquals(1890, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1890.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1890, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1890, hypergeometricDistribution0.getSupportUpperBound());
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 508;
      int[] intArray0 = new int[8];
      intArray0[3] = int0;
      Well19937c well19937c0 = new Well19937c(int0);
      assertNotNull(well19937c0);
      
      int int1 = 4270;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well19937c0, int1, intArray0[3], intArray0[3]);
      assertArrayEquals(new int[] {0, 0, 0, 508, 0, 0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(508, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(508, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(60.436533957845434, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(4270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(508, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability(int0, intArray0[6], intArray0[3]);
      assertArrayEquals(new int[] {0, 0, 0, 508, 0, 0, 0, 0}, intArray0);
      assertEquals(508, int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(508, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(508, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(60.436533957845434, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(4270, hypergeometricDistribution0.getPopulationSize());
      assertEquals(508, hypergeometricDistribution0.getSampleSize());
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      int int1 = 170;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int1, int1, int1);
      assertFalse(int1 == int0);
      assertEquals(170, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(170, hypergeometricDistribution0.getPopulationSize());
      assertEquals(170, hypergeometricDistribution0.getSampleSize());
      assertEquals(170, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(170, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(170.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(int0, int0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(170, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(170, hypergeometricDistribution0.getPopulationSize());
      assertEquals(170, hypergeometricDistribution0.getSampleSize());
      assertEquals(170, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(170, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(170.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      int int0 = 1172;
      byte[] byteArray0 = new byte[8];
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) jDKRandomGenerator0, int0, int0, (int) byteArray0[6]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1172, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability(byteArray0[4], byteArray0[5], int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1172, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
  }

  @Test
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well512a well512a0 = new Well512a(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(well512a0);
      
      int int0 = 793;
      int int1 = 2621;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well512a0, int0, intArray0[0], int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,621) must be less than or equal to population size (793)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 445;
      int[] intArray0 = new int[3];
      int int1 = 1890;
      intArray0[1] = int0;
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertArrayEquals(new int[] {0, 445, 0}, intArray0);
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well44497a0, intArray0[1], int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,890) must be less than or equal to population size (445)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 186;
      int int1 = (-247);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-247)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 3476.659882710183;
      ExponentialDistribution exponentialDistribution0 = new ExponentialDistribution(double0, double0);
      assertEquals(1.2087163940046383E7, exponentialDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, exponentialDistribution0.isSupportConnected());
      assertEquals(0.0, exponentialDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, exponentialDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, exponentialDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(3476.659882710183, exponentialDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, exponentialDistribution0.isSupportLowerBoundInclusive());
      assertEquals(3476.659882710183, exponentialDistribution0.getMean(), 0.01D);
      assertNotNull(exponentialDistribution0);
      
      int int0 = 748;
      Well19937c well19937c0 = (Well19937c)exponentialDistribution0.random;
      assertEquals(1.2087163940046383E7, exponentialDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(true, exponentialDistribution0.isSupportConnected());
      assertEquals(0.0, exponentialDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(false, exponentialDistribution0.isSupportUpperBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, exponentialDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(3476.659882710183, exponentialDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, exponentialDistribution0.isSupportLowerBoundInclusive());
      assertEquals(3476.659882710183, exponentialDistribution0.getMean(), 0.01D);
      assertNotNull(well19937c0);
      
      int int1 = (-449);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well19937c0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-449)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((int) byteArray0[3], (int) byteArray0[3], (int) byteArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 170;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(170.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(170, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(170, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(170, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(170, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(170, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(170.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(170, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(170, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(170, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(170, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(170, hypergeometricDistribution0.getPopulationSize());
  }
}
