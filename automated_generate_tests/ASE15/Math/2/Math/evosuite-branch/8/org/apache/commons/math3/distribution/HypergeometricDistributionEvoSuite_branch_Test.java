/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:29:38 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class HypergeometricDistributionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 557;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(557, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(557, hypergeometricDistribution0.getSampleSize());
      assertEquals(557, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(557.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(557, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(557, hypergeometricDistribution0.getSupportLowerBound());
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(557, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(557, hypergeometricDistribution0.getSampleSize());
      assertEquals(557, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(557.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(557, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(557, hypergeometricDistribution0.getSupportLowerBound());
      assertNotNull(intArray0);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 3762;
      int[] intArray0 = new int[1];
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(well19937a0);
      
      int int1 = 269;
      int int2 = 71;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well19937a0, int0, int1, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(71, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(269, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(3762, hypergeometricDistribution0.getPopulationSize());
      assertEquals(5.076820839978735, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(71, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(71, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(269, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(3762, hypergeometricDistribution0.getPopulationSize());
      assertEquals(5.076820839978735, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(71, hypergeometricDistribution0.getSampleSize());
      assertEquals(3.382143502659918E-86, double0, 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 149;
      int int1 = 1;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(149, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(149, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getSupportUpperBound());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(149, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(149, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 4134;
      int int1 = 312;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(312, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(4134, hypergeometricDistribution0.getPopulationSize());
      assertEquals(312, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(312, hypergeometricDistribution0.getSampleSize());
      assertEquals(4134, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(312.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(312, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(4134, hypergeometricDistribution0.getPopulationSize());
      assertEquals(312, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(312, hypergeometricDistribution0.getSampleSize());
      assertEquals(4134, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(312.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 557;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(557, hypergeometricDistribution0.getPopulationSize());
      assertEquals(557, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(557.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(557, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(557, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(557, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = 2;
      double double0 = hypergeometricDistribution0.probability(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(557, hypergeometricDistribution0.getPopulationSize());
      assertEquals(557, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(557.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(557, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(557, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(557, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[17];
      int int0 = 934;
      int int1 = 152;
      intArray0[8] = int1;
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well44497a0, int0, int1, intArray0[8]);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(24.736616702355462, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(152, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(152, hypergeometricDistribution0.getSampleSize());
      assertEquals(934, hypergeometricDistribution0.getPopulationSize());
      assertEquals(152, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int2 = hypergeometricDistribution0.sample();
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(24.736616702355462, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(152, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(152, hypergeometricDistribution0.getSampleSize());
      assertEquals(934, hypergeometricDistribution0.getPopulationSize());
      assertEquals(152, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(29, int2);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 149;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(149, hypergeometricDistribution0.getPopulationSize());
      assertEquals(149, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(149, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(149, hypergeometricDistribution0.getSampleSize());
      assertEquals(149, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(149.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = 0;
      double double0 = hypergeometricDistribution0.cumulativeProbability(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(149, hypergeometricDistribution0.getPopulationSize());
      assertEquals(149, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(149, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(149, hypergeometricDistribution0.getSampleSize());
      assertEquals(149, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(149.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 149;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(149, hypergeometricDistribution0.getPopulationSize());
      assertEquals(149, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(149, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(149, hypergeometricDistribution0.getSampleSize());
      assertEquals(149, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(149.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(int0);
      assertEquals(149, hypergeometricDistribution0.getPopulationSize());
      assertEquals(149, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(149, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(149, hypergeometricDistribution0.getSampleSize());
      assertEquals(149, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(149.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 4134;
      int int1 = 312;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(4134, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(312, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(312, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(312, hypergeometricDistribution0.getSampleSize());
      assertEquals(4134, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(312.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertNotNull(hypergeometricDistribution0);
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals(4134, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(312, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(312, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(312, hypergeometricDistribution0.getSampleSize());
      assertEquals(4134, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(312.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(312, int2);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(int1, int2, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (4,134) must be less than or equal to population size (312)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 1;
      int int1 = 210;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (210) must be less than or equal to population size (1)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 3762;
      int int1 = (-350);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-350)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = 0L;
      Well512a well512a0 = new Well512a(long0);
      assertNotNull(well512a0);
      
      int int0 = 1159;
      int int1 = (-1229);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well512a0, int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,229)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 934;
      int int1 = 0;
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) jDKRandomGenerator0, int1, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 4134;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(4134, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4134.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(4134, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4134, hypergeometricDistribution0.getSampleSize());
      assertEquals(4134, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(4134, hypergeometricDistribution0.getSupportUpperBound());
      assertNotNull(hypergeometricDistribution0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(4134, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4134.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(4134, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4134, hypergeometricDistribution0.getSampleSize());
      assertEquals(4134, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(4134, hypergeometricDistribution0.getSupportUpperBound());
      assertTrue(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 149;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(149, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(149.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(149, hypergeometricDistribution0.getSampleSize());
      assertEquals(149, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(149, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(149, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int0);
      assertEquals(149, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(149.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(149, hypergeometricDistribution0.getSampleSize());
      assertEquals(149, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(149, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(149, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01D);
  }
}
