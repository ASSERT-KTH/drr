/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:27:03 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;



import org.junit.runner.RunWith;


public class HypergeometricDistributionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 6254;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(6254, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(6254.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(6254, hypergeometricDistribution0.getPopulationSize());
      assertEquals(6254, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(6254, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(6254, hypergeometricDistribution0.getSupportUpperBound());
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(6254, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(6254.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(6254, hypergeometricDistribution0.getPopulationSize());
      assertEquals(6254, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(6254, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(6254, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(6254, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(6254, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(6254.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(6254, hypergeometricDistribution0.getPopulationSize());
      assertEquals(6254, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(6254, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(6254, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int0 == int1);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 565;
      int int1 = 4251;
      int int2 = 2916;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int1, int0, int2);
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4251, hypergeometricDistribution0.getPopulationSize());
      assertEquals(387.5652787579393, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2916, hypergeometricDistribution0.getSampleSize());
      assertEquals(565, hypergeometricDistribution0.getSupportUpperBound());
      assertNotNull(hypergeometricDistribution0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int0);
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4251, hypergeometricDistribution0.getPopulationSize());
      assertEquals(387.5652787579393, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2916, hypergeometricDistribution0.getSampleSize());
      assertEquals(565, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1.3444247997056396E-101, double0, 0.01D);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 1;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSupportLowerBound());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int0);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int1, int1);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertNotNull(hypergeometricDistribution0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int0);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int1, int1);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = hypergeometricDistribution0.probability(int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 2;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSupportUpperBound());
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = (-987);
      double double0 = hypergeometricDistribution0.probability(int1);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 12;
      Well19937c well19937c0 = new Well19937c(int0);
      assertNotNull(well19937c0);
      
      int int1 = 1640;
      int int2 = 377;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well19937c0, int1, int2, int0);
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(377, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.758536585365854, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1640, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getSupportUpperBound());
      assertNotNull(hypergeometricDistribution0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      int int3 = hypergeometricDistribution0.sample();
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(377, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.758536585365854, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1640, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(4, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 6254;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(6254.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(6254, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(6254, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(6254, hypergeometricDistribution0.getSampleSize());
      assertEquals(6254, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(6254, hypergeometricDistribution0.getSupportUpperBound());
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(6254.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(6254, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(6254, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(6254, hypergeometricDistribution0.getSampleSize());
      assertEquals(6254, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(6254, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(6254, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = 82;
      assertFalse(int2 == int1);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(int2, int1);
      assertEquals(6254.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(6254, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(6254, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(6254, hypergeometricDistribution0.getSampleSize());
      assertEquals(6254, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(6254, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1.0, double0, 0.01D);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 666;
      int int1 = 956;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (956) must be less than or equal to population size (666)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 565;
      int int1 = 4251;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int1, int0, int1);
      assertEquals(565, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(4251, hypergeometricDistribution0.getSampleSize());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(4251, hypergeometricDistribution0.getPopulationSize());
      assertEquals(565, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      byte byte0 = (byte)31;
      int int2 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(565, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(4251, hypergeometricDistribution0.getSampleSize());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(4251, hypergeometricDistribution0.getPopulationSize());
      assertEquals(565, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4251, int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(int0, int2, (int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (4,251) must be less than or equal to population size (565)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 14;
      int int1 = (-2937);
      intArray0[4] = int1;
      intArray0[6] = int0;
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      assertNotNull(iSAACRandom0);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-2937), 0, 14, 0, 0}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) iSAACRandom0, intArray0[6], intArray0[2], intArray0[4]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,937)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      int int0 = (-337);
      int int1 = 2020;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(randomGenerator0, int1, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-337)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 12;
      int int1 = (-2336);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int1, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2,336)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 14;
      Well44497b well44497b0 = new Well44497b((long) intArray0[0]);
      assertNotNull(well44497b0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well44497b0, int0, intArray0[0], intArray0[0]);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertNotNull(hypergeometricDistribution0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }
}
