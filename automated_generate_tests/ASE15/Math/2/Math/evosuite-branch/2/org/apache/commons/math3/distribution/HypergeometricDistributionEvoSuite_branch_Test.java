/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:20:34 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class HypergeometricDistributionEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 1;
      int int1 = 1087;
      int int2 = 507;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int1, int2, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(507, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(507, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(236.47562097516098, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1087, hypergeometricDistribution0.getPopulationSize());
      assertEquals(507, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int0);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(507, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(507, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(236.47562097516098, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1087, hypergeometricDistribution0.getPopulationSize());
      assertEquals(507, hypergeometricDistribution0.getSampleSize());
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 608;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(608, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(int0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(608, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[1];
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(well19937c0);
      
      int int0 = 1074;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well19937c0, int0, int0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1074, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1074, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1074, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1074.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1074, hypergeometricDistribution0.getSampleSize());
      assertEquals(1074, hypergeometricDistribution0.getSupportUpperBound());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(intArray0[0]);
      assertEquals(1.0, double0, 0.01D);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1074, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1074, hypergeometricDistribution0.getPopulationSize());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1074, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1074.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1074, hypergeometricDistribution0.getSampleSize());
      assertEquals(1074, hypergeometricDistribution0.getSupportUpperBound());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 1555;
      int int1 = 562;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(562, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1555, hypergeometricDistribution0.getPopulationSize());
      assertEquals(562, hypergeometricDistribution0.getSampleSize());
      assertEquals(562, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(203.11511254019294, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(int0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(562, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1555, hypergeometricDistribution0.getPopulationSize());
      assertEquals(562, hypergeometricDistribution0.getSampleSize());
      assertEquals(562, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(203.11511254019294, hypergeometricDistribution0.getNumericalMean(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 537;
      intArray0[0] = int0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, intArray0[0]);
      assertArrayEquals(new int[] {537, 0, 0, 0, 0}, intArray0);
      assertEquals(537.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(537, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(537, hypergeometricDistribution0.getSampleSize());
      assertEquals(537, hypergeometricDistribution0.getPopulationSize());
      assertEquals(537, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(537, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(intArray0[1]);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new int[] {537, 0, 0, 0, 0}, intArray0);
      assertEquals(537.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(537, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(537, hypergeometricDistribution0.getSampleSize());
      assertEquals(537, hypergeometricDistribution0.getPopulationSize());
      assertEquals(537, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(537, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 1555;
      int int1 = 562;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(562, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1555, hypergeometricDistribution0.getPopulationSize());
      assertEquals(562, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(203.11511254019294, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(562, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
      assertNotNull(hypergeometricDistribution0);
      
      int int2 = 0;
      double double0 = hypergeometricDistribution0.cumulativeProbability(int2);
      assertEquals(2.657990707650262E-147, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(562, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1555, hypergeometricDistribution0.getPopulationSize());
      assertEquals(562, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(203.11511254019294, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(562, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getSupportLowerBound());
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 608;
      int int1 = (-1466);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertFalse(int0 == int1);
      assertEquals(608, hypergeometricDistribution0.getPopulationSize());
      assertEquals(608.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(608, hypergeometricDistribution0.getSampleSize());
      assertEquals(608, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(608, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(608, hypergeometricDistribution0.getSupportLowerBound());
      assertNotNull(hypergeometricDistribution0);
      
      byte[] byteArray0 = new byte[10];
      double double0 = hypergeometricDistribution0.cumulativeProbability(int1, (int) byteArray0[4]);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(608, hypergeometricDistribution0.getPopulationSize());
      assertEquals(608.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(608, hypergeometricDistribution0.getSampleSize());
      assertEquals(608, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(608, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(608, hypergeometricDistribution0.getSupportLowerBound());
  }

  @Test
  public void test07()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      int int0 = 209;
      int int1 = 695;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) iSAACRandom0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (695) must be less than or equal to population size (209)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(well19937a0);
      
      int int0 = 1;
      int int1 = 2;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well19937a0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2) must be less than or equal to population size (1)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = (-200);
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      int int1 = 3013;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) well44497a0, int1, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-200)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 537;
      int int1 = (-1826);
      intArray0[2] = int1;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertArrayEquals(new int[] {0, 0, (-1826), 0, 0}, intArray0);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) mersenneTwister0, int0, intArray0[2], intArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,826)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 608;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(608, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(608, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(608, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(608.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(608, hypergeometricDistribution0.getPopulationSize());
      assertEquals(608, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(608, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(608, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(608, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(608.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(608, hypergeometricDistribution0.getPopulationSize());
      assertEquals(608, hypergeometricDistribution0.getSampleSize());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1555;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(1555, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1555, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1555, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1555.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1555, hypergeometricDistribution0.getSampleSize());
      assertEquals(1555, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1555, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(1555, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1555, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertEquals(1555.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1555, hypergeometricDistribution0.getSampleSize());
      assertEquals(1555, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(intArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1555;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(int0, int0, int0);
      assertEquals(1555.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1555, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1555, hypergeometricDistribution0.getSampleSize());
      assertEquals(1555, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1555, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1555, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(int0);
      assertEquals(1.0, double0, 0.01D);
      assertEquals(1555.0, hypergeometricDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1555, hypergeometricDistribution0.getSupportLowerBound());
      assertEquals(1555, hypergeometricDistribution0.getSampleSize());
      assertEquals(1555, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1555, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1555, hypergeometricDistribution0.getSupportUpperBound());
      assertEquals(true, hypergeometricDistribution0.isSupportConnected());
  }
}
