/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:50:19 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.util.FastMath;



import org.junit.runner.RunWith;


public class FastMathEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      int int0 = (-1023);
      double double0 = FastMath.atanh((double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      float float0 = 0.0F;
      double double1 = FastMath.acos((double) float0);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.max(double0, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double0);
      //  // Unstable assertion: assertTrue(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test
  public void test001()  throws Throwable  {
      double double0 = 1.125;
      double double1 = FastMath.sqrt(double0);
      assertEquals(1.0606601717798212, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.max(double0, double1);
      assertEquals(1.125, double2, 0.01D);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test002()  throws Throwable  {
      int int0 = (-4580);
      float float0 = Float.NaN;
      float float1 = FastMath.max(float0, (float) int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test
  public void test003()  throws Throwable  {
      int int0 = 0;
      long long0 = (-1L);
      float float0 = FastMath.max((float) int0, (float) long0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test004()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      long long0 = FastMath.max((long) int0, (long) int1);
      assertEquals(0L, long0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test005()  throws Throwable  {
      int int0 = (-1);
      int int1 = FastMath.abs(int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      long long0 = FastMath.max((long) int1, (long) int0);
      assertEquals(1L, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test006()  throws Throwable  {
      int int0 = 1773;
      int int1 = FastMath.max(int0, int0);
      assertEquals(1773, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test007()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.abs(double0);
      //  // Unstable assertion: assertEquals(0.0, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double0 == double2);
      
      double double3 = FastMath.min(double1, double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertTrue(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
  }

  @Test
  public void test008()  throws Throwable  {
      int int0 = (-1);
      float float0 = Float.NaN;
      float float1 = FastMath.min(float0, (float) int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test
  public void test009()  throws Throwable  {
      int int0 = (-1);
      int int1 = FastMath.abs(int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      float float0 = FastMath.min((float) int1, (float) int0);
      assertEquals((-1.0F), float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test010()  throws Throwable  {
      long long0 = 3684L;
      long long1 = FastMath.min(long0, long0);
      assertEquals(3684L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test011()  throws Throwable  {
      int int0 = 1773;
      long long0 = 0L;
      long long1 = FastMath.abs(long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      long long2 = FastMath.min((long) int0, long1);
      assertEquals(0L, long2);
      assertTrue(long1 == long0);
      assertTrue(long1 == long2);
      assertTrue(long0 == long1);
      assertTrue(long0 == long2);
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
  }

  @Test
  public void test012()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1775);
      int int2 = FastMath.min(int0, int1);
      assertEquals((-1775), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
  }

  @Test
  public void test013()  throws Throwable  {
      double double0 = (-1417.5);
      double double1 = FastMath.rint(double0);
      assertEquals((-1418.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test014()  throws Throwable  {
      float float0 = (-1760.5F);
      double double0 = FastMath.rint((double) float0);
      assertEquals((-1760.0), double0, 0.01D);
  }

  @Test
  public void test015()  throws Throwable  {
      double double0 = (-472.876089);
      double double1 = FastMath.expm1(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.rint(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test
  public void test016()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.min((double) float0, (double) float0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.rint(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test017()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.nextAfter(double0, (double) long0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.ceil(double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test018()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.atanh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.ceil(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test019()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.nextUp(double0);
      assertEquals((-0.9999999999999999), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.nextAfter(double1, double1);
      assertEquals((-1.0), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test020()  throws Throwable  {
      double double0 = (-1773.0);
      double double1 = FastMath.nextAfter(double0, double0);
      assertEquals((-1773.0000000000002), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test021()  throws Throwable  {
      double double0 = 329.06492766569966;
      double double1 = 0.0;
      double double2 = FastMath.atan(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      
      double double3 = FastMath.log10(double0);
      assertEquals(2.5172815968706805, double3, 0.01D);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      
      double double4 = FastMath.pow(double3, double3);
      assertEquals(10.215467437762094, double4, 0.01D);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      
      double double5 = FastMath.sin(double4);
      assertEquals((-0.7108383886873922), double5, 0.01D);
      assertFalse(double0 == double5);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double3 == double5);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double5);
      assertFalse(double5 == double4);
      assertFalse(double5 == double1);
      assertFalse(double5 == double0);
      assertFalse(double5 == double2);
      assertFalse(double5 == double3);
      
      double double6 = FastMath.nextAfter(double2, double5);
      assertEquals((-4.9E-324), double6, 0.01D);
      assertFalse(double0 == double5);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double6);
      assertFalse(double0 == double4);
      assertFalse(double6 == double5);
      assertFalse(double6 == double3);
      assertFalse(double6 == double1);
      assertFalse(double6 == double2);
      assertFalse(double6 == double4);
      assertFalse(double6 == double0);
      assertFalse(double2 == double6);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double5);
      assertTrue(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double5);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double6);
      assertFalse(double3 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double5);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double6);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double6);
      assertFalse(double4 == double0);
      assertFalse(double4 == double5);
      assertFalse(double5 == double4);
      assertFalse(double5 == double1);
      assertFalse(double5 == double6);
      assertFalse(double5 == double0);
      assertFalse(double5 == double2);
      assertFalse(double5 == double3);
  }

  @Test
  public void test022()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.log((double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.nextUp(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test023()  throws Throwable  {
      int int0 = 8;
      int int1 = (-915);
      int int2 = FastMath.max(int0, int1);
      //  // Unstable assertion: assertEquals(8, int2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertTrue(int0 == int2);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertTrue(int2 == int0);
      
      double double0 = FastMath.log((double) int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      
      double double1 = FastMath.nextAfter(double0, (double) int2);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertTrue(int0 == int2);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertTrue(int2 == int0);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test024()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan2(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.abs(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
  }

  @Test
  public void test025()  throws Throwable  {
      float float0 = (-6.0732565F);
      float float1 = FastMath.abs(float0);
      assertEquals(6.0732565F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test027()  throws Throwable  {
      double double0 = 1580.6249;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test028()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals(1.7031839360032603E-108, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test029()  throws Throwable  {
      double double0 = 964.63071576688;
      double double1 = FastMath.cbrt(double0);
      assertEquals(9.88068442730436, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test030()  throws Throwable  {
      double double0 = (-0.260915254109253);
      double double1 = FastMath.acos(double0);
      assertEquals(1.834766502883948, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test031()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.acos(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.acos(double0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test033()  throws Throwable  {
      double double0 = (-6430.65284804);
      double double1 = FastMath.acos(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test034()  throws Throwable  {
      int int0 = 5;
      double double0 = FastMath.acos((double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test035()  throws Throwable  {
      double double0 = 2.7553817452272217E-6;
      double double1 = FastMath.asin(double0);
      assertEquals(2.755381745230708E-6, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test036()  throws Throwable  {
      int int0 = (-1);
      int int1 = FastMath.abs(int0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.asin((double) int1);
      assertEquals(1.5707963267948966, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test037()  throws Throwable  {
      int int0 = (-1);
      double double0 = FastMath.asin((double) int0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test
  public void test038()  throws Throwable  {
      double double0 = 2248.0;
      double double1 = FastMath.asin(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test039()  throws Throwable  {
      double double0 = (-217.323655359);
      double double1 = FastMath.asin(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test040()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      int int0 = 1773;
      double double2 = FastMath.atan2((double) int0, double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
  }

  @Test
  public void test041()  throws Throwable  {
      double double0 = (-0.0013888888689039883);
      double double1 = FastMath.atan(double0);
      assertEquals((-0.0013888879758437893), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double2 = FastMath.atan2(double1, (double) int1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertTrue(int1 == int0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(int0 == int1);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = (-1981.91);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals((-3.141592653589793), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test043()  throws Throwable  {
      double double0 = 1204.3424;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test044()  throws Throwable  {
      double double0 = (-1572.65);
      double double1 = FastMath.nextUp(double0);
      assertEquals((-1572.6499999999999), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-4580);
      double double2 = FastMath.cosh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals(-0.0, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
  }

  @Test
  public void test045()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.log((double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2(double0, double0);
      assertEquals((-2.356194490192345), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test046()  throws Throwable  {
      double double0 = 2.7553817452272217E-6;
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(710.1881780014921, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = Double.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      //  // Unstable assertion: assertEquals((-1.5707963267948966), double3, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
  }

  @Test
  public void test047()  throws Throwable  {
      double double0 = 1580.6249;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double0);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test048()  throws Throwable  {
      double double0 = 1930.236007;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double1);
      assertEquals(0.7853981633974483, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test049()  throws Throwable  {
      double double0 = -0.0;
      double double1 = FastMath.cbrt(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.atan2(double1, double1);
      assertEquals((-3.141592653589793), double2, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test050()  throws Throwable  {
      int int0 = (-915);
      double double0 = 0.0;
      double double1 = FastMath.atan2(double0, (double) int0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test051()  throws Throwable  {
      double double0 = 0.0;
      double double1 = Double.NEGATIVE_INFINITY;
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test052()  throws Throwable  {
      double double0 = 0.14982303977012634;
      double double1 = (-2160.0);
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = FastMath.log1p(double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      
      double double4 = FastMath.atan2((double) long0, double3);
      assertEquals(0.0, double4, 0.01D);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
  }

  @Test
  public void test053()  throws Throwable  {
      double double0 = 1.125;
      double double1 = FastMath.sqrt(double0);
      assertEquals(1.0606601717798212, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = (-1.0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.ceil(double2);
      assertEquals((-1.0), double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      
      double double4 = FastMath.atan2(double1, double3);
      assertEquals(2.326765737218804, double4, 0.01D);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double3 == double4);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
  }

  @Test
  public void test054()  throws Throwable  {
      double double0 = 2.384185791015625E-7;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707960883763175, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test055()  throws Throwable  {
      double double0 = 0.3333333134651184;
      double double1 = FastMath.ulp(double0);
      assertEquals(5.551115123125783E-17, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = (-4841.906799361564);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals((-1.5707963267948966), double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test056()  throws Throwable  {
      int int0 = (-1);
      int int1 = FastMath.abs(int0);
      //  // Unstable assertion: assertEquals(1, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      float float0 = Float.NaN;
      double double0 = FastMath.atan2((double) int1, (double) float0);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double0, 0.01D);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
  }

  @Test
  public void test057()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.tan(double0);
      assertEquals((-1.2246467991473532E-16), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test058()  throws Throwable  {
      double double0 = 0.14982303977012634;
      double double1 = FastMath.sinh(double0);
      assertEquals(0.15038418074009985, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = (-2160.0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      
      double double4 = FastMath.tan(double3);
      assertEquals(Double.NaN, double4, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
  }

  @Test
  public void test059()  throws Throwable  {
      double double0 = (-0.16624882440418567);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tan(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test060()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test061()  throws Throwable  {
      double double0 = 952.4832618;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.8360855419151798), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test062()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.cos(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test063()  throws Throwable  {
      long long0 = 2141L;
      double double0 = FastMath.cos((double) long0);
      assertEquals(0.004606562263557901, double0, 0.01D);
  }

  @Test
  public void test064()  throws Throwable  {
      double double0 = 1580.8648792428135;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cos(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test065()  throws Throwable  {
      long long0 = (-1L);
      double double0 = FastMath.cos((double) long0);
      assertEquals(0.5403023058681398, double0, 0.01D);
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = 879.616579320012;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sin(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test067()  throws Throwable  {
      double double0 = 2248.0;
      double double1 = -0.0;
      double double2 = FastMath.min(double0, double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      
      double double3 = FastMath.sin(double2);
      assertEquals(-0.0, double3, 0.01D);
      assertTrue(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double2 == double3);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double3);
      assertTrue(double1 == double2);
  }

  @Test
  public void test068()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.sin(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test069()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.sin(double0);
      assertEquals((-1.2246467991473532E-16), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test070()  throws Throwable  {
      double double0 = 8.0E298;
      double double1 = FastMath.sin(double0);
      assertEquals(0.042338395486962485, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test071()  throws Throwable  {
      double double0 = 328.063308802835;
      double double1 = FastMath.cosh(double0);
      assertEquals(1.4964242323422478E142, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.sin(double1);
      assertEquals(0.5366061379519277, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test072()  throws Throwable  {
      double double0 = 355.77103;
      double double1 = FastMath.expm1(double0);
      assertEquals(3.2314329573988136E154, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.sin(double1);
      assertEquals((-0.7692480433663206), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test073()  throws Throwable  {
      double double0 = 329.06492766569966;
      double double1 = FastMath.cosh(double0);
      assertEquals(4.0742931844727744E142, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sin(double1);
      assertEquals(0.7519363134750775, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test074()  throws Throwable  {
      double double0 = 389.6226949760438;
      double double1 = FastMath.cosh(double0);
      assertEquals(8.127490241221305E168, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tan(double1);
      assertEquals(0.1810220159292091, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = 2.85040095144011776E17;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.00918780066381382), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test076()  throws Throwable  {
      double double0 = 326.917911491562;
      double double1 = FastMath.cosh(double0);
      assertEquals(4.7600882064650666E141, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sin(double1);
      assertEquals(0.9604160410486704, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test077()  throws Throwable  {
      double double0 = 0.13333332538604736;
      double double1 = FastMath.exp(double0);
      assertEquals(1.1426308027149088, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = 328.063308802835;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.max(double1, double2);
      assertEquals(328.063308802835, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double4 = FastMath.pow(double1, double3);
      assertEquals(9.926820405629608E18, double4, 0.01D);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double5 = FastMath.sin(double4);
      assertEquals(0.2537535667344231, double5, 0.01D);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double5);
      assertFalse(double4 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double5);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double5 == double0);
      assertFalse(double5 == double3);
      assertFalse(double5 == double1);
      assertFalse(double5 == double2);
      assertFalse(double5 == double4);
      assertTrue(double3 == double2);
      assertFalse(double3 == double5);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double5);
      assertFalse(double2 == double0);
      assertFalse(double0 == double5);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test078()  throws Throwable  {
      double double0 = (-472.876089);
      double double1 = FastMath.tan(double0);
      assertEquals(15.039319910567857, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.tan(double0);
      assertEquals((-1.5574077246549023), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = 2206.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
  }

  @Test
  public void test080()  throws Throwable  {
      double double0 = 326.917911491562;
      double double1 = (-0.16624882440418567);
      double double2 = FastMath.log10(double0);
      assertEquals(2.5144387157741477, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(Double.NaN, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = (-4820.0);
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.toDegrees(double0);
      //  // Unstable assertion: assertEquals((-276165.65725305676), double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertTrue(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
  }

  @Test
  public void test082()  throws Throwable  {
      double double0 = 2.7553817452272217E-6;
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(710.1881780014921, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = Double.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
  }

  @Test
  public void test083()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = 0.5039018405998233;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.log(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      
      double double4 = FastMath.pow(double2, double3);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
  }

  @Test
  public void test084()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = 1.0;
      double double1 = FastMath.log((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test085()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = 2407.8381F;
      double double0 = FastMath.min((double) float0, (double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double1 = FastMath.log1p((double) float1);
      assertEquals(7.786899808479283, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      
      double double2 = FastMath.log(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.pow(double2, double1);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test086()  throws Throwable  {
      double double0 = 2.85040095144011776E17;
      double double1 = Double.NEGATIVE_INFINITY;
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test087()  throws Throwable  {
      double double0 = 964.63071576688;
      double double1 = 2.384185791015625E-7;
      double double2 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test088()  throws Throwable  {
      int int0 = 1141;
      double double0 = FastMath.sinh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = 1.0;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test089()  throws Throwable  {
      double double0 = 964.63071576688;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test090()  throws Throwable  {
      double double0 = 1930.236007;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test091()  throws Throwable  {
      double double0 = (-1572.65);
      int int0 = (-4580);
      double double1 = FastMath.cosh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test092()  throws Throwable  {
      double double0 = 2248.0;
      double double1 = -0.0;
      double double2 = FastMath.min(double0, double1);
      //  // Unstable assertion: assertEquals(-0.0, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      
      double double3 = FastMath.pow(double2, double0);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
  }

  @Test
  public void test093()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      long long0 = 1141L;
      double double0 = FastMath.log((double) float1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = (-1247.0);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(-0.0, double2, 0.01D);
      assertTrue(float1 == float0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(float0 == float1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = FastMath.pow(double2, (double) long0);
      assertEquals(-0.0, double3, 0.01D);
      assertTrue(float1 == float0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertTrue(float0 == float1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
  }

  @Test
  public void test094()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.log((double) float1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double1 = (-1247.0);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(-0.0, double2, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = (-1.0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      
      double double4 = FastMath.pow(double2, double3);
      assertEquals(Double.NEGATIVE_INFINITY, double4, 0.01D);
      assertTrue(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertTrue(double0 == double4);
      assertFalse(double0 == double2);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = (-0.16624882440418567);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = (-244.0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
  }

  @Test
  public void test096()  throws Throwable  {
      double double0 = (-0.16624882440418567);
      double double1 = (-10.795513475800636);
      double double2 = FastMath.atanh(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double3 = FastMath.ceil(double0);
      //  // Unstable assertion: assertEquals(-0.0, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      
      double double4 = FastMath.pow(double3, double2);
      //  // Unstable assertion: assertEquals(0.0, double4, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double3);
  }

  @Test
  public void test097()  throws Throwable  {
      double double0 = (-0.16624882440418567);
      double double1 = FastMath.atanh(double0);
      assertEquals((-0.16780636845433697), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.ceil(double0);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test098()  throws Throwable  {
      int int0 = (-1);
      int int1 = FastMath.abs(int0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      float float0 = 0.0F;
      float float1 = FastMath.max(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.pow((double) float1, (double) int1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertFalse(int0 == int1);
      assertTrue(float0 == float1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test099()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.pow((double) float1, (double) float0);
      assertEquals(1.0, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = (-4820.0);
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.toDegrees(double0);
      //  // Unstable assertion: assertEquals((-276165.65725305676), double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      
      double double4 = FastMath.log1p(double3);
      //  // Unstable assertion: assertEquals(0.0, double4, 0.01D);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertTrue(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertTrue(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.signum(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.log10(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.log(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test104()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.nextUp((double) int0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      double double1 = FastMath.log10(double0);
      assertEquals((-323.3062153431158), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = (-6430.65284804);
      double double1 = FastMath.log1p(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test106()  throws Throwable  {
      double double0 = (-0.16624882440418567);
      double double1 = FastMath.expm1(double0);
      assertEquals((-0.15316450536548085), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test107()  throws Throwable  {
      int int0 = 0;
      float float0 = FastMath.max((float) int0, (float) int0);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = FastMath.expm1((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      double double0 = (-709.0);
      double double1 = FastMath.exp(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test
  public void test109()  throws Throwable  {
      double double0 = (-709.2674);
      double double1 = FastMath.expm1(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test
  public void test110()  throws Throwable  {
      double double0 = (-744.02039767);
      double double1 = FastMath.expm1(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = (-4820.0);
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = (-1.0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertEquals(3.708456430845337E-309, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test112()  throws Throwable  {
      long long0 = (-2644281811660520851L);
      double double0 = FastMath.pow((double) long0, (double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test113()  throws Throwable  {
      double double0 = (-4820.0);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test114()  throws Throwable  {
      double double0 = (-1.0);
      int int0 = (-1755);
      long long0 = FastMath.abs((long) int0);
      //  // Unstable assertion: assertEquals(1755L, long0);
      
      double double1 = FastMath.tanh(double0);
      //  // Unstable assertion: assertEquals((-0.7615941559557649), double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double1, (double) long0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
  }

  @Test
  public void test115()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test116()  throws Throwable  {
      double double0 = 879.616579320012;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.signum(double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test117()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atanh(double1);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = 1.125;
      double double1 = FastMath.toRadians(double0);
      assertEquals(0.019634954084936207, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atanh(double1);
      assertEquals(0.0196374779660391, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = 0.0952233225107193;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.09551271045567136, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test121()  throws Throwable  {
      double double0 = 0.0952233225107193;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.09508000060292923, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = 0.13333332538604736;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.1329413911762254, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = 0.008333333333329196;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.008333236885725868, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test124()  throws Throwable  {
      double double0 = (-4820.0);
      double double1 = FastMath.toDegrees(double0);
      assertEquals((-276165.65725305676), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asinh(double1);
      assertEquals((-13.22190335264868), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = 8.251545029714408E-9;
      double double1 = FastMath.tanh(double0);
      assertEquals(8.251545029714408E-9, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test126()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.sin(double0);
      assertEquals(0.8414709848078965, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(0.6865874069985796, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test127()  throws Throwable  {
      long long0 = 0L;
      double double0 = FastMath.tanh((double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test128()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.tanh(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test129()  throws Throwable  {
      double double0 = 879.616579320012;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test130()  throws Throwable  {
      double double0 = (-0.2056603619112413);
      double double1 = FastMath.sinh(double0);
      assertEquals((-0.20711320576502507), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test131()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.sinh((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test132()  throws Throwable  {
      double double0 = 1.125;
      double double1 = FastMath.sqrt(double0);
      assertEquals(1.0606601717798212, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.sinh(double1);
      assertEquals(1.271024976798308, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test133()  throws Throwable  {
      double double0 = (-0.2056603619112413);
      double double1 = FastMath.cosh(double0);
      assertEquals(1.0212227377033207, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test134()  throws Throwable  {
      double double0 = 0.07842259109020233;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.07858395595518848, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(1.0030893083954182, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test135()  throws Throwable  {
      int int0 = 1773;
      float float0 = FastMath.abs((float) int0);
      assertEquals(1773.0F, float0, 0.01F);
      
      double double0 = FastMath.cosh((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test136()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.round(float0);
      assertEquals(0, int0);
  }

  @Test
  public void test137()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test138()  throws Throwable  {
      double double0 = 879.616579320012;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log10(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }
}
