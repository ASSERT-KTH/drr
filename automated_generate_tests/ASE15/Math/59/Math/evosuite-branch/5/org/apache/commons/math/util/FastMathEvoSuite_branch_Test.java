/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:17:49 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.util.FastMath;



import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;


public class FastMathEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      double double0 = (-8.0E298);
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.max(double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test001()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.max((double) long0, (double) long0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test002()  throws Throwable  {
      double double0 = (-8.0E298);
      double double1 = FastMath.pow(double0, double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      
      float float0 = (-482.53F);
      double double2 = FastMath.asin((double) float0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.max(double2, double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test003()  throws Throwable  {
      long long0 = 880L;
      long long1 = FastMath.abs(long0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertEquals(880L, long1);
      
      float float0 = Float.NaN;
      float float1 = FastMath.max(float0, (float) long1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test004()  throws Throwable  {
      double double0 = 3067.772995668;
      double double1 = FastMath.toDegrees(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(175770.44515598178, double1, 0.01D);
      
      long long0 = FastMath.round(double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(175770L, long0);
      
      float float0 = FastMath.max((float) long0, (float) long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(175770.0F, float0, 0.01F);
  }

  @Test
  public void test005()  throws Throwable  {
      float float0 = (-981.56F);
      float float1 = 681.821F;
      float float2 = FastMath.max(float1, float0);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertEquals(681.821F, float2, 0.01F);
  }

  @Test
  public void test006()  throws Throwable  {
      int int0 = 842;
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals(842L, long0);
      
      long long1 = FastMath.max(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(842L, long1);
  }

  @Test
  public void test007()  throws Throwable  {
      int int0 = (-86);
      long long0 = 2201L;
      int int1 = FastMath.abs(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(86, int1);
      
      long long1 = FastMath.max(long0, (long) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(2201L, long1);
  }

  @Test
  public void test008()  throws Throwable  {
      int int0 = 4963;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(4963, int1);
  }

  @Test
  public void test009()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = (-1981);
      assertFalse(int2 == int1);
      
      int int3 = FastMath.max(int1, int2);
      assertTrue(int0 == int3);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int0);
      assertTrue(int1 == int3);
      assertFalse(int1 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
  }

  @Test
  public void test010()  throws Throwable  {
      double double0 = 0.8180095314972747;
      double double1 = (-56.66706019196645);
      double double2 = FastMath.acosh(double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.sin(double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertEquals(0.7297864424120191, double3, 0.01D);
      
      double double4 = FastMath.min(double2, double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertTrue(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertEquals(Double.NaN, double4, 0.01D);
  }

  @Test
  public void test011()  throws Throwable  {
      long long0 = 0L;
      float float0 = Float.NaN;
      float float1 = FastMath.min(float0, (float) long0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test012()  throws Throwable  {
      int int0 = (-86);
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals((-86L), long0);
      
      float float0 = FastMath.min((float) long0, (float) long0);
      assertEquals((-86.0F), float0, 0.01F);
  }

  @Test
  public void test013()  throws Throwable  {
      float float0 = 393.91568F;
      int int0 = 1738;
      float float1 = FastMath.min((float) int0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(393.91568F, float1, 0.01F);
  }

  @Test
  public void test014()  throws Throwable  {
      int int0 = 842;
      int int1 = 1970;
      long long0 = FastMath.min((long) int1, (long) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(842L, long0);
  }

  @Test
  public void test015()  throws Throwable  {
      int int0 = 1;
      int int1 = (-1);
      int int2 = FastMath.min(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals((-1), int2);
  }

  @Test
  public void test016()  throws Throwable  {
      double double0 = (-546.5);
      double double1 = FastMath.rint(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-546.0), double1, 0.01D);
  }

  @Test
  public void test017()  throws Throwable  {
      double double0 = (-2883.5);
      double double1 = FastMath.rint(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2884.0), double1, 0.01D);
  }

  @Test
  public void test018()  throws Throwable  {
      double double0 = (-680.1413);
      double double1 = FastMath.ceil(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-680.0), double1, 0.01D);
  }

  @Test
  public void test019()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.ceil((double) long0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test020()  throws Throwable  {
      double double0 = (-8.0E298);
      double double1 = FastMath.toRadians(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.3962634015954635E297), double1, 0.01D);
      
      double double2 = FastMath.floor(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-1.3962634015954635E297), double2, 0.01D);
  }

  @Test
  public void test021()  throws Throwable  {
      double double0 = 945.672591387234;
      double double1 = FastMath.exp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.rint(double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test022()  throws Throwable  {
      double double0 = 2464.43916660037;
      double double1 = (-373.76);
      double double2 = FastMath.nextAfter(double1, double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-373.75999999999993), double2, 0.01D);
      
      double double3 = 8.0;
      assertFalse(double3 == double2);
      
      double double4 = FastMath.nextAfter(double3, double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertEquals(7.999999999999999, double4, 0.01D);
  }

  @Test
  public void test023()  throws Throwable  {
      double double0 = (-680.1413);
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.013509091264988187, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.013509091264988188, double2, 0.01D);
  }

  @Test
  public void test024()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.floor(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = (-2502.0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.rint(double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-2502.0), double3, 0.01D);
      
      double double4 = FastMath.nextAfter(double1, double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertTrue(double3 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double2 == double4);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double4);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertEquals((-4.9E-324), double4, 0.01D);
  }

  @Test
  public void test025()  throws Throwable  {
      long long0 = 1919L;
      double double0 = FastMath.tan((double) long0);
      assertEquals((-0.5634506775591704), double0, 0.01D);
      
      double double1 = Double.NEGATIVE_INFINITY;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter(double1, double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test026()  throws Throwable  {
      float float0 = Float.NaN;
      double double0 = FastMath.nextUp((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test027()  throws Throwable  {
      double double0 = 1888.8927147376132;
      double double1 = FastMath.ulp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2.2737367544323206E-13, double1, 0.01D);
  }

  @Test
  public void test028()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.abs(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = 1;
      float float0 = FastMath.abs((float) int0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test030()  throws Throwable  {
      long long0 = (-41L);
      long long1 = FastMath.abs(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(41L, long1);
  }

  @Test
  public void test031()  throws Throwable  {
      int int0 = 3;
      int int1 = FastMath.abs(int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(3, int1);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = 1888.8927147376132;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test033()  throws Throwable  {
      double double0 = 4.9E-324;
      double double1 = FastMath.cbrt(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.7031839360032603E-108, double1, 0.01D);
  }

  @Test
  public void test034()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test035()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test
  public void test036()  throws Throwable  {
      double double0 = 0.5039018405998233;
      double double1 = FastMath.signum(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test037()  throws Throwable  {
      double double0 = (-4356.51447472878);
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test038()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.asin((double) float0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test
  public void test039()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test040()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.asin((double) long0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test041()  throws Throwable  {
      double double0 = 2464.43916660037;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-696);
      double double1 = FastMath.atan2((double) int0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test
  public void test043()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1315.0;
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      double double0 = (-2909.8374472938167);
      double double1 = FastMath.sinh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.sqrt(double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.atan2(double2, double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(3.141592653589793, double3, 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = (-3067.504702744);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2((double) float0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-3.141592653589793), double2, 0.01D);
  }

  @Test
  public void test046()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.atan2(double1, double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertTrue(double3 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test047()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.log1p(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-2.356194490192345), double2, 0.01D);
  }

  @Test
  public void test048()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.log1p(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = 1294.553;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.sinh(double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.atan2(double1, double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertEquals((-0.7853981633974483), double4, 0.01D);
  }

  @Test
  public void test049()  throws Throwable  {
      double double0 = (-3067.504702744);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test
  public void test050()  throws Throwable  {
      double double0 = 1888.8927147376132;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test051()  throws Throwable  {
      double double0 = 1888.8927147376132;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.7853981633974483, double2, 0.01D);
  }

  @Test
  public void test052()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.tanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.99627207622075), double1, 0.01D);
      
      double double2 = FastMath.ceil(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(-0.0, double2, 0.01D);
      
      double double3 = FastMath.atan2(double2, double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double3);
      assertFalse(double0 == double1);
      assertTrue(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertEquals((-3.141592653589793), double3, 0.01D);
  }

  @Test
  public void test053()  throws Throwable  {
      int int0 = (-86);
      float float0 = 0.0F;
      double double0 = FastMath.atan2((double) float0, (double) int0);
      assertEquals(3.141592653589793, double0, 0.01D);
  }

  @Test
  public void test054()  throws Throwable  {
      double double0 = (-2909.6787076647);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.exp(double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = FastMath.atan2(double2, double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertEquals(3.141592653589793, double3, 0.01D);
  }

  @Test
  public void test055()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 887.0;
      double double2 = FastMath.exp(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.atan2(double0, double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertTrue(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertTrue(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test056()  throws Throwable  {
      double double0 = 1888.419781894942;
      double double1 = FastMath.ulp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.2737367544323206E-13, double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test057()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.log1p(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals((-355.09408900074607), double2, 0.01D);
      
      double double3 = FastMath.atan2(double0, double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals((-3.1387765060181727), double3, 0.01D);
  }

  @Test
  public void test058()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(3.141592653589793, double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.min(double1, double0);
      //  // Unstable assertion: assertTrue(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double0);
      //  // Unstable assertion: assertEquals((-1.0), double3, 0.01D);
      
      double double4 = FastMath.atan2(double2, double3);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertTrue(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertEquals((-1.5707963267948966), double4, 0.01D);
  }

  @Test
  public void test059()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(3.141592653589793, double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.atan2(double2, double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double3, 0.01D);
  }

  @Test
  public void test060()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.2246467991473532E-16, double1, 0.01D);
  }

  @Test
  public void test061()  throws Throwable  {
      double double0 = 1888.419781894942;
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test062()  throws Throwable  {
      double double0 = -0.0;
      double double1 = FastMath.tan(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test064()  throws Throwable  {
      double double0 = 2091.0005977354162;
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.2673932640305046, double1, 0.01D);
  }

  @Test
  public void test065()  throws Throwable  {
      double double0 = 1555.9763073726;
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.6310084743954975), double1, 0.01D);
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test067()  throws Throwable  {
      double double0 = (-1.0E-6);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.9999999999995, double1, 0.01D);
  }

  @Test
  public void test068()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test069()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.tanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.99627207622075), double1, 0.01D);
      
      double double2 = FastMath.ceil(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(-0.0, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.sin(double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertEquals(Double.NaN, double4, 0.01D);
  }

  @Test
  public void test070()  throws Throwable  {
      double double0 = (-3273.0);
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test071()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.sin((double) long0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test072()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.2246467991473532E-16), double1, 0.01D);
  }

  @Test
  public void test073()  throws Throwable  {
      double double0 = 8.0E298;
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.042338395486962485, double1, 0.01D);
  }

  @Test
  public void test074()  throws Throwable  {
      long long0 = 9193070505571053912L;
      double double0 = FastMath.sin((double) long0);
      assertEquals((-0.4736914117464521), double0, 0.01D);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = 1.8014398509481984E16;
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2.0331563579317016), double1, 0.01D);
  }

  @Test
  public void test076()  throws Throwable  {
      double double0 = 442.2004316543827;
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.1097045397937323E192, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.9304765681146726, double2, 0.01D);
  }

  @Test
  public void test077()  throws Throwable  {
      double double0 = 441.62801069708337;
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(6.260486734601648E191, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-0.9143913352380267), double2, 0.01D);
  }

  @Test
  public void test078()  throws Throwable  {
      double double0 = 221.3517235495389;
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.3546655836143944E96, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-0.7157852866832485), double2, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = 2202.220646;
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.03581947387200106), double1, 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      double double0 = (-1.9841269659586505E-4);
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.983930140985538E-4), double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-1.9839301670145619E-4), double2, 0.01D);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = (-2502.0);
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test082()  throws Throwable  {
      float float0 = (-1600.489F);
      double double0 = FastMath.pow((double) float0, (double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test083()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.pow((double) float0, (double) float0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.pow(double0, double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test085()  throws Throwable  {
      double double0 = 2091.0005977354162;
      double double1 = Double.NEGATIVE_INFINITY;
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test086()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.log1p(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test087()  throws Throwable  {
      double double0 = (-0.4945932156650668);
      double double1 = (-1.0);
      double double2 = FastMath.log1p(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.pow(double0, double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test088()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = 2.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test089()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test090()  throws Throwable  {
      float float0 = 1415.1F;
      double double0 = FastMath.exp((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = 0.2222222089767456;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      double double0 = 1876.573247;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.8636332100701891), double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      double double4 = (-1.0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      
      double double5 = FastMath.pow(double4, double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double5);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double5);
      assertFalse(double1 == double3);
      assertFalse(double2 == double5);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double5);
      assertFalse(double5 == double3);
      assertFalse(double5 == double1);
      assertFalse(double5 == double2);
      assertFalse(double5 == double0);
      assertFalse(double5 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double5);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertEquals(Double.NaN, double5, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      double double0 = 887.0;
      double double1 = FastMath.exp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test093()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.min((double) float0, (double) float0);
      assertEquals((-1.0), double0, 0.01D);
      
      double double1 = 2326.930153236;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.exp(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test094()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextAfter(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = FastMath.log(double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      float float0 = 2343.7356F;
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.pow(double3, (double) float0);
      assertTrue(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.141592653589793, double1, 0.01D);
      
      double double2 = FastMath.min(double1, double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertEquals((-1.0), double2, 0.01D);
      
      double double3 = 1294.553;
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      
      double double4 = FastMath.sinh(double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
      
      double double5 = FastMath.atan2(double2, double4);
      assertFalse(double3 == double5);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double5);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertTrue(double2 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double5);
      assertFalse(double4 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double5);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double5);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double5 == double1);
      assertFalse(double5 == double4);
      assertFalse(double5 == double3);
      assertFalse(double5 == double2);
      assertFalse(double5 == double0);
      assertEquals(-0.0, double5, 0.01D);
      
      double double6 = (-2086.0);
      assertFalse(double6 == double1);
      assertFalse(double6 == double5);
      assertFalse(double6 == double2);
      assertFalse(double6 == double4);
      
      double double7 = FastMath.pow(double5, double6);
      assertTrue(double7 == double4);
      assertFalse(double7 == double3);
      assertFalse(double7 == double6);
      assertFalse(double7 == double5);
      assertFalse(double7 == double2);
      assertFalse(double7 == double0);
      assertFalse(double7 == double1);
      assertFalse(double6 == double1);
      assertFalse(double6 == double5);
      assertFalse(double6 == double0);
      assertFalse(double6 == double2);
      assertFalse(double6 == double3);
      assertFalse(double6 == double7);
      assertFalse(double6 == double4);
      assertFalse(double3 == double7);
      assertFalse(double3 == double5);
      assertFalse(double3 == double6);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double5);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double7);
      assertTrue(double2 == double0);
      assertFalse(double2 == double6);
      assertFalse(double4 == double6);
      assertTrue(double4 == double7);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double5);
      assertFalse(double4 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double5);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double6);
      assertFalse(double1 == double7);
      assertFalse(double0 == double3);
      assertFalse(double0 == double6);
      assertFalse(double0 == double5);
      assertFalse(double0 == double7);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double5 == double1);
      assertFalse(double5 == double6);
      assertFalse(double5 == double4);
      assertFalse(double5 == double3);
      assertFalse(double5 == double7);
      assertFalse(double5 == double2);
      assertFalse(double5 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double7, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(3.141592653589793, double1, 0.01D);
      
      double double2 = FastMath.min(double1, double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double2, 0.01D);
      
      double double3 = 1294.553;
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      
      double double4 = FastMath.sinh(double3);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
      
      double double5 = FastMath.atan2(double2, double4);
      assertFalse(double0 == double5);
      assertTrue(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double5 == double4);
      assertFalse(double5 == double2);
      assertFalse(double5 == double3);
      assertFalse(double5 == double1);
      assertFalse(double5 == double0);
      assertFalse(double2 == double5);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertTrue(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double5);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double5);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double3 == double5);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertEquals(-0.0, double5, 0.01D);
      
      double double6 = FastMath.pow(double5, double2);
      assertFalse(double0 == double6);
      assertFalse(double0 == double5);
      assertTrue(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double5 == double4);
      assertFalse(double5 == double2);
      assertFalse(double5 == double3);
      assertFalse(double5 == double1);
      assertFalse(double5 == double0);
      assertFalse(double5 == double6);
      assertFalse(double2 == double5);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertTrue(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double6);
      assertFalse(double1 == double6);
      assertFalse(double1 == double5);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double6 == double4);
      assertFalse(double6 == double0);
      assertFalse(double6 == double3);
      assertFalse(double6 == double1);
      assertFalse(double6 == double5);
      assertFalse(double6 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double5);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double6);
      assertFalse(double3 == double5);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double6);
      assertEquals(Double.NEGATIVE_INFINITY, double6, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      double double0 = 1876.573247;
      double double1 = 0.0;
      double double2 = FastMath.pow(double1, double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      float float0 = 2344.097F;
      double double2 = (-1357.0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(-0.0, double3, 0.01D);
      
      double double4 = FastMath.pow(double3, (double) float0);
      //  // Unstable assertion: assertTrue(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertTrue(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(0.0, double4, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      long long0 = 0L;
      double double2 = FastMath.pow(double1, (double) long0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log1p(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = 2464.43916660037;
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = (-0.4945932156650668);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.1248249837080893, double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.7536894383766011, double2, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      int int0 = (-86);
      Random.setNextRandom(int0);
      double double0 = FastMath.random();
      assertEquals(0.6, double0, 0.01D);
      
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.5688248987322475, double1, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      double double0 = 4.9E-324;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.log10(double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      double double0 = (-680.1413);
      double double1 = FastMath.cbrt(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-8.794268392360886), double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      double double0 = 491.78;
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.acosh(double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(710.1881780014921, double2, 0.01D);
      
      double double3 = FastMath.expm1(double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test110()  throws Throwable  {
      double double0 = (-709.0968311717373);
      double double1 = FastMath.exp(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = (-709.0);
      double double1 = FastMath.expm1(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test112()  throws Throwable  {
      double double0 = (-723.33258425);
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test113()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.log1p(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.expm1(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertEquals((-1.0), double2, 0.01D);
  }

  @Test
  public void test114()  throws Throwable  {
      double double0 = 2563.754910151;
      double double1 = 0.75;
      double double2 = FastMath.pow(double1, double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(4.87E-321, double2, 0.01D);
  }

  @Test
  public void test115()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.floor(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.signum(double1);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test116()  throws Throwable  {
      double double0 = 0.030589581;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-3.487095818199829), double1, 0.01D);
      
      double double2 = FastMath.signum(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-1.0), double2, 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      double double0 = 2.85040095144011776E17;
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.00918780066381382), double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-0.009188059208392501), double2, 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = 0.04168701738764507;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0417111906003814, double1, 0.01D);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = 0.0875862700108075;
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.08781127502621158, double1, 0.01D);
  }

  @Test
  public void test120()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.atanh((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test121()  throws Throwable  {
      double double0 = 0.030589581;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.030584812447952532, double1, 0.01D);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = 0.09090909090909091;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.09078433518852215, double1, 0.01D);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = 0.15578663906022283;
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.15516327984510572, double1, 0.01D);
  }

  @Test
  public void test124()  throws Throwable  {
      double double0 = (-680.1413);
      double double1 = FastMath.cbrt(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-8.794268392360886), double1, 0.01D);
      
      double double2 = FastMath.asinh(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-2.870464323916843), double2, 0.01D);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.asinh(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test126()  throws Throwable  {
      double double0 = 0.9429116724684726;
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.3395288826086813, double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.32705673585851197, double2, 0.01D);
  }

  @Test
  public void test127()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.min(double1, double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = FastMath.tanh(double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double0 == double3);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertTrue(double3 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test128()  throws Throwable  {
      double double0 = (-680.1413);
      double double1 = FastMath.tanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test129()  throws Throwable  {
      double double0 = 1315.0;
      double double1 = FastMath.tanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test130()  throws Throwable  {
      double double0 = (-680.1413);
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.013509091264988187, double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.013509502160237039, double2, 0.01D);
  }

  @Test
  public void test131()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sinh(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test132()  throws Throwable  {
      double double0 = (-680.1413);
      double double1 = FastMath.cbrt(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-8.794268392360886), double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-3298.1638675061645), double2, 0.01D);
  }

  @Test
  public void test133()  throws Throwable  {
      double double0 = (-2104.5664618193);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test134()  throws Throwable  {
      double double0 = 221.3517235495389;
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(6.773327918071972E95, double1, 0.01D);
  }

  @Test
  public void test135()  throws Throwable  {
      int int0 = 1;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(1, int1);
      
      int int2 = FastMath.round((float) int1);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals(1, int2);
  }

  @Test
  public void test136()  throws Throwable  {
      double double0 = (-680.1413);
      double double1 = FastMath.cbrt(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-8.794268392360886), double1, 0.01D);
      
      double double2 = FastMath.atan(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-1.4575722282294803), double2, 0.01D);
  }

  @Test
  public void test137()  throws Throwable  {
      double double0 = (-1.0E-6);
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.5707973267948967, double1, 0.01D);
  }

  @Test
  public void test138()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.expm1((double) long0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }
}
