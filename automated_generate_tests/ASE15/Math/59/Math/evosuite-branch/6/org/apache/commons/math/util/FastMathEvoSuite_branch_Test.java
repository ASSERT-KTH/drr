/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:28:38 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class FastMathEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cos(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = (-4852.71156350713);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.max(double1, double2);
      assertEquals(1.0, double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertTrue(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
  }

  @Test
  public void test001()  throws Throwable  {
      double double0 = (-399.71563719158);
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.max(double0, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test002()  throws Throwable  {
      double double0 = (-786.1288131824466);
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      float float0 = 0.0F;
      float float1 = FastMath.abs(float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double2 = FastMath.max(double1, (double) float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
  }

  @Test
  public void test003()  throws Throwable  {
      float float0 = (-2056.1956F);
      int int0 = FastMath.round(float0);
      assertEquals((-2056), int0);
      
      float float1 = FastMath.max((float) int0, float0);
      assertEquals((-2056.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test004()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = 1459.06F;
      float float2 = FastMath.max(float0, float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
  }

  @Test
  public void test005()  throws Throwable  {
      int int0 = 0;
      long long0 = (-1468L);
      long long1 = FastMath.max((long) int0, long0);
      assertEquals(0L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test006()  throws Throwable  {
      int int0 = 4;
      int int1 = FastMath.max(int0, int0);
      assertEquals(4, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test007()  throws Throwable  {
      int int0 = 7;
      int int1 = 0;
      int int2 = FastMath.max(int0, int1);
      assertEquals(7, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test008()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.tan(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.min(double1, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
  }

  @Test
  public void test009()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      long long0 = FastMath.round(double0);
      assertEquals((-9223372036854775808L), long0);
      
      double double1 = FastMath.min((double) long0, double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test010()  throws Throwable  {
      float float0 = (-665.2F);
      float float1 = Float.NaN;
      float float2 = FastMath.min(float1, float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(float1 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
  }

  @Test
  public void test011()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = 0.0F;
      long long0 = FastMath.round(double1);
      assertEquals(1L, long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float1 = FastMath.min(float0, (float) long0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test012()  throws Throwable  {
      double double0 = 2762.98;
      float float0 = (-665.2F);
      float float1 = FastMath.max(float0, float0);
      assertEquals((-665.2F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      long long0 = FastMath.round(double0);
      assertEquals(2763L, long0);
      
      float float2 = FastMath.min((float) long0, float1);
      assertEquals((-665.2F), float2, 0.01F);
      assertTrue(float2 == float1);
      assertTrue(float2 == float0);
      assertTrue(float1 == float0);
      assertTrue(float1 == float2);
      assertTrue(float0 == float1);
      assertTrue(float0 == float2);
  }

  @Test
  public void test013()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      long long0 = FastMath.round(double0);
      assertEquals((-9223372036854775808L), long0);
      
      long long1 = (-1L);
      assertFalse(long1 == long0);
      
      long long2 = FastMath.min(long1, long0);
      assertEquals((-9223372036854775808L), long2);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertTrue(long0 == long2);
  }

  @Test
  public void test014()  throws Throwable  {
      int int0 = 1506;
      int int1 = (-848);
      int int2 = FastMath.min(int0, int1);
      assertEquals((-848), int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test015()  throws Throwable  {
      float float0 = (-2525.5F);
      double double0 = FastMath.rint((double) float0);
      assertEquals((-2526.0), double0, 0.01D);
  }

  @Test
  public void test016()  throws Throwable  {
      double double0 = 357.5;
      double double1 = FastMath.rint(double0);
      assertEquals(358.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test017()  throws Throwable  {
      double double0 = (-3559.485);
      double double1 = FastMath.rint(double0);
      assertEquals((-3559.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test018()  throws Throwable  {
      int int0 = (-1);
      double double0 = FastMath.asinh((double) int0);
      assertEquals((-0.8813735870195429), double0, 0.01D);
      
      double double1 = FastMath.rint(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test019()  throws Throwable  {
      double double0 = 91.9371397821;
      double double1 = FastMath.nextUp(double0);
      assertEquals(91.93713978210002, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cos(double1);
      assertEquals((-0.6741723321546469), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      double double3 = FastMath.ceil(double2);
      assertEquals(-0.0, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test
  public void test020()  throws Throwable  {
      int int0 = (-799);
      double double0 = FastMath.ceil((double) int0);
      assertEquals((-799.0), double0, 0.01D);
  }

  @Test
  public void test021()  throws Throwable  {
      float float0 = (-2056.1956F);
      int int0 = FastMath.round(float0);
      assertEquals((-2056), int0);
      
      double double0 = 1.0;
      double double1 = FastMath.nextAfter(double0, (double) int0);
      assertEquals(0.9999999999999999, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test022()  throws Throwable  {
      double double0 = (-0.49999999999999994);
      double double1 = FastMath.nextAfter(double0, double0);
      assertEquals((-0.5), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test023()  throws Throwable  {
      double double0 = (-778.900991364);
      double double1 = 2762.98;
      double double2 = FastMath.nextAfter(double1, double0);
      assertEquals(2762.9799999999996, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test024()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.log((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.nextUp(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test025()  throws Throwable  {
      double double0 = (-786.1288131824466);
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter(double1, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 12;
      int int1 = FastMath.min(int0, int0);
      assertEquals(12, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.abs((double) int1);
      assertEquals(12.0, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = (-1);
      long long0 = FastMath.abs((long) int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test028()  throws Throwable  {
      int int0 = 3068;
      long long0 = FastMath.max((long) int0, (long) int0);
      assertEquals(3068L, long0);
      
      long long1 = FastMath.abs(long0);
      assertEquals(3068L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = (-7);
      int int1 = FastMath.abs(int0);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test030()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.tan(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.cbrt(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test
  public void test031()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.cbrt((double) int1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextAfter(double0, double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals(1.7031839360032603E-108, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test033()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.atan2(double0, double0);
      assertEquals(0.7853981633974483, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(0.6674572160283838, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test034()  throws Throwable  {
      double double0 = 6.0;
      double double1 = FastMath.tan(double0);
      assertEquals((-0.29100619138474915), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(1.866074704651818, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test035()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.min(long0, long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double0 = FastMath.cos((double) long1);
      assertEquals(1.0, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double1 = FastMath.acos(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(long0 == long1);
      assertFalse(double1 == double0);
      assertTrue(long1 == long0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test036()  throws Throwable  {
      double double0 = (-399.71563719158);
      double double1 = FastMath.acos(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test037()  throws Throwable  {
      double double0 = (-778.900991364);
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.acos(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
  }

  @Test
  public void test038()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cos(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test039()  throws Throwable  {
      float float0 = (-1186.39F);
      int int0 = FastMath.round(float0);
      assertEquals((-1186), int0);
      
      double double0 = FastMath.asin((double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test040()  throws Throwable  {
      double double0 = (-778.900991364);
      double double1 = FastMath.signum(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.acos(double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.asin(double2);
      assertEquals(Double.NaN, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test041()  throws Throwable  {
      int int0 = (-1);
      double double0 = 0.0;
      double double1 = FastMath.min(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.atan2((double) int0, double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double1, double0);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test043()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      long long0 = FastMath.round(double0);
      assertEquals((-9223372036854775808L), long0);
      
      double double1 = FastMath.atan2((double) long0, double0);
      assertEquals((-3.141592653589793), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test044()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      int int0 = 1506;
      double double1 = FastMath.atan2((double) int0, double0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test045()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = Double.POSITIVE_INFINITY;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertTrue(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test046()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.log((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.asinh((double) float0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test047()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.atan2(double0, double0);
      assertEquals((-2.356194490192345), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test048()  throws Throwable  {
      double double0 = (-778.900991364);
      float float0 = (-665.2F);
      float float1 = FastMath.max(float0, float0);
      assertEquals((-665.2F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double1, (double) float1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test049()  throws Throwable  {
      double double0 = 3166.883849725;
      double double1 = 0.0;
      double double2 = FastMath.atan2(double1, double0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test050()  throws Throwable  {
      double double0 = (-1023.8035089);
      double double1 = FastMath.floor(double0);
      assertEquals((-1024.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals(3.141592653589793, double3, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
  }

  @Test
  public void test051()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.log((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2((double) float0, double0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test052()  throws Throwable  {
      double double0 = 834.0;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double2 = FastMath.atan2((double) int1, double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(int1 == int0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(int0 == int1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test053()  throws Throwable  {
      float float0 = (-617.8655F);
      float float1 = FastMath.abs(float0);
      assertEquals(617.8655F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.atan2((double) float1, (double) float0);
      assertEquals(2.356194490192345, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test054()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toRadians(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
  }

  @Test
  public void test055()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.atan(double0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test056()  throws Throwable  {
      double double0 = (-1557.6077);
      double double1 = FastMath.log10(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double1, double1);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
  }

  @Test
  public void test057()  throws Throwable  {
      int int0 = (-799);
      double double0 = FastMath.atan((double) int0);
      assertEquals((-1.5695447629928156), double0, 0.01D);
  }

  @Test
  public void test058()  throws Throwable  {
      double double0 = -0.0;
      double double1 = FastMath.atan2(double0, double0);
      assertEquals((-3.141592653589793), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tan(double1);
      assertEquals(1.2246467991473532E-16, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test059()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test060()  throws Throwable  {
      double double0 = (-778.900991364);
      double double1 = FastMath.cos(double0);
      assertEquals(0.9771920719722567, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test061()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.cos(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test062()  throws Throwable  {
      int int0 = 294;
      double double0 = FastMath.sin((double) int0);
      assertEquals((-0.9661099892625297), double0, 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.sin(double0);
      assertEquals(1.2246467991473532E-16, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test064()  throws Throwable  {
      double double0 = 365.44884;
      double double1 = FastMath.sin(double0);
      assertEquals(0.8542425908497743, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test065()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.sin(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = 834.0;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = (-4.9E-324);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals(-0.0, double3, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      
      double double4 = FastMath.sin(double3);
      assertEquals(-0.0, double4, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertTrue(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertTrue(double3 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
  }

  @Test
  public void test067()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sin(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test068()  throws Throwable  {
      double double0 = 3294210.0;
      double double1 = FastMath.tan(double0);
      assertEquals((-2.7730819765501997), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test069()  throws Throwable  {
      long long0 = 4294967295L;
      double double0 = FastMath.cos((double) long0);
      assertEquals((-0.8679353473572022), double0, 0.01D);
  }

  @Test
  public void test070()  throws Throwable  {
      double double0 = 8.0E298;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.9991033281235678), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test071()  throws Throwable  {
      double double0 = 5.650007086920087E-9;
      float float0 = (-1.0F);
      double double1 = FastMath.pow(double0, (double) float0);
      assertEquals(1.7699092843883786E8, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cos(double1);
      assertEquals(0.6204994323033304, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test072()  throws Throwable  {
      double double0 = 174.419;
      double double1 = FastMath.exp(double0);
      assertEquals(5.613183489086917E75, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tan(double1);
      assertEquals(0.9636677521700131, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test073()  throws Throwable  {
      double double0 = 2.85040095144011776E17;
      double double1 = FastMath.sin(double0);
      assertEquals(0.9999577912686926, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test074()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-900.83361304987);
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      long long0 = FastMath.round(double2);
      assertEquals(9223372036854775807L, long0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.cos((double) long0);
      assertEquals(0.011800076512800236, double3, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = 170.8962587113507;
      double double1 = FastMath.exp(double0);
      assertEquals(1.6569222741848185E74, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tan(double1);
      assertEquals(19.854325581010016, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      double double3 = FastMath.tan(double2);
      assertEquals(1.5738686847941457, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test
  public void test076()  throws Throwable  {
      double double0 = 2778.842646;
      double double1 = FastMath.log1p(double0);
      assertEquals(7.9301496029244465, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cos(double1);
      assertEquals((-0.07609434147701757), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.tan(double2);
      assertEquals((-0.0762415533761274), double3, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test077()  throws Throwable  {
      int int0 = (-1);
      double double0 = FastMath.cbrt((double) int0);
      assertEquals((-1.0), double0, 0.01D);
      
      double double1 = FastMath.sin(double0);
      assertEquals((-0.8414709848078965), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test078()  throws Throwable  {
      int int0 = (-7);
      double double0 = 20.0;
      double double1 = FastMath.pow((double) int0, double0);
      assertEquals(7.9792266297612E16, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = (-4852.71156350713);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test080()  throws Throwable  {
      long long0 = (-82L);
      double double0 = (-8.0E298);
      double double1 = FastMath.pow((double) long0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test081()  throws Throwable  {
      float float0 = (-2056.1956F);
      double double0 = FastMath.log10((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.pow((double) float0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test
  public void test082()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.tan(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double1, double0);
      //  // Unstable assertion: assertEquals(0.0, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test083()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      long long0 = FastMath.round(double0);
      assertEquals((-9223372036854775808L), long0);
      
      double double1 = FastMath.sinh((double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = (-1.0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.cbrt(double2);
      assertEquals((-1.0), double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      
      double double4 = FastMath.pow(double1, double3);
      assertEquals(-0.0, double4, 0.01D);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double0 == double4);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test
  public void test084()  throws Throwable  {
      double double0 = (-0.0013888888689039883);
      long long0 = (-1L);
      double double1 = FastMath.atanh((double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test085()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.tan(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      long long0 = (-1L);
      double double2 = FastMath.atanh((double) long0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertTrue(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertTrue(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
  }

  @Test
  public void test086()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      long long0 = FastMath.round(double0);
      assertEquals((-9223372036854775808L), long0);
      
      double double1 = FastMath.sinh((double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.pow(double1, (double) long0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = 12;
      int int1 = FastMath.min(int0, int0);
      assertEquals(12, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.pow((double) int1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertTrue(int1 == int0);
  }

  @Test
  public void test088()  throws Throwable  {
      double double0 = (-786.1288131824466);
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.cosh(double0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      
      double double3 = FastMath.pow(double2, double1);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
  }

  @Test
  public void test089()  throws Throwable  {
      double double0 = (-778.900991364);
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double1, double0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test090()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.max(float0, float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      
      double double0 = -0.0;
      double double1 = FastMath.floor(double0);
      //  // Unstable assertion: assertEquals(-0.0, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      
      double double2 = FastMath.pow(double1, (double) float1);
      //  // Unstable assertion: assertEquals(0.0, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test091()  throws Throwable  {
      double double0 = (-1023.8035089);
      double double1 = -0.0;
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test092()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toRadians(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
  }

  @Test
  public void test093()  throws Throwable  {
      double double0 = (-1023.8035089);
      double double1 = 0.0;
      double double2 = FastMath.ceil(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      
      double double3 = FastMath.pow(double2, double0);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double3);
      
      double double4 = FastMath.log1p(double3);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
      assertFalse(double3 == double0);
      assertTrue(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double4);
      assertTrue(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertTrue(double4 == double3);
  }

  @Test
  public void test094()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.log1p(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.log(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test096()  throws Throwable  {
      double double0 = 0.2;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.2027325540540821, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test097()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.log10(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = 6.0;
      double double1 = FastMath.tan(double0);
      assertEquals((-0.29100619138474915), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log1p(double1);
      assertEquals((-0.34390848504772836), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ceil(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.log10(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.log10(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = (-3475.0);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = (-2.6033824355191673E-8);
      double double1 = FastMath.expm1(double0);
      assertEquals((-2.603382401631167E-8), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = (-716.76663);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test104()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextAfter(double0, double0);
      //  // Unstable assertion: assertEquals(4.9E-324, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = 1.0;
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = (-4028.0);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test106()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test107()  throws Throwable  {
      long long0 = 788L;
      double double0 = FastMath.signum((double) long0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      double double0 = 0.031;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.031009936063096846, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test109()  throws Throwable  {
      double double0 = 0.07692307692307693;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.07707533991362915, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test110()  throws Throwable  {
      double double0 = 0.15;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.15114043593646678, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test112()  throws Throwable  {
      double double0 = 0.008336750013465571;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.008336653447185054, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test113()  throws Throwable  {
      double double0 = 0.0952233225107193;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.09508000060292923, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test114()  throws Throwable  {
      double double0 = 0.125;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.12467674692144275, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test115()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.tanh(double0);
      assertEquals(0.7615941559557649, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test116()  throws Throwable  {
      double double0 = 6.0;
      double double1 = FastMath.tan(double0);
      assertEquals((-0.29100619138474915), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tanh(double1);
      assertEquals((-0.2830606480272277), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test117()  throws Throwable  {
      float float0 = (-617.8655F);
      double double0 = FastMath.tanh((double) float0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.cos(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.tanh(double1);
      //  // Unstable assertion: assertEquals(1.0, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = -0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = (-778.900991364);
      double double1 = 0.0;
      double double2 = FastMath.nextAfter(double1, double0);
      assertEquals((-4.9E-324), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.sinh(double2);
      assertEquals((-4.9E-324), double3, 0.01D);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
  }

  @Test
  public void test121()  throws Throwable  {
      double double0 = 14.240847909194898;
      double double1 = FastMath.sinh(double0);
      assertEquals(765053.257960554, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.sinh(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = (-778.900991364);
      double double1 = FastMath.signum(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(1.5430806348152437, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test124()  throws Throwable  {
      double double0 = 296.1;
      double double1 = FastMath.cosh(double0);
      assertEquals(1.9659211541233716E128, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = 3166.883849725;
      double double1 = FastMath.log(double0);
      assertEquals(8.060503370692423, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(1583.4420827464085, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test126()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test127()  throws Throwable  {
      int int0 = (-1);
      double double0 = FastMath.asin((double) int0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
      
      double double1 = FastMath.acosh(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test128()  throws Throwable  {
      double double0 = 3166.883849725;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test129()  throws Throwable  {
      int int0 = 3068;
      double double0 = FastMath.sinh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test130()  throws Throwable  {
      double double0 = (-3597.2455205897);
      double double1 = FastMath.toDegrees(double0);
      assertEquals((-206106.98620213047), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test131()  throws Throwable  {
      double double0 = 2778.842646;
      double double1 = FastMath.ulp(double0);
      assertEquals(4.547473508864641E-13, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test132()  throws Throwable  {
      double double0 = (-3597.2455205897);
      double double1 = FastMath.ceil(double0);
      assertEquals((-3597.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals((-62.77949319423603), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }
}
