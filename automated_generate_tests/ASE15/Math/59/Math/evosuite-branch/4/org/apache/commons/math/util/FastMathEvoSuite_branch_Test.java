/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:07:02 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.util.FastMath;



import org.junit.runner.RunWith;


public class FastMathEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      int int0 = (-304);
      int int1 = FastMath.max(int0, int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals((-304), int1);
      
      double double0 = FastMath.sqrt((double) int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.max(double0, (double) int1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test001()  throws Throwable  {
      double double0 = 3329.52593576451;
      double double1 = FastMath.max(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(3329.52593576451, double1, 0.01D);
  }

  @Test
  public void test002()  throws Throwable  {
      int int0 = 0;
      int int1 = (-424);
      double double0 = FastMath.max((double) int0, (double) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test003()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = 168.7F;
      float float2 = FastMath.max(float0, float1);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
  }

  @Test
  public void test004()  throws Throwable  {
      long long0 = 543L;
      long long1 = 0L;
      long long2 = FastMath.min(long0, long1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(0L, long2);
      
      float float0 = FastMath.max((float) long0, (float) long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(543.0F, float0, 0.01F);
  }

  @Test
  public void test005()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      long long0 = FastMath.round(double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals((-9223372036854775808L), long0);
      
      long long1 = 4398046511092L;
      //  // Unstable assertion: assertFalse(long1 == long0);
      
      long long2 = FastMath.max(long0, long1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(long2 == long0);
      //  // Unstable assertion: assertFalse(long2 == long1);
      //  // Unstable assertion: assertFalse(long1 == long2);
      //  // Unstable assertion: assertFalse(long1 == long0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(long0 == long1);
      //  // Unstable assertion: assertTrue(long0 == long2);
      //  // Unstable assertion: assertEquals((-9223372036854775808L), long2);
  }

  @Test
  public void test006()  throws Throwable  {
      int int0 = 1854;
      int int1 = (-2343);
      int int2 = FastMath.max(int0, int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals(1854, int2);
  }

  @Test
  public void test007()  throws Throwable  {
      long long0 = (-5034868814120038131L);
      long long1 = FastMath.min(long0, long0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertEquals((-5034868814120038131L), long1);
      
      double double0 = FastMath.asin((double) long0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.min(double0, (double) long1);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test008()  throws Throwable  {
      double double0 = (-3779.318981408388);
      double double1 = FastMath.ceil(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-3779.0), double1, 0.01D);
      
      double double2 = FastMath.min(double1, double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-3779.318981408388), double2, 0.01D);
  }

  @Test
  public void test009()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = (-1.0F);
      float float2 = FastMath.min(float0, float1);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
  }

  @Test
  public void test010()  throws Throwable  {
      long long0 = 543L;
      float float0 = FastMath.min((float) long0, (float) long0);
      assertEquals(543.0F, float0, 0.01F);
  }

  @Test
  public void test011()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = (-3.37F);
      float float2 = FastMath.min(float0, float1);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertEquals((-3.37F), float2, 0.01F);
  }

  @Test
  public void test012()  throws Throwable  {
      int int0 = (-321);
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-321), int1);
  }

  @Test
  public void test013()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-3623);
      int int2 = FastMath.min(int0, int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals((-3623), int2);
  }

  @Test
  public void test014()  throws Throwable  {
      double double0 = 1.5;
      double double1 = FastMath.rint(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.0, double1, 0.01D);
  }

  @Test
  public void test015()  throws Throwable  {
      double double0 = 1484.5;
      double double1 = FastMath.rint(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1484.0, double1, 0.01D);
  }

  @Test
  public void test016()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.rint(double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test017()  throws Throwable  {
      double double0 = (-0.09088450866185192);
      double double1 = FastMath.floor(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.rint(double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-1.0), double2, 0.01D);
  }

  @Test
  public void test018()  throws Throwable  {
      double double0 = 1.633123935319537E16;
      double double1 = FastMath.ceil(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(1.633123935319537E16, double1, 0.01D);
  }

  @Test
  public void test019()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.floor(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = (-4.9E-324);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.ceil(double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertEquals(-0.0, double3, 0.01D);
      
      double double4 = FastMath.nextAfter(double1, double3);
      assertTrue(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertEquals(0.9999999999999999, double4, 0.01D);
  }

  @Test
  public void test020()  throws Throwable  {
      double double0 = (-0.49999999999999994);
      double double1 = FastMath.nextAfter(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.5), double1, 0.01D);
  }

  @Test
  public void test021()  throws Throwable  {
      double double0 = (-2582.44008392253);
      double double1 = FastMath.floor(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2583.0), double1, 0.01D);
      
      double double2 = FastMath.nextAfter(double1, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-2583.0000000000005), double2, 0.01D);
  }

  @Test
  public void test022()  throws Throwable  {
      double double0 = (-3779.318981408388);
      double double1 = (-4.9E-324);
      double double2 = FastMath.ceil(double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals(-0.0, double2, 0.01D);
      
      double double3 = FastMath.sqrt(double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      
      double double4 = FastMath.log1p(double2);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertTrue(double4 == double2);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertTrue(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals(-0.0, double4, 0.01D);
      
      double double5 = FastMath.pow(double4, double3);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double5);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertTrue(double4 == double2);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double5);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double5);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double5 == double0);
      //  // Unstable assertion: assertFalse(double5 == double3);
      //  // Unstable assertion: assertFalse(double5 == double1);
      //  // Unstable assertion: assertFalse(double5 == double2);
      //  // Unstable assertion: assertFalse(double5 == double4);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double5);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertTrue(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double5);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals(0.0, double5, 0.01D);
      
      double double6 = FastMath.nextAfter(double5, double5);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double6);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double5);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertTrue(double4 == double2);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double6);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double5);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double5);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double6);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double5 == double0);
      //  // Unstable assertion: assertFalse(double5 == double3);
      //  // Unstable assertion: assertFalse(double5 == double1);
      //  // Unstable assertion: assertFalse(double5 == double2);
      //  // Unstable assertion: assertFalse(double5 == double6);
      //  // Unstable assertion: assertFalse(double5 == double4);
      //  // Unstable assertion: assertFalse(double6 == double4);
      //  // Unstable assertion: assertFalse(double6 == double5);
      //  // Unstable assertion: assertFalse(double6 == double1);
      //  // Unstable assertion: assertFalse(double6 == double2);
      //  // Unstable assertion: assertFalse(double6 == double3);
      //  // Unstable assertion: assertFalse(double6 == double0);
      //  // Unstable assertion: assertFalse(double0 == double6);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double5);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertTrue(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double6);
      //  // Unstable assertion: assertFalse(double2 == double5);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals(4.9E-324, double6, 0.01D);
  }

  @Test
  public void test023()  throws Throwable  {
      double double0 = (-2582.44008392253);
      long long0 = 543L;
      long long1 = 0L;
      long long2 = FastMath.min(long0, long1);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals(0L, long2);
      
      double double1 = FastMath.nextAfter((double) long2, double0);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-4.9E-324), double1, 0.01D);
  }

  @Test
  public void test024()  throws Throwable  {
      long long0 = (-5034868814120038131L);
      long long1 = FastMath.min(long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-5034868814120038131L), long1);
      
      double double0 = FastMath.acosh((double) long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.nextUp(double0);
      assertTrue(long0 == long1);
      assertTrue(double0 == double1);
      assertTrue(long1 == long0);
      assertTrue(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test025()  throws Throwable  {
      double double0 = (-2582.44008392253);
      double double1 = FastMath.log10(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test026()  throws Throwable  {
      float float0 = (-3111.4526F);
      float float1 = FastMath.abs(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(3111.4526F, float1, 0.01F);
  }

  @Test
  public void test027()  throws Throwable  {
      long long0 = (-1837L);
      long long1 = FastMath.abs(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(1837L, long1);
  }

  @Test
  public void test028()  throws Throwable  {
      long long0 = 4607182418800017438L;
      long long1 = FastMath.abs(long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(4607182418800017438L, long1);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = 1487;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1487, int1);
  }

  @Test
  public void test030()  throws Throwable  {
      double double0 = 0.625;
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.2041199826559248), double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-0.5887919191573966), double2, 0.01D);
  }

  @Test
  public void test031()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.7031839360032603E-108, double2, 0.01D);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = 3.9736429850260626E-8;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.973642985026064E-8, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(1.5707962870584669, double2, 0.01D);
  }

  @Test
  public void test033()  throws Throwable  {
      double double0 = (-3.940510424527919E-20);
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test
  public void test034()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test035()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.141592653589793, double1, 0.01D);
  }

  @Test
  public void test036()  throws Throwable  {
      double double0 = (-2138.015782493);
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test037()  throws Throwable  {
      double double0 = 2677.1;
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test038()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.atan2(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.7853981633974483, double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.9033391107665127, double2, 0.01D);
  }

  @Test
  public void test039()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.asin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test
  public void test040()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test
  public void test041()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-0.0013888888689039883);
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = FastMath.atan2(double1, double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertTrue(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double3);
      assertEquals(1.5707963267948966, double3, 0.01D);
  }

  @Test
  public void test043()  throws Throwable  {
      double double0 = (-812.12298494);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      float float0 = (-3.37F);
      double double2 = FastMath.atan2((double) float0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-3.141592653589793), double2, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      double double0 = (-812.12298494);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      float float0 = 1.0F;
      double double2 = FastMath.atan2((double) float0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(3.141592653589793, double2, 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      double double0 = 1361.33;
      double double1 = FastMath.signum(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = (-2493.0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atanh(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.atan2(double2, double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertEquals(-0.0, double4, 0.01D);
  }

  @Test
  public void test046()  throws Throwable  {
      double double0 = 1361.33;
      double double1 = FastMath.signum(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = 1.0;
      assertTrue(double2 == double1);
      
      double double3 = FastMath.atanh(double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.atan2(double1, double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double2 == double4);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertEquals(0.0, double4, 0.01D);
  }

  @Test
  public void test047()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      long long0 = FastMath.round(double0);
      assertFalse(double0 == double1);
      assertEquals((-1L), long0);
      
      double double2 = FastMath.atan2(double1, (double) long0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test
  public void test048()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = 1398.53129;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.sinh(double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.atan2(double1, double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertEquals((-0.7853981633974483), double4, 0.01D);
  }

  @Test
  public void test049()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test050()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1.0E-6);
      double double2 = FastMath.log1p(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-1.0000005000003334E-6), double2, 0.01D);
      
      double double3 = FastMath.atan2(double0, double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(3.141592653589793, double3, 0.01D);
  }

  @Test
  public void test051()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test052()  throws Throwable  {
      double double0 = -0.0;
      double double1 = (-2301.469357937406);
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-3.141592653589793), double2, 0.01D);
  }

  @Test
  public void test053()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = 1.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atanh(double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.atan2(double1, double3);
      assertTrue(double1 == double4);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double4 == double0);
      assertTrue(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double0 == double4);
      assertEquals(0.0, double4, 0.01D);
  }

  @Test
  public void test054()  throws Throwable  {
      double double0 = -0.0;
      double double1 = FastMath.atan2(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-3.141592653589793), double1, 0.01D);
  }

  @Test
  public void test055()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertEquals(3.141592653589793, double3, 0.01D);
  }

  @Test
  public void test056()  throws Throwable  {
      float float0 = (-3111.4526F);
      float float1 = (-1.0F);
      float float2 = FastMath.max(float0, float1);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertEquals((-1.0F), float2, 0.01F);
      
      double double0 = FastMath.log1p((double) float2);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test
  public void test057()  throws Throwable  {
      double double0 = 2677.1;
      float float0 = Float.NaN;
      float float1 = FastMath.abs(float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      
      double double1 = FastMath.atan2(double0, (double) float1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test
  public void test058()  throws Throwable  {
      double double0 = (-2318.0);
      double double1 = FastMath.atan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.5703649204368453), double1, 0.01D);
  }

  @Test
  public void test059()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.2246467991473532E-16, double1, 0.01D);
  }

  @Test
  public void test060()  throws Throwable  {
      long long0 = (-5034868814120038131L);
      long long1 = FastMath.min(long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-5034868814120038131L), long1);
      
      double double0 = 668.0120951060286;
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.3000700371607628E290, double1, 0.01D);
      
      double double2 = FastMath.pow((double) long1, double1);
      assertTrue(long0 == long1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(long1 == long0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.tan(double2);
      assertTrue(long0 == long1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertTrue(long1 == long0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test061()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test062()  throws Throwable  {
      double double0 = -0.0;
      double double1 = FastMath.tan(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      double double0 = (-294.2405020594);
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.48081936651933593, double1, 0.01D);
  }

  @Test
  public void test064()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test065()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.ceil(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = 1361.33;
      double double1 = FastMath.signum(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.cos(double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test067()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.min(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-3.141592653589793), double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-1.2246467991473532E-16), double2, 0.01D);
  }

  @Test
  public void test068()  throws Throwable  {
      double double0 = 2684.7456854;
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test069()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.ceil(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.toRadians(double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(0.0, double2, 0.01D);
      
      double double3 = FastMath.sin(double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test070()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test071()  throws Throwable  {
      double double0 = (-680.19);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.2639609309603718E295, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(1.1828396326501156, double2, 0.01D);
  }

  @Test
  public void test072()  throws Throwable  {
      double double0 = 1.633123935319537E16;
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.28443016146380146), double1, 0.01D);
  }

  @Test
  public void test073()  throws Throwable  {
      double double0 = (-1.0);
      long long0 = FastMath.round(double0);
      assertEquals((-1L), long0);
      
      long long1 = 4398046511103L;
      assertFalse(long1 == long0);
      
      long long2 = FastMath.max(long0, long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertEquals(4398046511103L, long2);
      
      double double1 = FastMath.sin((double) long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(double1 == double0);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(double0 == double1);
      assertEquals(0.6217696317492024, double1, 0.01D);
  }

  @Test
  public void test074()  throws Throwable  {
      double double0 = (-177.8299);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(8.501866706314751E76, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(2.1121789146718357, double2, 0.01D);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = (-1.0);
      long long0 = FastMath.round(double0);
      assertEquals((-1L), long0);
      
      long long1 = 4398046511092L;
      assertFalse(long1 == long0);
      
      long long2 = FastMath.max(long0, long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(4398046511092L, long2);
      
      double double1 = FastMath.sin((double) long2);
      assertFalse(double1 == double0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(double0 == double1);
      assertEquals(0.7859442763448347, double1, 0.01D);
  }

  @Test
  public void test076()  throws Throwable  {
      double double0 = (-73.04850391983);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.65174749953668E31, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-0.0495536530209921), double2, 0.01D);
  }

  @Test
  public void test077()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      long long0 = FastMath.round(double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-9223372036854775808L), long0);
      
      double double2 = FastMath.sin((double) long0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-0.9999303766734422), double2, 0.01D);
  }

  @Test
  public void test078()  throws Throwable  {
      double double0 = (-0.09088450866185192);
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.09075944274379903), double1, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = (-2318.0);
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      double double0 = (-93.99026195455737);
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.atan2(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2.356194490192345), double1, 0.01D);
      
      double double2 = (-8.0E298);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test082()  throws Throwable  {
      double double0 = 1172.63;
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = (-570.7885102073876);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertTrue(double3 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test083()  throws Throwable  {
      double double0 = 4.0;
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.7568024953079282), double1, 0.01D);
      
      double double2 = Double.NEGATIVE_INFINITY;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test085()  throws Throwable  {
      double double0 = 11.0;
      double double1 = FastMath.asin(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = (-1.0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.atanh(double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.cbrt(double3);
      //  // Unstable assertion: assertTrue(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double4, 0.01D);
      
      double double5 = FastMath.pow(double1, double4);
      //  // Unstable assertion: assertTrue(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double5);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double5);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double5 == double0);
      //  // Unstable assertion: assertFalse(double5 == double2);
      //  // Unstable assertion: assertFalse(double5 == double4);
      //  // Unstable assertion: assertFalse(double5 == double1);
      //  // Unstable assertion: assertFalse(double5 == double3);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double5);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double4 == double5);
      //  // Unstable assertion: assertTrue(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double5);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertEquals(0.0, double5, 0.01D);
  }

  @Test
  public void test086()  throws Throwable  {
      long long0 = (-5034868814120038131L);
      long long1 = FastMath.min(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-5034868814120038131L), long1);
      
      double double0 = FastMath.acosh((double) long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = 1743.0;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertTrue(long1 == long0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(long0 == long1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test087()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test088()  throws Throwable  {
      double double0 = 0.625;
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.7214844409909045, double1, 0.01D);
      
      double double2 = (-812.12298494);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.sinh(double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.pow(double3, double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
  }

  @Test
  public void test089()  throws Throwable  {
      double double0 = 0.625;
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.2041199826559248), double1, 0.01D);
      
      double double2 = (-812.12298494);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.sinh(double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.pow(double3, double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertEquals(0.0, double4, 0.01D);
  }

  @Test
  public void test090()  throws Throwable  {
      double double0 = (-816.3490466912624);
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.5017457607079521, double1, 0.01D);
      
      double double2 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.pow(double1, double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      double double0 = 3329.52593576451;
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      int int0 = (-1);
      int int1 = FastMath.abs(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      
      double double2 = FastMath.pow((double) int1, double1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(int0 == int1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      double double0 = 2677.1;
      double double1 = FastMath.pow(double0, double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      float float0 = Float.NaN;
      double double2 = FastMath.pow((double) float0, double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test093()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-2138.015782493);
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertTrue(double3 == double0);
      assertFalse(double3 == double1);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test094()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(710.1881780014921, double1, 0.01D);
      
      double double2 = (-2138.015782493);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double0, double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.pow(double3, double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertTrue(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertTrue(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.floor(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = (-4.9E-324);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.ceil(double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertEquals(-0.0, double3, 0.01D);
      
      double double4 = FastMath.pow(double3, double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertTrue(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertTrue(double1 == double0);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertTrue(double4 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertEquals(-0.0, double4, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      double double0 = (-3779.318981408388);
      double double1 = FastMath.floor(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-3780.0), double1, 0.01D);
      
      double double2 = (-4.9E-324);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.ceil(double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertEquals(-0.0, double3, 0.01D);
      
      double double4 = FastMath.pow(double3, double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = (-2582.44008392253);
      double double1 = FastMath.floor(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2583.0), double1, 0.01D);
      
      double double2 = (-4.9E-324);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.ceil(double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertEquals(-0.0, double3, 0.01D);
      
      double double4 = FastMath.pow(double3, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertEquals(Double.NEGATIVE_INFINITY, double4, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = 13.556871536346854;
      double double1 = FastMath.log1p(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2.678063152672172, double1, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.signum(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double0);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = (-0.2499999997677497);
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.25541281163526175), double1, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = FastMath.log10(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-323.3062153431158), double2, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-2138.015782493);
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.log10(double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      double double0 = -0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      double double0 = (-7.44321345601866E-11);
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-7.443213455741653E-11), double1, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.expm1(double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test110()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-2.356194490192345), double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertEquals((-0.4244131815783876), double3, 0.01D);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = 3366.1165861916124;
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test112()  throws Throwable  {
      double double0 = (-709.3026382091);
      double double1 = FastMath.expm1(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test113()  throws Throwable  {
      double double0 = (-709.3026382091);
      double double1 = FastMath.exp(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test114()  throws Throwable  {
      float float0 = (-725.0F);
      double double0 = FastMath.exp((double) float0);
      assertEquals(1.36930634E-315, double0, 0.01D);
  }

  @Test
  public void test115()  throws Throwable  {
      double double0 = (-738.401590152587);
      double double1 = FastMath.expm1(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test116()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atanh(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = 0.087;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.08722050326312049, double1, 0.01D);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = (-0.09088450866185192);
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.09113599135352736), double1, 0.01D);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = 0.625;
      double double1 = FastMath.toRadians(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.01090830782496456, double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.01090874051999564, double2, 0.01D);
  }

  @Test
  public void test121()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.toRadians(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.017453292519943295), double1, 0.01D);
      
      double double2 = FastMath.asinh(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-0.017452406545229723), double2, 0.01D);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = (-0.09088450866185192);
      double double1 = FastMath.log1p(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.09528313969794895), double1, 0.01D);
      
      double double2 = FastMath.asinh(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-0.09513954825691737), double2, 0.01D);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = 0.16666666666666666;
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.16590455026930118, double1, 0.01D);
  }

  @Test
  public void test124()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.8813735870195429), double1, 0.01D);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.asinh(double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test126()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.ulp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2.220446049250313E-16, double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(2.220446049250313E-16, double2, 0.01D);
  }

  @Test
  public void test127()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.signum(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals((-0.7615941559557649), double2, 0.01D);
  }

  @Test
  public void test128()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tanh(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test129()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertEquals((-1.0), double2, 0.01D);
  }

  @Test
  public void test130()  throws Throwable  {
      float float0 = 3054.094F;
      double double0 = FastMath.tanh((double) float0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test131()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.signum(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-1.1752011936438014), double2, 0.01D);
  }

  @Test
  public void test132()  throws Throwable  {
      long long0 = 0L;
      double double0 = FastMath.sinh((double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test133()  throws Throwable  {
      double double0 = (-4.9E-324);
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.cosh(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test134()  throws Throwable  {
      double double0 = 0.625;
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.2041199826559248), double1, 0.01D);
      
      double double2 = FastMath.cosh(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.0209049162541768, double2, 0.01D);
  }

  @Test
  public void test135()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.round((float) int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test136()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test137()  throws Throwable  {
      double double0 = (-2582.44008392253);
      double double1 = FastMath.floor(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2583.0), double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-2582.9999999999995), double2, 0.01D);
  }

  @Test
  public void test138()  throws Throwable  {
      double double0 = (-2582.44008392253);
      double double1 = FastMath.floor(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2583.0), double1, 0.01D);
      
      double double2 = FastMath.expm1(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-1.0), double2, 0.01D);
  }

  @Test
  public void test139()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(710.1881780014921, double1, 0.01D);
      
      double double2 = FastMath.toDegrees(double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(40690.78525957115, double2, 0.01D);
  }

  @Test
  public void test140()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.round((double) long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }
}
