/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:08:50 GMT 2014
 */

package org.apache.commons.math3.optimization.linear;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.SimplexSolver;
import org.apache.commons.math3.optimization.linear.UnboundedSolutionException;



import org.junit.runner.RunWith;


public class SimplexSolverEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      assertEquals(100, simplexSolver0.getMaxIterations());
      assertEquals(0, simplexSolver0.getIterations());
      assertNotNull(simplexSolver0);
      
      double[] doubleArray0 = new double[6];
      int int0 = simplexSolver0.getIterations();
      assertEquals(100, simplexSolver0.getMaxIterations());
      assertEquals(0, simplexSolver0.getIterations());
      assertEquals(0, int0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (double) int0);
      assertEquals(100, simplexSolver0.getMaxIterations());
      assertEquals(0, simplexSolver0.getIterations());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      PointValuePair pointValuePair0 = simplexSolver0.optimize(linearObjectiveFunction0, (Collection<LinearConstraint>) linkedList0, goalType0, boolean0);
      assertEquals(100, simplexSolver0.getMaxIterations());
      assertEquals(0, simplexSolver0.getIterations());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(pointValuePair0);
  }

  @Test
  public void test1()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      assertEquals(100, simplexSolver0.getMaxIterations());
      assertEquals(0, simplexSolver0.getIterations());
      assertNotNull(simplexSolver0);
      
      double[] doubleArray0 = new double[4];
      double double0 = 105.56733;
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {105.56733, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) openMapRealVector0, double0);
      assertEquals(105.56733, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {105.56733, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      try {
        PointValuePair pointValuePair0 = simplexSolver0.optimize(linearObjectiveFunction0, (Collection<LinearConstraint>) linkedList0, goalType0, boolean0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unbounded solution
         //
      }
  }
}
