/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:25:06 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class FastMathEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      float float0 = (-4748.0F);
      int int0 = 0;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals((-4748.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      long long0 = (-235L);
      float float2 = FastMath.copySign((float) long0, float1);
      assertEquals((-235.0F), float2, 0.01F);
      assertTrue(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
  }

  @Test
  public void test001()  throws Throwable  {
      float float0 = (-1911.9526F);
      int int0 = 0;
      float float1 = FastMath.copySign((float) int0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test002()  throws Throwable  {
      double double0 = (-676.79874);
      double double1 = FastMath.cosh(double0);
      assertEquals(4.255280031442111E293, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.copySign(double1, double0);
      assertEquals((-4.255280031442111E293), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test003()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sinh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = 0.031;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.hypot(double1, double2);
      assertEquals(0.031, double3, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
  }

  @Test
  public void test004()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = 0.0;
      double double1 = FastMath.hypot((double) float0, double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test005()  throws Throwable  {
      double double0 = (-1576.63457983914);
      int int0 = 2206;
      double double1 = FastMath.pow(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.hypot((double) int0, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
  }

  @Test
  public void test006()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.nextAfter(float0, (double) float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      
      int int0 = 0;
      double double0 = FastMath.hypot((double) float1, (double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test007()  throws Throwable  {
      double double0 = (-1926.83);
      int int0 = 1390;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int1 = FastMath.max(int0, int0);
      assertEquals(1390, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double2 = FastMath.hypot((double) int1, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test008()  throws Throwable  {
      double double0 = 1369.93147673;
      int int0 = 1284;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.hypot(double1, (double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test009()  throws Throwable  {
      float float0 = (-4748.0F);
      float float1 = FastMath.abs(float0);
      assertEquals(4748.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.max((double) float0, (double) float1);
      assertEquals(4748.0, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test010()  throws Throwable  {
      double double0 = 0.3333333134651184;
      double double1 = FastMath.sqrt(double0);
      assertEquals(0.5773502519832466, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.max(double1, double0);
      assertEquals(0.5773502519832466, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test011()  throws Throwable  {
      double double0 = 0.42863214015960693;
      double double1 = FastMath.log(double0, double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.max(double1, double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test012()  throws Throwable  {
      long long0 = 0L;
      float float0 = -0.0F;
      float float1 = FastMath.max(float0, (float) long0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
  }

  @Test
  public void test013()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = 0.0F;
      float float2 = FastMath.max(float0, float1);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
      assertTrue(float2 == float0);
      assertFalse(float2 == float1);
      assertTrue(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test014()  throws Throwable  {
      double double0 = (-6.113203624663034E-8);
      long long0 = (-1552L);
      int int0 = FastMath.getExponent(double0);
      assertEquals((-24), int0);
      
      long long1 = FastMath.max(long0, long0);
      assertEquals((-1552L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      long long2 = FastMath.max((long) int0, long1);
      assertEquals((-24L), long2);
      assertFalse(long1 == long2);
      assertTrue(long1 == long0);
      assertFalse(long0 == long2);
      assertTrue(long0 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
  }

  @Test
  public void test015()  throws Throwable  {
      int int0 = (-703);
      int int1 = 2577;
      int int2 = FastMath.getExponent((float) int0);
      assertEquals(9, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      int int3 = FastMath.max(int1, int2);
      assertEquals(2577, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int2);
      assertTrue(int1 == int3);
      assertFalse(int1 == int0);
  }

  @Test
  public void test016()  throws Throwable  {
      double double0 = (-1247.038624056517);
      double double1 = FastMath.cbrt(double0);
      assertEquals((-10.763659935407155), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = (-2571);
      double double2 = FastMath.min((double) int0, double1);
      assertEquals((-2571.0), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test017()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.031;
      double double2 = FastMath.min(double1, double0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test018()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test019()  throws Throwable  {
      float float0 = (-1076.0F);
      float float1 = 0.0F;
      float float2 = FastMath.min(float0, float1);
      assertEquals((-1076.0F), float2, 0.01F);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float2 == float1);
      assertTrue(float2 == float0);
      assertFalse(float0 == float1);
      assertTrue(float0 == float2);
  }

  @Test
  public void test020()  throws Throwable  {
      float float0 = (-1361.338F);
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.min(float1, float0);
      assertEquals((-1361.338F), float2, 0.01F);
      assertTrue(float0 == float2);
      assertFalse(float0 == float1);
      assertTrue(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test021()  throws Throwable  {
      int int0 = (-1922);
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals((-1922L), long0);
  }

  @Test
  public void test022()  throws Throwable  {
      double double0 = 0.6689305305480957;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1), int0);
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      long long0 = FastMath.min((long) int1, (long) int0);
      assertEquals((-1L), long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test023()  throws Throwable  {
      double double0 = (-943.5);
      double double1 = FastMath.rint(double0);
      assertEquals((-944.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test024()  throws Throwable  {
      double double0 = (-3.303297758377758E-145);
      double double1 = FastMath.rint(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test025()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.rint((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test026()  throws Throwable  {
      double double0 = (-723.74257);
      double double1 = FastMath.rint(double0);
      assertEquals((-724.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test027()  throws Throwable  {
      double double0 = (-1837.600197447458);
      double double1 = FastMath.sin(double0);
      assertEquals((-0.22944253788941815), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.ceil(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test028()  throws Throwable  {
      double double0 = (-1276.0);
      double double1 = FastMath.ceil(double0);
      assertEquals((-1276.0), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test029()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      int int0 = FastMath.round(float0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test
  public void test030()  throws Throwable  {
      float float0 = 546.0F;
      float float1 = FastMath.nextUp(float0);
      assertEquals(546.00006F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test031()  throws Throwable  {
      float float0 = (-3061.0F);
      int int0 = (-185);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      int int1 = 1005;
      int int2 = FastMath.min(int1, int1);
      assertEquals(1005, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      
      float float2 = FastMath.nextAfter((float) int2, (double) float1);
      assertEquals(1004.99994F, float2, 0.01F);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
  }

  @Test
  public void test032()  throws Throwable  {
      float float0 = (-888.90405F);
      float float1 = 0.0F;
      float float2 = FastMath.max(float0, float1);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      
      float float3 = FastMath.nextUp(float2);
      assertEquals(1.4E-45F, float3, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float3);
      assertTrue(float1 == float2);
      assertFalse(float3 == float2);
      assertFalse(float3 == float1);
      assertFalse(float3 == float0);
      assertFalse(float2 == float3);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float3);
      assertFalse(float0 == float2);
  }

  @Test
  public void test033()  throws Throwable  {
      float float0 = (-1114.1F);
      double double0 = FastMath.cos((double) float0);
      assertEquals((-0.39436788822941027), double0, 0.01D);
      
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      float float1 = FastMath.nextAfter((float) long0, (double) float0);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test034()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = 2024.33024159;
      float float1 = FastMath.nextAfter(float0, double0);
      assertEquals(3.4028235E38F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test035()  throws Throwable  {
      float float0 = (-466.6958F);
      float float1 = Float.NEGATIVE_INFINITY;
      float float2 = FastMath.nextAfter(float1, (double) float0);
      assertEquals((-3.4028235E38F), float2, 0.01F);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
  }

  @Test
  public void test036()  throws Throwable  {
      double double0 = (-1926.83);
      int int0 = 1390;
      double double1 = FastMath.sqrt(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = FastMath.nextAfter((float) int0, double1);
      assertEquals(Float.NaN, float0, 0.01F);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test037()  throws Throwable  {
      double double0 = (-676.79874);
      double double1 = (-1.0902938113007961E-8);
      double double2 = FastMath.copySign(double0, double1);
      assertEquals((-676.79874), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.nextAfter(double1, double2);
      assertEquals((-1.0902938113007963E-8), double3, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertTrue(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
  }

  @Test
  public void test038()  throws Throwable  {
      double double0 = (-3.7979660725865874E274);
      double double1 = FastMath.cos(double0);
      assertEquals((-0.765391539470639), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.nextAfter(double2, double1);
      assertEquals((-4.9E-324), double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
  }

  @Test
  public void test039()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log1p(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = (-2111.970405576);
      assertFalse(double2 == double1);
      
      long long0 = FastMath.round(double1);
      assertEquals(0L, long0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.sinh(double2);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      
      double double4 = FastMath.nextAfter(double3, (double) long0);
      assertEquals((-1.7976931348623157E308), double4, 0.01D);
      assertFalse(double1 == double4);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test040()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.max(float0, float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      int int0 = 2570;
      double double0 = FastMath.nextAfter((double) float1, (double) int0);
      assertEquals(1.7976931348623157E308, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test041()  throws Throwable  {
      double double0 = 0.6689305305480957;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1), int0);
      
      double double1 = FastMath.nextAfter((double) int0, (double) int0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = (-3407.6901);
      float float0 = (-3413.74F);
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.toDegrees((double) float0);
      //  // Unstable assertion: assertEquals((-195592.89379546055), double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      
      double double3 = FastMath.nextAfter(double2, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertTrue(double3 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double3);
  }

  @Test
  public void test043()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.nextAfter(float0, (double) float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      int int0 = FastMath.getExponent(float1);
      //  // Unstable assertion: assertEquals((-127), int0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double0 = FastMath.sqrt((double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double1 = FastMath.nextUp(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test
  public void test044()  throws Throwable  {
      float float0 = (-1361.338F);
      double double0 = FastMath.sin((double) float0);
      assertEquals(0.856470925351646, double0, 0.01D);
      
      long long0 = FastMath.round(double0);
      assertEquals(1L, long0);
      
      int int0 = 219;
      float float1 = FastMath.scalb((float) long0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test045()  throws Throwable  {
      int int0 = 347;
      int int1 = (-277);
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test046()  throws Throwable  {
      int int0 = (-277);
      int int1 = (-154);
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals((-1.3E-44F), float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test047()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = FastMath.scalb((float) int0, int0);
      assertEquals((-7.464389E-37F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test048()  throws Throwable  {
      float float0 = (-1361.338F);
      float float1 = FastMath.min(float0, float0);
      assertEquals((-1361.338F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      long long0 = FastMath.round((double) float1);
      assertEquals((-1361L), long0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      int int0 = 219;
      float float2 = FastMath.scalb((float) long0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float2, 0.01F);
      assertFalse(float0 == float2);
      assertTrue(float0 == float1);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertTrue(float1 == float0);
  }

  @Test
  public void test049()  throws Throwable  {
      int int0 = 2570;
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test
  public void test050()  throws Throwable  {
      float float0 = 1133.7053F;
      int int0 = (-3899);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test051()  throws Throwable  {
      float float0 = (-888.90405F);
      float float1 = 0.0F;
      float float2 = FastMath.max(float0, float1);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      
      int int0 = (-1384);
      float float3 = FastMath.scalb(float2, int0);
      assertEquals(0.0F, float3, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float3);
      assertTrue(float2 == float3);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertTrue(float3 == float2);
      assertTrue(float3 == float1);
      assertFalse(float3 == float0);
      assertTrue(float1 == float3);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test052()  throws Throwable  {
      int int0 = (-1838);
      float float0 = Float.NaN;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test053()  throws Throwable  {
      double double0 = 0.19999999999923582;
      int int0 = 1024;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(3.595386269710894E307, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test054()  throws Throwable  {
      float float0 = (-466.6958F);
      float float1 = 0.0F;
      float float2 = FastMath.copySign(float0, float1);
      assertEquals(466.6958F, float2, 0.01F);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      
      int int0 = (-1353);
      double double0 = FastMath.scalb((double) float2, int0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
  }

  @Test
  public void test055()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.nextUp((double) float0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      float float1 = FastMath.min(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.hypot(double0, (double) float1);
      assertEquals(4.9E-324, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test056()  throws Throwable  {
      double double0 = 6.710424255583952E192;
      int int0 = (-1384);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(1.589410141007265E-224, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test057()  throws Throwable  {
      double double0 = (-1130.07334681);
      int int0 = 8388607;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test058()  throws Throwable  {
      double double0 = 1.1921056801463227E-8;
      int int0 = 8388608;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test059()  throws Throwable  {
      int int0 = (-5097);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-5097), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test060()  throws Throwable  {
      double double0 = (-676.79874);
      double double1 = FastMath.cosh(double0);
      assertEquals(4.255280031442111E293, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-4386);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test061()  throws Throwable  {
      double double0 = (-725.2);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double1);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double4 = FastMath.hypot(double3, double2);
      assertEquals(0.0, double4, 0.01D);
      assertFalse(double2 == double1);
      assertTrue(double2 == double4);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double4);
      assertTrue(double3 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertTrue(double4 == double3);
      assertTrue(double4 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test062()  throws Throwable  {
      long long0 = (-3343L);
      double double0 = FastMath.cosh((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      int int0 = 1201;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test063()  throws Throwable  {
      double double0 = (-1314.81);
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      int int0 = 1899;
      double double2 = FastMath.scalb(double1, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test064()  throws Throwable  {
      double double0 = (-61.329);
      int int0 = (-1922);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test065()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = (-725.2);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.ulp(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test067()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.abs((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test068()  throws Throwable  {
      float float0 = (-3562.3972F);
      int int0 = (-2571);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.ulp(float1);
      assertEquals(1.4E-45F, float2, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
  }

  @Test
  public void test069()  throws Throwable  {
      int int0 = (-1151);
      int int1 = FastMath.abs(int0);
      assertEquals(1151, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test070()  throws Throwable  {
      double double0 = (-1673.20484);
      int int0 = FastMath.getExponent(double0);
      assertEquals(10, int0);
      
      int int1 = FastMath.abs(int0);
      assertEquals(10, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test071()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.toDegrees(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test072()  throws Throwable  {
      double double0 = 1369.93147673;
      int int0 = 1284;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.toDegrees(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test073()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test074()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.ulp(float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double0 = FastMath.toRadians((double) float1);
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01D);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = 0.3333333134651184;
      double double1 = (-2184.15568098);
      double double2 = FastMath.copySign(double1, double0);
      //  // Unstable assertion: assertEquals(2184.15568098, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.atanh(double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      
      double double4 = FastMath.cbrt(double3);
      //  // Unstable assertion: assertEquals(Double.NaN, double4, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertTrue(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
  }

  @Test
  public void test076()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals(1.7031839360032603E-108, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test077()  throws Throwable  {
      double double0 = (-0.33333333333333287);
      double double1 = FastMath.toRadians(double0);
      assertEquals((-0.005817764173314424), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(1.576614123787087, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test078()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test079()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.abs(float0);
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.acos((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test080()  throws Throwable  {
      double double0 = (-2687.391136412664);
      double double1 = FastMath.sin(double0);
      assertEquals(0.9710093231936753, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.acos(double1);
      assertEquals(0.24137873340426097, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = (-2687.391136412664);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test082()  throws Throwable  {
      float float0 = (-1974.5934F);
      float float1 = 0.0F;
      float float2 = FastMath.max(float0, float1);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      
      double double0 = FastMath.asin((double) float2);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
  }

  @Test
  public void test083()  throws Throwable  {
      float float0 = (-1361.338F);
      float float1 = FastMath.min(float0, float0);
      assertEquals((-1361.338F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = 1585.06836;
      double double1 = FastMath.atan2((double) float1, double0);
      assertEquals((-0.709610304949217), double1, 0.01D);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
      assertTrue(float1 == float0);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.asin(double1);
      assertEquals((-0.7889449780331957), double2, 0.01D);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(float1 == float0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test084()  throws Throwable  {
      double double0 = (-4.311847594020281E-9);
      double double1 = FastMath.cos(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.asin(double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test085()  throws Throwable  {
      float float0 = (-1361.338F);
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.asin((double) float1);
      assertEquals((-1.5707963267948966), double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test086()  throws Throwable  {
      double double0 = (-1247.038624056517);
      double double1 = FastMath.asin(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = (-2571);
      long long0 = FastMath.abs((long) int0);
      assertEquals(2571L, long0);
      
      double double0 = FastMath.asin((double) long0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test088()  throws Throwable  {
      long long0 = 0L;
      int int0 = (-1149);
      double double0 = FastMath.ulp((double) int0);
      assertEquals(2.2737367544323206E-13, double0, 0.01D);
      
      double double1 = FastMath.nextUp((double) long0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test089()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.hypot((double) float0, (double) float0);
      assertEquals(1.4142135623730951, double0, 0.01D);
      
      int int0 = 0;
      long long0 = FastMath.abs((long) int0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.atan2(double0, (double) long0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test090()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.nextUp(float0);
      assertEquals((-0.99999994F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      int int0 = 0;
      long long0 = FastMath.abs((long) int0);
      assertEquals(0L, long0);
      
      double double0 = FastMath.atan2((double) float1, (double) long0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test091()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = 0.0F;
      int int0 = FastMath.round(float0);
      assertEquals(0, int0);
      
      float float1 = Float.NEGATIVE_INFINITY;
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float2, 0.01F);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      
      double double2 = FastMath.atan2(double1, (double) float2);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test092()  throws Throwable  {
      double double0 = (-676.79874);
      double double1 = FastMath.cosh(double0);
      assertEquals(4.255280031442111E293, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = FastMath.getExponent(double1);
      assertEquals(975, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertTrue(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(float0 == float1);
      
      double double2 = FastMath.atan2(double0, (double) float1);
      assertEquals((-3.141592653589793), double2, 0.01D);
      assertTrue(float1 == float0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(float0 == float1);
  }

  @Test
  public void test093()  throws Throwable  {
      long long0 = 1232L;
      long long1 = FastMath.round((double) long0);
      assertEquals(1232L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      float float0 = 0.0F;
      float float1 = FastMath.copySign(float0, (float) long1);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(long1 == long0);
      assertTrue(float1 == float0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.log((double) float1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(long1 == long0);
      assertTrue(float1 == float0);
      assertTrue(long0 == long1);
      
      double double1 = FastMath.atan2(double0, (double) long1);
      assertEquals((-1.5707963267948966), double1, 0.01D);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
      assertTrue(long1 == long0);
      assertTrue(float1 == float0);
      assertTrue(long0 == long1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test094()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.nextUp((double) float0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.log10((double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.atan2(double2, double2);
      assertEquals(0.7853981633974483, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
  }

  @Test
  public void test095()  throws Throwable  {
      float float0 = 2451.4453F;
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertEquals(2451.4453F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      int int0 = 2057;
      int int1 = FastMath.min(int0, int0);
      assertEquals(2057, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.exp((double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double1 = FastMath.atan2(double0, (double) int1);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test096()  throws Throwable  {
      float float0 = (-3061.0F);
      int int0 = (-185);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.atan2((double) float1, (double) int0);
      assertEquals((-3.141592653589793), double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test097()  throws Throwable  {
      float float0 = (-1974.5934F);
      float float1 = 0.0F;
      float float2 = FastMath.max(float0, float0);
      assertEquals((-1974.5934F), float2, 0.01F);
      assertFalse(float0 == float1);
      assertTrue(float0 == float2);
      assertTrue(float2 == float0);
      assertFalse(float2 == float1);
      
      double double0 = FastMath.atan2((double) float1, (double) float2);
      assertEquals(3.141592653589793, double0, 0.01D);
      assertFalse(float0 == float1);
      assertTrue(float0 == float2);
      assertTrue(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
  }

  @Test
  public void test098()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.atan2((double) int1, (double) int1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = (-676.79874);
      double double1 = FastMath.floor(double0);
      assertEquals((-677.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan(double1);
      assertEquals((-1.5693192229947173), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = (-2147.506227368);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan(double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      double double1 = 1.5238514098804918E-279;
      double double2 = FastMath.atan2(double1, double0);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test102()  throws Throwable  {
      float float0 = (-888.90405F);
      float float1 = 0.0F;
      float float2 = FastMath.max(float0, float1);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.atan((double) float2);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test103()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.nextUp((double) float0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.log10((double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tan(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test104()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = FastMath.tan((double) float0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.min(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.tan(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
  }

  @Test
  public void test106()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.cos((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      float float0 = 3909.8252F;
      double double0 = FastMath.sin((double) float0);
      assertEquals(0.9936067294848073, double0, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      double double0 = 0.09090909090909091;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.09078433518852215, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.sin(double1);
      assertEquals(0.09065968224670715, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test109()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.sin(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test110()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sin(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test111()  throws Throwable  {
      float float0 = (-3061.0F);
      int int0 = (-185);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.sin((double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test112()  throws Throwable  {
      double double0 = 4.503599627370496E15;
      double double1 = FastMath.tan(double0);
      assertEquals((-1.8005242480088435), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test113()  throws Throwable  {
      long long0 = 4368491638549381120L;
      double double0 = FastMath.tan((double) long0);
      assertEquals((-9.363750787553254), double0, 0.01D);
  }

  @Test
  public void test114()  throws Throwable  {
      double double0 = 7.316033240396569E150;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.11459154184388973), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test115()  throws Throwable  {
      double double0 = 5.908356249789671E66;
      double double1 = FastMath.tan(double0);
      assertEquals((-0.006480356302383601), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test116()  throws Throwable  {
      double double0 = (-2.5866883048437488E280);
      double double1 = FastMath.tan(double0);
      assertEquals(0.5196696957654182, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test117()  throws Throwable  {
      double double0 = 1.4615985810260016E275;
      double double1 = FastMath.sin(double0);
      assertEquals((-0.5046883632275451), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = 1.0524719896550007E251;
      long long0 = FastMath.round(double0);
      assertEquals(9223372036854775807L, long0);
      
      double double1 = FastMath.cos((double) long0);
      assertEquals(0.011800076512800236, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = (-2687.391136412664);
      double double1 = FastMath.tan(double0);
      assertEquals((-4.062093198114485), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = (-780.4291600346725);
      double double1 = 1.633123935319537E16;
      double double2 = FastMath.nextAfter(double1, double0);
      assertEquals(1.6331239353195368E16, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.tan(double2);
      assertEquals((-0.8728582066817574), double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
  }

  @Test
  public void test121()  throws Throwable  {
      double double0 = (-2687.391136412664);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tan(double1);
      assertEquals((-1.5574077246549023), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test122()  throws Throwable  {
      int int0 = 1390;
      int int1 = (-1);
      double double0 = FastMath.pow((double) int0, int1);
      assertEquals(7.194244604316547E-4, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test123()  throws Throwable  {
      float float0 = (-4748.0F);
      float float1 = FastMath.abs(float0);
      assertEquals(4748.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      int int0 = 0;
      double double0 = FastMath.pow((double) float1, int0);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test124()  throws Throwable  {
      double double0 = 744.0;
      double double1 = (-1735.5733577);
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test125()  throws Throwable  {
      int int0 = (-1151);
      double double0 = FastMath.pow((double) int0, (double) int0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test126()  throws Throwable  {
      double double0 = (-2.5866883048437488E280);
      float float0 = (-387.094F);
      double double1 = FastMath.pow((double) float0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test127()  throws Throwable  {
      float float0 = (-4748.0F);
      double double0 = FastMath.acos((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      float float1 = FastMath.nextAfter(float0, (double) float0);
      //  // Unstable assertion: assertEquals((-4748.0F), float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      
      double double1 = FastMath.pow((double) float1, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test
  public void test128()  throws Throwable  {
      double double0 = (-1247.038624056517);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test129()  throws Throwable  {
      double double0 = (-725.2);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test130()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 770;
      int int1 = FastMath.getExponent(float0);
      assertEquals((-127), int1);
      assertFalse(int1 == int0);
      
      int int2 = 281;
      assertFalse(int2 == int1);
      
      float float1 = FastMath.scalb((float) int1, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(float0 == float1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.pow((double) float1, (double) int2);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(float0 == float1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test131()  throws Throwable  {
      int int0 = 770;
      int int1 = FastMath.max(int0, int0);
      assertEquals(770, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      float float0 = (-855.3067F);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertTrue(int0 == int1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.pow((double) float1, (double) int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(int0 == int1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertTrue(int1 == int0);
  }

  @Test
  public void test132()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = 0.041666666666621166;
      double double1 = FastMath.pow(double0, (double) float0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test133()  throws Throwable  {
      int int0 = (-2571);
      long long0 = FastMath.abs((long) int0);
      assertEquals(2571L, long0);
      
      double double0 = FastMath.exp((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow((double) long0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test134()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = (-1860.1411F);
      double double0 = FastMath.pow((double) float0, (double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test135()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.pow((double) float0, (double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test136()  throws Throwable  {
      double double0 = 1.494140625;
      float float0 = (-3061.0F);
      int int0 = (-185);
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(-0.0F, float1, 0.01F);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.pow((double) float1, double1);
      //  // Unstable assertion: assertEquals(0.0, double2, 0.01D);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
  }

  @Test
  public void test137()  throws Throwable  {
      float float0 = (-3061.0F);
      int int0 = (-185);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      int int1 = 1005;
      int int2 = FastMath.min(int1, int1);
      assertEquals(1005, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      
      double double0 = FastMath.pow((double) float1, (double) int2);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test138()  throws Throwable  {
      float float0 = (-3061.0F);
      int int0 = (-185);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      int int1 = FastMath.min(int0, int0);
      assertEquals((-185), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.pow((double) float1, (double) int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(float0 == float1);
      assertTrue(int1 == int0);
      assertFalse(float1 == float0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test139()  throws Throwable  {
      double double0 = (-780.4291600346725);
      double double1 = FastMath.ceil(double0);
      assertEquals((-780.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test
  public void test140()  throws Throwable  {
      double double0 = 1.494140625;
      int int0 = 0;
      double double1 = FastMath.pow(double0, (double) int0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test141()  throws Throwable  {
      float float0 = (-2135.7783F);
      float float1 = FastMath.nextUp(float0);
      assertEquals((-2135.778F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.log1p((double) float1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test142()  throws Throwable  {
      double double0 = 3189.51161756;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test143()  throws Throwable  {
      double double0 = 0.008336750013465571;
      double double1 = FastMath.log1p(double0);
      assertEquals(0.008302191252060685, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test144()  throws Throwable  {
      double double0 = 0.4097215049791708;
      double double1 = FastMath.log1p(double0);
      assertEquals(0.343392170682409, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test145()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(1.0, double2, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.log(double2);
      assertEquals(0.0, double3, 0.01D);
      assertTrue(double3 == double0);
      assertTrue(double3 == double1);
      assertFalse(double3 == double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertTrue(double0 == double3);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test146()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.9305076599121094;
      double double2 = FastMath.log(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test147()  throws Throwable  {
      double double0 = 2100.65;
      double double1 = FastMath.acosh(double0);
      assertEquals(8.343149223534102, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.nextUp(double2);
      assertEquals(4.9E-324, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      
      double double4 = FastMath.log(double1, double3);
      assertEquals((-350.9124975462318), double4, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test
  public void test148()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.expm1((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.log10(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test149()  throws Throwable  {
      int int0 = (-185);
      double double0 = FastMath.log10((double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test150()  throws Throwable  {
      double double0 = (-1576.63457983914);
      int int0 = 2206;
      double double1 = FastMath.pow(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      int int1 = 0;
      int int2 = FastMath.min(int0, int1);
      //  // Unstable assertion: assertEquals(0, int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertTrue(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertTrue(int1 == int2);
      
      double double2 = FastMath.log((double) int2, double1);
      //  // Unstable assertion: assertEquals(-0.0, double2, 0.01D);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertTrue(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertTrue(int1 == int2);
  }

  @Test
  public void test151()  throws Throwable  {
      double double0 = (-5.185064518887831E-9);
      double double1 = FastMath.expm1(double0);
      assertEquals((-5.185064505445384E-9), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test152()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test153()  throws Throwable  {
      double double0 = (-676.79874);
      double double1 = FastMath.cosh(double0);
      assertEquals(4.255280031442111E293, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = (-1.0902938113007961E-8);
      assertFalse(double2 == double1);
      
      long long0 = FastMath.round(double1);
      assertEquals(9223372036854775807L, long0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = FastMath.pow((double) long0, double2);
      assertEquals(0.9999995238876421, double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
  }

  @Test
  public void test154()  throws Throwable  {
      double double0 = (-718.3496849913796);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test155()  throws Throwable  {
      double double0 = (-723.74257);
      double double1 = FastMath.exp(double0);
      assertEquals(4.814991563E-315, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test156()  throws Throwable  {
      float float0 = 3909.8252F;
      float float1 = FastMath.signum(float0);
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test157()  throws Throwable  {
      float float0 = (-3562.3972F);
      int int0 = (-2571);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      float float2 = FastMath.signum(float1);
      assertEquals(-0.0F, float2, 0.01F);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
  }

  @Test
  public void test158()  throws Throwable  {
      double double0 = (-1247.038624056517);
      double double1 = FastMath.cbrt(double0);
      assertEquals((-10.763659935407155), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(23635.680983022838, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.signum(double2);
      assertEquals(1.0, double3, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
  }

  @Test
  public void test159()  throws Throwable  {
      float float0 = (-3562.3972F);
      int int0 = (-2571);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.signum((double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test160()  throws Throwable  {
      double double0 = 0.031;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.031009936063096846, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test161()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test162()  throws Throwable  {
      double double0 = 1542.568624510832;
      double double1 = FastMath.sin(double0);
      assertEquals((-0.046614699966241714), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atanh(double1);
      assertEquals((-0.04664850755137727), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test163()  throws Throwable  {
      double double0 = (-2687.391136412664);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atanh(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test164()  throws Throwable  {
      double double0 = 0.09090909090909091;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.09078433518852215, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atanh(double1);
      assertEquals(0.09103498448331206, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test165()  throws Throwable  {
      double double0 = 0.008336750013465571;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.008336653447185054, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test166()  throws Throwable  {
      double double0 = 3189.51161756;
      double double1 = FastMath.asinh(double0);
      assertEquals(8.760770291249468, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test167()  throws Throwable  {
      double double0 = (-1.0E-6);
      double double1 = FastMath.asinh(double0);
      assertEquals((-9.999999999998333E-7), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test168()  throws Throwable  {
      double double0 = 0.3333333134651184;
      double double1 = FastMath.tanh(double0);
      assertEquals(0.3215127197172054, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test169()  throws Throwable  {
      double double0 = (-3.7979660725865874E274);
      double double1 = FastMath.cos(double0);
      assertEquals((-0.765391539470639), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tanh(double1);
      assertEquals((-0.6442417182374767), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test170()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.max(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.tanh((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test171()  throws Throwable  {
      float float0 = (-4748.0F);
      double double0 = FastMath.acos((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.tanh(double0);
      //  // Unstable assertion: assertEquals(1.0, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test172()  throws Throwable  {
      double double0 = (-780.4291600346725);
      double double1 = FastMath.tanh(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test173()  throws Throwable  {
      float float0 = (-3562.3972F);
      double double0 = FastMath.cos((double) float0);
      assertEquals(0.9857782759078968, double0, 0.01D);
      
      double double1 = FastMath.sinh(double0);
      assertEquals(1.1533740354238777, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test174()  throws Throwable  {
      double double0 = (-8.146080588190463E-9);
      double double1 = FastMath.sinh(double0);
      assertEquals((-8.146080588190463E-9), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test175()  throws Throwable  {
      double double0 = (-586.9);
      double double1 = FastMath.sinh(double0);
      assertEquals((-3.8583483332052836E254), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test176()  throws Throwable  {
      int int0 = 159;
      double double0 = FastMath.sinh((double) int0);
      assertEquals(5.646672851402785E68, double0, 0.01D);
  }

  @Test
  public void test177()  throws Throwable  {
      int int0 = 1005;
      int int1 = FastMath.min(int0, int0);
      assertEquals(1005, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.sinh((double) int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test178()  throws Throwable  {
      float float0 = (-1114.1F);
      double double0 = FastMath.signum((double) float0);
      assertEquals((-1.0), double0, 0.01D);
      
      double double1 = FastMath.cosh(double0);
      assertEquals(1.5430806348152437, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test179()  throws Throwable  {
      int int0 = 0;
      int int1 = (-277);
      double double0 = FastMath.copySign((double) int1, (double) int0);
      assertEquals(277.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double1 = FastMath.cosh(double0);
      assertEquals(9.966472930703185E119, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test180()  throws Throwable  {
      double double0 = 1542.568624510832;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test181()  throws Throwable  {
      double double0 = 2.0217439756338078E-10;
      double double1 = (-1.7976931348623157E308);
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test182()  throws Throwable  {
      int int0 = (-2571);
      double double0 = FastMath.nextUp((double) int0);
      assertEquals((-2570.9999999999995), double0, 0.01D);
  }

  @Test
  public void test183()  throws Throwable  {
      double double0 = (-2687.391136412664);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.IEEEremainder(double0, double1);
      assertEquals((-0.39113641266385457), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }
}
