/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:53:25 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;



import org.junit.runner.RunWith;


public class FastMathEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      double double0 = (-470.0923);
      long long0 = FastMath.round(double0);
      assertEquals((-470L), long0);
      
      double double1 = FastMath.random();
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, (double) long0);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.sin(double2);
      assertEquals(1.2246467991473532E-16, double3, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
  }

  @Test
  public void test001()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.copySign(float0, float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test002()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.abs(float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      
      int int0 = (-2223);
      long long0 = FastMath.round((double) float0);
      //  // Unstable assertion: assertEquals(0L, long0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      long long1 = FastMath.min(long0, (long) int0);
      //  // Unstable assertion: assertEquals((-2223L), long1);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(long0 == long1);
      //  // Unstable assertion: assertFalse(long1 == long0);
      
      float float2 = FastMath.copySign(float1, (float) long1);
      //  // Unstable assertion: assertEquals(-0.0F, float2, 0.01F);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(long0 == long1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertFalse(long1 == long0);
  }

  @Test
  public void test003()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toDegrees(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = (-408.5601610478699);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.copySign(double2, double1);
      assertEquals(408.5601610478699, double3, 0.01D);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
  }

  @Test
  public void test004()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      long long0 = FastMath.abs((long) int0);
      assertEquals(1023L, long0);
      
      double double1 = FastMath.copySign((double) long0, (double) int0);
      assertEquals((-1023.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test005()  throws Throwable  {
      double double0 = (-2245.730668);
      double double1 = FastMath.tan(double0);
      assertEquals(0.5568397878984238, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log(double1);
      assertEquals((-0.5854777143640344), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      float float0 = (-2359.6536F);
      int int0 = FastMath.round(float0);
      assertEquals((-2360), int0);
      
      double double3 = FastMath.copySign(double2, (double) int0);
      assertEquals((-0.5854777143640344), double3, 0.01D);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test006()  throws Throwable  {
      float float0 = 518.55774F;
      double double0 = 0.0;
      double double1 = FastMath.hypot(double0, (double) float0);
      assertEquals(518.5577392578125, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test007()  throws Throwable  {
      double double0 = 0.0;
      float float0 = 1.0F;
      double double1 = FastMath.hypot((double) float0, double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test008()  throws Throwable  {
      float float0 = (-3228.2412F);
      float float1 = FastMath.max(float0, float0);
      //  // Unstable assertion: assertEquals((-3228.2412F), float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double0 = FastMath.log10((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double1 = FastMath.hypot((double) float1, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test009()  throws Throwable  {
      double double0 = 363.653;
      float float0 = -0.0F;
      double double1 = FastMath.atan2(double0, (double) float0);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.acos(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      float float1 = FastMath.nextAfter(float0, double2);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double3 = FastMath.hypot((double) float1, (double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
  }

  @Test
  public void test010()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.cos(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.hypot(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test011()  throws Throwable  {
      double double0 = 1120.070605;
      int int0 = 1030;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.hypot(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test012()  throws Throwable  {
      float float0 = (-1535.41F);
      int int0 = (-1165);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.max((double) float1, (double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test013()  throws Throwable  {
      double double0 = (-329.439);
      double double1 = FastMath.max(double0, double0);
      assertEquals((-329.439), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test014()  throws Throwable  {
      double double0 = (-9.89780175);
      double double1 = FastMath.sin(double0);
      assertEquals(0.4555801254227113, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.max(double1, double0);
      assertEquals(0.4555801254227113, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test015()  throws Throwable  {
      long long0 = 0L;
      float float0 = -0.0F;
      float float1 = FastMath.max(float0, (float) long0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
  }

  @Test
  public void test016()  throws Throwable  {
      int int0 = (-2223);
      float float0 = (-3552.299F);
      float float1 = FastMath.max(float0, (float) int0);
      assertEquals((-2223.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test017()  throws Throwable  {
      long long0 = (-5112L);
      int int0 = FastMath.getExponent((float) long0);
      assertEquals(12, int0);
      
      float float0 = FastMath.max((float) int0, (float) long0);
      assertEquals(12.0F, float0, 0.01F);
  }

  @Test
  public void test018()  throws Throwable  {
      int int0 = (-1082);
      long long0 = FastMath.max((long) int0, (long) int0);
      assertEquals((-1082L), long0);
  }

  @Test
  public void test019()  throws Throwable  {
      int int0 = 2276;
      long long0 = (-1627L);
      long long1 = FastMath.max((long) int0, long0);
      assertEquals(2276L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test020()  throws Throwable  {
      int int0 = 249;
      int int1 = FastMath.getExponent((float) int0);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = FastMath.max(int1, int1);
      assertEquals(7, int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test
  public void test021()  throws Throwable  {
      int int0 = 249;
      int int1 = FastMath.getExponent((float) int0);
      assertEquals(7, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      int int3 = FastMath.max(int1, int2);
      assertEquals(7, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertTrue(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
  }

  @Test
  public void test022()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = (-3895.4788048497203);
      double double1 = FastMath.exp(double0);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      float float1 = FastMath.signum(float0);
      //  // Unstable assertion: assertEquals(-0.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double2 = FastMath.min((double) float1, double1);
      //  // Unstable assertion: assertEquals(-0.0, double2, 0.01D);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test023()  throws Throwable  {
      double double0 = (-485.4315);
      double double1 = FastMath.nextUp(double0);
      assertEquals((-485.43149999999997), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.min(double0, double1);
      assertEquals((-485.4315), double2, 0.01D);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
  }

  @Test
  public void test024()  throws Throwable  {
      double double0 = (-1.0898941254272996E-7);
      double double1 = (-1729.3382);
      double double2 = FastMath.min(double0, double1);
      assertEquals((-1729.3382), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = (-1082);
      long long0 = FastMath.abs((long) int0);
      assertEquals(1082L, long0);
      
      double double0 = FastMath.min((double) long0, (double) long0);
      assertEquals(1082.0, double0, 0.01D);
  }

  @Test
  public void test026()  throws Throwable  {
      float float0 = (-1535.41F);
      int int0 = (-1165);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.min(float1, float1);
      assertEquals(-0.0F, float2, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = 0;
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.min(float0, (float) int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test028()  throws Throwable  {
      float float0 = 71.23F;
      float float1 = 0.0F;
      float float2 = FastMath.min(float0, float1);
      assertEquals(0.0F, float2, 0.01F);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float0 = FastMath.min((float) int1, (float) int1);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test030()  throws Throwable  {
      int int0 = (-1082);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-1082), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test031()  throws Throwable  {
      int int0 = 1909;
      int int1 = 4525;
      int int2 = FastMath.min(int1, int0);
      assertEquals(1909, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = 426.5;
      double double1 = FastMath.rint(double0);
      assertEquals(426.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test033()  throws Throwable  {
      double double0 = (-6.663542893624021E-14);
      double double1 = FastMath.rint(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test034()  throws Throwable  {
      double double0 = (-485.4315);
      double double1 = FastMath.rint(double0);
      assertEquals((-485.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test035()  throws Throwable  {
      float float0 = 518.55774F;
      int int0 = FastMath.round(float0);
      assertEquals(519, int0);
      
      double double0 = FastMath.rint((double) int0);
      assertEquals(519.0, double0, 0.01D);
  }

  @Test
  public void test036()  throws Throwable  {
      double double0 = (-2.3640641240074437E-8);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test037()  throws Throwable  {
      double double0 = 2900.9403994459;
      double double1 = FastMath.ceil(double0);
      assertEquals(2901.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test038()  throws Throwable  {
      float float0 = (-633.0F);
      double double0 = FastMath.ceil((double) float0);
      assertEquals((-633.0), double0, 0.01D);
  }

  @Test
  public void test039()  throws Throwable  {
      float float0 = (-1543.2935F);
      int int0 = 1236;
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      long long0 = FastMath.round(double0);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test
  public void test040()  throws Throwable  {
      double double0 = 1.4715152230577016E25;
      long long0 = FastMath.round(double0);
      assertEquals(9223372036854775807L, long0);
  }

  @Test
  public void test041()  throws Throwable  {
      int int0 = 1909;
      float float0 = FastMath.nextUp((float) int0);
      assertEquals(1909.0001F, float0, 0.01F);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = (-3500.7020937);
      double double1 = FastMath.floor(double0);
      assertEquals((-3501.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 1228;
      float float0 = FastMath.nextAfter((float) int0, double1);
      assertEquals(1227.9999F, float0, 0.01F);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test043()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1651);
      float float0 = FastMath.nextAfter((float) int0, (double) int1);
      assertEquals((-1.4E-45F), float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test044()  throws Throwable  {
      double double0 = 1488.04373871293;
      double double1 = FastMath.expm1(double0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      float float0 = 1624.5F;
      int int0 = 1000;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      
      double double2 = FastMath.atanh(double1);
      //  // Unstable assertion: assertEquals(355.09408900074607, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      float float2 = FastMath.nextAfter(float1, double2);
      //  // Unstable assertion: assertEquals(3.4028235E38F, float2, 0.01F);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test045()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextUp(float0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test046()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.nextUp(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test047()  throws Throwable  {
      double double0 = (-2097.5);
      int int0 = (-889);
      int int1 = FastMath.abs(int0);
      assertEquals(889, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double1 = FastMath.nextAfter((double) int1, double0);
      assertEquals(888.9999999999999, double1, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test048()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = (-9.007199254740992E15);
      double double1 = FastMath.nextAfter((double) float0, double0);
      assertEquals((-4.9E-324), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test049()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test050()  throws Throwable  {
      int int0 = 2544;
      int int1 = FastMath.getExponent((double) int0);
      assertEquals(11, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = (-2143.701);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter(double1, (double) int1);
      assertEquals((-1.7976931348623157E308), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(int0 == int1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = 2544;
      int int1 = FastMath.getExponent((double) int0);
      assertEquals(11, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.sinh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(int0 == int1);
      
      double double1 = FastMath.nextAfter(double0, (double) int1);
      assertEquals(1.7976931348623157E308, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test052()  throws Throwable  {
      float float0 = 1624.5F;
      int int0 = 1000;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.nextUp((double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test053()  throws Throwable  {
      int int0 = 901;
      double double0 = FastMath.expm1((double) int0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.sin(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.nextAfter(double0, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
  }

  @Test
  public void test054()  throws Throwable  {
      double double0 = (-3573.73);
      int int0 = 17;
      int int1 = FastMath.abs(int0);
      //  // Unstable assertion: assertEquals(17, int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      
      double double1 = FastMath.pow(double0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.nextAfter(double1, (double) int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
  }

  @Test
  public void test055()  throws Throwable  {
      float float0 = 1989.6176F;
      int int0 = 128;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test056()  throws Throwable  {
      float float0 = 518.55774F;
      int int0 = FastMath.round(float0);
      assertEquals(519, int0);
      
      int int1 = (-227);
      assertFalse(int1 == int0);
      
      float float1 = FastMath.scalb((float) int0, int1);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(float1 == float0);
      assertFalse(int1 == int0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test057()  throws Throwable  {
      float float0 = (-2448.0F);
      int int0 = (-159);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals((-2.8E-45F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test058()  throws Throwable  {
      int int0 = (-159);
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test
  public void test059()  throws Throwable  {
      float float0 = (-2998.8F);
      int int0 = (-159);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals((-4.2E-45F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test060()  throws Throwable  {
      float float0 = (-3371.43F);
      int int0 = (-127);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals((-1.9815484E-35F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test061()  throws Throwable  {
      float float0 = (-1662.619F);
      int int0 = 128;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test062()  throws Throwable  {
      long long0 = 4294967295L;
      int int0 = (-1452);
      float float0 = FastMath.scalb((float) long0, int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test063()  throws Throwable  {
      int int0 = 1251;
      float float0 = 0.0F;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test064()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      int int0 = (-1163);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test065()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = (-2);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.25F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test066()  throws Throwable  {
      int int0 = 1024;
      double double0 = (-0.25);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals((-4.49423283715579E307), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test067()  throws Throwable  {
      double double0 = (-485.4315);
      int int0 = (-1082);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals((-1.0E-323), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int1 = 1990;
      double double2 = FastMath.scalb(double1, int1);
      assertEquals((-1.1079139325602226E276), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(int1 == int0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test068()  throws Throwable  {
      int int0 = 1409;
      int int1 = (-1924);
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test069()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 4.9E-324;
      double double2 = FastMath.hypot(double0, double1);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test070()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      double double1 = FastMath.scalb((double) int0, int0);
      assertEquals((-1.1381252786264335E-305), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test071()  throws Throwable  {
      double double0 = (-9.89780175);
      double double1 = FastMath.sin(double0);
      assertEquals(0.4555801254227113, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 2276;
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test072()  throws Throwable  {
      double double0 = (-470.0923);
      long long0 = FastMath.round(double0);
      assertEquals((-470L), long0);
      
      int int0 = 2556;
      double double1 = FastMath.scalb((double) long0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test073()  throws Throwable  {
      double double0 = 3413.233;
      int int0 = (-2223);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test074()  throws Throwable  {
      double double0 = (-1.0E-6);
      int int0 = (-2223);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.hypot(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
  }

  @Test
  public void test076()  throws Throwable  {
      double double0 = 1.125;
      int int0 = 2047;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test077()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sin(double0);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      
      double double2 = FastMath.IEEEremainder(double1, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double0 == double1);
      
      int int0 = (-1651);
      double double3 = FastMath.scalb(double2, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test
  public void test078()  throws Throwable  {
      double double0 = (-2097.5);
      int int0 = (-1461);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.ulp(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test080()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.abs((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = (-470.0923);
      long long0 = FastMath.round(double0);
      assertEquals((-470L), long0);
      
      int int0 = FastMath.getExponent((double) long0);
      assertEquals(8, int0);
      
      float float0 = FastMath.abs((float) int0);
      assertEquals(8.0F, float0, 0.01F);
  }

  @Test
  public void test082()  throws Throwable  {
      float float0 = 0.0F;
      long long0 = FastMath.round((double) float0);
      assertEquals(0L, long0);
      
      long long1 = (-282L);
      assertFalse(long1 == long0);
      
      long long2 = FastMath.min(long0, long1);
      assertEquals((-282L), long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      
      float float1 = FastMath.abs((float) long2);
      assertEquals(282.0F, float1, 0.01F);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test083()  throws Throwable  {
      int int0 = 0;
      float float0 = FastMath.ulp((float) int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test084()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      long long0 = FastMath.abs((long) int1);
      assertEquals(0L, long0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test085()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.toDegrees((double) float1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test086()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toRadians(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = 901;
      double double0 = FastMath.expm1((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.toRadians(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test088()  throws Throwable  {
      double double0 = 1.956199868121249E282;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test089()  throws Throwable  {
      double double0 = 4.9E-324;
      double double1 = FastMath.cbrt(double0);
      assertEquals(1.7031839360032603E-108, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test090()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test091()  throws Throwable  {
      double double0 = (-1.3620325027706252E-7);
      int int0 = 0;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals((-1.3620325027706252E-7), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals((-0.005145123738008305), double2, 0.01D);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test092()  throws Throwable  {
      double double0 = 2.479773539153719E-5;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707715290595026, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test093()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.acos(double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test094()  throws Throwable  {
      long long0 = 0L;
      double double0 = FastMath.acos((double) long0);
      assertEquals(1.5707963267948966, double0, 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.acos(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
  }

  @Test
  public void test096()  throws Throwable  {
      long long0 = 1552L;
      long long1 = (-1L);
      long long2 = FastMath.min(long0, long1);
      assertEquals((-1L), long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      
      double double0 = FastMath.acos((double) long2);
      assertEquals(3.141592653589793, double0, 0.01D);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
  }

  @Test
  public void test097()  throws Throwable  {
      double double0 = (-485.4315);
      double double1 = FastMath.acos(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = (-5748.0);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test099()  throws Throwable  {
      long long0 = 1L;
      double double0 = FastMath.asin((double) long0);
      assertEquals(1.5707963267948966, double0, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      int int0 = (-1011);
      double double0 = FastMath.toRadians((double) int0);
      assertEquals((-17.64527873766267), double0, 0.01D);
      
      double double1 = FastMath.asin(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = 3413.233;
      double double1 = FastMath.asin(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      double double1 = FastMath.atan2((double) int0, (double) int0);
      assertEquals((-2.356194490192345), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test103()  throws Throwable  {
      float float0 = (-1543.2935F);
      double double0 = 4.9E-324;
      double double1 = FastMath.atan2((double) float0, double0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test104()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      long long0 = 0L;
      double double0 = FastMath.atan2((double) float0, (double) long0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log10(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals(3.141592653589793, double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test106()  throws Throwable  {
      double double0 = (-1.3620325027706252E-7);
      int int0 = 0;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals((-1.3620325027706252E-7), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.log((double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals((-3.141592653589793), double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double0 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
  }

  @Test
  public void test107()  throws Throwable  {
      double double0 = 1.125;
      int int0 = 2047;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.max(double0, (double) int0);
      assertEquals(2047.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.sin(double2);
      assertEquals((-0.9683193119086263), double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      
      double double4 = FastMath.atan2(double3, double1);
      assertEquals(-0.0, double4, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test
  public void test108()  throws Throwable  {
      double double0 = 1.125;
      long long0 = FastMath.round(double0);
      assertEquals(1L, long0);
      
      int int0 = 2047;
      double double1 = FastMath.scalb((double) long0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2((double) long0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test109()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      double double1 = FastMath.pow(double0, int0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log((double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals((-1.5707963267948966), double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test110()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.log((double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2(double0, double0);
      assertEquals((-2.356194490192345), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.asin(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = Double.POSITIVE_INFINITY;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals(1.5707963267948966, double3, 0.01D);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test112()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.atan2(double0, double0);
      assertEquals(0.7853981633974483, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test113()  throws Throwable  {
      double double0 = -0.0;
      double double1 = FastMath.atan2(double0, double0);
      assertEquals((-3.141592653589793), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test114()  throws Throwable  {
      int int0 = 901;
      double double0 = FastMath.expm1((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = 0.0;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double0);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test115()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.log((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      long long0 = FastMath.round((double) float0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.atan2((double) long0, double0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test116()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.atan2(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test117()  throws Throwable  {
      double double0 = (-1.0E-6);
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707973267948967, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = (-2245.730668);
      double double1 = (-4.9E-324);
      double double2 = FastMath.atan2(double0, double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = (-2245.730668);
      double double1 = FastMath.tan(double0);
      assertEquals(0.5568397878984238, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = (-4.9E-324);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals(1.5707963267948966, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
  }

  @Test
  public void test120()  throws Throwable  {
      int int0 = 901;
      double double0 = FastMath.expm1((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.tan(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test121()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = FastMath.tan((double) float0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test122()  throws Throwable  {
      long long0 = 0L;
      double double0 = FastMath.tan((double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test123()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.cos((double) float1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test124()  throws Throwable  {
      double double0 = 7.251548346906463E162;
      double double1 = FastMath.tan(double0);
      assertEquals(0.23543653347269033, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = 1.956199868121249E282;
      double double1 = FastMath.cos(double0);
      assertEquals(0.9988952866173689, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test126()  throws Throwable  {
      double double0 = 2.85040095144011776E17;
      double double1 = FastMath.tan(double0);
      assertEquals((-108.83538159540501), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test127()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      double double0 = FastMath.sin((double) float0);
      assertEquals(0.5218765233336585, double0, 0.01D);
  }

  @Test
  public void test128()  throws Throwable  {
      double double0 = 3.2542391242036633E233;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.042059891440356316), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test129()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      double double1 = FastMath.cos(double0);
      assertEquals((-0.9999876894265599), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test130()  throws Throwable  {
      long long0 = 4208363204685324176L;
      double double0 = FastMath.sin((double) long0);
      assertEquals((-0.9878149748940149), double0, 0.01D);
  }

  @Test
  public void test131()  throws Throwable  {
      double double0 = 3.3310942289102464E291;
      double double1 = FastMath.tan(double0);
      assertEquals(3.050014203374347, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test132()  throws Throwable  {
      int int0 = 249;
      float float0 = (-1.0F);
      float float1 = FastMath.copySign(float0, (float) int0);
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.tan((double) float1);
      assertEquals(1.5574077246549023, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test133()  throws Throwable  {
      int int0 = (-889);
      int int1 = FastMath.abs(int0);
      assertEquals(889, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.tan((double) int1);
      assertEquals((-0.07083910484037843), double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test134()  throws Throwable  {
      long long0 = (-640L);
      long long1 = FastMath.abs(long0);
      assertEquals(640L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      int int0 = (-1163);
      double double0 = FastMath.pow((double) long1, int0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test135()  throws Throwable  {
      double double0 = (-9.89780175);
      double double1 = FastMath.sin(double0);
      assertEquals(0.4555801254227113, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 2276;
      double double2 = FastMath.pow(double1, int0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test136()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(1.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = (-1.7445917446236717E139);
      double double1 = FastMath.pow(double0, (double) float1);
      assertEquals((-1.7445917446236717E139), double1, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(double1 == double0);
      assertTrue(float1 == float0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test137()  throws Throwable  {
      float float0 = (-633.0F);
      float float1 = FastMath.nextUp(float0);
      assertEquals((-632.99994F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = (-1.7976931348623157E308);
      double double1 = FastMath.pow((double) float1, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test138()  throws Throwable  {
      double double0 = 1120.070605;
      double double1 = (-1524.9557227217754);
      double double2 = FastMath.pow(double1, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test
  public void test139()  throws Throwable  {
      double double0 = 1.125;
      long long0 = FastMath.round(double0);
      assertEquals(1L, long0);
      
      double double1 = FastMath.sin((double) long0);
      assertEquals(0.8414709848078965, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = Double.NEGATIVE_INFINITY;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
  }

  @Test
  public void test140()  throws Throwable  {
      double double0 = 1.125;
      double double1 = FastMath.sinh(double0);
      assertEquals(1.3777821907798407, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = Double.NEGATIVE_INFINITY;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test141()  throws Throwable  {
      double double0 = 1.125;
      long long0 = FastMath.round(double0);
      assertEquals(1L, long0);
      
      double double1 = Double.NEGATIVE_INFINITY;
      double double2 = FastMath.pow((double) long0, double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test142()  throws Throwable  {
      int int0 = 1402;
      int int1 = FastMath.abs(int0);
      assertEquals(1402, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float0 = (-1.0F);
      float float1 = FastMath.scalb(float0, int1);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.pow((double) float1, (double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(float0 == float1);
  }

  @Test
  public void test143()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      int int0 = (-1905);
      int int1 = FastMath.abs(int0);
      assertEquals(1905, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.cos((double) int1);
      assertEquals(0.3671511390711971, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double1 = FastMath.pow((double) float0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
  }

  @Test
  public void test144()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double1, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
  }

  @Test
  public void test145()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      int int0 = (-1905);
      int int1 = FastMath.abs(int0);
      assertEquals(1905, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = FastMath.pow((double) float0, (double) int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test146()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.tanh((double) float0);
      assertEquals((-1.0), double0, 0.01D);
      
      double double1 = FastMath.pow((double) float0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test147()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = FastMath.getExponent(float0);
      assertEquals(0, int0);
      
      int int1 = FastMath.getExponent((double) int0);
      assertEquals((-1023), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.cosh((double) int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double1 = FastMath.pow((double) int1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(int0 == int1);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(int1 == int0);
  }

  @Test
  public void test148()  throws Throwable  {
      int int0 = 901;
      double double0 = FastMath.expm1((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = (-4.9E-324);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test149()  throws Throwable  {
      int int0 = 901;
      double double0 = FastMath.expm1((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test150()  throws Throwable  {
      float float0 = -0.0F;
      long long0 = (-962L);
      long long1 = FastMath.min(long0, long0);
      assertEquals((-962L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.pow((double) float0, (double) long1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test151()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      float float0 = -0.0F;
      double double1 = FastMath.pow((double) float0, (double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test152()  throws Throwable  {
      float float0 = Float.NaN;
      double double0 = 0.0;
      double double1 = FastMath.pow(double0, (double) float0);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test153()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.log1p((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test154()  throws Throwable  {
      double double0 = 2635.0069462;
      double double1 = FastMath.log1p(double0);
      assertEquals(7.8770205307479095, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test155()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.log1p((double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test156()  throws Throwable  {
      long long0 = (-1L);
      double double0 = FastMath.log1p((double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test157()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.log10(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test158()  throws Throwable  {
      int int0 = (-962);
      float float0 = Float.NaN;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      float float2 = FastMath.signum(float1);
      //  // Unstable assertion: assertEquals(1.0F, float2, 0.01F);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      
      double double0 = FastMath.acosh((double) float2);
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01D);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
  }

  @Test
  public void test159()  throws Throwable  {
      int int0 = 249;
      double double0 = 0.7853981633974483;
      double double1 = FastMath.pow(double0, (double) int0);
      assertEquals(7.540158239623416E-27, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test160()  throws Throwable  {
      double double0 = (-476.0);
      double double1 = (-4.9E-324);
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test161()  throws Throwable  {
      int int0 = 901;
      double double0 = FastMath.expm1((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.log10(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test162()  throws Throwable  {
      double double0 = (-5748.0);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atanh(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test163()  throws Throwable  {
      double double0 = (-485.4315);
      double double1 = FastMath.log1p(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test164()  throws Throwable  {
      double double0 = (-1.0E-6);
      double double1 = FastMath.expm1(double0);
      assertEquals((-9.999995000001667E-7), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test165()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test166()  throws Throwable  {
      double double0 = (-727.413561251429);
      double double1 = FastMath.exp(double0);
      assertEquals(1.2254745E-316, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test167()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test168()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test169()  throws Throwable  {
      double double0 = (-2627.4020866);
      double double1 = FastMath.nextUp(double0);
      assertEquals((-2627.4020865999996), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.signum(double1);
      assertEquals((-1.0), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test170()  throws Throwable  {
      double double0 = (-485.4315);
      double double1 = FastMath.nextUp(double0);
      assertEquals((-485.43149999999997), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.ulp(double1);
      assertEquals(5.6843418860808015E-14, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.signum(double2);
      assertEquals(1.0, double3, 0.01D);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
  }

  @Test
  public void test171()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.03601556410444137, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test172()  throws Throwable  {
      double double0 = 0.10650193387709495;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.10690736850947168, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test173()  throws Throwable  {
      double double0 = (-408.5601610478699);
      double double1 = FastMath.atanh(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test174()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test175()  throws Throwable  {
      double double0 = 0.01745329052209854;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.017452404547689187, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test176()  throws Throwable  {
      double double0 = (-0.06327544371059383);
      double double1 = FastMath.asinh(double0);
      assertEquals((-0.06323329609255503), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test177()  throws Throwable  {
      double double0 = 0.16666666666666666;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.16590455026930118, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test178()  throws Throwable  {
      double double0 = (-9.89780175);
      double double1 = FastMath.sin(double0);
      assertEquals(0.4555801254227113, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.ulp(double1);
      assertEquals(5.551115123125783E-17, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = FastMath.asinh(double2);
      assertEquals(5.551115123125783E-17, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
  }

  @Test
  public void test179()  throws Throwable  {
      double double0 = (-9.89780175);
      double double1 = FastMath.asinh(double0);
      assertEquals((-2.9880020476506726), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test180()  throws Throwable  {
      double double0 = (-2245.730668);
      double double1 = FastMath.tan(double0);
      assertEquals(0.5568397878984238, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.asinh(double1);
      assertEquals(0.5314649135225936, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test181()  throws Throwable  {
      double double0 = 1.5464049837965422E-246;
      double double1 = FastMath.tanh(double0);
      assertEquals(1.5464049837965422E-246, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test182()  throws Throwable  {
      float float0 = (-13.965193F);
      double double0 = FastMath.tanh((double) float0);
      assertEquals((-0.9999999999985174), double0, 0.01D);
  }

  @Test
  public void test183()  throws Throwable  {
      long long0 = (-640L);
      long long1 = FastMath.abs(long0);
      assertEquals(640L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      double double0 = FastMath.tanh((double) long1);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test184()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.tanh((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test185()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sinh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test186()  throws Throwable  {
      double double0 = (-532.8);
      double double1 = FastMath.sinh(double0);
      assertEquals((-1.2333034954554486E231), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test187()  throws Throwable  {
      float float0 = 71.23F;
      double double0 = FastMath.sinh((double) float0);
      assertEquals(4.302960983566981E30, double0, 0.01D);
  }

  @Test
  public void test188()  throws Throwable  {
      double double0 = (-1.3620325027706252E-7);
      double double1 = FastMath.sinh(double0);
      assertEquals((-1.3620325027706294E-7), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test189()  throws Throwable  {
      double double0 = (-7.853944465095286E-8);
      double double1 = FastMath.asin(double0);
      assertEquals((-7.853944465095294E-8), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(1.000000000000003, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test190()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cosh(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test191()  throws Throwable  {
      float float0 = 518.55774F;
      int int0 = FastMath.round(float0);
      assertEquals(519, int0);
      
      double double0 = FastMath.cosh((double) int0);
      assertEquals(1.252581843281988E225, double0, 0.01D);
  }

  @Test
  public void test192()  throws Throwable  {
      int int0 = 1025;
      double double0 = FastMath.cosh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test193()  throws Throwable  {
      double double0 = (-485.4315);
      double double1 = FastMath.nextUp(double0);
      assertEquals((-485.43149999999997), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(3.305154735085435E210, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test194()  throws Throwable  {
      double double0 = 4.9E-324;
      double double1 = FastMath.toRadians(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test195()  throws Throwable  {
      double double0 = (-9.89780175);
      double double1 = FastMath.sin(double0);
      assertEquals(0.4555801254227113, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double1);
      assertEquals(0.7853981633974483, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test196()  throws Throwable  {
      int int0 = (-889);
      double double0 = FastMath.toDegrees((double) int0);
      assertEquals((-50935.94798713018), double0, 0.01D);
  }

  @Test
  public void test197()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.cos((double) int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test198()  throws Throwable  {
      double double0 = (-2245.730668);
      double double1 = FastMath.tan(double0);
      assertEquals(0.5568397878984238, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.nextUp(double1);
      assertEquals(0.5568397878984239, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test199()  throws Throwable  {
      int int0 = 0;
      float float0 = FastMath.nextUp((float) int0);
      assertEquals(1.4E-45F, float0, 0.01F);
  }

  @Test
  public void test200()  throws Throwable  {
      double double0 = (-470.0923);
      long long0 = FastMath.round(double0);
      assertEquals((-470L), long0);
      
      int int0 = FastMath.getExponent((double) long0);
      assertEquals(8, int0);
      
      double double1 = FastMath.log((double) int0, (double) long0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }
}
