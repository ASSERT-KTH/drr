/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:36:07 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class FastMathEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.2246467991473532E-16, double1, 0.01D);
  }

  @Test
  public void test001()  throws Throwable  {
      double double0 = (-1.0583192018912101E-7);
      double double1 = FastMath.min(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1.0583192018912101E-7), double1, 0.01D);
      
      long long0 = FastMath.round(double0);
      assertTrue(double0 == double1);
      assertEquals(0L, long0);
      
      int int0 = FastMath.getExponent(double1);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-24), int0);
      
      float float0 = FastMath.copySign((float) int0, (float) long0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(24.0F, float0, 0.01F);
  }

  @Test
  public void test002()  throws Throwable  {
      double double0 = (-1427.745);
      double double1 = 4.116164446561962E-8;
      double double2 = FastMath.sin(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(4.116164446561961E-8, double2, 0.01D);
      
      double double3 = FastMath.copySign(double2, double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-4.116164446561961E-8), double3, 0.01D);
  }

  @Test
  public void test003()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      double double0 = FastMath.hypot((double) int1, (double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test004()  throws Throwable  {
      double double0 = (-1960.1936125500858);
      double double1 = 0.0;
      double double2 = FastMath.toDegrees(double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = FastMath.hypot(double0, double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertEquals(1960.1936125500858, double3, 0.01D);
  }

  @Test
  public void test005()  throws Throwable  {
      float float0 = (-713.078F);
      double double0 = FastMath.sqrt((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.hypot((double) float0, double0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test006()  throws Throwable  {
      float float0 = 2903.179F;
      double double0 = FastMath.acos((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.hypot(double0, double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test007()  throws Throwable  {
      int int0 = (-2986);
      int int1 = FastMath.max(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-2986), int1);
      
      int int2 = 865;
      assertFalse(int2 == int1);
      
      double double0 = FastMath.expm1((double) int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.hypot((double) int1, double0);
      assertTrue(double0 == double1);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertTrue(double1 == double0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test008()  throws Throwable  {
      float float0 = 1505.0F;
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(1505.0F, float1, 0.01F);
      
      int int0 = 0;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = FastMath.hypot((double) int1, (double) float1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(1505.0, double0, 0.01D);
  }

  @Test
  public void test009()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      double double1 = 955.0349138494;
      double double2 = FastMath.exp(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.hypot(double2, (double) int0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test010()  throws Throwable  {
      float float0 = 673.7493F;
      double double0 = FastMath.max((double) float0, (double) float0);
      assertEquals(673.7493286132812, double0, 0.01D);
  }

  @Test
  public void test011()  throws Throwable  {
      double double0 = (-789.272709675);
      double double1 = 0.0;
      double double2 = FastMath.copySign(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(789.272709675, double2, 0.01D);
      
      float float0 = -0.0F;
      float float1 = FastMath.ulp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.4E-45F, float1, 0.01F);
      
      double double3 = FastMath.max(double2, (double) float1);
      assertFalse(float1 == float0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(float0 == float1);
      assertEquals(789.272709675, double3, 0.01D);
  }

  @Test
  public void test012()  throws Throwable  {
      double double0 = 3522.56089;
      double double1 = 0.3163207769393921;
      long long0 = FastMath.round(double1);
      assertFalse(double1 == double0);
      assertEquals(0L, long0);
      
      double double2 = FastMath.max((double) long0, double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(3522.56089, double2, 0.01D);
  }

  @Test
  public void test013()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.max(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(-0.0F, float1, 0.01F);
  }

  @Test
  public void test014()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.ulp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.4E-45F, float1, 0.01F);
      
      long long0 = (-1917L);
      float float2 = FastMath.max((float) long0, float1);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      assertEquals(1.4E-45F, float2, 0.01F);
  }

  @Test
  public void test015()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = FastMath.max(float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test
  public void test016()  throws Throwable  {
      int int0 = 0;
      long long0 = FastMath.max((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test017()  throws Throwable  {
      int int0 = 3415;
      long long0 = 0L;
      long long1 = FastMath.max((long) int0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(3415L, long1);
  }

  @Test
  public void test018()  throws Throwable  {
      int int0 = (-1058);
      int int1 = 747;
      int int2 = FastMath.max(int1, int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(747, int2);
  }

  @Test
  public void test019()  throws Throwable  {
      double double0 = (-1134.0);
      double double1 = FastMath.log1p(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.min(double0, double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals((-1134.0), double2, 0.01D);
  }

  @Test
  public void test020()  throws Throwable  {
      double double0 = (-1134.0);
      float float0 = Float.POSITIVE_INFINITY;
      int int0 = FastMath.getExponent(double0);
      assertEquals(10, int0);
      
      double double1 = FastMath.min((double) float0, (double) int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(10.0, double1, 0.01D);
  }

  @Test
  public void test021()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      double double0 = FastMath.min((double) float1, (double) float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test022()  throws Throwable  {
      int int0 = 991;
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, (float) int0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(-0.0F, float1, 0.01F);
  }

  @Test
  public void test023()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = 2570.9402F;
      float float2 = FastMath.min(float1, float0);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float0 == float1);
      assertTrue(float0 == float2);
      assertTrue(float2 == float0);
      assertFalse(float2 == float1);
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test
  public void test024()  throws Throwable  {
      double double0 = 547.56;
      long long0 = FastMath.round(double0);
      assertEquals(548L, long0);
      
      float float0 = FastMath.min((float) long0, (float) long0);
      assertEquals(548.0F, float0, 0.01F);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = 195;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(195, int1);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 5109;
      int int1 = 349;
      int int2 = FastMath.min(int0, int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(349, int2);
  }

  @Test
  public void test027()  throws Throwable  {
      double double0 = 1.5;
      double double1 = FastMath.rint(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2.0, double1, 0.01D);
  }

  @Test
  public void test028()  throws Throwable  {
      double double0 = (-1759.385);
      double double1 = FastMath.rint(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1759.0), double1, 0.01D);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = 2329;
      double double0 = FastMath.rint((double) int0);
      assertEquals(2329.0, double0, 0.01D);
  }

  @Test
  public void test030()  throws Throwable  {
      double double0 = (-0.9893776454212329);
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test031()  throws Throwable  {
      double double0 = 6.734172833429278E268;
      double double1 = FastMath.cbrt(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.068441598091345E89, double1, 0.01D);
      
      double double2 = FastMath.ceil(double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(4.068441598091345E89, double2, 0.01D);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = (-3975.0);
      double double1 = FastMath.floor(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-3975.0), double1, 0.01D);
  }

  @Test
  public void test033()  throws Throwable  {
      double double0 = (-1.0583192018912101E-7);
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.log10((double) long0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      long long1 = FastMath.round(double1);
      assertFalse(double0 == double1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(double1 == double0);
      assertEquals((-9223372036854775808L), long1);
  }

  @Test
  public void test034()  throws Throwable  {
      float float0 = 673.7493F;
      float float1 = FastMath.nextUp(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(673.7494F, float1, 0.01F);
  }

  @Test
  public void test035()  throws Throwable  {
      float float0 = 1505.0F;
      double double0 = 0.0;
      float float1 = FastMath.nextAfter(float0, double0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1504.9999F, float1, 0.01F);
  }

  @Test
  public void test036()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.min(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(0L, long1);
      
      float float0 = FastMath.nextUp((float) long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(1.4E-45F, float0, 0.01F);
  }

  @Test
  public void test037()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      long long0 = FastMath.round((double) float0);
      assertEquals(9223372036854775807L, long0);
      
      float float1 = FastMath.nextAfter(float0, (double) long0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(3.4028235E38F, float1, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      double double0 = 0.32905077934265137;
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(710.1881780014921, double1, 0.01D);
      
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertEquals((-3.4028235E38F), float1, 0.01F);
  }

  @Test
  public void test039()  throws Throwable  {
      int int0 = (-1202);
      int int1 = FastMath.max(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-1202), int1);
      
      double double0 = FastMath.log((double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(Double.NaN, double0, 0.01D);
      
      float float0 = FastMath.nextAfter((float) int0, double0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test040()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.nextUp(float0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test041()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = FastMath.round(float0);
      assertEquals((-1), int0);
      
      double double0 = FastMath.nextUp((double) int0);
      assertEquals((-0.9999999999999999), double0, 0.01D);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = (-1427.745);
      double double1 = 4.116164446561962E-8;
      double double2 = FastMath.sin(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(4.116164446561961E-8, double2, 0.01D);
      
      int int0 = (-1058);
      double double3 = FastMath.scalb(double0, int0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertEquals((-4.6229078E-316), double3, 0.01D);
      
      double double4 = FastMath.nextAfter(double2, double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertEquals(4.1161644465619603E-8, double4, 0.01D);
  }

  @Test
  public void test043()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = FastMath.nextUp((double) float0);
      assertEquals(4.9E-324, double0, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.nextUp(float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      long long0 = (-25L);
      double double0 = FastMath.asinh((double) long0);
      assertEquals((-3.9124227656412556), double0, 0.01D);
      
      double double1 = FastMath.nextAfter((double) float1, double0);
      assertTrue(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(float1 == float0);
      assertEquals(1.7976931348623157E308, double1, 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.copySign(float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      
      double double0 = FastMath.nextUp((double) float1);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals((-1.7976931348623157E308), double0, 0.01D);
  }

  @Test
  public void test046()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = (-2210.4539F);
      float float2 = FastMath.copySign(float0, float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NEGATIVE_INFINITY, float2, 0.01F);
      
      double double0 = FastMath.atanh((double) float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.nextAfter((double) float2, double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test047()  throws Throwable  {
      double double0 = 205.41742530108795;
      double double1 = FastMath.asin(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test048()  throws Throwable  {
      float float0 = 673.7493F;
      int int0 = 195;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test049()  throws Throwable  {
      int int0 = 217;
      float float0 = 1.4E-45F;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(2.951479E20F, float1, 0.01F);
  }

  @Test
  public void test050()  throws Throwable  {
      float float0 = 1772.0F;
      int int0 = (-267);
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test051()  throws Throwable  {
      float float0 = -0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      int int1 = (-156);
      assertFalse(int1 == int0);
      
      float float1 = FastMath.scalb((float) int0, int1);
      assertFalse(float1 == float0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
      assertEquals((-1.4E-45F), float1, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = FastMath.round(float0);
      assertEquals((-1), int0);
      
      int int1 = (-267);
      assertFalse(int1 == int0);
      
      float float1 = FastMath.scalb((float) int0, int1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(-0.0F, float1, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = FastMath.scalb((float) int0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-7.464389E-37F), float1, 0.01F);
  }

  @Test
  public void test054()  throws Throwable  {
      int int0 = (-71);
      float float0 = 3.4028235E38F;
      int int1 = FastMath.round(float0);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
      
      float float1 = FastMath.scalb((float) int0, int1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test055()  throws Throwable  {
      float float0 = (-488.78055F);
      int int0 = (-3148);
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(-0.0F, float1, 0.01F);
  }

  @Test
  public void test056()  throws Throwable  {
      long long0 = 554L;
      long long1 = FastMath.abs(long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(554L, long1);
      
      int int0 = (-3148);
      float float0 = FastMath.scalb((float) long1, int0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test057()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      int int0 = 2943;
      float float1 = FastMath.scalb(float0, int0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test058()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 2708;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test059()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = (-3148);
      assertFalse(int2 == int1);
      
      float float0 = FastMath.scalb((float) int1, int2);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test060()  throws Throwable  {
      double double0 = (-572.761);
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.8366493239995905), double1, 0.01D);
      
      int int0 = 1649;
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test061()  throws Throwable  {
      double double0 = 1.4470673509275515E-259;
      int int0 = 1649;
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.622026261855646E237, double1, 0.01D);
  }

  @Test
  public void test062()  throws Throwable  {
      float float0 = (-1118.2611F);
      float float1 = FastMath.signum(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.0F), float1, 0.01F);
      
      int int0 = (-1797);
      double double0 = FastMath.scalb((double) float1, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      double double0 = 510.71103827849316;
      int int0 = (-1058);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.6536357E-316, double1, 0.01D);
  }

  @Test
  public void test064()  throws Throwable  {
      double double0 = 877.882155;
      int int0 = (-1940);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test065()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      double double1 = FastMath.scalb((double) int0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.1381252786264335E-305), double1, 0.01D);
  }

  @Test
  public void test066()  throws Throwable  {
      int int0 = 750;
      float float0 = FastMath.copySign((float) int0, (float) int0);
      assertEquals(750.0F, float0, 0.01F);
      
      int int1 = 1649;
      double double0 = FastMath.scalb((double) float0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test067()  throws Throwable  {
      double double0 = (-249.8);
      int int0 = 2335;
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test068()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.ulp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.4E-45F, float1, 0.01F);
      
      int int0 = (-2533);
      double double0 = FastMath.scalb((double) float1, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test069()  throws Throwable  {
      double double0 = (-789.272709675);
      double double1 = FastMath.copySign(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-789.272709675), double1, 0.01D);
      
      int int0 = (-2533);
      double double2 = FastMath.scalb(double1, int0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test070()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      double double1 = FastMath.sin(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.scalb(double1, int0);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test071()  throws Throwable  {
      double double0 = (-1.0583192018912101E-7);
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.log10((double) long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.ulp(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test072()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = FastMath.abs((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test073()  throws Throwable  {
      int int0 = (-1058);
      double double0 = FastMath.ulp((double) int0);
      assertEquals(2.2737367544323206E-13, double0, 0.01D);
  }

  @Test
  public void test074()  throws Throwable  {
      long long0 = 0L;
      float float0 = FastMath.ulp((float) long0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test075()  throws Throwable  {
      int int0 = (-71);
      int int1 = FastMath.abs(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(71, int1);
  }

  @Test
  public void test076()  throws Throwable  {
      double double0 = (-789.272709675);
      double double1 = FastMath.toDegrees(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-45221.995149231836), double1, 0.01D);
  }

  @Test
  public void test077()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.toDegrees((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test078()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toRadians(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = 877.882155;
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.toRadians(double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      double double0 = (-1759.385);
      double double1 = FastMath.abs(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1759.385, double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.cbrt(double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = 4.9E-324;
      double double1 = FastMath.cbrt(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.7031839360032603E-108, double1, 0.01D);
  }

  @Test
  public void test082()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test083()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      float float0 = 1505.0F;
      double double0 = FastMath.tanh((double) float0);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test085()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = FastMath.round(float0);
      assertEquals((-1), int0);
      
      double double0 = FastMath.acos((double) int0);
      assertEquals(3.141592653589793, double0, 0.01D);
  }

  @Test
  public void test086()  throws Throwable  {
      float float0 = (-1118.2611F);
      float float1 = FastMath.signum(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.0F), float1, 0.01F);
      
      double double0 = FastMath.asin((double) float1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = (-1202);
      double double0 = 0.0;
      double double1 = FastMath.pow((double) int0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test088()  throws Throwable  {
      float float0 = (-87.53307F);
      float float1 = FastMath.nextUp(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-87.533066F), float1, 0.01F);
      
      double double0 = FastMath.asin((double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test089()  throws Throwable  {
      double double0 = 5.7455368446308694E197;
      double double1 = (-1.6754164785291923E-136);
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test090()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = (-2210.4539F);
      float float2 = FastMath.copySign(float0, float1);
      assertFalse(float0 == float1);
      assertTrue(float0 == float2);
      assertFalse(float2 == float1);
      assertTrue(float2 == float0);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertEquals(Float.NEGATIVE_INFINITY, float2, 0.01F);
      
      double double0 = FastMath.pow((double) float2, (double) float1);
      assertFalse(float0 == float1);
      assertTrue(float0 == float2);
      assertFalse(float2 == float1);
      assertTrue(float2 == float0);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.atan2((double) float1, double0);
      assertFalse(float0 == float1);
      assertTrue(float0 == float2);
      assertFalse(float2 == float1);
      assertTrue(float2 == float0);
      assertFalse(double0 == double1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(double1 == double0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      float float0 = 0.0F;
      long long0 = 3065L;
      long long1 = FastMath.min(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(3065L, long1);
      
      double double0 = FastMath.nextAfter((double) float0, (double) float0);
      assertEquals(0.0, double0, 0.01D);
      
      int int0 = FastMath.getExponent((float) long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(11, int0);
      
      double double1 = FastMath.atan2((double) int0, double0);
      assertTrue(long1 == long0);
      assertFalse(double0 == double1);
      assertTrue(long0 == long1);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      double double0 = (-2741.99);
      float float0 = (-1.0F);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2((double) float0, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-3.141592653589793), double2, 0.01D);
  }

  @Test
  public void test093()  throws Throwable  {
      double double0 = 6.734172833429278E268;
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test094()  throws Throwable  {
      double double0 = 6.734172833429278E268;
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      long long0 = (-7278142539171889152L);
      long long1 = FastMath.min(long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-7278142539171889152L), long1);
      
      double double2 = FastMath.atan2((double) long1, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(long0 == long1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(long1 == long0);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = (-2741.99);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      int int0 = 0;
      double double2 = FastMath.atan2(double1, (double) int0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      double double0 = 1610.629454;
      float float0 = (-1.0F);
      float float1 = FastMath.abs(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.0F, float1, 0.01F);
      
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, (double) float1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(float0 == float1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-572.761);
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(3.141592653589793, double2, 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(3.141592653589793, double2, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = 6.734172833429278E268;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 750;
      float float0 = FastMath.copySign((float) int0, (float) int0);
      assertEquals(750.0F, float0, 0.01F);
      
      double double1 = FastMath.atan2(double0, (double) float0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = (-1.5111906039270745E-7);
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.570796477913957, double1, 0.01D);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = 3.2231452986239366E-298;
      double double1 = FastMath.asin(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(3.2231452986239366E-298, double1, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = (-0.11329739909171375);
      double double1 = FastMath.atan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.11281632565475111), double1, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      int int0 = FastMath.getExponent(float0);
      //  // Unstable assertion: assertEquals(128, int0);
      
      double double0 = (-3113.846888590672);
      double double1 = FastMath.pow(double0, int0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = 3.2231452986239366E-298;
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      double double0 = 2000.2601;
      long long0 = FastMath.round(double0);
      assertEquals(2000L, long0);
      
      double double1 = FastMath.atan2(double0, (double) long0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.785463184169381, double1, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      double double0 = 3300.2072619455;
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      float float0 = (-488.78055F);
      float float1 = FastMath.copySign((float) int1, float0);
      assertTrue(int0 == int1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertTrue(int1 == int0);
      assertEquals(-0.0F, float1, 0.01F);
      
      double double0 = FastMath.tan((double) float1);
      assertTrue(int0 == int1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertTrue(int1 == int0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test110()  throws Throwable  {
      double double0 = 2.5017542839050293;
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.8021922722941986), double1, 0.01D);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.cos((double) long0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test112()  throws Throwable  {
      double double0 = (-1427.745);
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.10864617010387029, double1, 0.01D);
  }

  @Test
  public void test113()  throws Throwable  {
      long long0 = 1899L;
      int int0 = 3963;
      float float0 = FastMath.scalb((float) long0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double0 = FastMath.cos((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test114()  throws Throwable  {
      double double0 = 757.1;
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test115()  throws Throwable  {
      float float0 = -0.0F;
      long long0 = (-1917L);
      long long1 = FastMath.abs(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(1917L, long1);
      
      double double0 = FastMath.IEEEremainder((double) float0, (double) long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(-0.0, double0, 0.01D);
      
      double double1 = FastMath.sin(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test116()  throws Throwable  {
      double double0 = 1.3629491735708616E151;
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.46792938927021815), double1, 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      double double0 = (-2.2667083759873216E16);
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.4270765835748058), double1, 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = (-7.83892088580041E80);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.8361822416371457, double1, 0.01D);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = 204.09840376307;
      double double1 = FastMath.exp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4.353219035515229E88, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-0.9999826285888112), double2, 0.01D);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = 517.3171978940926;
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.655908524453721E224, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-0.6308602941500847), double2, 0.01D);
  }

  @Test
  public void test121()  throws Throwable  {
      float float0 = 3.4028235E38F;
      int int0 = FastMath.round(float0);
      assertEquals(Integer.MAX_VALUE, int0);
      
      double double0 = FastMath.tan((double) int0);
      assertEquals(1.0523779637351338, double0, 0.01D);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.004962015874444895, double1, 0.01D);
  }

  @Test
  public void test123()  throws Throwable  {
      int int0 = (-1202);
      double double0 = 0.0;
      double double1 = FastMath.pow((double) int0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.5574077246549023, double2, 0.01D);
  }

  @Test
  public void test124()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      double double0 = FastMath.pow((double) int0, int0);
      assertEquals((-6.560356474884112E-268), double0, 0.01D);
  }

  @Test
  public void test125()  throws Throwable  {
      int int0 = (-1058);
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals((-1058L), long0);
      
      int int1 = 0;
      double double0 = FastMath.pow((double) long0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test126()  throws Throwable  {
      double double0 = 1045.0;
      double double1 = (-1122.8971094);
      double double2 = FastMath.pow(double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test127()  throws Throwable  {
      double double0 = (-3062.1156);
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test128()  throws Throwable  {
      double double0 = 2.85040095144011776E17;
      double double1 = (-269.218944176);
      double double2 = FastMath.pow(double1, double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test129()  throws Throwable  {
      int int0 = (-1940);
      double double0 = FastMath.pow((double) int0, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test130()  throws Throwable  {
      double double0 = 1524.1449836663676;
      float float0 = (-431.3F);
      int int0 = 241;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      
      double double1 = FastMath.pow(double0, (double) float1);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test131()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.copySign(float0, float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      
      double double0 = FastMath.acosh((double) float1);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(710.1881780014921, double0, 0.01D);
      
      double double1 = FastMath.pow((double) float0, double0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test132()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = 2.6965931069318893E-8;
      double double1 = FastMath.ceil(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = (-2188.8177955468104);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atanh(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      float float1 = FastMath.nextAfter(float0, double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.4E-45F), float1, 0.01F);
      
      double double4 = FastMath.pow((double) float1, double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertEquals(0.0, double4, 0.01D);
  }

  @Test
  public void test133()  throws Throwable  {
      int int0 = 2329;
      double double0 = FastMath.scalb((double) int0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow((double) int0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test134()  throws Throwable  {
      double double0 = (-619.42482578);
      double double1 = Double.POSITIVE_INFINITY;
      double double2 = FastMath.pow(double1, double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test135()  throws Throwable  {
      double double0 = 1946.2595318;
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1947.0, double1, 0.01D);
      
      long long0 = FastMath.round(double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1947L, long0);
      
      double double2 = Double.POSITIVE_INFINITY;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, (double) long0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test136()  throws Throwable  {
      double double0 = (-1.0583192018912101E-7);
      float float0 = 0.0F;
      int int0 = 0;
      float float1 = FastMath.scalb(float0, int0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
      
      int int1 = FastMath.getExponent(double0);
      assertFalse(int1 == int0);
      assertEquals((-24), int1);
      
      double double1 = FastMath.pow((double) float1, (double) int1);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test137()  throws Throwable  {
      double double0 = 0.06666666666666667;
      double double1 = (-2.6033824355191673E-8);
      double double2 = FastMath.rint(double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals(-0.0, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test138()  throws Throwable  {
      long long0 = 554L;
      double double0 = FastMath.log1p((double) long0);
      assertEquals(6.318968113746434, double0, 0.01D);
  }

  @Test
  public void test139()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.log1p(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test140()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.log1p((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test141()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      int int0 = FastMath.getExponent(float0);
      assertEquals(128, int0);
      
      float float1 = FastMath.signum((float) int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.0F, float1, 0.01F);
      
      double double0 = FastMath.log((double) float1, (double) int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test142()  throws Throwable  {
      double double0 = 0.008336750013465571;
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0083715974847642, double1, 0.01D);
      
      double double2 = FastMath.log10(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0036206045278549225, double2, 0.01D);
  }

  @Test
  public void test143()  throws Throwable  {
      double double0 = (-744.0);
      double double1 = FastMath.log1p(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = 1.6960809230804443;
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.log(double2, double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertEquals(1344.238040435227, double3, 0.01D);
  }

  @Test
  public void test144()  throws Throwable  {
      float float0 = 907.3F;
      int int0 = FastMath.round(float0);
      assertEquals(907, int0);
      
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = FastMath.log(double1, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-0.00914800627609732), double2, 0.01D);
  }

  @Test
  public void test145()  throws Throwable  {
      double double0 = 6.734172833429278E268;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log10(double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test146()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log1p(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.log(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test147()  throws Throwable  {
      double double0 = 547.56;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.7973420393015833, double1, 0.01D);
      
      double double2 = FastMath.log10(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-0.09835533743005062), double2, 0.01D);
      
      double double3 = FastMath.expm1(double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertEquals((-0.0936732053054053), double3, 0.01D);
  }

  @Test
  public void test148()  throws Throwable  {
      double double0 = 205.41742530108795;
      double double1 = FastMath.asin(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test149()  throws Throwable  {
      float float0 = (-713.078F);
      double double0 = FastMath.exp((double) float0);
      assertEquals(2.0613804886241E-310, double0, 0.01D);
  }

  @Test
  public void test150()  throws Throwable  {
      double double0 = (-743.914);
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test151()  throws Throwable  {
      long long0 = (-25L);
      long long1 = (-802L);
      long long2 = FastMath.min(long0, long1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals((-802L), long2);
      
      double double0 = FastMath.exp((double) long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test152()  throws Throwable  {
      double double0 = (-2986.5103061071372);
      double double1 = FastMath.copySign(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-2986.5103061071372), double1, 0.01D);
      
      double double2 = FastMath.expm1(double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals((-1.0), double2, 0.01D);
  }

  @Test
  public void test153()  throws Throwable  {
      double double0 = (-1759.385);
      double double1 = FastMath.tanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.exp(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.36787944117144233, double2, 0.01D);
  }

  @Test
  public void test154()  throws Throwable  {
      int int0 = 0;
      float float0 = FastMath.signum((float) int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test155()  throws Throwable  {
      double double0 = 547.56;
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.7973420393015833, double1, 0.01D);
      
      double double2 = FastMath.signum(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test156()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test157()  throws Throwable  {
      double double0 = 0.008336750013465571;
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.008336943160121329, double1, 0.01D);
  }

  @Test
  public void test158()  throws Throwable  {
      double double0 = 0.06666666666666667;
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.06676569631226131, double1, 0.01D);
  }

  @Test
  public void test159()  throws Throwable  {
      double double0 = (-1134.0);
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.11469497798204223), double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-0.11520192042336709), double2, 0.01D);
  }

  @Test
  public void test160()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = FastMath.max(float0, (float) int0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
      
      double double0 = FastMath.atanh((double) float1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test161()  throws Throwable  {
      double double0 = 0.008336750013465571;
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.008336653447185054, double1, 0.01D);
  }

  @Test
  public void test162()  throws Throwable  {
      double double0 = 0.3163207769393921;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.asinh((double) long0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test163()  throws Throwable  {
      double double0 = 0.07341018319129944;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.07334440732575667, double1, 0.01D);
  }

  @Test
  public void test164()  throws Throwable  {
      double double0 = (-0.1275278893606981);
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.12718472289373192), double1, 0.01D);
  }

  @Test
  public void test165()  throws Throwable  {
      double double0 = (-1071.1);
      double double1 = FastMath.signum(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-0.7615941559557649), double2, 0.01D);
  }

  @Test
  public void test166()  throws Throwable  {
      double double0 = 5.3017188565638215E-65;
      double double1 = FastMath.tanh(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(5.3017188565638215E-65, double1, 0.01D);
  }

  @Test
  public void test167()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.tanh((double) long0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test168()  throws Throwable  {
      long long0 = 554L;
      double double0 = FastMath.sinh((double) long0);
      assertEquals(1.9866116535687868E240, double0, 0.01D);
      
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.9650048749765727), double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-1.1219095549122038), double2, 0.01D);
  }

  @Test
  public void test169()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.sinh(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test170()  throws Throwable  {
      double double0 = (-619.42482578);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-5.1493663951342394E268), double1, 0.01D);
  }

  @Test
  public void test171()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.ulp(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1.4E-45F, float1, 0.01F);
      
      double double0 = FastMath.sinh((double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1.401298464324817E-45, double0, 0.01D);
  }

  @Test
  public void test172()  throws Throwable  {
      double double0 = (-1071.1);
      double double1 = FastMath.signum(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.cosh(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.5430806348152437, double2, 0.01D);
  }

  @Test
  public void test173()  throws Throwable  {
      double double0 = (-2249.0);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test174()  throws Throwable  {
      double double0 = 1961.3625418430972;
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.5877114068940306, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-59.11320661853356), double2, 0.01D);
      
      double double3 = FastMath.cosh(double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertEquals(2.3523906598585887E25, double3, 0.01D);
  }

  @Test
  public void test175()  throws Throwable  {
      double double0 = 639.731759;
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(3.395805725967596E277, double1, 0.01D);
  }

  @Test
  public void test176()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.cosh(double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test177()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      //  // Unstable assertion: assertEquals((-1023), int0);
      
      double double1 = FastMath.nextAfter(double0, (double) int0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals((-4.9E-324), double1, 0.01D);
      
      double double2 = FastMath.toRadians(double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test178()  throws Throwable  {
      double double0 = (-1134.0);
      double double1 = FastMath.log1p(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.toRadians(double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test179()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.asin((double) float0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.expm1(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test180()  throws Throwable  {
      double double0 = (-1427.745);
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test181()  throws Throwable  {
      int int0 = 2335;
      double double0 = FastMath.nextUp((double) int0);
      assertEquals(2335.0000000000005, double0, 0.01D);
  }
}
