/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:42:29 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class FastMathEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test001()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = FastMath.copySign((float) int0, (float) int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-127.0F), float1, 0.01F);
  }

  @Test
  public void test002()  throws Throwable  {
      float float0 = 3.4028235E38F;
      long long0 = 0L;
      long long1 = (-396L);
      long long2 = FastMath.min(long0, long1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals((-396L), long2);
      
      float float1 = FastMath.copySign(float0, (float) long2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals((-3.4028235E38F), float1, 0.01F);
  }

  @Test
  public void test003()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = FastMath.copySign((float) int0, float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(127.0F, float1, 0.01F);
  }

  @Test
  public void test004()  throws Throwable  {
      int int0 = (-1559);
      double double0 = FastMath.copySign((double) int0, (double) int0);
      assertEquals((-1559.0), double0, 0.01D);
  }

  @Test
  public void test005()  throws Throwable  {
      double double0 = (-2296.152565922);
      int int0 = 219;
      float float0 = FastMath.signum((float) int0);
      assertEquals(1.0F, float0, 0.01F);
      
      double double1 = FastMath.copySign((double) float0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test006()  throws Throwable  {
      double double0 = (-1762.5846699491199);
      double double1 = FastMath.log1p(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.copySign(double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1762.5846699491199, double2, 0.01D);
  }

  @Test
  public void test007()  throws Throwable  {
      double double0 = 2098.9604583;
      double double1 = FastMath.toRadians(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(36.63377086650414, double1, 0.01D);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.tanh(double2);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertEquals(0.0, double3, 0.01D);
      
      double double4 = FastMath.hypot(double3, double1);
      assertTrue(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double4);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertEquals(36.63377086650414, double4, 0.01D);
  }

  @Test
  public void test008()  throws Throwable  {
      double double0 = (-970.70655039);
      int int0 = (-3727);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.hypot(double0, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(970.70655039, double2, 0.01D);
  }

  @Test
  public void test009()  throws Throwable  {
      double double0 = (-2.5866883048437488E280);
      double double1 = FastMath.log1p(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.hypot(double0, double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test010()  throws Throwable  {
      double double0 = 1457.0776792;
      long long0 = FastMath.round(double0);
      //  // Unstable assertion: assertEquals(1457L, long0);
      
      double double1 = FastMath.atanh((double) long0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.hypot(double1, (double) long0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test011()  throws Throwable  {
      double double0 = 0.0;
      long long0 = (-1L);
      long long1 = FastMath.max(long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
      
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.hypot((double) long1, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test012()  throws Throwable  {
      int int0 = (-331);
      int int1 = FastMath.abs(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(331, int1);
      
      float float0 = (-1996.03F);
      double double0 = FastMath.sinh((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.hypot(double0, (double) int1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test013()  throws Throwable  {
      float float0 = 1548.5343F;
      double double0 = FastMath.max((double) float0, (double) float0);
      assertEquals(1548.5343017578125, double0, 0.01D);
  }

  @Test
  public void test014()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sqrt(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = 916.0319289;
      assertFalse(double2 == double1);
      
      int int0 = FastMath.getExponent(double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(9, int0);
      
      double double3 = FastMath.max((double) int0, double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals(9.0, double3, 0.01D);
  }

  @Test
  public void test015()  throws Throwable  {
      double double0 = 34.194639388438;
      float float0 = 0.0F;
      double double1 = FastMath.max((double) float0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(34.194639388438, double1, 0.01D);
  }

  @Test
  public void test016()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = -0.0F;
      float float2 = FastMath.max(float1, float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertEquals(0.0F, float2, 0.01F);
  }

  @Test
  public void test017()  throws Throwable  {
      float float0 = (-1175.183F);
      long long0 = 2722L;
      float float1 = FastMath.max(float0, (float) long0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(2722.0F, float1, 0.01F);
  }

  @Test
  public void test018()  throws Throwable  {
      int int0 = 15;
      float float0 = (-2781.73F);
      float float1 = FastMath.max((float) int0, float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(15.0F, float1, 0.01F);
  }

  @Test
  public void test019()  throws Throwable  {
      long long0 = 4368491638549381120L;
      long long1 = 0L;
      long long2 = FastMath.max(long0, long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long0 == long1);
      assertTrue(long0 == long2);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(4368491638549381120L, long2);
  }

  @Test
  public void test020()  throws Throwable  {
      double double0 = (-970.70655039);
      int int0 = FastMath.getExponent(double0);
      assertEquals(9, int0);
      
      int int1 = FastMath.max(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(9, int1);
  }

  @Test
  public void test021()  throws Throwable  {
      double double0 = (-6.4376298274983765E-273);
      int int0 = 8388608;
      float float0 = FastMath.max((float) int0, (float) int0);
      assertEquals(8388608.0F, float0, 0.01F);
      
      double double1 = FastMath.min(double0, (double) float0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-6.4376298274983765E-273), double1, 0.01D);
  }

  @Test
  public void test022()  throws Throwable  {
      double double0 = (-1186.84);
      int int0 = 2600;
      double double1 = FastMath.pow(double0, int0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.min(double1, (double) int0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertEquals(2600.0, double2, 0.01D);
  }

  @Test
  public void test023()  throws Throwable  {
      double double0 = (-1186.84);
      double double1 = FastMath.min(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1186.84), double1, 0.01D);
  }

  @Test
  public void test024()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(-0.0F, float1, 0.01F);
  }

  @Test
  public void test025()  throws Throwable  {
      double double0 = 916.0319289;
      int int0 = FastMath.getExponent(double0);
      assertEquals(9, int0);
      
      float float0 = 0.0F;
      float float1 = FastMath.min(float0, (float) int0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 15;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(15, int1);
      
      int int2 = (-1199);
      assertFalse(int2 == int1);
      
      float float0 = FastMath.min((float) int2, (float) int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1199.0F), float0, 0.01F);
      
      float float1 = FastMath.min((float) int1, float0);
      assertTrue(float1 == float0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(float0 == float1);
      assertEquals((-1199.0F), float1, 0.01F);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = 2600;
      int int1 = 6;
      int int2 = FastMath.min(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(6, int2);
  }

  @Test
  public void test028()  throws Throwable  {
      double double0 = 2197.5;
      double double1 = FastMath.rint(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2198.0, double1, 0.01D);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = (-2636);
      double double0 = FastMath.rint((double) int0);
      assertEquals((-2636.0), double0, 0.01D);
  }

  @Test
  public void test030()  throws Throwable  {
      double double0 = (-3.5997360512765566E-9);
      double double1 = FastMath.rint(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test031()  throws Throwable  {
      double double0 = 1719.0490606681044;
      double double1 = FastMath.acosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(8.142673641174271, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.9586170791543555, double2, 0.01D);
      
      double double3 = FastMath.rint(double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.0, double3, 0.01D);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = (-3417.5);
      double double1 = FastMath.rint(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-3418.0), double1, 0.01D);
  }

  @Test
  public void test033()  throws Throwable  {
      double double0 = (-2.5436254170647032E-67);
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test034()  throws Throwable  {
      double double0 = (-1194.9771012);
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1194.0), double1, 0.01D);
  }

  @Test
  public void test035()  throws Throwable  {
      float float0 = (-3428.3696F);
      float float1 = FastMath.nextUp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-3428.3694F), float1, 0.01F);
  }

  @Test
  public void test036()  throws Throwable  {
      double double0 = (-3417.5);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      long long0 = FastMath.round(double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-9223372036854775808L), long0);
      
      int int0 = 0;
      int int1 = 1207;
      int int2 = FastMath.max(int1, int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals(1207, int2);
      
      float float0 = FastMath.nextAfter((float) int2, (double) long0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals(1206.9999F, float0, 0.01F);
  }

  @Test
  public void test037()  throws Throwable  {
      double double0 = (-462.9162);
      float float0 = 0.0F;
      float float1 = FastMath.nextAfter(float0, double0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.4E-45F), float1, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = (-749);
      int int1 = 165;
      float float0 = FastMath.scalb((float) int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      
      float float1 = FastMath.nextUp(float0);
      assertFalse(int1 == int0);
      assertFalse(float1 == float0);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
      assertEquals((-3.4028235E38F), float1, 0.01F);
  }

  @Test
  public void test039()  throws Throwable  {
      double double0 = 1719.0490606681044;
      double double1 = FastMath.acosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(8.142673641174271, double1, 0.01D);
      
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, double1);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
      assertEquals(3.4028235E38F, float1, 0.01F);
  }

  @Test
  public void test040()  throws Throwable  {
      float float0 = 1026.9412F;
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(1026.9412F, float1, 0.01F);
  }

  @Test
  public void test041()  throws Throwable  {
      double double0 = 0.0;
      float float0 = 0.0F;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
      
      float float1 = FastMath.nextAfter(float0, double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(float0 == float1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(float1 == float0);
      assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test042()  throws Throwable  {
      long long0 = (-90L);
      float float0 = Float.NaN;
      float float1 = FastMath.nextAfter(float0, (double) long0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test043()  throws Throwable  {
      double double0 = (-1186.84);
      double double1 = 213.1924889775811;
      double double2 = FastMath.nextAfter(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-1186.8399999999997), double2, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = FastMath.cos((double) int0);
      assertTrue(int0 == int1);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = FastMath.nextAfter(double0, (double) int1);
      assertFalse(double0 == double1);
      assertTrue(int0 == int1);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
      assertEquals(0.9999999999999999, double1, 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-4092.0366457);
      double double2 = FastMath.nextAfter(double0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-4.9E-324), double2, 0.01D);
  }

  @Test
  public void test046()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      double double1 = (-2794.5404769);
      double double2 = FastMath.pow((double) int0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.nextAfter(double2, double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.7976931348623157E308, double3, 0.01D);
  }

  @Test
  public void test047()  throws Throwable  {
      double double0 = 0.08942520092550521;
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(0.08966472504527101, double1, 0.01D);
      
      double double2 = (-2296.152565922);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.log10(double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      
      double double4 = FastMath.nextAfter(double1, double3);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertTrue(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertTrue(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double4, 0.01D);
  }

  @Test
  public void test048()  throws Throwable  {
      double double0 = 15.643433070720892;
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.nextAfter(double1, double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test049()  throws Throwable  {
      float float0 = 1718.7F;
      float float1 = FastMath.copySign(float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(1718.7F, float1, 0.01F);
      
      int int0 = (-277);
      float float2 = FastMath.scalb(float1, int0);
      assertFalse(float0 == float2);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test
  public void test050()  throws Throwable  {
      long long0 = (-1L);
      long long1 = FastMath.max(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-1L), long1);
      
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = FastMath.scalb((float) long1, int0);
      assertFalse(float1 == float0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(float0 == float1);
      assertEquals((-5.877472E-39F), float1, 0.01F);
  }

  @Test
  public void test051()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      long long1 = 2230L;
      assertFalse(long1 == long0);
      
      int int0 = FastMath.getExponent((float) long0);
      assertFalse(long0 == long1);
      assertEquals((-127), int0);
      
      float float0 = FastMath.scalb((float) long1, int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(1.3106762E-35F, float0, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = 139;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      int int0 = 2600;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(2600, int1);
      
      float float0 = FastMath.scalb((float) int1, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test
  public void test054()  throws Throwable  {
      float float0 = (-2527.9365F);
      int int0 = (-277);
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(-0.0F, float1, 0.01F);
  }

  @Test
  public void test055()  throws Throwable  {
      int int0 = (-1220);
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test
  public void test056()  throws Throwable  {
      int int0 = 4573;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(4573, int1);
      
      float float0 = 0.0F;
      float float1 = FastMath.scalb(float0, int1);
      assertTrue(float0 == float1);
      assertTrue(int0 == int1);
      assertTrue(float1 == float0);
      assertTrue(int1 == int0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test057()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      int int0 = 3121;
      float float1 = FastMath.scalb(float0, int0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test058()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 142;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test059()  throws Throwable  {
      double double0 = (-3417.5);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      long long0 = FastMath.round(double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-9223372036854775808L), long0);
      
      int int0 = 0;
      float float0 = FastMath.scalb((float) long0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-9.223372E18F), float0, 0.01F);
  }

  @Test
  public void test060()  throws Throwable  {
      float float0 = 1590.0F;
      int int0 = (-1220);
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test061()  throws Throwable  {
      int int0 = (-3742);
      int int1 = 1152;
      double double0 = FastMath.scalb((double) int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test062()  throws Throwable  {
      double double0 = 1.4219324087E-313;
      double double1 = FastMath.nextAfter(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(1.4219324087E-313, double1, 0.01D);
      
      int int0 = 1385;
      double double2 = FastMath.scalb(double1, int0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.2006680313543652E104, double2, 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      double double0 = (-1165.47860091);
      int int0 = (-1316);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test064()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.ulp((double) float0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      double double1 = FastMath.hypot((double) float0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(4.9E-324, double1, 0.01D);
  }

  @Test
  public void test065()  throws Throwable  {
      double double0 = 1.4219324087E-313;
      double double1 = FastMath.nextAfter(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(1.4219324087E-313, double1, 0.01D);
      
      double double2 = FastMath.hypot(double0, double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals(2.01091609717E-313, double2, 0.01D);
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = 4.439791652732591E81;
      int int0 = (-1220);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2.4590529495539393E-286, double1, 0.01D);
  }

  @Test
  public void test067()  throws Throwable  {
      double double0 = (-970.70655039);
      int int0 = FastMath.getExponent(double0);
      assertEquals(9, int0);
      
      int int1 = 1152;
      assertFalse(int1 == int0);
      
      double double1 = FastMath.scalb((double) int0, int1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test068()  throws Throwable  {
      double double0 = (-651.962701063607);
      int int0 = 2666;
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test069()  throws Throwable  {
      double double0 = 1588.4727072590913;
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.38722591792296135, double1, 0.01D);
      
      int int0 = (-1220);
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test070()  throws Throwable  {
      int int0 = 52;
      int int1 = FastMath.abs(int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(52, int1);
      
      int int2 = (-2738);
      assertFalse(int2 == int1);
      
      double double0 = FastMath.scalb((double) int1, int2);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test071()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-1908);
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test072()  throws Throwable  {
      int int0 = 1025;
      double double0 = FastMath.sinh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.scalb(double0, int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test073()  throws Throwable  {
      double double0 = (-5022.9684);
      double double1 = FastMath.toDegrees(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals((-287794.8899475799), double1, 0.01D);
      
      double double2 = FastMath.log(double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      int int0 = (-1908);
      double double3 = FastMath.scalb(double2, int0);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test074()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = 1459.49614;
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.ulp(double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test076()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.abs(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test077()  throws Throwable  {
      float float0 = 1590.0F;
      float float1 = FastMath.nextUp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1590.0001F, float1, 0.01F);
      
      float float2 = FastMath.ulp(float1);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertEquals(1.2207031E-4F, float2, 0.01F);
  }

  @Test
  public void test078()  throws Throwable  {
      int int0 = 2600;
      float float0 = FastMath.ulp((float) int0);
      assertEquals(2.4414062E-4F, float0, 0.01F);
  }

  @Test
  public void test079()  throws Throwable  {
      int int0 = 2600;
      long long0 = (-1L);
      long long1 = FastMath.min(long0, (long) int0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-1L), long1);
      
      long long2 = FastMath.abs(long1);
      assertFalse(long1 == long2);
      assertTrue(long1 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long2);
      assertTrue(long0 == long1);
      assertEquals(1L, long2);
  }

  @Test
  public void test080()  throws Throwable  {
      int int0 = 4573;
      long long0 = FastMath.abs((long) int0);
      assertEquals(4573L, long0);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.asin(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.toDegrees(double1);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test082()  throws Throwable  {
      double double0 = 1459.49614;
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.toDegrees(double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test083()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.toRadians(double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      double double0 = 2442.1;
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.toRadians(double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test085()  throws Throwable  {
      double double0 = (-3417.5);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test086()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test087()  throws Throwable  {
      double double0 = 0.6366197723675814;
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.8806892354203566, double1, 0.01D);
  }

  @Test
  public void test088()  throws Throwable  {
      double double0 = 1.4219324087E-313;
      double double1 = FastMath.nextAfter(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(1.4219324087E-313, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test089()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.acos((double) float0);
      assertEquals(1.5707963267948966, double0, 0.01D);
  }

  @Test
  public void test090()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.acos((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      double double0 = (-2925.7469144);
      double double1 = FastMath.signum(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(3.141592653589793, double2, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      int int0 = (-277);
      double double0 = FastMath.acos((double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test093()  throws Throwable  {
      double double0 = 609.05264111292;
      double double1 = FastMath.asin(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test094()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = 1290.5898036;
      double double1 = FastMath.signum(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      int int0 = 52;
      int int1 = (-2738);
      double double0 = FastMath.atan2((double) int0, (double) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(3.1226029715917387, double0, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      double double0 = 0.0;
      long long0 = 1932L;
      double double1 = FastMath.ulp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, (double) long0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = 916.0319289;
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      int int0 = FastMath.getExponent(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(9, int0);
      
      double double2 = FastMath.atan2(double1, (double) int0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.tanh((double) float0);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = 0.0;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      float float0 = (-1175.183F);
      double double0 = 0.0;
      double double1 = FastMath.atan2((double) float0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      float float0 = (-1041.76F);
      double double0 = FastMath.log10((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      int int0 = (-945);
      int int1 = 649;
      float float1 = FastMath.scalb((float) int0, int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      
      double double1 = FastMath.atan2(double0, (double) float1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(3.141592653589793, double1, 0.01D);
  }

  @Test
  public void test102()  throws Throwable  {
      float float0 = (-1041.76F);
      int int0 = (-945);
      int int1 = 649;
      float float1 = FastMath.scalb(float0, int1);
      assertFalse(int1 == int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      
      double double0 = FastMath.atan2((double) int0, (double) float1);
      assertFalse(int1 == int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(int0 == int1);
      assertEquals((-3.141592653589793), double0, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      float float0 = (-1041.76F);
      double double0 = FastMath.cosh((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2((double) float0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      long long0 = (-2106L);
      double double0 = FastMath.log((double) long0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = 40.19140625;
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      int int0 = 8388608;
      double double2 = FastMath.scalb(double1, int0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.atan2(double0, double2);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = 0.0;
      float float0 = 1026.9412F;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, (double) float0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sqrt(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = (-5156.23064);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.atan2(double3, double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertTrue(double0 == double1);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertEquals(1.5707963267948966, double4, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      double double0 = (-3941.0);
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-3.141592653589793), double2, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      double double0 = FastMath.atan2((double) int0, (double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      float float0 = (-1041.76F);
      int int0 = 649;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      
      double double0 = 0.0;
      double double1 = FastMath.atan2(double0, (double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.141592653589793, double1, 0.01D);
  }

  @Test
  public void test110()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-945);
      double double0 = FastMath.cosh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2((double) float0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = (-462.9162);
      double double1 = 0.0;
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(3.141592653589793, double2, 0.01D);
  }

  @Test
  public void test112()  throws Throwable  {
      double double0 = (-7.800414592973399E-9);
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.5707963345953113, double1, 0.01D);
  }

  @Test
  public void test113()  throws Throwable  {
      double double0 = (-1323.54113);
      double double1 = FastMath.ulp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.2737367544323206E-13, double1, 0.01D);
      
      double double2 = (-1.7976931348623157E308);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-1.5707963267948966), double3, 0.01D);
  }

  @Test
  public void test114()  throws Throwable  {
      double double0 = (-970.70655039);
      int int0 = (-3727);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.atan(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test115()  throws Throwable  {
      double double0 = 1459.49614;
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test116()  throws Throwable  {
      float float0 = (-1719.5902F);
      double double0 = FastMath.IEEEremainder((double) float0, (double) float0);
      assertEquals(-0.0, double0, 0.01D);
      
      double double1 = FastMath.tan(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.tan((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = (-3356.63877259);
      double double1 = FastMath.atan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.5704984097301886), double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(2.9791706030108615E-4, double2, 0.01D);
  }

  @Test
  public void test119()  throws Throwable  {
      int int0 = 2617;
      double double0 = FastMath.sin((double) int0);
      assertEquals((-0.05329429892677633), double0, 0.01D);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test121()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sin(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = (-58.0549399);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-8.164132605952018E24), double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.005244896119640021, double2, 0.01D);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = 8.849812639395597E201;
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.6759266173763637), double1, 0.01D);
  }

  @Test
  public void test124()  throws Throwable  {
      double double0 = 1.3166970112139726E161;
      double double1 = FastMath.ceil(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(1.3166970112139726E161, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(0.0771887435292792, double2, 0.01D);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = (-8.0E298);
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.9991033281235678), double1, 0.01D);
  }

  @Test
  public void test126()  throws Throwable  {
      double double0 = (-5.04128025464686E71);
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-3.994054205242091), double1, 0.01D);
  }

  @Test
  public void test127()  throws Throwable  {
      double double0 = (-1762.5846699491199);
      double double1 = FastMath.log1p(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = 1.8014398509481984E16;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.copySign(double2, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertEquals(1.8014398509481984E16, double3, 0.01D);
      
      double double4 = FastMath.sin(double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertEquals(0.8973347529975926, double4, 0.01D);
  }

  @Test
  public void test128()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.9999876894265599), double1, 0.01D);
  }

  @Test
  public void test129()  throws Throwable  {
      double double0 = 1719.0490606681044;
      double double1 = FastMath.log(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.5574077246549023, double2, 0.01D);
  }

  @Test
  public void test130()  throws Throwable  {
      int int0 = 219;
      float float0 = FastMath.signum((float) int0);
      assertEquals(1.0F, float0, 0.01F);
      
      double double0 = FastMath.sin((double) float0);
      assertEquals(0.8414709848078965, double0, 0.01D);
  }

  @Test
  public void test131()  throws Throwable  {
      double double0 = (-1323.54113);
      double double1 = FastMath.ulp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.2737367544323206E-13, double1, 0.01D);
      
      int int0 = (-1);
      double double2 = FastMath.pow(double1, int0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(4.398046511104E12, double2, 0.01D);
  }

  @Test
  public void test132()  throws Throwable  {
      float float0 = 1590.0F;
      float float1 = FastMath.nextUp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1590.0001F, float1, 0.01F);
      
      int int0 = 0;
      double double0 = FastMath.pow((double) float1, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test133()  throws Throwable  {
      float float0 = (-1041.76F);
      float float1 = FastMath.min(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals((-1041.76F), float1, 0.01F);
      
      double double0 = (-480.0);
      double double1 = FastMath.pow((double) float1, double0);
      assertFalse(double0 == double1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test134()  throws Throwable  {
      int int0 = (-1565);
      double double0 = FastMath.pow((double) int0, (double) int0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test135()  throws Throwable  {
      double double0 = 0.007782140746712685;
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals((-4.855923818395628), double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test136()  throws Throwable  {
      double double0 = (-1159.4620666188);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-1.7976931348623157E308), double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test137()  throws Throwable  {
      int int0 = (-331);
      int int1 = FastMath.abs(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(331, int1);
      
      float float0 = (-1996.03F);
      double double0 = FastMath.sinh((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow(double0, (double) int1);
      assertTrue(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test138()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.log10((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      float float1 = (-1120.2297F);
      int int0 = FastMath.round(float1);
      assertFalse(float1 == float0);
      assertEquals((-1120), int0);
      
      double double1 = FastMath.pow(double0, (double) int0);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test139()  throws Throwable  {
      double double0 = (-3417.5);
      double double1 = FastMath.sinh(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test140()  throws Throwable  {
      double double0 = (-3417.5);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      long long0 = FastMath.round(double0);
      assertFalse(double0 == double1);
      assertEquals((-3417L), long0);
      
      double double2 = FastMath.pow(double1, (double) long0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test141()  throws Throwable  {
      float float0 = 4384.4976F;
      double double0 = FastMath.sin((double) float0);
      assertEquals((-0.919098256295611), double0, 0.01D);
      
      double double1 = FastMath.expm1((double) float0);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test142()  throws Throwable  {
      float float0 = 1548.5343F;
      double double0 = FastMath.hypot((double) float0, (double) float0);
      assertEquals(2189.9582113458496, double0, 0.01D);
      
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double0, double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test143()  throws Throwable  {
      double double0 = 2284.1327049581;
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test144()  throws Throwable  {
      float float0 = 4384.4976F;
      double double0 = FastMath.sin((double) float0);
      assertEquals((-0.919098256295611), double0, 0.01D);
      
      double double1 = FastMath.expm1((double) float0);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test145()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 916.0319289;
      int int0 = FastMath.getExponent(double1);
      assertFalse(double1 == double0);
      assertEquals(9, int0);
      
      double double2 = FastMath.pow(double0, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test146()  throws Throwable  {
      double double0 = (-753.3646703563926);
      int int0 = (-3739);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test147()  throws Throwable  {
      double double0 = (-970.70655039);
      int int0 = (-3742);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test148()  throws Throwable  {
      double double0 = (-970.70655039);
      int int0 = (-3727);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
      
      int int1 = FastMath.getExponent(double0);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertEquals(9, int1);
      
      double double2 = FastMath.pow(double1, (double) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test149()  throws Throwable  {
      long long0 = 0L;
      double double0 = FastMath.pow((double) long0, (double) long0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test150()  throws Throwable  {
      double double0 = 1457.0776792;
      double double1 = FastMath.log1p(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(7.284874189064338, double1, 0.01D);
  }

  @Test
  public void test151()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.log1p((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test152()  throws Throwable  {
      double double0 = (-2.260957518848075E-281);
      double double1 = FastMath.signum(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test153()  throws Throwable  {
      float float0 = (-74.861F);
      float float1 = 1.0F;
      double double0 = FastMath.pow((double) float1, (double) float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test154()  throws Throwable  {
      double double0 = 0.1666666505023083;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.1682361016844093, double1, 0.01D);
  }

  @Test
  public void test155()  throws Throwable  {
      long long0 = 2722L;
      float float0 = FastMath.signum((float) long0);
      assertEquals(1.0F, float0, 0.01F);
      
      double double0 = FastMath.acosh((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test156()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      
      double double0 = 0.6366197723675814;
      double double1 = FastMath.log((double) int1, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test157()  throws Throwable  {
      double double0 = 4.505432606253564E64;
      double double1 = FastMath.atan(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double1, 0.01D);
      
      int int0 = 0;
      float float0 = FastMath.ulp((float) int0);
      //  // Unstable assertion: assertEquals(0.0F, float0, 0.01F);
      
      double double2 = FastMath.nextAfter((double) float0, double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals(4.9E-324, double2, 0.01D);
      
      double double3 = FastMath.log(double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals((-744.4400719213812), double3, 0.01D);
  }

  @Test
  public void test158()  throws Throwable  {
      double double0 = (-3204.1);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log10(double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test159()  throws Throwable  {
      double double0 = 1.3166970112139726E161;
      double double1 = FastMath.ceil(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(1.3166970112139726E161, double1, 0.01D);
      
      double double2 = FastMath.asinh(double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test160()  throws Throwable  {
      double double0 = (-3.5997360512765566E-9);
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-3.599736044797507E-9), double1, 0.01D);
  }

  @Test
  public void test161()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.expm1((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test162()  throws Throwable  {
      float float0 = 1.4E-45F;
      double double0 = FastMath.pow((double) float0, (double) float0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test163()  throws Throwable  {
      double double0 = (-735.1428);
      double double1 = FastMath.exp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(5.3893E-320, double1, 0.01D);
  }

  @Test
  public void test164()  throws Throwable  {
      double double0 = (-1762.5846699491199);
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test165()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.signum(float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test166()  throws Throwable  {
      int int0 = (-3727);
      float float0 = FastMath.signum((float) int0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test167()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.signum((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test168()  throws Throwable  {
      double double0 = 0.003;
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0030000045000182253, double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.0030000135001073264, double2, 0.01D);
  }

  @Test
  public void test169()  throws Throwable  {
      double double0 = 948.7216693913808;
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.03933225661071854), double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-0.03935255813816745), double2, 0.01D);
  }

  @Test
  public void test170()  throws Throwable  {
      double double0 = (-6.4376298274983765E-273);
      double double1 = FastMath.atanh(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-6.4376298274983765E-273), double1, 0.01D);
  }

  @Test
  public void test171()  throws Throwable  {
      double double0 = 0.007782140746712685;
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.007782062198888829, double1, 0.01D);
  }

  @Test
  public void test172()  throws Throwable  {
      double double0 = (-0.09088450866185192);
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.09075985386836895), double1, 0.01D);
  }

  @Test
  public void test173()  throws Throwable  {
      double double0 = (-0.11810903405432503);
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.11783614517254834), double1, 0.01D);
  }

  @Test
  public void test174()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.asinh((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test175()  throws Throwable  {
      double double0 = 1588.4727072590913;
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.38722591792296135, double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.36896625498145086, double2, 0.01D);
  }

  @Test
  public void test176()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.tanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.99627207622075), double1, 0.01D);
  }

  @Test
  public void test177()  throws Throwable  {
      double double0 = (-1186.84);
      double double1 = FastMath.nextAfter(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1186.84), double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-1.0), double2, 0.01D);
  }

  @Test
  public void test178()  throws Throwable  {
      double double0 = (-4.068233003401932E-9);
      double double1 = FastMath.sinh(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-4.068233003401932E-9), double1, 0.01D);
  }

  @Test
  public void test179()  throws Throwable  {
      double double0 = 0.7214844226837158;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.7857274383103079, double1, 0.01D);
  }

  @Test
  public void test180()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log1p(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test181()  throws Throwable  {
      double double0 = 558.0;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0846532111914138E242, double1, 0.01D);
  }

  @Test
  public void test182()  throws Throwable  {
      double double0 = (-3.9986783938944604E-8);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0000000000000009, double1, 0.01D);
  }

  @Test
  public void test183()  throws Throwable  {
      double double0 = (-398.0672472439032);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.779017549716853E172, double1, 0.01D);
  }

  @Test
  public void test184()  throws Throwable  {
      long long0 = 0L;
      double double0 = FastMath.cosh((double) long0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test185()  throws Throwable  {
      int int0 = 649;
      double double0 = FastMath.cosh((double) int0);
      assertEquals(3.598228669466575E281, double0, 0.01D);
  }

  @Test
  public void test186()  throws Throwable  {
      int int0 = 4573;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(4573, int1);
      
      double double0 = FastMath.cosh((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test187()  throws Throwable  {
      double double0 = (-1186.84);
      double double1 = FastMath.nextAfter(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1186.84), double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-10.587596741931728), double2, 0.01D);
      
      double double3 = FastMath.cos(double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertEquals((-0.39675367901540703), double3, 0.01D);
  }

  @Test
  public void test188()  throws Throwable  {
      int int0 = 2600;
      double double0 = FastMath.nextUp((double) int0);
      assertEquals(2600.0000000000005, double0, 0.01D);
  }

  @Test
  public void test189()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.nextUp(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1.4E-45F, float1, 0.01F);
  }

  @Test
  public void test190()  throws Throwable  {
      double double0 = (-1.0953484767704112E226);
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.08712844546864267), double1, 0.01D);
      
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      double double2 = FastMath.IEEEremainder(double1, (double) int0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-0.08712844546864267), double2, 0.01D);
  }

  @Test
  public void test191()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
  }
}
