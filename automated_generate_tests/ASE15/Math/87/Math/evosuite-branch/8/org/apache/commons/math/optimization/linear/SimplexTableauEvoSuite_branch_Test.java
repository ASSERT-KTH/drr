/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:28:59 GMT 2014
 */

package org.apache.commons.math.optimization.linear;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.LinkedList;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.linear.RealVectorImpl;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexTableau;



import org.junit.runner.RunWith;


public class SimplexTableauEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1.5049307883111869;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, doubleArray0);
      assertNotNull(realVectorImpl0);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals(1.5049307883111869, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType1 = GoalType.MINIMIZE;
      assertNotSame(goalType1, goalType0);
      
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, boolean0, double0);
      assertNotSame(goalType1, goalType0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals(1.5049307883111869, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(goalType0, goalType1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(goalType0.equals((Object)goalType1));
      assertNotNull(simplexTableau1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals(1.5049307883111869, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(goalType0, goalType1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(goalType1, goalType0);
      assertFalse(boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(goalType0.equals((Object)goalType1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals(1.5049307883111869, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, doubleArray0);
      assertNotNull(realVectorImpl0);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(20, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = true;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, doubleArray0[6]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(20, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(20, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = 4.777867418807926;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertNotNull(simplexTableau1);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(20, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertFalse(boolean1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean1 == boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0 == boolean1);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(20, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, doubleArray0);
      assertNotNull(realVectorImpl0);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = true;
      GoalType goalType0 = GoalType.MINIMIZE;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, doubleArray0[6]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      
      Relationship relationship0 = Relationship.EQ;
      double double0 = 0.0;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) realVectorImpl0, relationship0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList1.offer(linearConstraint0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(1, linkedList1.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, boolean0, doubleArray0[0]);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean0 == boolean1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(simplexTableau0);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(1, linkedList1.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getHeight();
      assertNotSame(linkedList1, linkedList0);
      assertEquals(3, int0);
      assertTrue(boolean0 == boolean1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(1, linkedList1.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean0 == boolean1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(simplexTableau1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(1, linkedList1.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = simplexTableau0.equals((Object) simplexTableau1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(boolean2);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(1, linkedList1.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, doubleArray0);
      assertNotNull(realVectorImpl0);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = true;
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, doubleArray0[6]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals("[]", linkedList1.toString());
      
      Relationship relationship0 = Relationship.LEQ;
      double double0 = 0.0;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) realVectorImpl0, relationship0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList1.offer(linearConstraint0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, boolean0, doubleArray0[0]);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(boolean0 == boolean1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList1.size());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getHeight();
      assertNotSame(linkedList1, linkedList0);
      assertEquals(2, int0);
      assertTrue(boolean0 == boolean1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertTrue(boolean0 == boolean1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertNotNull(simplexTableau1);
      assertEquals(1, linkedList1.size());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = simplexTableau0.equals((Object) simplexTableau1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertFalse(boolean2);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertEquals(1, linkedList1.size());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(18, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = (-1324.621054392);
      GoalType goalType0 = GoalType.MAXIMIZE;
      double[] doubleArray0 = new double[13];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1324.621054392), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals((-1324.621054392), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = false;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, double0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertNotNull(simplexTableau1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals((-1324.621054392), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = simplexTableau0.equals((Object) simplexTableau1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertFalse(boolean2);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals((-1324.621054392), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = (-1324.621054392);
      GoalType goalType0 = GoalType.MAXIMIZE;
      double[] doubleArray0 = new double[13];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1324.621054392), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals((-1324.621054392), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertNotNull(simplexTableau1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals((-1324.621054392), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertTrue(boolean1);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals((-1324.621054392), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test06()  throws Throwable  {
      LinearObjectiveFunction linearObjectiveFunction0 = null;
      double[] doubleArray0 = new double[10];
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction1);
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) linearObjectiveFunction0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-371.21909247857405);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      simplexTableau0.divideRow(int0, double0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-1324.621054392);
      GoalType goalType0 = GoalType.MAXIMIZE;
      double[] doubleArray0 = new double[13];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1324.621054392), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals((-1324.621054392), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.discardArtificialVariables();
      assertEquals((-1324.621054392), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 10.041760555199966;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(10.041760555199966, linearConstraint0.getValue(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertTrue(boolean0);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(10.041760555199966, linearConstraint0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(10.041760555199966, linearConstraint0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.discardArtificialVariables();
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(10.041760555199966, linearConstraint0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 103.27;
      doubleArray0[0] = double0;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, double0);
      //  // Unstable assertion: assertNotNull(linearConstraint0);
      //  // Unstable assertion: assertEquals(103.27, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertArrayEquals(new double[] {103.27, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals(103.27, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertArrayEquals(new double[] {103.27, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertEquals(103.27, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {103.27, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertEquals(103.27, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(103.27, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertArrayEquals(new double[] {103.27, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 10.041760555199966;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(10.041760555199966, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(10.041760555199966, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertEquals(10.041760555199966, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertTrue(boolean0 == boolean1);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(2, linkedList0.size());
      assertEquals(10.041760555199966, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1.5049307883111869;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, doubleArray0);
      assertNotNull(realVectorImpl0);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals(1.5049307883111869, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = 104.48254588595279;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) realVectorImpl0, double1, relationship0, (RealVector) realVectorImpl0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals((-102.9776150976416), linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      linkedList0.addFirst(linearConstraint0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals((-102.9776150976416), linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertFalse(double0 == double1);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals(1.5049307883111869, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 10.041760555199966;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(10.041760555199966, linearConstraint0.getValue(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertTrue(boolean0);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(10.041760555199966, linearConstraint0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(10.041760555199966, linearConstraint0.getValue(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumArtificialVariables();
      assertEquals(1, int0);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(10.041760555199966, linearConstraint0.getValue(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.hashCode();
      assertEquals(1242, int0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-371.21909247857405);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      simplexTableau0.setEntry(int0, int0, double0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, doubleArray0);
      assertNotNull(realVectorImpl0);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(20, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = true;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, doubleArray0[6]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(20, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(20, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumSlackVariables();
      assertEquals(0, int0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(20, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = simplexTableau0.getData();
      assertNotNull(doubleArray1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, doubleArray0);
      assertNotNull(realVectorImpl0);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(20, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = true;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) realVectorImpl0, doubleArray0[6]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(20, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(20, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumDecisionVariables();
      assertEquals(20, int0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(20, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 103.27;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(103.27, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertTrue(boolean0);
      assertEquals(103.27, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(103.27, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(realPointValuePair0);
      assertEquals(0.0, realPointValuePair0.getValue(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(103.27, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }
}
