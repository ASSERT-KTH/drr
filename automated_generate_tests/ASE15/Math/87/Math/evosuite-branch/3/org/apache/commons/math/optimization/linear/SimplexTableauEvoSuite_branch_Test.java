/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:37:23 GMT 2014
 */

package org.apache.commons.math.optimization.linear;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.LinkedList;
import org.apache.commons.math.linear.MatrixIndexException;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.linear.RealVectorImpl;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexTableau;



import org.junit.runner.RunWith;


public class SimplexTableauEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 2.593210425881301;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(2.593210425881301, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(2.593210425881301, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType1 = GoalType.MAXIMIZE;
      assertNotSame(goalType1, goalType0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(goalType1.equals((Object)goalType0));
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(goalType1, goalType0);
      assertEquals(2.593210425881301, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(goalType0.equals((Object)goalType1));
      assertFalse(boolean1 == boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(goalType1.equals((Object)goalType0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertNotSame(goalType0, goalType1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(goalType1, goalType0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertEquals(2.593210425881301, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-2.9530209172564086);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-2.9530209172564086), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals((-2.9530209172564086), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertEquals((-2.9530209172564086), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(boolean1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertEquals((-2.9530209172564086), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      double[] doubleArray0 = new double[2];
      double double0 = 15.47893756004154;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = 2268;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(int0, double0);
      assertNotNull(realVectorImpl0);
      assertEquals(35106.23038617416, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(2268, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(737.1615481805821, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction((RealVector) realVectorImpl0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertNotNull(linearObjectiveFunction1);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertEquals(35106.23038617416, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(2268, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(737.1615481805821, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertEquals(35106.23038617416, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(2268, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(737.1615481805821, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertFalse(boolean1);
      assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(35106.23038617416, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(2268, realVectorImpl0.getDimension());
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(737.1615481805821, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 10.776147097251132;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(10.776147097251132, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(10.776147097251132, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertNotNull(simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(10.776147097251132, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(10.776147097251132, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(simplexTableau2.equals((Object)simplexTableau1));
      assertFalse(simplexTableau2.equals((Object)simplexTableau0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau2));
      assertFalse(simplexTableau0.equals((Object)simplexTableau2));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertNotNull(simplexTableau2);
      assertNotSame(simplexTableau2, simplexTableau1);
      assertNotSame(simplexTableau2, simplexTableau0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau1, simplexTableau2);
      assertNotSame(simplexTableau0, simplexTableau2);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(10.776147097251132, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      boolean boolean2 = simplexTableau2.equals((Object) simplexTableau1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(simplexTableau2.equals((Object)simplexTableau1));
      assertFalse(simplexTableau2.equals((Object)simplexTableau0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau2));
      assertFalse(simplexTableau0.equals((Object)simplexTableau2));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean2);
      assertNotSame(simplexTableau2, simplexTableau1);
      assertNotSame(simplexTableau2, simplexTableau0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau1, simplexTableau2);
      assertNotSame(simplexTableau0, simplexTableau2);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(10.776147097251132, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      Object object0 = null;
      boolean boolean1 = simplexTableau0.equals(object0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) openMapRealVector0, (double) int0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      simplexTableau0.divideRow(int0, int0);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1247.2720416997367;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1247.2720416997367, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, double0, relationship0, doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0 == boolean1);
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList0.size());
      assertEquals(1247.2720416997367, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0 == boolean1);
      assertNotNull(realPointValuePair0);
      assertEquals(1247.2720416997367, realPointValuePair0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(1247.2720416997367, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-2.9530209172564086);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-2.9530209172564086), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-2.9530209172564086), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      simplexTableau0.discardArtificialVariables();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-2.9530209172564086), linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      double double0 = 1217.01868495284;
      doubleArray0[1] = double0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 1217.01868495284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertEquals(1217.01868495284, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      boolean boolean0 = false;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = (-1477.9467421849617);
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, boolean0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 1217.01868495284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotNull(realVectorImpl0);
      //  // Unstable assertion: assertEquals(1217.01868495284, realVectorImpl0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isInfinite());
      //  // Unstable assertion: assertEquals(16, realVectorImpl0.getDimension());
      //  // Unstable assertion: assertEquals(1217.01868495284, realVectorImpl0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isNaN());
      //  // Unstable assertion: assertEquals(1.993963413426733E7, realVectorImpl0.getLInfNorm(), 0.01D);
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) realVectorImpl0, relationship0, double1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 1217.01868495284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertNotNull(linearConstraint0);
      //  // Unstable assertion: assertEquals((-1477.9467421849617), linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(1217.01868495284, realVectorImpl0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isInfinite());
      //  // Unstable assertion: assertEquals(16, realVectorImpl0.getDimension());
      //  // Unstable assertion: assertEquals(1217.01868495284, realVectorImpl0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isNaN());
      //  // Unstable assertion: assertEquals(1.993963413426733E7, realVectorImpl0.getLInfNorm(), 0.01D);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 1217.01868495284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertEquals((-1477.9467421849617), linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(1217.01868495284, realVectorImpl0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isInfinite());
      //  // Unstable assertion: assertEquals(16, realVectorImpl0.getDimension());
      //  // Unstable assertion: assertEquals(1217.01868495284, realVectorImpl0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, realVectorImpl0.isNaN());
      //  // Unstable assertion: assertEquals(1.993963413426733E7, realVectorImpl0.getLInfNorm(), 0.01D);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 1217.01868495284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertEquals(1217.01868495284, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      double double0 = 1217.01868495284;
      doubleArray0[1] = double0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 1217.01868495284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1217.01868495284, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      boolean boolean0 = false;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0, 1217.01868495284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realVectorImpl0);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(1217.01868495284, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals(1217.01868495284, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(1.993963413426733E7, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) realVectorImpl0, relationship0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 1217.01868495284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearConstraint0);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(1217.01868495284, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals(1217.01868495284, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(1.993963413426733E7, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1217.01868495284, linearConstraint0.getValue(), 0.01D);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 1217.01868495284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(1217.01868495284, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals(1217.01868495284, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(1.993963413426733E7, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1217.01868495284, linearConstraint0.getValue(), 0.01D);
      
      boolean boolean2 = linkedList0.add(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 1217.01868495284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(1217.01868495284, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals(1217.01868495284, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(1.993963413426733E7, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(2, linkedList0.size());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1217.01868495284, linearConstraint0.getValue(), 0.01D);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 1217.01868495284, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertNotNull(simplexTableau0);
      assertEquals(2, linkedList0.size());
      assertEquals(1217.01868495284, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      double double0 = 1217.01868495284;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1217.01868495284, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      boolean boolean0 = false;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[1], relationship0, doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearConstraint0);
      assertEquals(1217.01868495284, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(1217.01868495284, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0 == boolean1);
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList0.size());
      assertEquals(1217.01868495284, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1852.2353;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1852.2353, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, double0, relationship0, doubleArray0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals((-1852.2353), linearConstraint0.getValue(), 0.01D);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals((-1852.2353), linearConstraint0.getValue(), 0.01D);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0 == boolean1);
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList0.size());
      assertEquals(1852.2353, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1852.2353;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1852.2353, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(1852.2353, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      int int0 = simplexTableau0.getNumArtificialVariables();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(1852.2353, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1247.2720416997367;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1247.2720416997367, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(1247.2720416997367, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      int int0 = simplexTableau0.hashCode();
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1225, int0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(1247.2720416997367, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 10.776147097251132;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(10.776147097251132, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(10.776147097251132, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      int int0 = 2993;
      // Undeclared exception!
      try {
        simplexTableau0.setEntry(int0, int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no entry at indices (2,993, 2,993) in a 1x8 matrix
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 2.593210425881301;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(2.593210425881301, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(2.593210425881301, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = simplexTableau0.getNumSlackVariables();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertEquals(2.593210425881301, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-2.9530209172564086);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-2.9530209172564086), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-2.9530209172564086), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      double[][] doubleArray1 = simplexTableau0.getData();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-2.9530209172564086), linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) openMapRealVector0, (double) int0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      int int1 = simplexTableau0.getNumDecisionVariables();
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      double double0 = 1217.01868495284;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1217.01868495284, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      boolean boolean0 = false;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realVectorImpl0);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) realVectorImpl0, relationship0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(16, realVectorImpl0.getDimension());
      assertEquals(0.0, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isInfinite());
      assertEquals(0.0, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(0.0, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(1, linkedList0.size());
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0 == boolean1);
      assertNotNull(simplexTableau0);
      assertEquals(1217.01868495284, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      
      simplexTableau0.discardArtificialVariables();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0 == boolean1);
      assertEquals(1217.01868495284, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
  }
}
