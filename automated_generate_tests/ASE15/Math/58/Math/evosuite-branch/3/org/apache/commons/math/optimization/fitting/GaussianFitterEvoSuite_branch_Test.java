/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:34:19 GMT 2014
 */

package org.apache.commons.math.optimization.fitting;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.exception.NullArgumentException;
import org.apache.commons.math.exception.NumberIsTooSmallException;
import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
import org.apache.commons.math.optimization.fitting.GaussianFitter;
import org.apache.commons.math.optimization.fitting.WeightedObservedPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class GaussianFitterEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[6];
      double double0 = 0.65;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertNotNull(weightedObservedPoint0);
      assertEquals(0.65, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getWeight(), 0.01D);
      
      double double1 = 2283.9842024675795;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      assertNotNull(weightedObservedPointArray0[1]);
      assertEquals(0.65, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[1].getWeight(), 0.01D);
      
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double1, double0, double0);
      assertNotNull(weightedObservedPoint1);
      assertEquals(2283.9842024675795, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPoint1.getY(), 0.01D);
      assertEquals(0.65, weightedObservedPoint1.getX(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double0 == double1);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      
      weightedObservedPointArray0[2] = weightedObservedPoint1;
      assertNotNull(weightedObservedPointArray0[2]);
      assertEquals(2283.9842024675795, weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals(2283.9842024675795, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPoint1.getY(), 0.01D);
      assertEquals(0.65, weightedObservedPoint1.getX(), 0.01D);
      
      weightedObservedPointArray0[4] = weightedObservedPointArray0[1];
      assertNotNull(weightedObservedPointArray0[4]);
      assertEquals(0.65, weightedObservedPointArray0[4].getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[4].getX(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[4].getY(), 0.01D);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];
      double double0 = 4.868767737057425;
      double double1 = (-4419.469518971924);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double1);
      assertNotNull(weightedObservedPoint0);
      assertEquals((-4419.469518971924), weightedObservedPoint0.getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint0.getWeight(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertNotNull(weightedObservedPointArray0[0]);
      assertEquals((-4419.469518971924), weightedObservedPoint0.getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals((-4419.469518971924), weightedObservedPointArray0[0].getY(), 0.01D);
      
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double1, double0, double0);
      assertNotNull(weightedObservedPoint1);
      assertEquals((-4419.469518971924), weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint1.getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint1.getX(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      
      weightedObservedPointArray0[3] = weightedObservedPoint1;
      assertNotNull(weightedObservedPointArray0[3]);
      assertEquals((-4419.469518971924), weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[3].getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[3].getX(), 0.01D);
      assertEquals((-4419.469518971924), weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint1.getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint1.getX(), 0.01D);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];
      double double0 = 4.868767737057425;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertNotNull(weightedObservedPoint0);
      assertEquals(4.868767737057425, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint0.getX(), 0.01D);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertNotNull(weightedObservedPointArray0[0]);
      assertEquals(4.868767737057425, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[0].getWeight(), 0.01D);
      
      weightedObservedPointArray0[1] = weightedObservedPointArray0[0];
      assertNotNull(weightedObservedPointArray0[1]);
      assertEquals(4.868767737057425, weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[1].getWeight(), 0.01D);
      
      double double1 = 22.75769035337351;
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      assertNotNull(weightedObservedPointArray0[2]);
      assertEquals(4.868767737057425, weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint0.getX(), 0.01D);
      
      weightedObservedPointArray0[3] = weightedObservedPointArray0[1];
      assertNotNull(weightedObservedPointArray0[3]);
      assertEquals(4.868767737057425, weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[3].getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[3].getX(), 0.01D);
      
      weightedObservedPointArray0[4] = weightedObservedPointArray0[2];
      assertNotNull(weightedObservedPointArray0[4]);
      assertEquals(4.868767737057425, weightedObservedPointArray0[4].getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[4].getWeight(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[4].getX(), 0.01D);
      
      double double2 = 969.9859408012213;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double0, double2, double1);
      assertNotNull(weightedObservedPoint1);
      assertEquals(4.868767737057425, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(969.9859408012213, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(22.75769035337351, weightedObservedPoint1.getY(), 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      
      weightedObservedPointArray0[5] = weightedObservedPoint1;
      assertNotNull(weightedObservedPointArray0[5]);
      assertEquals(22.75769035337351, weightedObservedPointArray0[5].getY(), 0.01D);
      assertEquals(969.9859408012213, weightedObservedPointArray0[5].getX(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[5].getWeight(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(969.9859408012213, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(22.75769035337351, weightedObservedPoint1.getY(), 0.01D);
      
      weightedObservedPointArray0[6] = weightedObservedPointArray0[2];
      assertNotNull(weightedObservedPointArray0[6]);
      assertEquals(4.868767737057425, weightedObservedPointArray0[6].getWeight(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[6].getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[6].getX(), 0.01D);
      
      weightedObservedPointArray0[7] = weightedObservedPointArray0[6];
      assertNotNull(weightedObservedPointArray0[7]);
      assertEquals(4.868767737057425, weightedObservedPointArray0[7].getWeight(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[7].getY(), 0.01D);
      assertEquals(4.868767737057425, weightedObservedPointArray0[7].getX(), 0.01D);
      
      weightedObservedPointArray0[8] = weightedObservedPointArray0[5];
      assertNotNull(weightedObservedPointArray0[8]);
      assertEquals(4.868767737057425, weightedObservedPointArray0[8].getWeight(), 0.01D);
      assertEquals(22.75769035337351, weightedObservedPointArray0[8].getY(), 0.01D);
      assertEquals(969.9859408012213, weightedObservedPointArray0[8].getX(), 0.01D);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {22.75769035337351, 969.9859408012213, 409.84752745786966}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[6];
      double double0 = 0.65;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertNotNull(weightedObservedPoint0);
      assertEquals(0.65, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getX(), 0.01D);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertNotNull(weightedObservedPointArray0[0]);
      assertEquals(0.65, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getX(), 0.01D);
      
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      assertNotNull(weightedObservedPointArray0[1]);
      assertEquals(0.65, weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getX(), 0.01D);
      
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      assertNotNull(weightedObservedPointArray0[2]);
      assertEquals(0.65, weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getX(), 0.01D);
      
      double double1 = Double.NEGATIVE_INFINITY;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double0, double0, double1);
      assertNotNull(weightedObservedPoint1);
      assertEquals(0.65, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(0.65, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, weightedObservedPoint1.getY(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double1 == double0);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      
      weightedObservedPointArray0[3] = weightedObservedPoint1;
      assertNotNull(weightedObservedPointArray0[3]);
      assertEquals(Double.NEGATIVE_INFINITY, weightedObservedPointArray0[3].getY(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[3].getX(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(0.65, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, weightedObservedPoint1.getY(), 0.01D);
      
      weightedObservedPointArray0[4] = weightedObservedPointArray0[1];
      assertNotNull(weightedObservedPointArray0[4]);
      assertEquals(0.65, weightedObservedPointArray0[4].getY(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[4].getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[4].getX(), 0.01D);
      
      weightedObservedPointArray0[5] = weightedObservedPointArray0[3];
      assertNotNull(weightedObservedPointArray0[5]);
      assertEquals(0.65, weightedObservedPointArray0[5].getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[5].getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, weightedObservedPointArray0[5].getY(), 0.01D);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {0.65, 0.65, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[3];
      double double0 = (-0.7332653820750871);
      long long0 = 3952090531849364568L;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((double) long0, double0, (double) long0);
      assertNotNull(weightedObservedPoint0);
      assertEquals(3.9520905318493645E18, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(3.9520905318493645E18, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals((-0.7332653820750871), weightedObservedPoint0.getX(), 0.01D);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertNotNull(weightedObservedPointArray0[0]);
      assertEquals(3.9520905318493645E18, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals((-0.7332653820750871), weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(3.9520905318493645E18, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(3.9520905318493645E18, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(3.9520905318493645E18, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals((-0.7332653820750871), weightedObservedPoint0.getX(), 0.01D);
      
      weightedObservedPointArray0[1] = weightedObservedPointArray0[0];
      assertNotNull(weightedObservedPointArray0[1]);
      assertEquals((-0.7332653820750871), weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals(3.9520905318493645E18, weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals(3.9520905318493645E18, weightedObservedPointArray0[1].getWeight(), 0.01D);
      
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((double) long0, double0, double0);
      assertNotNull(weightedObservedPoint1);
      assertEquals(3.9520905318493645E18, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals((-0.7332653820750871), weightedObservedPoint1.getY(), 0.01D);
      assertEquals((-0.7332653820750871), weightedObservedPoint1.getX(), 0.01D);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      
      weightedObservedPointArray0[2] = weightedObservedPoint1;
      assertNotNull(weightedObservedPointArray0[2]);
      assertEquals(3.9520905318493645E18, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals((-0.7332653820750871), weightedObservedPoint1.getY(), 0.01D);
      assertEquals((-0.7332653820750871), weightedObservedPoint1.getX(), 0.01D);
      assertEquals(3.9520905318493645E18, weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals((-0.7332653820750871), weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals((-0.7332653820750871), weightedObservedPointArray0[2].getY(), 0.01D);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {3.9520905318493645E18, (-0.7332653820750871), 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[6];
      double double0 = 0.65;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertNotNull(weightedObservedPoint0);
      assertEquals(0.65, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getY(), 0.01D);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertNotNull(weightedObservedPointArray0[0]);
      assertEquals(0.65, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getY(), 0.01D);
      
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      assertNotNull(weightedObservedPointArray0[1]);
      assertEquals(0.65, weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(0.65, weightedObservedPoint0.getY(), 0.01D);
      
      weightedObservedPointArray0[2] = weightedObservedPointArray0[0];
      assertNotNull(weightedObservedPointArray0[2]);
      assertEquals(0.65, weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[2].getX(), 0.01D);
      
      weightedObservedPointArray0[3] = weightedObservedPointArray0[2];
      assertNotNull(weightedObservedPointArray0[3]);
      assertEquals(0.65, weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[3].getY(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[3].getX(), 0.01D);
      
      weightedObservedPointArray0[4] = weightedObservedPointArray0[1];
      assertNotNull(weightedObservedPointArray0[4]);
      assertEquals(0.65, weightedObservedPointArray0[4].getX(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[4].getY(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[4].getWeight(), 0.01D);
      
      weightedObservedPointArray0[5] = weightedObservedPointArray0[3];
      assertNotNull(weightedObservedPointArray0[5]);
      assertEquals(0.65, weightedObservedPointArray0[5].getWeight(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[5].getY(), 0.01D);
      assertEquals(0.65, weightedObservedPointArray0[5].getX(), 0.01D);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {0.65, 0.65, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      double[] doubleArray1 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {0.65, 0.65, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test6()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = null;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = null;
      try {
        gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null is not allowed: input array
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = null;
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);
      assertNotNull(gaussianFitter0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = gaussianFitter0.fit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (3)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = null;
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);
      assertNotNull(gaussianFitter0);
      
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try {
        double[] doubleArray1 = gaussianFitter0.fit(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
