/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:03:16 GMT 2014
 */

package org.apache.commons.math.optimization.fitting;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.exception.NullArgumentException;
import org.apache.commons.math.exception.NumberIsTooSmallException;
import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
import org.apache.commons.math.optimization.fitting.GaussianFitter;
import org.apache.commons.math.optimization.fitting.WeightedObservedPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class GaussianFitterEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[8];
      double double0 = (-508.4694460046359);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertEquals((-508.4694460046359), weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPoint0.getX(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPoint0.getY(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      assertEquals((-508.4694460046359), weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPoint0.getX(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPoint0.getY(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPointArray0[1].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[1]);
      
      double double1 = (-421.10222);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double1, double0, double0);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertEquals((-421.10222), weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPoint1.getX(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPoint1.getY(), 0.01D);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      weightedObservedPointArray0[4] = weightedObservedPoint1;
      assertEquals((-421.10222), weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPoint1.getX(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPoint1.getY(), 0.01D);
      assertEquals((-421.10222), weightedObservedPointArray0[4].getWeight(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPointArray0[4].getY(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPointArray0[4].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[4]);
      
      weightedObservedPointArray0[7] = weightedObservedPointArray0[1];
      assertEquals((-508.4694460046359), weightedObservedPointArray0[7].getY(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPointArray0[7].getWeight(), 0.01D);
      assertEquals((-508.4694460046359), weightedObservedPointArray0[7].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[7]);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      long long0 = (-901L);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((double) long0, (double) long0, (double) long0);
      assertEquals((-901.0), weightedObservedPoint0.getY(), 0.01D);
      assertEquals((-901.0), weightedObservedPoint0.getX(), 0.01D);
      assertEquals((-901.0), weightedObservedPoint0.getWeight(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals((-901.0), weightedObservedPoint0.getY(), 0.01D);
      assertEquals((-901.0), weightedObservedPoint0.getX(), 0.01D);
      assertEquals((-901.0), weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[0].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      assertEquals((-901.0), weightedObservedPoint0.getY(), 0.01D);
      assertEquals((-901.0), weightedObservedPoint0.getX(), 0.01D);
      assertEquals((-901.0), weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[1].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[1]);
      
      weightedObservedPointArray0[2] = weightedObservedPointArray0[1];
      assertEquals((-901.0), weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[2]);
      
      weightedObservedPointArray0[3] = weightedObservedPointArray0[2];
      assertEquals((-901.0), weightedObservedPointArray0[3].getY(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[3].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[3]);
      
      double double0 = Double.POSITIVE_INFINITY;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((double) long0, (double) long0, double0);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertEquals((-901.0), weightedObservedPoint1.getX(), 0.01D);
      assertEquals((-901.0), weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, weightedObservedPoint1.getY(), 0.01D);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[4] = weightedObservedPoint0;
      assertEquals((-901.0), weightedObservedPoint0.getY(), 0.01D);
      assertEquals((-901.0), weightedObservedPoint0.getX(), 0.01D);
      assertEquals((-901.0), weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[4].getWeight(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[4].getX(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[4].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[4]);
      
      weightedObservedPointArray0[5] = weightedObservedPointArray0[3];
      assertEquals((-901.0), weightedObservedPointArray0[5].getY(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[5].getX(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[5].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[5]);
      
      weightedObservedPointArray0[6] = weightedObservedPointArray0[4];
      assertEquals((-901.0), weightedObservedPointArray0[6].getWeight(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[6].getX(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[6].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[6]);
      
      weightedObservedPointArray0[7] = weightedObservedPointArray0[4];
      assertEquals((-901.0), weightedObservedPointArray0[7].getWeight(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[7].getX(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[7].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[7]);
      
      weightedObservedPointArray0[8] = weightedObservedPoint1;
      assertEquals((-901.0), weightedObservedPointArray0[8].getWeight(), 0.01D);
      assertEquals((-901.0), weightedObservedPointArray0[8].getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, weightedObservedPointArray0[8].getY(), 0.01D);
      assertEquals((-901.0), weightedObservedPoint1.getX(), 0.01D);
      assertEquals((-901.0), weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, weightedObservedPoint1.getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[8]);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, (-901.0), 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      double double0 = (-1.0707317921659143);
      double double1 = (-2187.298538371658);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double1, double1);
      assertEquals((-1.0707317921659143), weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals((-2187.298538371658), weightedObservedPoint0.getX(), 0.01D);
      assertEquals((-2187.298538371658), weightedObservedPoint0.getY(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals((-2187.298538371658), weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals((-2187.298538371658), weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals((-1.0707317921659143), weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals((-1.0707317921659143), weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals((-2187.298538371658), weightedObservedPoint0.getX(), 0.01D);
      assertEquals((-2187.298538371658), weightedObservedPoint0.getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double0, double0, double0);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertEquals((-1.0707317921659143), weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals((-1.0707317921659143), weightedObservedPoint1.getX(), 0.01D);
      assertEquals((-1.0707317921659143), weightedObservedPoint1.getY(), 0.01D);
      assertNotNull(weightedObservedPoint1);
      assertFalse(double0 == double1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      assertEquals((-1.0707317921659143), weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals((-1.0707317921659143), weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals((-1.0707317921659143), weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals((-1.0707317921659143), weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals((-1.0707317921659143), weightedObservedPoint1.getX(), 0.01D);
      assertEquals((-1.0707317921659143), weightedObservedPoint1.getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[1]);
      
      double double2 = weightedObservedPointArray0[1].getWeight();
      assertEquals((-1.0707317921659143), double2, 0.01D);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      
      weightedObservedPointArray0[2] = weightedObservedPointArray0[0];
      assertEquals((-2187.298538371658), weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals((-2187.298538371658), weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals((-1.0707317921659143), weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray0[2]);
      
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(double1, double1, double2);
      assertNotSame(weightedObservedPoint2, weightedObservedPoint1);
      assertNotSame(weightedObservedPoint2, weightedObservedPoint0);
      assertEquals((-2187.298538371658), weightedObservedPoint2.getWeight(), 0.01D);
      assertEquals((-2187.298538371658), weightedObservedPoint2.getX(), 0.01D);
      assertEquals((-1.0707317921659143), weightedObservedPoint2.getY(), 0.01D);
      assertNotNull(weightedObservedPoint2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      
      weightedObservedPointArray0[3] = weightedObservedPoint2;
      assertEquals((-2187.298538371658), weightedObservedPoint2.getWeight(), 0.01D);
      assertEquals((-2187.298538371658), weightedObservedPoint2.getX(), 0.01D);
      assertEquals((-1.0707317921659143), weightedObservedPoint2.getY(), 0.01D);
      assertEquals((-2187.298538371658), weightedObservedPointArray0[3].getX(), 0.01D);
      assertEquals((-2187.298538371658), weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals((-1.0707317921659143), weightedObservedPointArray0[3].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[3]);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {(-1.0707317921659143), (-2187.298538371658), 928.4054682619108}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      double double0 = 3301.409139983;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertEquals(3301.409139983, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint0.getY(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals(3301.409139983, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint0.getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      weightedObservedPointArray0[1] = weightedObservedPointArray0[0];
      assertEquals(3301.409139983, weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray0[1].getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[1]);
      
      double double1 = 2435.486055910334;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double0, double0, double1);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertEquals(3301.409139983, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(2435.486055910334, weightedObservedPoint1.getY(), 0.01D);
      assertNotNull(weightedObservedPoint1);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      weightedObservedPointArray0[2] = weightedObservedPoint1;
      assertEquals(3301.409139983, weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals(2435.486055910334, weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(2435.486055910334, weightedObservedPoint1.getY(), 0.01D);
      assertNotNull(weightedObservedPointArray0[2]);
      
      weightedObservedPointArray0[3] = weightedObservedPointArray0[1];
      assertEquals(3301.409139983, weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray0[3].getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray0[3].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[3]);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {3301.409139983, 3301.409139983, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      double double0 = 3301.409139983;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, double0);
      assertEquals(3301.409139983, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint0.getWeight(), 0.01D);
      assertNotNull(weightedObservedPoint0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertEquals(3301.409139983, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray0[0].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray0[0]);
      
      WeightedObservedPoint[] weightedObservedPointArray1 = new WeightedObservedPoint[7];
      assertNotSame(weightedObservedPointArray1, weightedObservedPointArray0);
      assertFalse(weightedObservedPointArray1.equals((Object)weightedObservedPointArray0));
      
      weightedObservedPointArray1[0] = weightedObservedPointArray0[0];
      assertEquals(3301.409139983, weightedObservedPointArray1[0].getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[0].getX(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[0].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray1[0]);
      
      weightedObservedPointArray1[1] = weightedObservedPointArray1[0];
      assertEquals(3301.409139983, weightedObservedPointArray1[1].getWeight(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[1].getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[1].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray1[1]);
      
      weightedObservedPointArray1[2] = weightedObservedPointArray0[0];
      assertEquals(3301.409139983, weightedObservedPointArray1[2].getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[2].getWeight(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[2].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray1[2]);
      
      weightedObservedPointArray1[3] = weightedObservedPointArray0[0];
      assertEquals(3301.409139983, weightedObservedPointArray1[3].getX(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[3].getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[3].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray1[3]);
      
      weightedObservedPointArray1[4] = weightedObservedPoint0;
      assertEquals(3301.409139983, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[4].getWeight(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[4].getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[4].getX(), 0.01D);
      assertNotNull(weightedObservedPointArray1[4]);
      
      weightedObservedPointArray1[5] = weightedObservedPointArray1[1];
      assertEquals(3301.409139983, weightedObservedPointArray1[5].getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[5].getX(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[5].getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray1[5]);
      
      weightedObservedPointArray1[6] = weightedObservedPoint0;
      assertEquals(3301.409139983, weightedObservedPointArray1[6].getX(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[6].getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPointArray1[6].getWeight(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(3301.409139983, weightedObservedPoint0.getWeight(), 0.01D);
      assertNotNull(weightedObservedPointArray1[6]);
      
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray1);
      assertNotSame(weightedObservedPointArray1, weightedObservedPointArray0);
      assertNotNull(gaussianFitter_ParameterGuesser0);
      assertFalse(weightedObservedPointArray1.equals((Object)weightedObservedPointArray0));
      
      double[] doubleArray0 = gaussianFitter_ParameterGuesser0.guess();
      assertNotSame(weightedObservedPointArray1, weightedObservedPointArray0);
      assertArrayEquals(new double[] {3301.409139983, 3301.409139983, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertFalse(weightedObservedPointArray1.equals((Object)weightedObservedPointArray0));
      
      double[] doubleArray1 = gaussianFitter_ParameterGuesser0.guess();
      assertNotSame(weightedObservedPointArray1, weightedObservedPointArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3301.409139983, 3301.409139983, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(weightedObservedPointArray1.equals((Object)weightedObservedPointArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test5()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = null;
      GaussianFitter.ParameterGuesser gaussianFitter_ParameterGuesser0 = null;
      try {
        gaussianFitter_ParameterGuesser0 = new GaussianFitter.ParameterGuesser(weightedObservedPointArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null is not allowed: input array
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = null;
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);
      assertNotNull(gaussianFitter0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = gaussianFitter0.fit();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 0 is smaller than the minimum (3)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DifferentiableMultivariateVectorialOptimizer differentiableMultivariateVectorialOptimizer0 = null;
      GaussianFitter gaussianFitter0 = new GaussianFitter(differentiableMultivariateVectorialOptimizer0);
      assertNotNull(gaussianFitter0);
      
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try {
        double[] doubleArray1 = gaussianFitter0.fit(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
