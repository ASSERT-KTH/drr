/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:17:31 GMT 2014
 */

package org.apache.commons.math;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MaxIterationsExceededException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class ConvergingAlgorithmImplEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      
      double[] doubleArray0 = new double[16];
      double double0 = 2302.82902522;
      doubleArray0[5] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 2302.82902522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      try {
        double double1 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, doubleArray0[5], doubleArray0[1]);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // maximal number of iterations (100) exceeded
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      assertNotNull(riddersSolver0);
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, riddersSolver0.getIterationCount());
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
      
      riddersSolver0.resetMaximalIterationCount();
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, riddersSolver0.getIterationCount());
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
  }

  @Test
  public void test2()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      assertNotNull(secantSolver0);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, secantSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, secantSolver0.getIterationCount());
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = secantSolver0.getIterationCount();
      assertEquals(0, int0);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, secantSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, secantSolver0.getIterationCount());
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      assertNotNull(laguerreSolver0);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, laguerreSolver0.getIterationCount());
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01D);
      
      laguerreSolver0.resetRelativeAccuracy();
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, laguerreSolver0.getIterationCount());
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      assertNotNull(mullerSolver0);
      assertEquals(1.0E-6, mullerSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, mullerSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, mullerSolver0.getMaximalIterationCount());
      assertEquals(0, mullerSolver0.getIterationCount());
      
      int int0 = mullerSolver0.getMaximalIterationCount();
      assertEquals(100, int0);
      assertEquals(1.0E-6, mullerSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, mullerSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, mullerSolver0.getMaximalIterationCount());
      assertEquals(0, mullerSolver0.getIterationCount());
  }

  @Test
  public void test5()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      assertNotNull(secantSolver0);
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(100, secantSolver0.getMaximalIterationCount());
      assertEquals(0, secantSolver0.getIterationCount());
      
      secantSolver0.resetAbsoluteAccuracy();
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(100, secantSolver0.getMaximalIterationCount());
      assertEquals(0, secantSolver0.getIterationCount());
  }
}
