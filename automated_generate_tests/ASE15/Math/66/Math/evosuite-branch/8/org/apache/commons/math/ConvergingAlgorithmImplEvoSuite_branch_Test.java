/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:29:29 GMT 2014
 */

package org.apache.commons.math;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.MaxIterationsExceededException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BrentOptimizer;



import org.junit.runner.RunWith;


public class ConvergingAlgorithmImplEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      double[] doubleArray0 = new double[9];
      double double0 = 2380.5809893;
      doubleArray0[2] = double0;
      doubleArray0[6] = doubleArray0[2];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(6, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 2380.5809893, 0.0, 0.0, 0.0, 2380.5809893, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      brentOptimizer0.resetMaximalIterationCount();
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      
      try {
        double double1 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, doubleArray0[4], doubleArray0[6], doubleArray0[3]);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // maximal number of iterations (0) exceeded
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, riddersSolver0.getIterationCount());
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
      assertNotNull(riddersSolver0);
      
      int int0 = riddersSolver0.getIterationCount();
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, riddersSolver0.getIterationCount());
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[2];
      double double0 = (-482.09069154);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(0, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertNotNull(brentOptimizer0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, (double) int0, double0, doubleArray0[0]);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, riddersSolver0.getIterationCount());
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(42, brentOptimizer0.getIterationCount());
      assertEquals(43, brentOptimizer0.getEvaluations());
      assertEquals((-482.09069154), brentOptimizer0.getMax(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-482.09069073527434), double1, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(brentSolver0);
      
      brentSolver0.resetRelativeAccuracy();
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, brentSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertNotNull(brentOptimizer0);
      
      int int0 = brentOptimizer0.getMaximalIterationCount();
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(100, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(0, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      
      BisectionSolver bisectionSolver0 = new BisectionSolver((UnivariateRealFunction) polynomialFunction0);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(0, bisectionSolver0.getIterationCount());
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, bisectionSolver0.getMaximalIterationCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bisectionSolver0);
      
      bisectionSolver0.resetAbsoluteAccuracy();
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(0, bisectionSolver0.getIterationCount());
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, bisectionSolver0.getMaximalIterationCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
