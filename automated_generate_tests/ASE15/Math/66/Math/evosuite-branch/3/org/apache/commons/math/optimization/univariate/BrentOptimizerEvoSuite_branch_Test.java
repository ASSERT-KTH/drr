/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:20:22 GMT 2014
 */

package org.apache.commons.math.optimization.univariate;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BrentOptimizer;



import org.junit.runner.RunWith;


public class BrentOptimizerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      
      double[] doubleArray0 = new double[11];
      double double0 = (-2180.8607832378);
      doubleArray0[3] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(3, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2180.8607832378), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.negate();
      assertNotNull(polynomialFunction1);
      assertEquals(3, polynomialFunction1.degree());
      assertEquals(3, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2180.8607832378), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      PolynomialFunction polynomialFunction2 = (PolynomialFunction)polynomialFunction1.derivative();
      assertNotNull(polynomialFunction2);
      assertEquals(3, polynomialFunction1.degree());
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction2.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2180.8607832378), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double1 = 1380.84;
      double double2 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction2, goalType0, double1, double0);
      assertEquals(3, polynomialFunction1.degree());
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction2.degree());
      assertEquals((-400.01039161890026), brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1380.84, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(5, brentOptimizer0.getIterationCount());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(6, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals((-2180.8607832378), brentOptimizer0.getMax(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2180.8607832378), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0, brentOptimizer0.getIterationCount());
      
      double[] doubleArray0 = new double[6];
      double double0 = (-596.07615294122);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      double double2 = 2003.21588586575;
      doubleArray0[2] = double2;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(2, polynomialFunction0.degree());
      assertArrayEquals(new double[] {(-596.07615294122), 0.0, 2003.21588586575, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction0.degree());
      assertArrayEquals(new double[] {(-596.07615294122), 0.0, 2003.21588586575, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      PolynomialFunction polynomialFunction2 = polynomialFunction1.subtract(polynomialFunction0);
      assertNotNull(polynomialFunction2);
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction2.degree());
      assertEquals(2, polynomialFunction0.degree());
      assertArrayEquals(new double[] {(-596.07615294122), 0.0, 2003.21588586575, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      PolynomialFunction polynomialFunction3 = polynomialFunction2.negate();
      assertNotNull(polynomialFunction3);
      assertEquals(2, polynomialFunction3.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction2.degree());
      assertEquals(2, polynomialFunction0.degree());
      assertArrayEquals(new double[] {(-596.07615294122), 0.0, 2003.21588586575, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      
      PolynomialFunction polynomialFunction4 = polynomialFunction3.multiply(polynomialFunction0);
      assertNotNull(polynomialFunction4);
      assertEquals(4, polynomialFunction4.degree());
      assertEquals(2, polynomialFunction3.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction2.degree());
      assertEquals(2, polynomialFunction0.degree());
      assertArrayEquals(new double[] {(-596.07615294122), 0.0, 2003.21588586575, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction4, polynomialFunction3);
      assertNotSame(polynomialFunction4, polynomialFunction0);
      assertNotSame(polynomialFunction4, polynomialFunction1);
      assertNotSame(polynomialFunction4, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction3, polynomialFunction4);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction4);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction4);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction4);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      
      PolynomialFunction polynomialFunction5 = polynomialFunction4.subtract(polynomialFunction1);
      assertNotNull(polynomialFunction5);
      assertEquals(4, polynomialFunction4.degree());
      assertEquals(2, polynomialFunction3.degree());
      assertEquals(4, polynomialFunction5.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction2.degree());
      assertEquals(2, polynomialFunction0.degree());
      assertArrayEquals(new double[] {(-596.07615294122), 0.0, 2003.21588586575, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction4, polynomialFunction3);
      assertNotSame(polynomialFunction4, polynomialFunction0);
      assertNotSame(polynomialFunction4, polynomialFunction1);
      assertNotSame(polynomialFunction4, polynomialFunction2);
      assertNotSame(polynomialFunction4, polynomialFunction5);
      assertNotSame(polynomialFunction3, polynomialFunction5);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction3, polynomialFunction4);
      assertNotSame(polynomialFunction5, polynomialFunction3);
      assertNotSame(polynomialFunction5, polynomialFunction2);
      assertNotSame(polynomialFunction5, polynomialFunction0);
      assertNotSame(polynomialFunction5, polynomialFunction1);
      assertNotSame(polynomialFunction5, polynomialFunction4);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction5);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction4);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction4);
      assertNotSame(polynomialFunction2, polynomialFunction5);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction5);
      assertNotSame(polynomialFunction0, polynomialFunction4);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction5));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction5));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction5.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction5.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction5.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction5.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction5.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction5));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction5));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction5));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double3 = 1.0;
      double double4 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction5, goalType0, double1, double3, double1);
      assertEquals(4, polynomialFunction4.degree());
      assertEquals(2, polynomialFunction3.degree());
      assertEquals(4, polynomialFunction5.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction2.degree());
      assertEquals(2, polynomialFunction0.degree());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(26, brentOptimizer0.getIterationCount());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(27, brentOptimizer0.getEvaluations());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertArrayEquals(new double[] {(-596.07615294122), 0.0, 2003.21588586575, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction4, polynomialFunction3);
      assertNotSame(polynomialFunction4, polynomialFunction0);
      assertNotSame(polynomialFunction4, polynomialFunction1);
      assertNotSame(polynomialFunction4, polynomialFunction2);
      assertNotSame(polynomialFunction4, polynomialFunction5);
      assertNotSame(polynomialFunction3, polynomialFunction5);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction3, polynomialFunction4);
      assertNotSame(polynomialFunction5, polynomialFunction3);
      assertNotSame(polynomialFunction5, polynomialFunction2);
      assertNotSame(polynomialFunction5, polynomialFunction0);
      assertNotSame(polynomialFunction5, polynomialFunction1);
      assertNotSame(polynomialFunction5, polynomialFunction4);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction5);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction4);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction4);
      assertNotSame(polynomialFunction2, polynomialFunction5);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction5);
      assertNotSame(polynomialFunction0, polynomialFunction4);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertTrue(double4 == double1);
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction4.equals((Object)polynomialFunction5));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction5));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction5.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction5.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction5.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction5.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction5.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction5));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction5));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction5));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction4));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double1 == double4);
      assertFalse(double1 == double0);
      assertEquals(0.0, double4, 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      double double1 = 1433.5;
      doubleArray0[3] = double1;
      double double2 = (-1950.3963228586);
      doubleArray0[7] = double2;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(7, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1433.5, 0.0, 0.0, 0.0, (-1950.3963228586)}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertEquals(6, polynomialFunction1.degree());
      assertEquals(7, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1433.5, 0.0, 0.0, 0.0, (-1950.3963228586)}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double3 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction1, goalType0, double0, double1, double0);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1433.5, brentOptimizer0.getMax(), 0.01D);
      assertEquals(33, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(32, brentOptimizer0.getIterationCount());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(6, polynomialFunction1.degree());
      assertEquals(7, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1433.5, 0.0, 0.0, 0.0, (-1950.3963228586)}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertEquals(0.569238408014249, double3, 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      double double1 = 1433.5;
      doubleArray0[3] = double1;
      double double2 = (-1950.3963228586);
      doubleArray0[7] = double2;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(7, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1433.5, 0.0, 0.0, 0.0, (-1950.3963228586)}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double3 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, double0, double1, double0);
      assertEquals(7, polynomialFunction0.degree());
      assertEquals(30, brentOptimizer0.getIterationCount());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(31, brentOptimizer0.getEvaluations());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1433.5, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1433.5, 0.0, 0.0, 0.0, (-1950.3963228586)}, doubleArray0, 0.01);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.7491598803192484, double3, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      
      brentOptimizer0.resetAbsoluteAccuracy();
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      
      // Undeclared exception!
      try {
        double double0 = brentOptimizer0.doOptimize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      
      brentOptimizer0.resetRelativeAccuracy();
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      
      // Undeclared exception!
      try {
        double double0 = brentOptimizer0.doOptimize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
      }
  }
}
