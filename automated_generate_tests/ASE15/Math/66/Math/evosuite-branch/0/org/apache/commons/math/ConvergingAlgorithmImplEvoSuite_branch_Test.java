/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:54:36 GMT 2014
 */

package org.apache.commons.math;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MaxIterationsExceededException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class ConvergingAlgorithmImplEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      
      double[] doubleArray0 = new double[7];
      double double0 = 417.1131416;
      doubleArray0[0] = double0;
      double double1 = 1.0E-14;
      doubleArray0[6] = doubleArray0[0];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {417.1131416, 0.0, 0.0, 0.0, 0.0, 0.0, 417.1131416}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(6, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertArrayEquals(new double[] {417.1131416, 0.0, 0.0, 0.0, 0.0, 0.0, 417.1131416}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction1);
      assertEquals(6, polynomialFunction0.degree());
      assertEquals(5, polynomialFunction1.degree());
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      
      PolynomialFunction polynomialFunction2 = polynomialFunction1.multiply(polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertArrayEquals(new double[] {417.1131416, 0.0, 0.0, 0.0, 0.0, 0.0, 417.1131416}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2);
      assertEquals(11, polynomialFunction2.degree());
      assertEquals(6, polynomialFunction0.degree());
      assertEquals(5, polynomialFunction1.degree());
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double2 = (-3366.2553);
      try {
        double double3 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction2, goalType0, double1, double2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // maximal number of iterations (100) exceeded
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(0, polynomialFunction0.degree());
      
      RiddersSolver riddersSolver0 = new RiddersSolver((UnivariateRealFunction) polynomialFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(riddersSolver0);
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, riddersSolver0.getIterationCount());
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, polynomialFunction0.degree());
      
      riddersSolver0.resetMaximalIterationCount();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, riddersSolver0.getIterationCount());
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, polynomialFunction0.degree());
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(0, polynomialFunction0.degree());
      
      BisectionSolver bisectionSolver0 = new BisectionSolver((UnivariateRealFunction) polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bisectionSolver0);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bisectionSolver0.getIterationCount());
      assertEquals(100, bisectionSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = bisectionSolver0.getIterationCount();
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, bisectionSolver0.getIterationCount());
      assertEquals(100, bisectionSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      assertNotNull(laguerreSolver0);
      assertEquals(0, laguerreSolver0.getIterationCount());
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01D);
      
      laguerreSolver0.resetRelativeAccuracy();
      assertEquals(0, laguerreSolver0.getIterationCount());
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      assertNotNull(laguerreSolver0);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
      assertEquals(0, laguerreSolver0.getIterationCount());
      
      int int0 = laguerreSolver0.getMaximalIterationCount();
      assertEquals(100, int0);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
      assertEquals(0, laguerreSolver0.getIterationCount());
  }

  @Test
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      BrentSolver brentSolver0 = new BrentSolver(doubleArray0[3]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(brentSolver0);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(0.0, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
      
      brentSolver0.resetAbsoluteAccuracy();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(0.0, brentSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01D);
  }
}
