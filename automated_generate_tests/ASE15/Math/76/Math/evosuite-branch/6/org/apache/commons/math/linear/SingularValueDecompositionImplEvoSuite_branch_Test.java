/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:09:17 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.MatrixIndexException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.SingularValueDecompositionImpl;



import org.junit.runner.RunWith;


public class SingularValueDecompositionImplEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-675.117186577578);
      doubleArray0[3] = double0;
      int int0 = 2758;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-675.117186577578), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix0, int0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(675.117186577578, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-675.117186577578), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(singularValueDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getVT();
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(675.117186577578, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-675.117186577578), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotNull(array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      
      SingularValueDecompositionImpl singularValueDecompositionImpl1 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix1);
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1.0, singularValueDecompositionImpl1.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl1.getRank());
      assertEquals(1.0, singularValueDecompositionImpl1.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(675.117186577578, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-675.117186577578), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(singularValueDecompositionImpl1, singularValueDecompositionImpl0);
      assertNotSame(singularValueDecompositionImpl0, singularValueDecompositionImpl1);
      assertNotNull(singularValueDecompositionImpl1);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(singularValueDecompositionImpl1.equals((Object)singularValueDecompositionImpl0));
      assertFalse(singularValueDecompositionImpl0.equals((Object)singularValueDecompositionImpl1));
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl1.getSolver();
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1.0, singularValueDecompositionImpl1.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl1.getRank());
      assertEquals(1.0, singularValueDecompositionImpl1.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(675.117186577578, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(true, decompositionSolver0.isNonSingular());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-675.117186577578), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(singularValueDecompositionImpl1, singularValueDecompositionImpl0);
      assertNotSame(singularValueDecompositionImpl0, singularValueDecompositionImpl1);
      assertNotNull(decompositionSolver0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(singularValueDecompositionImpl1.equals((Object)singularValueDecompositionImpl0));
      assertFalse(singularValueDecompositionImpl0.equals((Object)singularValueDecompositionImpl1));
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 1361;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1361, openMapRealMatrix0.getColumnDimension());
      assertEquals(1361, openMapRealMatrix0.getRowDimension());
      assertNotNull(openMapRealMatrix0);
      
      int int1 = 0;
      double double0 = (-1.0);
      openMapRealMatrix0.addToEntry(int1, int1, double0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1361, openMapRealMatrix0.getColumnDimension());
      assertEquals(1361, openMapRealMatrix0.getRowDimension());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) openMapRealMatrix0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1361, openMapRealMatrix0.getColumnDimension());
      assertEquals(1361, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertNotNull(singularValueDecompositionImpl0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getCovariance((double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cutoff singular value is 1,361, should be at most 1
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 671.9267978315931;
      double[] doubleArray0 = new double[18];
      doubleArray0[5] = double0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0);
      assertEquals(671.9267978315931, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(singularValueDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getCovariance(doubleArray0[17]);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(671.9267978315931, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getVT();
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(671.9267978315931, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotNull(array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
  }

  @Test
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[15];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray1[6] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(15, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix0);
      assertEquals(15, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.POSITIVE_INFINITY, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertNotNull(singularValueDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(15, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.POSITIVE_INFINITY, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertNotNull(decompositionSolver0);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-675.117186577578);
      doubleArray0[3] = double0;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray1[0];
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray1);
      assertEquals(8, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(6, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      int int0 = 2758;
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0, int0);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1653.6926236984143, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(8, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(6, realMatrixImpl0.getRowDimension());
      assertNotNull(singularValueDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1653.6926236984143, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(8, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(6, realMatrixImpl0.getRowDimension());
      assertNotNull(decompositionSolver0);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 671.9267978315931;
      double[] doubleArray0 = new double[18];
      doubleArray0[5] = double0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(671.9267978315931, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(singularValueDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getS();
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(671.9267978315931, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getS();
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(671.9267978315931, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotNull(array2DRowRealMatrix1);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 671.9267978315931;
      double[] doubleArray0 = new double[18];
      doubleArray0[5] = double0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0);
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(671.9267978315931, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(singularValueDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(671.9267978315931, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(decompositionSolver0);
      
      DecompositionSolver decompositionSolver1 = singularValueDecompositionImpl0.getSolver();
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, decompositionSolver1.isNonSingular());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(671.9267978315931, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(decompositionSolver1, decompositionSolver0);
      assertNotNull(decompositionSolver1);
      assertFalse(decompositionSolver1.equals((Object)decompositionSolver0));
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 1361;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1361, openMapRealMatrix0.getRowDimension());
      assertEquals(1361, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      int int1 = 0;
      openMapRealMatrix0.addToEntry(int1, int1, (double) int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1361, openMapRealMatrix0.getRowDimension());
      assertEquals(1361, openMapRealMatrix0.getColumnDimension());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) openMapRealMatrix0);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1361.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1361, openMapRealMatrix0.getRowDimension());
      assertEquals(1361, openMapRealMatrix0.getColumnDimension());
      assertNotNull(singularValueDecompositionImpl0);
      assertFalse(int0 == int1);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)singularValueDecompositionImpl0.getUT();
      assertEquals(false, blockRealMatrix0.isSquare());
      assertEquals(0.9999999999999998, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(1, blockRealMatrix0.getRowDimension());
      assertEquals(1361, blockRealMatrix0.getColumnDimension());
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1361.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1361, openMapRealMatrix0.getRowDimension());
      assertEquals(1361, openMapRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[6][9];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(6, realMatrixImpl0.getRowDimension());
      assertNotNull(realMatrixImpl0);
      
      int int0 = 2758;
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0, int0);
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(6, realMatrixImpl0.getRowDimension());
      assertNotNull(singularValueDecompositionImpl0);
      
      // Undeclared exception!
      try {
        DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // column index -1 out of allowed range [0, 5]
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 671.9267978315931;
      double[] doubleArray0 = new double[18];
      doubleArray0[5] = double0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(671.9267978315931, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(singularValueDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(671.9267978315931, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(decompositionSolver0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getU();
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(671.9267978315931, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(18, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 671.9267978315931, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0);
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(singularValueDecompositionImpl0);
      
      // Undeclared exception!
      try {
        double double0 = singularValueDecompositionImpl0.getConditionNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1361;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1361, openMapRealMatrix0.getRowDimension());
      assertEquals(1361, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) openMapRealMatrix0, int0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1361, openMapRealMatrix0.getRowDimension());
      assertEquals(1361, openMapRealMatrix0.getColumnDimension());
      assertNotNull(singularValueDecompositionImpl0);
      
      double[] doubleArray0 = singularValueDecompositionImpl0.getSingularValues();
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1361, openMapRealMatrix0.getRowDimension());
      assertEquals(1361, openMapRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0);
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(18, realMatrixImpl0.getRowDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(singularValueDecompositionImpl0);
      
      // Undeclared exception!
      try {
        double double0 = singularValueDecompositionImpl0.getNorm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }
}
