/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:35:43 GMT 2014
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Region;
import org.apache.commons.math3.geometry.partitioning.Side;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;



import org.junit.runner.RunWith;


public class SubLineEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertNotNull(vector2D0);
      
      double double0 = 3097.0;
      Vector2D[] vector2DArray0 = new Vector2D[10];
      vector2DArray0[0] = vector2D0;
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[0].getNorm1(), 0.01D);
      assertEquals(false, vector2DArray0[0].isNaN());
      assertEquals(true, vector2DArray0[0].isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[0].getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[0].getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[0].getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[0].getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[0].getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertNotNull(vector2DArray0[0]);
      
      vector2DArray0[1] = vector2D0;
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[1].getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[1].getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[1].getNorm(), 0.01D);
      assertEquals(true, vector2DArray0[1].isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[1].getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[1].getNormSq(), 0.01D);
      assertEquals(false, vector2DArray0[1].isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[1].getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertNotNull(vector2DArray0[1]);
      
      vector2DArray0[2] = vector2D0;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2DArray0[2].isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[2].getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[2].getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[2].getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[2].getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[2].getX(), 0.01D);
      assertEquals(false, vector2DArray0[2].isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[2].getY(), 0.01D);
      assertNotNull(vector2DArray0[2]);
      
      vector2DArray0[3] = vector2D0;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2DArray0[3].isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[3].getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[3].getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[3].getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[3].getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[3].getNormInf(), 0.01D);
      assertEquals(false, vector2DArray0[3].isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[3].getNorm(), 0.01D);
      assertNotNull(vector2DArray0[3]);
      
      vector2DArray0[4] = vector2D0;
      assertEquals(false, vector2DArray0[4].isNaN());
      assertEquals(true, vector2DArray0[4].isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[4].getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[4].getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[4].getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[4].getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[4].getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[4].getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertNotNull(vector2DArray0[4]);
      
      vector2DArray0[5] = vector2D0;
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[5].getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[5].getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[5].getNorm(), 0.01D);
      assertEquals(false, vector2DArray0[5].isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[5].getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[5].getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[5].getY(), 0.01D);
      assertEquals(true, vector2DArray0[5].isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertNotNull(vector2DArray0[5]);
      
      vector2DArray0[6] = vector2D0;
      assertEquals(true, vector2DArray0[6].isInfinite());
      assertEquals(false, vector2DArray0[6].isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[6].getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[6].getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[6].getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[6].getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[6].getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[6].getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertNotNull(vector2DArray0[6]);
      
      vector2DArray0[7] = vector2DArray0[0];
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[7].getNorm1(), 0.01D);
      assertEquals(false, vector2DArray0[7].isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[7].getNormSq(), 0.01D);
      assertEquals(true, vector2DArray0[7].isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[7].getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[7].getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[7].getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[7].getX(), 0.01D);
      assertNotNull(vector2DArray0[7]);
      
      vector2DArray0[8] = vector2D0;
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[8].getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[8].getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[8].getNormInf(), 0.01D);
      assertEquals(false, vector2DArray0[8].isNaN());
      assertEquals(true, vector2DArray0[8].isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[8].getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[8].getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[8].getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertNotNull(vector2DArray0[8]);
      
      vector2DArray0[9] = vector2DArray0[7];
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[9].getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[9].getNorm(), 0.01D);
      assertEquals(true, vector2DArray0[9].isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[9].getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[9].getNorm1(), 0.01D);
      assertEquals(false, vector2DArray0[9].isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[9].getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2DArray0[9].getY(), 0.01D);
      assertNotNull(vector2DArray0[9]);
      
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, vector2DArray0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
  }

  @Test
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertNotNull(vector2D0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertNotNull(subLine0);
      
      double double0 = (-447.03048531504027);
      Line line0 = new Line(vector2D0, double0);
      assertEquals(5.358856801889942, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertNotNull(line0);
      
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split((Hyperplane<Euclidean2D>) line0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(5.358856801889942, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertNotNull(vector2D0);
      
      double double0 = 0.0;
      Line line0 = new Line(vector2D0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, line0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      //  // Unstable assertion: assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, subLine0.isEmpty());
      //  // Unstable assertion: assertEquals(0.0, line0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      //  // Unstable assertion: assertNotNull(subLine0);
      
      Side side0 = subLine0.side((Hyperplane<Euclidean2D>) line0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals("PLUS", side0.name());
      //  // Unstable assertion: assertEquals(0, side0.ordinal());
      //  // Unstable assertion: assertEquals("PLUS", side0.toString());
      //  // Unstable assertion: assertEquals(false, subLine0.isEmpty());
      //  // Unstable assertion: assertEquals(0.0, line0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(Side.PLUS, side0);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = (-1452.0);
      Vector2D vector2D0 = new Vector2D(double0, double0);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(1452.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(2053.438092565734, vector2D0.getNorm(), 0.01D);
      assertEquals(4216608.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(2904.0, vector2D0.getNorm1(), 0.01D);
      assertEquals((-1452.0), vector2D0.getY(), 0.01D);
      assertEquals((-1452.0), vector2D0.getX(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals((-1452.0), line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(1452.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(2053.438092565734, vector2D0.getNorm(), 0.01D);
      assertEquals(4216608.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(2904.0, vector2D0.getNorm1(), 0.01D);
      assertEquals((-1452.0), vector2D0.getY(), 0.01D);
      assertEquals((-1452.0), vector2D0.getX(), 0.01D);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      assertEquals((-1452.0), line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(1452.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(2053.438092565734, vector2D0.getNorm(), 0.01D);
      assertEquals(4216608.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(2904.0, vector2D0.getNorm1(), 0.01D);
      assertEquals((-1452.0), vector2D0.getY(), 0.01D);
      assertEquals((-1452.0), vector2D0.getX(), 0.01D);
      assertNotNull(segment0);
      
      double double1 = 0.07073719799518585;
      double double2 = vector2D0.dotProduct((Vector<Euclidean2D>) vector2D0);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(1452.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(2053.438092565734, vector2D0.getNorm(), 0.01D);
      assertEquals(4216608.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(2904.0, vector2D0.getNorm1(), 0.01D);
      assertEquals((-1452.0), vector2D0.getY(), 0.01D);
      assertEquals((-1452.0), vector2D0.getX(), 0.01D);
      assertEquals(4216608.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      SubLine subLine0 = new SubLine(segment0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals((-1452.0), line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(1452.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(2053.438092565734, vector2D0.getNorm(), 0.01D);
      assertEquals(4216608.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(2904.0, vector2D0.getNorm1(), 0.01D);
      assertEquals((-1452.0), vector2D0.getY(), 0.01D);
      assertEquals((-1452.0), vector2D0.getX(), 0.01D);
      assertNotNull(subLine0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      PolygonsSet polygonsSet0 = new PolygonsSet(double1, double0, double2, double0);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(1452.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(2053.438092565734, vector2D0.getNorm(), 0.01D);
      assertEquals(4216608.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(2904.0, vector2D0.getNorm1(), 0.01D);
      assertEquals((-1452.0), vector2D0.getY(), 0.01D);
      assertEquals((-1452.0), vector2D0.getX(), 0.01D);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      SubHyperplane<Euclidean2D> subHyperplane0 = polygonsSet0.intersection((SubHyperplane<Euclidean2D>) subLine0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals((-1452.0), line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(1452.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(2053.438092565734, vector2D0.getNorm(), 0.01D);
      assertEquals(4216608.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(2904.0, vector2D0.getNorm1(), 0.01D);
      assertEquals((-1452.0), vector2D0.getY(), 0.01D);
      assertEquals((-1452.0), vector2D0.getX(), 0.01D);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNull(subHyperplane0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test04()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(true, vector2D0.isNaN());
      assertNotNull(vector2D0);
      
      double double0 = 0.0;
      Line line0 = new Line(vector2D0, double0);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(true, vector2D0.isNaN());
      assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(true, vector2D0.isNaN());
      assertNotNull(subLine0);
      
      boolean boolean0 = false;
      SubLine subLine1 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, subLine1.isEmpty());
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(true, vector2D0.isNaN());
      assertNotNull(subLine1);
      assertNotSame(subLine1, subLine0);
      assertFalse(subLine1.equals((Object)subLine0));
      
      Vector2D vector2D1 = subLine0.intersection(subLine1, boolean0);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(false, subLine1.isEmpty());
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(true, vector2D0.isNaN());
      assertNull(vector2D1);
      assertNotSame(subLine0, subLine1);
      assertNotSame(subLine1, subLine0);
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(subLine1.equals((Object)subLine0));
  }

  @Test
  public void test05()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertNotNull(subLine0);
      
      boolean boolean0 = false;
      Vector2D vector2D1 = subLine0.intersection(subLine0, boolean0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getNorm1(), 0.01D);
      assertEquals(false, vector2D1.isInfinite());
      assertEquals(Double.NaN, vector2D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getNormSq(), 0.01D);
      assertEquals(true, vector2D1.isNaN());
      assertEquals(Double.NaN, vector2D1.getX(), 0.01D);
      assertNotNull(vector2D1);
      assertNotSame(vector2D0, vector2D1);
      assertNotSame(vector2D1, vector2D0);
      assertTrue(vector2D0.equals((Object)vector2D1));
      assertTrue(vector2D1.equals((Object)vector2D0));
  }

  @Test
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertNotNull(vector2D0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertNotNull(subLine0);
      
      Vector2D vector2D1 = Vector2D.NEGATIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormInf(), 0.01D);
      assertEquals(true, vector2D1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01D);
      assertNotNull(vector2D1);
      assertNotSame(vector2D1, vector2D0);
      assertFalse(vector2D1.equals((Object)vector2D0));
      
      boolean boolean0 = vector2D1.isInfinite();
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormInf(), 0.01D);
      assertEquals(true, vector2D1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01D);
      assertNotSame(vector2D1, vector2D0);
      assertTrue(boolean0);
      assertFalse(vector2D1.equals((Object)vector2D0));
      
      double double0 = (-447.03048531504027);
      Line line0 = new Line(vector2D0, double0);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(5.358856801889942, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertNotNull(line0);
      assertNotSame(vector2D0, vector2D1);
      assertFalse(vector2D0.equals((Object)vector2D1));
      
      SubLine subLine1 = line0.wholeHyperplane();
      assertEquals(false, subLine1.isEmpty());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(5.358856801889942, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertNotNull(subLine1);
      assertNotSame(subLine1, subLine0);
      assertNotSame(vector2D0, vector2D1);
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(vector2D0.equals((Object)vector2D1));
      
      Vector2D vector2D2 = subLine1.intersection(subLine0, boolean0);
      assertEquals(false, subLine1.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, vector2D2.getNorm1(), 0.01D);
      assertEquals(false, vector2D2.isNaN());
      assertEquals(0.0, vector2D2.getNorm(), 0.01D);
      assertEquals(false, vector2D2.isInfinite());
      assertEquals(0.0, vector2D2.getY(), 0.01D);
      assertEquals(-0.0, vector2D2.getX(), 0.01D);
      assertEquals(0.0, vector2D2.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D2.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(5.358856801889942, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormInf(), 0.01D);
      assertEquals(true, vector2D1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01D);
      assertNotNull(vector2D2);
      assertNotSame(subLine1, subLine0);
      assertNotSame(subLine0, subLine1);
      assertNotSame(vector2D2, vector2D0);
      assertNotSame(vector2D2, vector2D1);
      assertNotSame(vector2D0, vector2D1);
      assertNotSame(vector2D0, vector2D2);
      assertNotSame(vector2D1, vector2D2);
      assertNotSame(vector2D1, vector2D0);
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(vector2D2.equals((Object)vector2D1));
      assertTrue(vector2D2.equals((Object)vector2D0));
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertTrue(vector2D0.equals((Object)vector2D2));
      assertFalse(vector2D1.equals((Object)vector2D2));
      assertFalse(vector2D1.equals((Object)vector2D0));
  }

  @Test
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertNotNull(vector2D0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertNotNull(subLine0);
      
      double double0 = 1230.65643839752;
      Line line0 = new Line(vector2D0, double0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, line0.getOriginOffset(), 0.01D);
      assertEquals(5.435303497500854, line0.getAngle(), 0.01D);
      assertNotNull(line0);
      
      IntervalsSet intervalsSet0 = new IntervalsSet();
      assertEquals(false, intervalsSet0.isEmpty());
      assertNotNull(intervalsSet0);
      
      SubLine subLine1 = new SubLine((Hyperplane<Euclidean2D>) line0, (Region<Euclidean1D>) intervalsSet0);
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertEquals(Double.NEGATIVE_INFINITY, line0.getOriginOffset(), 0.01D);
      assertEquals(5.435303497500854, line0.getAngle(), 0.01D);
      assertNotNull(subLine1);
      assertNotSame(subLine1, subLine0);
      assertFalse(subLine1.equals((Object)subLine0));
      
      boolean boolean0 = true;
      Vector2D vector2D1 = subLine1.intersection(subLine0, boolean0);
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertEquals(Double.NEGATIVE_INFINITY, line0.getOriginOffset(), 0.01D);
      assertEquals(5.435303497500854, line0.getAngle(), 0.01D);
      assertNull(vector2D1);
      assertNotSame(subLine0, subLine1);
      assertNotSame(subLine1, subLine0);
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(subLine1.equals((Object)subLine0));
  }

  @Test
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertNotNull(vector2D0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(subLine0);
      
      boolean boolean0 = false;
      Vector2D vector2D1 = subLine0.intersection(subLine0, boolean0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNull(vector2D1);
  }

  @Test
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertNotNull(vector2D0);
      
      double double0 = 0.0;
      Line line0 = new Line(vector2D0, double0);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertNotNull(subLine0);
      
      boolean boolean0 = false;
      Vector2D vector2D1 = subLine0.intersection(subLine0, boolean0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertNull(vector2D1);
  }

  @Test
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertNotNull(vector2D0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(subLine0);
      
      boolean boolean0 = true;
      Vector2D vector2D1 = subLine0.intersection(subLine0, boolean0);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNull(vector2D1);
  }

  @Test
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertNotNull(vector2D0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertNotNull(subLine0);
      
      List<Segment> list0 = subLine0.getSegments();
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertNotNull(list0);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = (-1452.0);
      Vector2D vector2D0 = new Vector2D(double0, double0);
      assertEquals(4216608.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(2053.438092565734, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals((-1452.0), vector2D0.getX(), 0.01D);
      assertEquals(1452.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(2904.0, vector2D0.getNorm1(), 0.01D);
      assertEquals((-1452.0), vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(4216608.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(2053.438092565734, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals((-1452.0), vector2D0.getX(), 0.01D);
      assertEquals(1452.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(2904.0, vector2D0.getNorm1(), 0.01D);
      assertEquals((-1452.0), vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals((-1452.0), line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      assertEquals(4216608.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(2053.438092565734, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals((-1452.0), vector2D0.getX(), 0.01D);
      assertEquals(1452.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(2904.0, vector2D0.getNorm1(), 0.01D);
      assertEquals((-1452.0), vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals((-1452.0), line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertNotNull(segment0);
      
      double double1 = vector2D0.dotProduct((Vector<Euclidean2D>) vector2D0);
      assertEquals(4216608.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(2053.438092565734, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals((-1452.0), vector2D0.getX(), 0.01D);
      assertEquals(1452.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(2904.0, vector2D0.getNorm1(), 0.01D);
      assertEquals((-1452.0), vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(4216608.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(4216608.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(2053.438092565734, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals((-1452.0), vector2D0.getX(), 0.01D);
      assertEquals(1452.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(2904.0, vector2D0.getNorm1(), 0.01D);
      assertEquals((-1452.0), vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals((-1452.0), line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertNotNull(subLine0);
      assertFalse(double0 == double1);
      
      PolygonsSet polygonsSet0 = new PolygonsSet(double1, double0, double0, double0);
      assertEquals(4216608.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(2053.438092565734, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals((-1452.0), vector2D0.getX(), 0.01D);
      assertEquals(1452.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(2904.0, vector2D0.getNorm1(), 0.01D);
      assertEquals((-1452.0), vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      SubHyperplane<Euclidean2D> subHyperplane0 = polygonsSet0.intersection((SubHyperplane<Euclidean2D>) subLine0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(4216608.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(2053.438092565734, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals((-1452.0), vector2D0.getX(), 0.01D);
      assertEquals(1452.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(2904.0, vector2D0.getNorm1(), 0.01D);
      assertEquals((-1452.0), vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals((-1452.0), line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertNull(subHyperplane0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }
}
