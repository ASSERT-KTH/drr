/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:32:52 GMT 2014
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.Segment;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class SubLineEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = vector3D0.add((Vector<Euclidean3D>) vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      
      Line line0 = new Line(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector3D1, vector3D0, line0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(subLine0);
      
      boolean boolean0 = false;
      SubLine subLine1 = line0.wholeLine();
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(subLine1.equals((Object)subLine0));
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(subLine1, subLine0);
      assertNotNull(subLine1);
      
      Vector3D vector3D2 = subLine1.intersection(subLine0, boolean0);
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(subLine1.equals((Object)subLine0));
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertNotSame(subLine0, subLine1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(subLine1, subLine0);
      assertNull(vector3D2);
  }

  @Test
  public void test1()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = vector3D0.add((Vector<Euclidean3D>) vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      
      Vector3D vector3D2 = vector3D0.subtract((Vector<Euclidean3D>) vector3D1);
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotNull(vector3D2);
      
      Line line0 = new Line(vector3D1, vector3D2);
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector3D0, vector3D2, line0);
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotNull(subLine0);
      
      boolean boolean0 = false;
      Vector3D vector3D3 = subLine0.intersection(subLine0, boolean0);
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D3));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D3));
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.1102230246251565E-16, vector3D3.getNormInf(), 0.01D);
      assertEquals(1.1102230246251565E-16, vector3D3.getNorm(), 0.01D);
      assertEquals(0.0, vector3D3.getAlpha(), 0.01D);
      assertEquals((-1.1102230246251565E-16), vector3D3.getZ(), 0.01D);
      assertEquals(1.1102230246251565E-16, vector3D3.getNorm1(), 0.01D);
      assertEquals(1.232595164407831E-32, vector3D3.getNormSq(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals(0.0, vector3D3.getX(), 0.01D);
      assertEquals(false, vector3D3.isNaN());
      assertEquals(0.0, vector3D3.getY(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D3.getDelta(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D3);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D3, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D3);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotNull(vector3D3);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = (-2834.7266843273);
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = new Vector3D(double0, vector3D0, double0, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(5669.4533686546, vector3D1.getNorm1(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getNormInf(), 0.01D);
      assertEquals(3.2142701499348994E7, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      
      Vector3D vector3D2 = vector3D1.subtract((Vector<Euclidean3D>) vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(5669.4533686546, vector3D1.getNorm1(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getNormInf(), 0.01D);
      assertEquals(3.2142701499348994E7, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(3.2154041406086303E7, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(5670.4533686546, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getZ(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getNorm(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getNormInf(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotNull(vector3D2);
      
      Line line0 = new Line(vector3D0, vector3D2);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(5669.4533686546, vector3D1.getNorm1(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getNormInf(), 0.01D);
      assertEquals(3.2142701499348994E7, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(3.2154041406086303E7, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(5670.4533686546, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getZ(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getNorm(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getNormInf(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector3D0, vector3D2, line0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(5669.4533686546, vector3D1.getNorm1(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getNormInf(), 0.01D);
      assertEquals(3.2142701499348994E7, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(3.2154041406086303E7, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(5670.4533686546, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getZ(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getNorm(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getNormInf(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(5669.4533686546, vector3D1.getNorm1(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getNormInf(), 0.01D);
      assertEquals(3.2142701499348994E7, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(3.2154041406086303E7, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(5670.4533686546, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getZ(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getNorm(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getNormInf(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotNull(subLine0);
      
      SubLine subLine1 = new SubLine(vector3D2, vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(subLine1.equals((Object)subLine0));
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(5669.4533686546, vector3D1.getNorm1(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getNormInf(), 0.01D);
      assertEquals(3.2142701499348994E7, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(3.2154041406086303E7, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(5670.4533686546, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getZ(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getNorm(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getNormInf(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(subLine1, subLine0);
      assertNotNull(subLine1);
      
      boolean boolean0 = true;
      Vector3D vector3D3 = subLine0.intersection(subLine1, boolean0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(subLine1.equals((Object)subLine0));
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(5669.4533686546, vector3D1.getNorm1(), 0.01D);
      assertEquals(5669.4533686546, vector3D1.getNormInf(), 0.01D);
      assertEquals(3.2142701499348994E7, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(3.2154041406086303E7, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(5670.4533686546, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getZ(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getNorm(), 0.01D);
      assertEquals(5670.4533686546, vector3D2.getNormInf(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(subLine0, subLine1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(subLine1, subLine0);
      assertNull(vector3D3);
  }

  @Test
  public void test3()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = vector3D0.add((Vector<Euclidean3D>) vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      
      Line line0 = new Line(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector3D1, vector3D0, line0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(subLine0);
      
      boolean boolean0 = true;
      Vector3D vector3D2 = subLine0.intersection(subLine0, boolean0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNull(vector3D2);
  }

  @Test
  public void test4()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertNotNull(vector3D0);
      
      Vector3D vector3D1 = vector3D0.add((Vector<Euclidean3D>) vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      
      Line line0 = new Line(vector3D1, vector3D0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector3D0, vector3D1, line0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(subLine0);
      
      boolean boolean0 = false;
      Vector3D vector3D2 = subLine0.intersection(subLine0, boolean0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals((-2.0), vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNull(vector3D2);
  }

  @Test
  public void test5()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertNotNull(vector3D0);
      
      Plane plane0 = new Plane(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertNotNull(plane0);
      
      Line line0 = plane0.intersection(plane0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertNotNull(line0);
      
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      IntervalsSet intervalsSet0 = new IntervalsSet((Collection<SubHyperplane<Euclidean1D>>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, intervalsSet0.isEmpty());
      assertNotNull(intervalsSet0);
      
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertNotNull(subLine0);
      
      boolean boolean0 = true;
      Vector3D vector3D1 = subLine0.intersection(subLine0, boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertNull(vector3D1);
  }

  @Test
  public void test6()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertNotNull(vector3D0);
      
      double double0 = (-3304.96975854065);
      Vector3D vector3D1 = vector3D0.scalarMultiply(double0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(3304.96975854065, vector3D1.getNormInf(), 0.01D);
      assertEquals(3304.96975854065, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0922825104868244E7, vector3D1.getNormSq(), 0.01D);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-3304.96975854065), vector3D1.getZ(), 0.01D);
      assertEquals(3304.96975854065, vector3D1.getNorm1(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      
      Line line0 = new Line(vector3D1, vector3D0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(3304.96975854065, vector3D1.getNormInf(), 0.01D);
      assertEquals(3304.96975854065, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0922825104868244E7, vector3D1.getNormSq(), 0.01D);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-3304.96975854065), vector3D1.getZ(), 0.01D);
      assertEquals(3304.96975854065, vector3D1.getNorm1(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(line0);
      
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      IntervalsSet intervalsSet0 = new IntervalsSet((Collection<SubHyperplane<Euclidean1D>>) linkedList0);
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(intervalsSet0);
      
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(3304.96975854065, vector3D1.getNormInf(), 0.01D);
      assertEquals(3304.96975854065, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0922825104868244E7, vector3D1.getNormSq(), 0.01D);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-3304.96975854065), vector3D1.getZ(), 0.01D);
      assertEquals(3304.96975854065, vector3D1.getNorm1(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(subLine0);
      
      boolean boolean0 = true;
      Vector3D vector3D2 = subLine0.intersection(subLine0, boolean0);
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0986535271421704E-14, vector3D2.getNorm(), 0.01D);
      assertEquals(1.0986535271421704E-14, vector3D2.getZ(), 0.01D);
      assertEquals(1.0986535271421704E-14, vector3D2.getNormInf(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(1.2070395727019318E-28, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.0986535271421704E-14, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D2.getDelta(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(3304.96975854065, vector3D1.getNormInf(), 0.01D);
      assertEquals(3304.96975854065, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0922825104868244E7, vector3D1.getNormSq(), 0.01D);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals((-3304.96975854065), vector3D1.getZ(), 0.01D);
      assertEquals(3304.96975854065, vector3D1.getNorm1(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D2);
  }

  @Test
  public void test7()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertNotNull(vector3D0);
      
      SubLine subLine0 = new SubLine(vector3D0, vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertNotNull(subLine0);
      
      List<Segment> list0 = subLine0.getSegments();
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertNotNull(list0);
  }
}
