/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:36:59 GMT 2014
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Region;
import org.apache.commons.math3.geometry.partitioning.Side;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;



import org.junit.runner.RunWith;


public class SubLineEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertNotNull(vector2D0);
      
      double double0 = 1.375;
      Line line0 = new Line(vector2D0, double0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(1.375, line0.getAngle(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertNotNull(line0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertNotNull(subLine0);
      
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split((Hyperplane<Euclidean2D>) line0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(1.375, line0.getAngle(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertNotNull(line0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(subLine0);
      
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split((Hyperplane<Euclidean2D>) line0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 194.3357625715583;
      Vector2D vector2D0 = new Vector2D(double0, double0);
      assertEquals(75532.77722853815, vector2D0.getNormSq(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getY(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getNormInf(), 0.01D);
      assertEquals(388.6715251431166, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(274.83227108281545, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(194.3357625715583, vector2D0.getX(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(194.3357625715583, line0.getOriginOffset(), 0.01D);
      assertEquals(75532.77722853815, vector2D0.getNormSq(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getY(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getNormInf(), 0.01D);
      assertEquals(388.6715251431166, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(274.83227108281545, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(194.3357625715583, vector2D0.getX(), 0.01D);
      assertNotNull(line0);
      
      IntervalsSet intervalsSet0 = new IntervalsSet();
      assertEquals(false, intervalsSet0.isEmpty());
      assertNotNull(intervalsSet0);
      
      SubLine subLine0 = new SubLine((Hyperplane<Euclidean2D>) line0, (Region<Euclidean1D>) intervalsSet0);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(194.3357625715583, line0.getOriginOffset(), 0.01D);
      assertEquals(75532.77722853815, vector2D0.getNormSq(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getY(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getNormInf(), 0.01D);
      assertEquals(388.6715251431166, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(274.83227108281545, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(194.3357625715583, vector2D0.getX(), 0.01D);
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(subLine0);
      
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split((Hyperplane<Euclidean2D>) line0);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(194.3357625715583, line0.getOriginOffset(), 0.01D);
      assertEquals(75532.77722853815, vector2D0.getNormSq(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getY(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getNormInf(), 0.01D);
      assertEquals(388.6715251431166, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(274.83227108281545, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(194.3357625715583, vector2D0.getX(), 0.01D);
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 194.3357625715583;
      Vector2D vector2D0 = Vector2D.NaN;
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(5.8402033561707185, line0.getAngle(), 0.01D);
      //  // Unstable assertion: assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, subLine0.isEmpty());
      //  // Unstable assertion: assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(5.8402033561707185, line0.getAngle(), 0.01D);
      //  // Unstable assertion: assertNotNull(subLine0);
      
      Side side0 = subLine0.side((Hyperplane<Euclidean2D>) line0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals("PLUS", side0.toString());
      //  // Unstable assertion: assertEquals("PLUS", side0.name());
      //  // Unstable assertion: assertEquals(0, side0.ordinal());
      //  // Unstable assertion: assertEquals(false, subLine0.isEmpty());
      //  // Unstable assertion: assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(5.8402033561707185, line0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Side.PLUS, side0);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1478.5363);
      double double2 = (-1502.573);
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double1, double2);
      assertEquals(false, polygonsSet0.isEmpty());
      assertNotNull(polygonsSet0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = polygonsSet0.getSize();
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(35539.133482210105, double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 194.3357625715583;
      Vector2D vector2D0 = new Vector2D(double0, double0);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(194.3357625715583, vector2D0.getX(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getY(), 0.01D);
      assertEquals(75532.77722853815, vector2D0.getNormSq(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getNormInf(), 0.01D);
      assertEquals(274.83227108281545, vector2D0.getNorm(), 0.01D);
      assertEquals(388.6715251431166, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(194.3357625715583, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(194.3357625715583, vector2D0.getX(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getY(), 0.01D);
      assertEquals(75532.77722853815, vector2D0.getNormSq(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getNormInf(), 0.01D);
      assertEquals(274.83227108281545, vector2D0.getNorm(), 0.01D);
      assertEquals(388.6715251431166, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(line0);
      
      IntervalsSet intervalsSet0 = new IntervalsSet();
      assertEquals(false, intervalsSet0.isEmpty());
      assertNotNull(intervalsSet0);
      
      SubLine subLine0 = new SubLine((Hyperplane<Euclidean2D>) line0, (Region<Euclidean1D>) intervalsSet0);
      assertEquals(194.3357625715583, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(194.3357625715583, vector2D0.getX(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getY(), 0.01D);
      assertEquals(75532.77722853815, vector2D0.getNormSq(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getNormInf(), 0.01D);
      assertEquals(274.83227108281545, vector2D0.getNorm(), 0.01D);
      assertEquals(388.6715251431166, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(false, intervalsSet0.isEmpty());
      assertNotNull(subLine0);
      
      Side side0 = subLine0.side((Hyperplane<Euclidean2D>) line0);
      assertEquals(194.3357625715583, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(194.3357625715583, vector2D0.getX(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getY(), 0.01D);
      assertEquals(75532.77722853815, vector2D0.getNormSq(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getNormInf(), 0.01D);
      assertEquals(274.83227108281545, vector2D0.getNorm(), 0.01D);
      assertEquals(388.6715251431166, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(3, side0.ordinal());
      assertEquals("HYPER", side0.name());
      assertEquals("HYPER", side0.toString());
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(Side.HYPER, side0);
  }

  @Test
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertNotNull(segment0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertNotNull(subLine0);
      
      Side side0 = subLine0.side((Hyperplane<Euclidean2D>) line0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals("MINUS", side0.toString());
      assertEquals("MINUS", side0.name());
      assertEquals(1, side0.ordinal());
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Side.MINUS, side0);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 194.3357625715583;
      Vector2D vector2D0 = new Vector2D(double0, double0);
      assertEquals(75532.77722853815, vector2D0.getNormSq(), 0.01D);
      assertEquals(274.83227108281545, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(194.3357625715583, vector2D0.getX(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(194.3357625715583, vector2D0.getNormInf(), 0.01D);
      assertEquals(388.6715251431166, vector2D0.getNorm1(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(194.3357625715583, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(75532.77722853815, vector2D0.getNormSq(), 0.01D);
      assertEquals(274.83227108281545, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(194.3357625715583, vector2D0.getX(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(194.3357625715583, vector2D0.getNormInf(), 0.01D);
      assertEquals(388.6715251431166, vector2D0.getNorm1(), 0.01D);
      assertNotNull(line0);
      
      IntervalsSet intervalsSet0 = new IntervalsSet();
      assertEquals(false, intervalsSet0.isEmpty());
      assertNotNull(intervalsSet0);
      
      SubLine subLine0 = new SubLine((Hyperplane<Euclidean2D>) line0, (Region<Euclidean1D>) intervalsSet0);
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(194.3357625715583, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(75532.77722853815, vector2D0.getNormSq(), 0.01D);
      assertEquals(274.83227108281545, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(194.3357625715583, vector2D0.getX(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(194.3357625715583, vector2D0.getNormInf(), 0.01D);
      assertEquals(388.6715251431166, vector2D0.getNorm1(), 0.01D);
      assertNotNull(subLine0);
      
      Line line1 = new Line(vector2D0, double0);
      assertEquals(258.877196545016, line1.getOriginOffset(), 0.01D);
      assertEquals(5.8402033561707185, line1.getAngle(), 0.01D);
      assertEquals(75532.77722853815, vector2D0.getNormSq(), 0.01D);
      assertEquals(274.83227108281545, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(194.3357625715583, vector2D0.getX(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(194.3357625715583, vector2D0.getNormInf(), 0.01D);
      assertEquals(388.6715251431166, vector2D0.getNorm1(), 0.01D);
      assertNotNull(line1);
      assertFalse(line1.equals((Object)line0));
      assertNotSame(line1, line0);
      
      SubLine subLine1 = line1.wholeHyperplane();
      assertEquals(258.877196545016, line1.getOriginOffset(), 0.01D);
      assertEquals(5.8402033561707185, line1.getAngle(), 0.01D);
      assertEquals(75532.77722853815, vector2D0.getNormSq(), 0.01D);
      assertEquals(274.83227108281545, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(194.3357625715583, vector2D0.getX(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(194.3357625715583, vector2D0.getNormInf(), 0.01D);
      assertEquals(388.6715251431166, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertNotNull(subLine1);
      assertFalse(line1.equals((Object)line0));
      assertFalse(subLine1.equals((Object)subLine0));
      assertNotSame(line1, line0);
      assertNotSame(subLine1, subLine0);
      
      boolean boolean0 = false;
      Vector2D vector2D1 = subLine1.intersection(subLine0, boolean0);
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(274.8322710828154, vector2D1.getNorm(), 0.01D);
      assertEquals(194.33576257155826, vector2D1.getY(), 0.01D);
      assertEquals(194.33576257155823, vector2D1.getX(), 0.01D);
      assertEquals(388.67152514311647, vector2D1.getNorm1(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(75532.77722853812, vector2D1.getNormSq(), 0.01D);
      assertEquals(false, vector2D1.isInfinite());
      assertEquals(194.33576257155826, vector2D1.getNormInf(), 0.01D);
      assertEquals(194.3357625715583, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(258.877196545016, line1.getOriginOffset(), 0.01D);
      assertEquals(5.8402033561707185, line1.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(75532.77722853815, vector2D0.getNormSq(), 0.01D);
      assertEquals(274.83227108281545, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(194.3357625715583, vector2D0.getX(), 0.01D);
      assertEquals(194.3357625715583, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(194.3357625715583, vector2D0.getNormInf(), 0.01D);
      assertEquals(388.6715251431166, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertNotNull(vector2D1);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(line0.equals((Object)line1));
      assertFalse(line1.equals((Object)line0));
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(subLine1.equals((Object)subLine0));
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(line0, line1);
      assertNotSame(line1, line0);
      assertNotSame(subLine0, subLine1);
      assertNotSame(vector2D0, vector2D1);
      assertNotSame(subLine1, subLine0);
  }

  @Test
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertNotNull(vector2D0);
      
      double double0 = (-1855.4);
      Line line0 = new Line(vector2D0, double0);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(4.422850925157491, line0.getAngle(), 0.01D);
      assertNotNull(line0);
      
      IntervalsSet intervalsSet0 = new IntervalsSet(double0, double0);
      assertEquals(false, intervalsSet0.isEmpty());
      assertNotNull(intervalsSet0);
      
      SubLine subLine0 = new SubLine((Hyperplane<Euclidean2D>) line0, (Region<Euclidean1D>) intervalsSet0);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(4.422850925157491, line0.getAngle(), 0.01D);
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(subLine0);
      
      boolean boolean0 = false;
      Vector2D vector2D1 = vector2D0.scalarMultiply(double0);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormInf(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm1(), 0.01D);
      assertNotNull(vector2D1);
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotSame(vector2D0, vector2D1);
      assertNotSame(vector2D1, vector2D0);
      
      SubLine subLine1 = new SubLine(vector2D1, vector2D0);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(true, vector2D1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormInf(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm1(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertNotNull(subLine1);
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(subLine1.equals((Object)subLine0));
      assertNotSame(vector2D0, vector2D1);
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(subLine1, subLine0);
      
      Vector2D vector2D2 = subLine1.intersection(subLine0, boolean0);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(4.422850925157491, line0.getAngle(), 0.01D);
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(true, vector2D1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormInf(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm1(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(false, subLine1.isEmpty());
      assertNull(vector2D2);
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(subLine1.equals((Object)subLine0));
      assertNotSame(vector2D0, vector2D1);
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(subLine0, subLine1);
      assertNotSame(subLine1, subLine0);
  }

  @Test
  public void test09()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertNotNull(vector2D0);
      
      double double0 = (-1855.4);
      Vector2D vector2D1 = vector2D0.scalarMultiply(double0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm1(), 0.01D);
      assertEquals(true, vector2D1.isInfinite());
      assertEquals(false, vector2D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertNotNull(vector2D1);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(vector2D0, vector2D1);
      
      SubLine subLine0 = new SubLine(vector2D1, vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm1(), 0.01D);
      assertEquals(true, vector2D1.isInfinite());
      assertEquals(false, vector2D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertNotNull(subLine0);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(vector2D0, vector2D1);
      
      SubLine subLine1 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, subLine1.isEmpty());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertNotNull(subLine1);
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertNotSame(subLine1, subLine0);
      assertNotSame(vector2D0, vector2D1);
      
      boolean boolean0 = true;
      Vector2D vector2D2 = subLine0.intersection(subLine1, boolean0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNorm1(), 0.01D);
      assertEquals(true, vector2D1.isInfinite());
      assertEquals(false, vector2D1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertNull(vector2D2);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(subLine1, subLine0);
      assertNotSame(subLine0, subLine1);
      assertNotSame(vector2D0, vector2D1);
  }

  @Test
  public void test10()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertNotNull(vector2D0);
      
      double double0 = (-1.0E-10);
      Line line0 = new Line(vector2D0, double0);
      assertEquals(6.283185307079586, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertNotNull(line0);
      
      boolean boolean0 = line0.isParallelTo(line0);
      assertEquals(6.283185307079586, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertTrue(boolean0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(6.283185307079586, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(subLine0);
      
      SubLine subLine1 = new SubLine(vector2D0, vector2D0);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertNotNull(subLine1);
      assertFalse(subLine1.equals((Object)subLine0));
      assertNotSame(subLine1, subLine0);
      
      Vector2D vector2D1 = subLine0.intersection(subLine1, boolean0);
      assertEquals(6.283185307079586, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D1.getNorm(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(0.0, vector2D1.getNormInf(), 0.01D);
      assertEquals(false, vector2D1.isInfinite());
      assertEquals(0.0, vector2D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D1.getY(), 0.01D);
      assertEquals(-0.0, vector2D1.getX(), 0.01D);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(vector2D1);
      assertTrue(vector2D0.equals((Object)vector2D1));
      assertTrue(vector2D1.equals((Object)vector2D0));
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(subLine0.equals((Object)subLine1));
      assertNotSame(vector2D0, vector2D1);
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(subLine1, subLine0);
      assertNotSame(subLine0, subLine1);
  }

  @Test
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertNotNull(vector2D0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(subLine0);
      
      boolean boolean0 = true;
      Vector2D vector2D1 = subLine0.intersection(subLine0, boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNull(vector2D1);
  }

  @Test
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertNotNull(vector2D0);
      
      double double0 = (-1855.4);
      Line line0 = new Line(vector2D0, double0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(4.422850925157491, line0.getAngle(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertNotNull(line0);
      
      Line line1 = new Line(vector2D0, vector2D0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, line1.getAngle(), 0.01D);
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01D);
      assertNotNull(line1);
      assertFalse(line1.equals((Object)line0));
      assertNotSame(line1, line0);
      
      IntervalsSet intervalsSet0 = new IntervalsSet(double0, double0);
      assertEquals(false, intervalsSet0.isEmpty());
      assertNotNull(intervalsSet0);
      
      SubLine subLine0 = new SubLine((Hyperplane<Euclidean2D>) line0, (Region<Euclidean1D>) intervalsSet0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(4.422850925157491, line0.getAngle(), 0.01D);
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertNotNull(subLine0);
      assertFalse(line0.equals((Object)line1));
      assertNotSame(line0, line1);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line1);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, line1.getAngle(), 0.01D);
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01D);
      assertNotNull(segment0);
      assertFalse(line1.equals((Object)line0));
      assertNotSame(line1, line0);
      
      SubLine subLine1 = new SubLine(segment0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, line1.getAngle(), 0.01D);
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertNotNull(subLine1);
      assertFalse(line1.equals((Object)line0));
      assertFalse(subLine1.equals((Object)subLine0));
      assertNotSame(line1, line0);
      assertNotSame(subLine1, subLine0);
      
      boolean boolean0 = false;
      Vector2D vector2D1 = subLine0.intersection(subLine1, boolean0);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(4.422850925157491, line0.getAngle(), 0.01D);
      assertEquals(false, intervalsSet0.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, line1.getAngle(), 0.01D);
      assertEquals(Double.NaN, line1.getOriginOffset(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertNull(vector2D1);
      assertFalse(line0.equals((Object)line1));
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(line1.equals((Object)line0));
      assertFalse(subLine1.equals((Object)subLine0));
      assertNotSame(line0, line1);
      assertNotSame(subLine0, subLine1);
      assertNotSame(line1, line0);
      assertNotSame(subLine1, subLine0);
  }

  @Test
  public void test13()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertNotNull(vector2D0);
      
      double double0 = (-1.0E-10);
      Line line0 = new Line(vector2D0, double0);
      assertEquals(6.283185307079586, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertNotNull(line0);
      
      boolean boolean0 = line0.isParallelTo(line0);
      assertEquals(6.283185307079586, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertTrue(boolean0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(6.283185307079586, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertNotNull(subLine0);
      
      Vector2D vector2D1 = subLine0.intersection(subLine0, boolean0);
      assertEquals(6.283185307079586, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertNull(vector2D1);
  }

  @Test
  public void test14()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertNotNull(vector2D0);
      
      double double0 = (-1.0E-10);
      Line line0 = new Line(vector2D0, double0);
      assertEquals(6.283185307079586, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(6.283185307079586, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(subLine0);
      
      List<Segment> list0 = subLine0.getSegments();
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(6.283185307079586, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(list0);
  }
}
