/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:48:31 GMT 2014
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Rotation;
import org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math3.geometry.euclidean.threed.Segment;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;



import org.junit.runner.RunWith;


public class SubLineEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotNull(vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      double double0 = 2262.53278243543;
      Vector3D vector3D2 = new Vector3D(double0, double0);
      assertNotNull(vector3D2);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      
      Line line0 = new Line(vector3D2, vector3D0);
      assertNotNull(line0);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      
      Segment segment0 = new Segment(vector3D0, vector3D2, line0);
      assertNotNull(segment0);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      
      SubLine subLine0 = new SubLine(segment0);
      assertNotNull(subLine0);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      
      boolean boolean0 = false;
      Segment segment1 = new Segment(vector3D2, vector3D1, line0);
      assertNotNull(segment1);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(segment1.equals((Object)segment0));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(segment1, segment0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      
      SubLine subLine1 = new SubLine(segment1);
      assertNotNull(subLine1);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(segment1.equals((Object)segment0));
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(segment1, segment0);
      assertNotSame(subLine1, subLine0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      
      Vector3D vector3D3 = subLine0.intersection(subLine1, boolean0);
      assertNull(vector3D3);
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(segment1.equals((Object)segment0));
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(segment0.equals((Object)segment1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertNotSame(subLine0, subLine1);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(segment1, segment0);
      assertNotSame(subLine1, subLine0);
      assertNotSame(segment0, segment1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
  }

  @Test
  public void test1()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotNull(vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      Line line0 = new Line(vector3D1, vector3D0);
      assertNotNull(line0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      boolean boolean0 = false;
      Segment segment0 = new Segment(vector3D0, vector3D1, line0);
      assertNotNull(segment0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      SubLine subLine0 = new SubLine(segment0);
      assertNotNull(subLine0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      Vector3D vector3D2 = subLine0.intersection(subLine0, boolean0);
      assertNull(vector3D2);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
  }

  @Test
  public void test2()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotNull(vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      double double0 = 2262.53278243543;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals(1.0967006839862876, rotation0.getAngle(), 0.01D);
      assertEquals((-0.18487434534483127), rotation0.getQ3(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ2(), 0.01D);
      assertEquals(0.8533856168229842, rotation0.getQ0(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ1(), 0.01D);
      
      Vector3D vector3D2 = new Vector3D(double0, double0);
      assertNotNull(vector3D2);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      
      Line line0 = new Line(vector3D2, vector3D0);
      assertNotNull(line0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      
      Segment segment0 = new Segment(vector3D0, vector3D2, line0);
      assertNotNull(segment0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      
      Vector3D vector3D3 = segment0.getStart();
      assertNotNull(vector3D3);
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(1.0, vector3D3.getNorm(), 0.01D);
      assertEquals(1.0, vector3D3.getNormInf(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D3.getAlpha(), 0.01D);
      assertEquals(false, vector3D3.isNaN());
      assertEquals(0.0, vector3D3.getZ(), 0.01D);
      assertEquals(0.0, vector3D3.getX(), 0.01D);
      assertEquals((-1.0), vector3D3.getY(), 0.01D);
      assertEquals(1.0, vector3D3.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D3.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D3.getDelta(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertSame(vector3D3, vector3D0);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D2, vector3D1);
      
      Vector3D vector3D4 = rotation0.applyInverseTo(vector3D3);
      assertNotNull(vector3D4);
      assertFalse(vector3D3.equals((Object)vector3D4));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D4));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D4.equals((Object)vector3D0));
      assertFalse(vector3D4.equals((Object)vector3D1));
      assertFalse(vector3D4.equals((Object)vector3D3));
      assertFalse(vector3D4.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D4));
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(1.0, vector3D3.getNorm(), 0.01D);
      assertEquals(1.0, vector3D3.getNormInf(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D3.getAlpha(), 0.01D);
      assertEquals(false, vector3D3.isNaN());
      assertEquals(0.0, vector3D3.getZ(), 0.01D);
      assertEquals(0.0, vector3D3.getX(), 0.01D);
      assertEquals((-1.0), vector3D3.getY(), 0.01D);
      assertEquals(1.0, vector3D3.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D3.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D3.getDelta(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals(1.0967006839862876, rotation0.getAngle(), 0.01D);
      assertEquals((-0.18487434534483127), rotation0.getQ3(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ2(), 0.01D);
      assertEquals(0.8533856168229842, rotation0.getQ0(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0000000000000002, vector3D4.getNorm(), 0.01D);
      assertEquals((-2.243620870120808), vector3D4.getAlpha(), 0.01D);
      assertEquals(1.0000000000000004, vector3D4.getNormSq(), 0.01D);
      assertEquals(false, vector3D4.isInfinite());
      assertEquals((-0.5530926799066634), vector3D4.getX(), 0.01D);
      assertEquals(1.707973592457878, vector3D4.getNorm1(), 0.01D);
      assertEquals((-0.6940884874336655), vector3D4.getY(), 0.01D);
      assertEquals(0.4788878571641191, vector3D4.getDelta(), 0.01D);
      assertEquals(false, vector3D4.isNaN());
      assertEquals(0.46079242511754903, vector3D4.getZ(), 0.01D);
      assertEquals(0.6940884874336655, vector3D4.getNormInf(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertSame(vector3D3, vector3D0);
      assertNotSame(vector3D3, vector3D4);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D4);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D4, vector3D0);
      assertNotSame(vector3D4, vector3D1);
      assertNotSame(vector3D4, vector3D3);
      assertNotSame(vector3D4, vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D4);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D2, vector3D1);
      
      Segment segment1 = new Segment(vector3D3, vector3D1, line0);
      assertNotNull(segment1);
      assertFalse(vector3D3.equals((Object)vector3D4));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(segment0.equals((Object)segment1));
      assertFalse(vector3D1.equals((Object)vector3D4));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D3));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D4));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D4));
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(segment1.equals((Object)segment0));
      assertEquals(1.0, vector3D3.getNorm(), 0.01D);
      assertEquals(1.0, vector3D3.getNormInf(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D3.getAlpha(), 0.01D);
      assertEquals(false, vector3D3.isNaN());
      assertEquals(0.0, vector3D3.getZ(), 0.01D);
      assertEquals(0.0, vector3D3.getX(), 0.01D);
      assertEquals((-1.0), vector3D3.getY(), 0.01D);
      assertEquals(1.0, vector3D3.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D3.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D3.getDelta(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertSame(vector3D3, vector3D0);
      assertNotSame(vector3D3, vector3D4);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(segment0, segment1);
      assertNotSame(vector3D1, vector3D4);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D3);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D4);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D4);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(segment1, segment0);
      
      SubLine subLine0 = new SubLine(segment1);
      assertNotNull(subLine0);
      assertFalse(vector3D3.equals((Object)vector3D4));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(segment0.equals((Object)segment1));
      assertFalse(vector3D1.equals((Object)vector3D4));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D3));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D4));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D4));
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(segment1.equals((Object)segment0));
      assertEquals(1.0, vector3D3.getNorm(), 0.01D);
      assertEquals(1.0, vector3D3.getNormInf(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D3.getAlpha(), 0.01D);
      assertEquals(false, vector3D3.isNaN());
      assertEquals(0.0, vector3D3.getZ(), 0.01D);
      assertEquals(0.0, vector3D3.getX(), 0.01D);
      assertEquals((-1.0), vector3D3.getY(), 0.01D);
      assertEquals(1.0, vector3D3.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D3.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D3.getDelta(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertSame(vector3D3, vector3D0);
      assertNotSame(vector3D3, vector3D4);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(segment0, segment1);
      assertNotSame(vector3D1, vector3D4);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D3);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D4);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D4);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(segment1, segment0);
      
      SubLine subLine1 = new SubLine(vector3D3, vector3D4);
      assertNotNull(subLine1);
      assertFalse(vector3D3.equals((Object)vector3D4));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(segment0.equals((Object)segment1));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D4));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D4.equals((Object)vector3D0));
      assertFalse(vector3D4.equals((Object)vector3D1));
      assertFalse(vector3D4.equals((Object)vector3D3));
      assertFalse(vector3D4.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D4));
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(subLine1.equals((Object)subLine0));
      assertEquals(1.0, vector3D3.getNorm(), 0.01D);
      assertEquals(1.0, vector3D3.getNormInf(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D3.getAlpha(), 0.01D);
      assertEquals(false, vector3D3.isNaN());
      assertEquals(0.0, vector3D3.getZ(), 0.01D);
      assertEquals(0.0, vector3D3.getX(), 0.01D);
      assertEquals((-1.0), vector3D3.getY(), 0.01D);
      assertEquals(1.0, vector3D3.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D3.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D3.getDelta(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals(1.0967006839862876, rotation0.getAngle(), 0.01D);
      assertEquals((-0.18487434534483127), rotation0.getQ3(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ2(), 0.01D);
      assertEquals(0.8533856168229842, rotation0.getQ0(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0000000000000002, vector3D4.getNorm(), 0.01D);
      assertEquals((-2.243620870120808), vector3D4.getAlpha(), 0.01D);
      assertEquals(1.0000000000000004, vector3D4.getNormSq(), 0.01D);
      assertEquals(false, vector3D4.isInfinite());
      assertEquals((-0.5530926799066634), vector3D4.getX(), 0.01D);
      assertEquals(1.707973592457878, vector3D4.getNorm1(), 0.01D);
      assertEquals((-0.6940884874336655), vector3D4.getY(), 0.01D);
      assertEquals(0.4788878571641191, vector3D4.getDelta(), 0.01D);
      assertEquals(false, vector3D4.isNaN());
      assertEquals(0.46079242511754903, vector3D4.getZ(), 0.01D);
      assertEquals(0.6940884874336655, vector3D4.getNormInf(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertSame(vector3D3, vector3D0);
      assertNotSame(vector3D3, vector3D4);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(segment0, segment1);
      assertNotSame(vector3D0, vector3D1);
      assertSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D4);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D4, vector3D0);
      assertNotSame(vector3D4, vector3D1);
      assertNotSame(vector3D4, vector3D3);
      assertNotSame(vector3D4, vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D4);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(subLine1, subLine0);
      
      boolean boolean0 = true;
      Vector3D vector3D5 = subLine1.intersection(subLine0, boolean0);
      assertNull(vector3D5);
      assertFalse(segment0.equals((Object)segment1));
      assertFalse(vector3D4.equals((Object)vector3D0));
      assertFalse(vector3D4.equals((Object)vector3D1));
      assertFalse(vector3D4.equals((Object)vector3D3));
      assertFalse(vector3D4.equals((Object)vector3D2));
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(vector3D3.equals((Object)vector3D4));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D4));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D4));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D3));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D4));
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(segment1.equals((Object)segment0));
      assertEquals(1.0, vector3D3.getNorm(), 0.01D);
      assertEquals(1.0, vector3D3.getNormInf(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D3.getAlpha(), 0.01D);
      assertEquals(false, vector3D3.isNaN());
      assertEquals(0.0, vector3D3.getZ(), 0.01D);
      assertEquals(0.0, vector3D3.getX(), 0.01D);
      assertEquals((-1.0), vector3D3.getY(), 0.01D);
      assertEquals(1.0, vector3D3.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D3.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D3.getDelta(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals(1.0967006839862876, rotation0.getAngle(), 0.01D);
      assertEquals((-0.18487434534483127), rotation0.getQ3(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ2(), 0.01D);
      assertEquals(0.8533856168229842, rotation0.getQ0(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ1(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0000000000000002, vector3D4.getNorm(), 0.01D);
      assertEquals((-2.243620870120808), vector3D4.getAlpha(), 0.01D);
      assertEquals(1.0000000000000004, vector3D4.getNormSq(), 0.01D);
      assertEquals(false, vector3D4.isInfinite());
      assertEquals((-0.5530926799066634), vector3D4.getX(), 0.01D);
      assertEquals(1.707973592457878, vector3D4.getNorm1(), 0.01D);
      assertEquals((-0.6940884874336655), vector3D4.getY(), 0.01D);
      assertEquals(0.4788878571641191, vector3D4.getDelta(), 0.01D);
      assertEquals(false, vector3D4.isNaN());
      assertEquals(0.46079242511754903, vector3D4.getZ(), 0.01D);
      assertEquals(0.6940884874336655, vector3D4.getNormInf(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertSame(vector3D3, vector3D0);
      assertNotSame(vector3D3, vector3D4);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(segment0, segment1);
      assertNotSame(vector3D1, vector3D4);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D3);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D4);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D4, vector3D0);
      assertNotSame(vector3D4, vector3D1);
      assertNotSame(vector3D4, vector3D3);
      assertNotSame(vector3D4, vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D4);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(subLine1, subLine0);
      assertNotSame(subLine0, subLine1);
      assertNotSame(segment1, segment0);
  }

  @Test
  public void test3()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotNull(vector3D1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      double double0 = 2262.53278243543;
      Vector3D vector3D2 = new Vector3D(double0, double0);
      assertNotNull(vector3D2);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      
      Line line0 = new Line(vector3D2, vector3D0);
      assertNotNull(line0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      
      Segment segment0 = new Segment(vector3D2, vector3D1, line0);
      assertNotNull(segment0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      
      SubLine subLine0 = new SubLine(segment0);
      assertNotNull(subLine0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      
      SubLine subLine1 = new SubLine(vector3D0, vector3D1);
      assertNotNull(subLine1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(subLine1.equals((Object)subLine0));
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(subLine1, subLine0);
      
      boolean boolean0 = true;
      Vector3D vector3D3 = subLine0.intersection(subLine1, boolean0);
      assertNull(vector3D3);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(subLine1.equals((Object)subLine0));
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(subLine0, subLine1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(subLine1, subLine0);
  }

  @Test
  public void test4()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotNull(vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      Line line0 = new Line(vector3D1, vector3D0);
      assertNotNull(line0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      Segment segment0 = new Segment(vector3D0, vector3D1, line0);
      assertNotNull(segment0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      SubLine subLine0 = new SubLine(segment0);
      assertNotNull(subLine0);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      boolean boolean0 = true;
      Vector3D vector3D2 = subLine0.intersection(subLine0, boolean0);
      assertNotNull(vector3D2);
      assertTrue(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertTrue(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01D);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
  }

  @Test
  public void test5()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotNull(vector3D1);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      double double0 = 2262.53278243543;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals((-0.3446407299152082), rotation0.getQ2(), 0.01D);
      assertEquals(0.8533856168229842, rotation0.getQ0(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ1(), 0.01D);
      assertEquals((-0.18487434534483127), rotation0.getQ3(), 0.01D);
      assertEquals(1.0967006839862876, rotation0.getAngle(), 0.01D);
      
      Vector3D vector3D2 = new Vector3D(double0, double0);
      assertNotNull(vector3D2);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      
      Line line0 = new Line(vector3D2, vector3D0);
      assertNotNull(line0);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      
      Segment segment0 = new Segment(vector3D0, vector3D2, line0);
      assertNotNull(segment0);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      
      Vector3D vector3D3 = rotation0.applyInverseTo(vector3D2);
      assertNotNull(vector3D3);
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D0));
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals(0.9413584587312963, vector3D3.getAlpha(), 0.01D);
      assertEquals(0.4817588283879535, vector3D3.getX(), 0.01D);
      assertEquals(0.6615257199904296, vector3D3.getY(), 0.01D);
      assertEquals(1.7179950433768747, vector3D3.getNorm1(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals(0.6122503402965824, vector3D3.getDelta(), 0.01D);
      assertEquals(0.6615257199904296, vector3D3.getNormInf(), 0.01D);
      assertEquals(1.000000000000001, vector3D3.getNormSq(), 0.01D);
      assertEquals(false, vector3D3.isNaN());
      assertEquals(1.0000000000000004, vector3D3.getNorm(), 0.01D);
      assertEquals(0.5747104949984915, vector3D3.getZ(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ2(), 0.01D);
      assertEquals(0.8533856168229842, rotation0.getQ0(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ1(), 0.01D);
      assertEquals((-0.18487434534483127), rotation0.getQ3(), 0.01D);
      assertEquals(1.0967006839862876, rotation0.getAngle(), 0.01D);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D3, vector3D0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertNotNull(subLine0);
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D3));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D1);
      
      boolean boolean0 = false;
      SubLine subLine1 = new SubLine(vector3D1, vector3D3);
      assertNotNull(subLine1);
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D3));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D3));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D0));
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.9413584587312963, vector3D3.getAlpha(), 0.01D);
      assertEquals(0.4817588283879535, vector3D3.getX(), 0.01D);
      assertEquals(0.6615257199904296, vector3D3.getY(), 0.01D);
      assertEquals(1.7179950433768747, vector3D3.getNorm1(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals(0.6122503402965824, vector3D3.getDelta(), 0.01D);
      assertEquals(0.6615257199904296, vector3D3.getNormInf(), 0.01D);
      assertEquals(1.000000000000001, vector3D3.getNormSq(), 0.01D);
      assertEquals(false, vector3D3.isNaN());
      assertEquals(1.0000000000000004, vector3D3.getNorm(), 0.01D);
      assertEquals(0.5747104949984915, vector3D3.getZ(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ2(), 0.01D);
      assertEquals(0.8533856168229842, rotation0.getQ0(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ1(), 0.01D);
      assertEquals((-0.18487434534483127), rotation0.getQ3(), 0.01D);
      assertEquals(1.0967006839862876, rotation0.getAngle(), 0.01D);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(subLine1, subLine0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D3);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D3, vector3D0);
      
      Vector3D vector3D4 = subLine0.intersection(subLine1, boolean0);
      assertNull(vector3D4);
      assertFalse(vector3D2.equals((Object)vector3D3));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D3));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D3));
      assertFalse(vector3D3.equals((Object)vector3D2));
      assertFalse(vector3D3.equals((Object)vector3D1));
      assertFalse(vector3D3.equals((Object)vector3D0));
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.5530926799066634, vector3D2.getZ(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getDelta(), 0.01D);
      assertEquals(0.46079242511754903, vector3D2.getY(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.6940884874336652, vector3D2.getNormInf(), 0.01D);
      assertEquals(1.7079735924578778, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.5860718507787765, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.9413584587312963, vector3D3.getAlpha(), 0.01D);
      assertEquals(0.4817588283879535, vector3D3.getX(), 0.01D);
      assertEquals(0.6615257199904296, vector3D3.getY(), 0.01D);
      assertEquals(1.7179950433768747, vector3D3.getNorm1(), 0.01D);
      assertEquals(false, vector3D3.isInfinite());
      assertEquals(0.6122503402965824, vector3D3.getDelta(), 0.01D);
      assertEquals(0.6615257199904296, vector3D3.getNormInf(), 0.01D);
      assertEquals(1.000000000000001, vector3D3.getNormSq(), 0.01D);
      assertEquals(false, vector3D3.isNaN());
      assertEquals(1.0000000000000004, vector3D3.getNorm(), 0.01D);
      assertEquals(0.5747104949984915, vector3D3.getZ(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ2(), 0.01D);
      assertEquals(0.8533856168229842, rotation0.getQ0(), 0.01D);
      assertEquals((-0.3446407299152082), rotation0.getQ1(), 0.01D);
      assertEquals((-0.18487434534483127), rotation0.getQ3(), 0.01D);
      assertEquals(1.0967006839862876, rotation0.getAngle(), 0.01D);
      assertNotSame(vector3D2, vector3D3);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D3);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(subLine1, subLine0);
      assertNotSame(subLine0, subLine1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D3);
      assertNotSame(vector3D3, vector3D2);
      assertNotSame(vector3D3, vector3D1);
      assertNotSame(vector3D3, vector3D0);
  }

  @Test
  public void test6()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      double double0 = 2262.53278243543;
      Vector3D vector3D1 = new Vector3D(double0, double0);
      assertNotNull(vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.6940884874336652, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.46079242511754903, vector3D1.getY(), 0.01D);
      assertEquals(0.5530926799066634, vector3D1.getZ(), 0.01D);
      assertEquals(0.6940884874336652, vector3D1.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getDelta(), 0.01D);
      assertEquals(1.7079735924578778, vector3D1.getNorm1(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      
      Line line0 = new Line(vector3D1, vector3D0);
      assertNotNull(line0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.6940884874336652, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.46079242511754903, vector3D1.getY(), 0.01D);
      assertEquals(0.5530926799066634, vector3D1.getZ(), 0.01D);
      assertEquals(0.6940884874336652, vector3D1.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getDelta(), 0.01D);
      assertEquals(1.7079735924578778, vector3D1.getNorm1(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      Segment segment0 = new Segment(vector3D0, vector3D1, line0);
      assertNotNull(segment0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.6940884874336652, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.46079242511754903, vector3D1.getY(), 0.01D);
      assertEquals(0.5530926799066634, vector3D1.getZ(), 0.01D);
      assertEquals(0.6940884874336652, vector3D1.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getDelta(), 0.01D);
      assertEquals(1.7079735924578778, vector3D1.getNorm1(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertNotNull(subLine0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.6940884874336652, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.46079242511754903, vector3D1.getY(), 0.01D);
      assertEquals(0.5530926799066634, vector3D1.getZ(), 0.01D);
      assertEquals(0.6940884874336652, vector3D1.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getDelta(), 0.01D);
      assertEquals(1.7079735924578778, vector3D1.getNorm1(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      boolean boolean0 = false;
      Vector3D vector3D2 = subLine0.intersection(subLine0, boolean0);
      assertNotNull(vector3D2);
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.26960378744122554, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.5616750056746389, vector3D2.getDelta(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.34704424371683257, vector3D2.getX(), 0.01D);
      assertEquals(0.5192338465867047, vector3D2.getNorm(), 0.01D);
      assertEquals(0.27654633995333167, vector3D2.getZ(), 0.01D);
      assertEquals((-0.6604692646171674), vector3D2.getAlpha(), 0.01D);
      assertEquals((-0.26960378744122565), vector3D2.getY(), 0.01D);
      assertEquals(0.34704424371683257, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.8931943711113899, vector3D2.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.6940884874336652, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.46079242511754903, vector3D1.getY(), 0.01D);
      assertEquals(0.5530926799066634, vector3D1.getZ(), 0.01D);
      assertEquals(0.6940884874336652, vector3D1.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getDelta(), 0.01D);
      assertEquals(1.7079735924578778, vector3D1.getNorm1(), 0.01D);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
  }

  @Test
  public void test7()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      double double0 = 2262.53278243543;
      Vector3D vector3D1 = new Vector3D(double0, double0);
      assertNotNull(vector3D1);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(0.46079242511754903, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.6940884874336652, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.7079735924578778, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.5530926799066634, vector3D1.getZ(), 0.01D);
      assertEquals(0.6940884874336652, vector3D1.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertNotSame(vector3D1, vector3D0);
      
      Line line0 = new Line(vector3D1, vector3D0);
      assertNotNull(line0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.46079242511754903, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.6940884874336652, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.7079735924578778, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.5530926799066634, vector3D1.getZ(), 0.01D);
      assertEquals(0.6940884874336652, vector3D1.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      Segment segment0 = new Segment(vector3D0, vector3D1, line0);
      assertNotNull(segment0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.46079242511754903, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.6940884874336652, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.7079735924578778, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.5530926799066634, vector3D1.getZ(), 0.01D);
      assertEquals(0.6940884874336652, vector3D1.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      SubLine subLine0 = new SubLine(segment0);
      assertNotNull(subLine0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.46079242511754903, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.6940884874336652, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.7079735924578778, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.5530926799066634, vector3D1.getZ(), 0.01D);
      assertEquals(0.6940884874336652, vector3D1.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      List<Segment> list0 = subLine0.getSegments();
      assertNotNull(list0);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(0.46079242511754903, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.6940884874336652, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.7079735924578778, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.5530926799066634, vector3D1.getZ(), 0.01D);
      assertEquals(0.6940884874336652, vector3D1.getX(), 0.01D);
      assertEquals(0.5860718507787765, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
  }
}
