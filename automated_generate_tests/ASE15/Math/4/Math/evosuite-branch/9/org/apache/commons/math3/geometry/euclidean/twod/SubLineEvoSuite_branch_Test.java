/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:49:59 GMT 2014
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Side;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;



import org.junit.runner.RunWith;


public class SubLineEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 451.39737402065;
      double double1 = (-1318.1449671539215);
      Vector2D vector2D0 = Vector2D.ZERO;
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertNotNull(line0);
      
      Vector2D vector2D1 = new Vector2D(double0, double1);
      assertNotSame(vector2D1, vector2D0);
      assertEquals((-1318.1449671539215), vector2D1.getY(), 0.01D);
      assertEquals(1318.1449671539215, vector2D1.getNormInf(), 0.01D);
      assertEquals(false, vector2D1.isInfinite());
      assertEquals(false, vector2D1.isNaN());
      assertEquals(1393.2931291390018, vector2D1.getNorm(), 0.01D);
      assertEquals(1769.5423411745714, vector2D1.getNorm1(), 0.01D);
      assertEquals(451.39737402065, vector2D1.getX(), 0.01D);
      assertEquals(1941265.7437059514, vector2D1.getNormSq(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotNull(vector2D1);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D1);
      assertNotSame(vector2D0, vector2D1);
      assertNotSame(vector2D1, vector2D0);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals((-1318.1449671539215), vector2D1.getY(), 0.01D);
      assertEquals(1318.1449671539215, vector2D1.getNormInf(), 0.01D);
      assertEquals(false, vector2D1.isInfinite());
      assertEquals(false, vector2D1.isNaN());
      assertEquals(1393.2931291390018, vector2D1.getNorm(), 0.01D);
      assertEquals(1769.5423411745714, vector2D1.getNorm1(), 0.01D);
      assertEquals(451.39737402065, vector2D1.getX(), 0.01D);
      assertEquals(1941265.7437059514, vector2D1.getNormSq(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotNull(subLine0);
      
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split((Hyperplane<Euclidean2D>) line0);
      assertNotSame(vector2D0, vector2D1);
      assertNotSame(vector2D1, vector2D0);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals((-1318.1449671539215), vector2D1.getY(), 0.01D);
      assertEquals(1318.1449671539215, vector2D1.getNormInf(), 0.01D);
      assertEquals(false, vector2D1.isInfinite());
      assertEquals(false, vector2D1.isNaN());
      assertEquals(1393.2931291390018, vector2D1.getNorm(), 0.01D);
      assertEquals(1769.5423411745714, vector2D1.getNorm1(), 0.01D);
      assertEquals(451.39737402065, vector2D1.getX(), 0.01D);
      assertEquals(1941265.7437059514, vector2D1.getNormSq(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test
  public void test01()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertNotNull(vector2D0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertNotNull(subLine0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertNotNull(line0);
      
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split((Hyperplane<Euclidean2D>) line0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test
  public void test02()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertNotNull(subLine0);
      
      SubHyperplane.SplitSubHyperplane<Euclidean2D> subHyperplane_SplitSubHyperplane0 = subLine0.split((Hyperplane<Euclidean2D>) line0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertNotNull(subHyperplane_SplitSubHyperplane0);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = (-101.9344087519843);
      double double1 = 0.0;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double1);
      assertEquals(false, polygonsSet0.isEmpty());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(polygonsSet0);
      
      Vector2D vector2D0 = new Vector2D(double0, double0);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals((-101.9344087519843), vector2D0.getX(), 0.01D);
      assertEquals(20781.247375233223, vector2D0.getNormSq(), 0.01D);
      assertEquals(101.9344087519843, vector2D0.getNormInf(), 0.01D);
      assertEquals((-101.9344087519843), vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(203.8688175039686, vector2D0.getNorm1(), 0.01D);
      assertEquals(144.1570233295389, vector2D0.getNorm(), 0.01D);
      assertFalse(double0 == double1);
      assertNotNull(vector2D0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals((-101.9344087519843), vector2D0.getX(), 0.01D);
      assertEquals(20781.247375233223, vector2D0.getNormSq(), 0.01D);
      assertEquals(101.9344087519843, vector2D0.getNormInf(), 0.01D);
      assertEquals((-101.9344087519843), vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(203.8688175039686, vector2D0.getNorm1(), 0.01D);
      assertEquals(144.1570233295389, vector2D0.getNorm(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertFalse(double0 == double1);
      assertNotNull(subLine0);
      
      SubHyperplane<Euclidean2D> subHyperplane0 = polygonsSet0.intersection((SubHyperplane<Euclidean2D>) subLine0);
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals((-101.9344087519843), vector2D0.getX(), 0.01D);
      assertEquals(20781.247375233223, vector2D0.getNormSq(), 0.01D);
      assertEquals(101.9344087519843, vector2D0.getNormInf(), 0.01D);
      assertEquals((-101.9344087519843), vector2D0.getY(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(203.8688175039686, vector2D0.getNorm1(), 0.01D);
      assertEquals(144.1570233295389, vector2D0.getNorm(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNull(subHyperplane0);
  }

  @Test
  public void test04()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertNotNull(vector2D0);
      
      double double0 = 3.6725170580355583E-9;
      Line line0 = new Line(vector2D0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(3.6725170580355583E-9, line0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      //  // Unstable assertion: assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(3.6725170580355583E-9, line0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(false, subLine0.isEmpty());
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertNotNull(subLine0);
      
      Side side0 = subLine0.side((Hyperplane<Euclidean2D>) line0);
      //  // Unstable assertion: assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(3.6725170580355583E-9, line0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals("PLUS", side0.name());
      //  // Unstable assertion: assertEquals(0, side0.ordinal());
      //  // Unstable assertion: assertEquals("PLUS", side0.toString());
      //  // Unstable assertion: assertEquals(false, subLine0.isEmpty());
      //  // Unstable assertion: assertEquals(false, vector2D0.isInfinite());
      //  // Unstable assertion: assertEquals(true, vector2D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Side.PLUS, side0);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 451.39737402065;
      Vector2D vector2D0 = Vector2D.ZERO;
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertNotNull(subLine0);
      
      Line line1 = new Line(vector2D0, double0);
      assertNotSame(line1, line0);
      assertEquals(5.291217210899333, line1.getAngle(), 0.01D);
      assertEquals(0.0, line1.getOriginOffset(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertFalse(line1.equals((Object)line0));
      assertNotNull(line1);
      
      SubLine subLine1 = line1.wholeHyperplane();
      assertNotSame(line1, line0);
      assertNotSame(subLine1, subLine0);
      assertEquals(5.291217210899333, line1.getAngle(), 0.01D);
      assertEquals(0.0, line1.getOriginOffset(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertFalse(line1.equals((Object)line0));
      assertFalse(subLine1.equals((Object)subLine0));
      assertNotNull(subLine1);
      
      boolean boolean0 = false;
      Vector2D vector2D1 = subLine0.intersection(subLine1, boolean0);
      assertNotSame(line1, line0);
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(subLine1, subLine0);
      assertNotSame(vector2D0, vector2D1);
      assertNotSame(subLine0, subLine1);
      assertNotSame(line0, line1);
      assertEquals(5.291217210899333, line1.getAngle(), 0.01D);
      assertEquals(0.0, line1.getOriginOffset(), 0.01D);
      assertEquals(0.0, vector2D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D1.getNorm(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(0.0, vector2D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D1.getY(), 0.01D);
      assertEquals(0.0, vector2D1.getX(), 0.01D);
      assertEquals(false, vector2D1.isInfinite());
      assertEquals(false, subLine1.isEmpty());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertFalse(line1.equals((Object)line0));
      assertTrue(vector2D1.equals((Object)vector2D0));
      assertFalse(subLine1.equals((Object)subLine0));
      assertTrue(vector2D0.equals((Object)vector2D1));
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(line0.equals((Object)line1));
      assertNotNull(vector2D1);
  }

  @Test
  public void test06()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertNotNull(vector2D0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertNotNull(subLine0);
      
      boolean boolean0 = false;
      Vector2D vector2D1 = subLine0.intersection(subLine0, boolean0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertNull(vector2D1);
  }

  @Test
  public void test07()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertNotNull(subLine0);
      
      Segment segment0 = new Segment(vector2D0, vector2D0, line0);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertNotNull(segment0);
      
      SubLine subLine1 = new SubLine(segment0);
      assertNotSame(subLine1, subLine0);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertFalse(subLine1.equals((Object)subLine0));
      assertNotNull(subLine1);
      
      boolean boolean0 = true;
      Vector2D vector2D1 = subLine0.intersection(subLine1, boolean0);
      assertNotSame(subLine1, subLine0);
      assertNotSame(subLine0, subLine1);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(false, subLine1.isEmpty());
      assertEquals(false, subLine0.isEmpty());
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(subLine0.equals((Object)subLine1));
      assertNull(vector2D1);
  }

  @Test
  public void test08()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertNotNull(vector2D0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertNotNull(subLine0);
      
      boolean boolean0 = true;
      Vector2D vector2D1 = subLine0.intersection(subLine0, boolean0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertNull(vector2D1);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 451.39737402065;
      Vector2D vector2D0 = Vector2D.ZERO;
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertNotNull(subLine0);
      
      Vector2D vector2D1 = new Vector2D(double0, double0);
      assertNotSame(vector2D1, vector2D0);
      assertEquals(407519.17854547716, vector2D1.getNormSq(), 0.01D);
      assertEquals(451.39737402065, vector2D1.getNormInf(), 0.01D);
      assertEquals(638.3722883596038, vector2D1.getNorm(), 0.01D);
      assertEquals(false, vector2D1.isInfinite());
      assertEquals(451.39737402065, vector2D1.getY(), 0.01D);
      assertEquals(451.39737402065, vector2D1.getX(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(902.7947480413, vector2D1.getNorm1(), 0.01D);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotNull(vector2D1);
      
      SubLine subLine1 = new SubLine(vector2D0, vector2D1);
      assertNotSame(subLine1, subLine0);
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(vector2D0, vector2D1);
      assertEquals(false, subLine1.isEmpty());
      assertEquals(407519.17854547716, vector2D1.getNormSq(), 0.01D);
      assertEquals(451.39737402065, vector2D1.getNormInf(), 0.01D);
      assertEquals(638.3722883596038, vector2D1.getNorm(), 0.01D);
      assertEquals(false, vector2D1.isInfinite());
      assertEquals(451.39737402065, vector2D1.getY(), 0.01D);
      assertEquals(451.39737402065, vector2D1.getX(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(902.7947480413, vector2D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertNotNull(subLine1);
      
      boolean boolean0 = false;
      Vector2D vector2D2 = subLine0.intersection(subLine1, boolean0);
      assertNotSame(subLine1, subLine0);
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(subLine0, subLine1);
      assertNotSame(vector2D0, vector2D1);
      assertEquals(false, subLine1.isEmpty());
      assertEquals(407519.17854547716, vector2D1.getNormSq(), 0.01D);
      assertEquals(451.39737402065, vector2D1.getNormInf(), 0.01D);
      assertEquals(638.3722883596038, vector2D1.getNorm(), 0.01D);
      assertEquals(false, vector2D1.isInfinite());
      assertEquals(451.39737402065, vector2D1.getY(), 0.01D);
      assertEquals(451.39737402065, vector2D1.getX(), 0.01D);
      assertEquals(false, vector2D1.isNaN());
      assertEquals(902.7947480413, vector2D1.getNorm1(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertFalse(subLine1.equals((Object)subLine0));
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertNull(vector2D2);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 0.5;
      Vector2D vector2D0 = new Vector2D(double0, double0);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.5, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.5, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.5, vector2D0.getY(), 0.01D);
      assertEquals(1.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.5, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.7071067811865476, vector2D0.getNorm(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(0.5, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.5, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.5, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.5, vector2D0.getY(), 0.01D);
      assertEquals(1.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.5, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.7071067811865476, vector2D0.getNorm(), 0.01D);
      assertNotNull(line0);
      
      boolean boolean0 = line0.sameOrientationAs((Hyperplane<Euclidean2D>) line0);
      assertEquals(0.5, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.5, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.5, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.5, vector2D0.getY(), 0.01D);
      assertEquals(1.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.5, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.7071067811865476, vector2D0.getNorm(), 0.01D);
      assertTrue(boolean0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.5, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.5, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.5, vector2D0.getY(), 0.01D);
      assertEquals(1.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.5, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.7071067811865476, vector2D0.getNorm(), 0.01D);
      assertNotNull(subLine0);
      
      Vector2D vector2D1 = subLine0.intersection(subLine0, boolean0);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.5, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.5, vector2D0.getX(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertEquals(0.5, vector2D0.getNormSq(), 0.01D);
      assertEquals(0.5, vector2D0.getY(), 0.01D);
      assertEquals(1.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.5, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.7071067811865476, vector2D0.getNorm(), 0.01D);
      assertNull(vector2D1);
  }

  @Test
  public void test11()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.NaN;
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertNotNull(subLine0);
      
      boolean boolean0 = true;
      Vector2D vector2D1 = subLine0.intersection(subLine0, boolean0);
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(vector2D0, vector2D1);
      assertEquals(Double.NaN, vector2D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getNorm(), 0.01D);
      assertEquals(false, vector2D1.isInfinite());
      assertEquals(true, vector2D1.isNaN());
      assertEquals(Double.NaN, vector2D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector2D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, line0.getAngle(), 0.01D);
      assertEquals(Double.NaN, line0.getOriginOffset(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(Double.NaN, vector2D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormInf(), 0.01D);
      assertEquals(true, vector2D0.isNaN());
      assertEquals(Double.NaN, vector2D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(Double.NaN, vector2D0.getNorm1(), 0.01D);
      assertTrue(vector2D1.equals((Object)vector2D0));
      assertTrue(vector2D0.equals((Object)vector2D1));
      assertNotNull(vector2D1);
  }

  @Test
  public void test12()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, vector2D0);
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(line0);
      
      SubLine subLine0 = line0.wholeHyperplane();
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(subLine0);
      
      List<Segment> list0 = subLine0.getSegments();
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, line0.getOriginOffset(), 0.01D);
      assertEquals(0.0, line0.getAngle(), 0.01D);
      assertEquals(false, subLine0.isEmpty());
      assertEquals(0.0, vector2D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector2D0.getNormSq(), 0.01D);
      assertEquals(false, vector2D0.isInfinite());
      assertEquals(0.0, vector2D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector2D0.getX(), 0.01D);
      assertEquals(0.0, vector2D0.getY(), 0.01D);
      assertEquals(0.0, vector2D0.getNorm(), 0.01D);
      assertEquals(false, vector2D0.isNaN());
      assertNotNull(list0);
  }
}
