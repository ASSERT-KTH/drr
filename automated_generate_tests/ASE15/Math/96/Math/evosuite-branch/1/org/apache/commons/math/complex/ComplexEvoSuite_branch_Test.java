/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:20:35 GMT 2014
 */

package org.apache.commons.math.complex;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.junit.runner.RunWith;


public class ComplexEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.tan();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.tanh();
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotNull(complex2);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-37.87132460408107);
      Complex complex0 = new Complex(double0, double0);
      assertEquals((-37.87132460408107), complex0.getImaginary(), 0.01D);
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(53.558140880125336, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.tanh();
      assertEquals((-37.87132460408107), complex0.getImaginary(), 0.01D);
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(53.558140880125336, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals((-8.607754337688512E-34), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals((-1.0), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
  }

  @Test
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sqrt1z();
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.tan();
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotNull(complex2);
  }

  @Test
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sqrt();
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01D);
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotNull(complex1);
  }

  @Test
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sqrt1z();
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.sinh();
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotNull(complex2);
  }

  @Test
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sin();
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.1752011936438014, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = (-37.87132460408107);
      Complex complex0 = new Complex(double0, double0);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals((-37.87132460408107), complex0.getImaginary(), 0.01D);
      assertEquals(53.558140880125336, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = null;
      // Undeclared exception!
      try {
        Complex complex2 = complex0.pow(complex1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.asin();
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.cosh();
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotNull(complex2);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 739.84;
      Complex complex0 = new Complex(double0, double0);
      assertEquals(1046.2917619861107, complex0.abs(), 0.01D);
      assertEquals(739.84, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(739.84, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.cosh();
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(1046.2917619861107, complex0.abs(), 0.01D);
      assertEquals(739.84, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(739.84, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotNull(complex1);
  }

  @Test
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.cos();
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertNotNull(complex1);
  }

  @Test
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.cos();
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5430806348152437, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01D);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = (-37.87132460408107);
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0, double1);
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.atan();
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.atan();
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotNull(complex2);
  }

  @Test
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.asin();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertNotNull(complex1);
  }

  @Test
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.acos();
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertNotNull(complex1);
  }

  @Test
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.tan();
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.sqrt1z();
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotNull(complex2);
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = (-37.87132460408107);
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0, double1);
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.atan();
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.subtract(complex1);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotNull(complex2);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = (-37.87132460408107);
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0, double1);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.atan();
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.negate();
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotNull(complex2);
  }

  @Test
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      double double0 = 0.0;
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex1 = new Complex(double0, double1);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      
      Complex complex2 = complex0.pow(complex1);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(double1 == double0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotNull(complex2);
  }

  @Test
  public void test18()  throws Throwable  {
      double double0 = 0.0;
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0, double1);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.acos();
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
  }

  @Test
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.asin();
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      
      Complex complex2 = Complex.ZERO;
      assertEquals(false, complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.abs(), 0.01D);
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotNull(complex2);
      
      Complex complex3 = complex2.pow(complex1);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.abs(), 0.01D);
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex3);
      assertNotNull(complex3);
  }

  @Test
  public void test20()  throws Throwable  {
      double double0 = (-37.87132460408107);
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.divide(complex0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotNull(complex1);
      
      boolean boolean0 = complex1.isInfinite();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      double double0 = (-37.87132460408107);
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0, double1);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.tan();
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(-0.0, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertFalse(double0 == double1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.sin();
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(-0.0, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertFalse(double0 == double1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(double1 == double0);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotNull(complex2);
  }

  @Test
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertNotNull(complex0);
      
      int int0 = complex0.hashCode();
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(7, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotNull(complex0);
      
      int int0 = complex0.hashCode();
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(414187520, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sqrt();
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotNull(complex1);
      
      boolean boolean0 = complex0.equals((Object) complex1);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertTrue(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.tan();
      assertEquals(0.761594155955765, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.761594155955765, complex1.abs(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotNull(complex1);
      
      boolean boolean0 = complex1.equals((Object) complex0);
      assertEquals(0.761594155955765, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.761594155955765, complex1.abs(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.atan();
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      
      boolean boolean0 = complex0.equals((Object) complex1);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertNotNull(complex0);
      
      Object object0 = null;
      boolean boolean0 = complex0.equals(object0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = Complex.INF;
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      
      boolean boolean0 = complex0.equals((Object) complex1);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      double double0 = 739.84;
      Complex complex0 = new Complex(double0, double0);
      assertEquals(1046.2917619861107, complex0.abs(), 0.01D);
      assertEquals(739.84, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(739.84, complex0.getReal(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sinh();
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(1046.2917619861107, complex0.abs(), 0.01D);
      assertEquals(739.84, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(739.84, complex0.getReal(), 0.01D);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotNull(complex1);
      
      Complex complex2 = complex0.divide(complex1);
      assertEquals(false, complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(1046.2917619861107, complex0.abs(), 0.01D);
      assertEquals(739.84, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(739.84, complex0.getReal(), 0.01D);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotNull(complex2);
  }

  @Test
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.tan();
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.761594155955765, complex1.getImaginary(), 0.01D);
      assertEquals(0.761594155955765, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.atan();
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.761594155955765, complex1.getImaginary(), 0.01D);
      assertEquals(0.761594155955765, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(1.0000000000000002, complex2.getImaginary(), 0.01D);
      assertEquals(1.0000000000000002, complex2.abs(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotNull(complex2);
  }

  @Test
  public void test31()  throws Throwable  {
      double double0 = (-37.87132460408107);
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0, double1);
      assertEquals(false, complex0.isNaN());
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.atan();
      assertEquals(false, complex0.isNaN());
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      
      Complex complex2 = complex0.divide(complex1);
      assertEquals(false, complex0.isNaN());
      assertEquals((-37.87132460408107), complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(double0 == double1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotNull(complex2);
  }

  @Test
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.divide(complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertNotNull(complex1);
  }

  @Test
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.conjugate();
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertNotNull(complex1);
  }

  @Test
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.conjugate();
      assertEquals((-1.0), complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotNull(complex1);
  }

  @Test
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = Complex.INF;
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotNull(complex2);
      
      Complex complex3 = complex2.acos();
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex2, complex3);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotNull(complex3);
  }

  @Test
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertNotNull(complex0);
      
      double double0 = complex0.abs();
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, double0, 0.01D);
  }
}
