/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:03:18 GMT 2014
 */

package org.apache.commons.math3.optimization.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.LinkedList;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Log;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class SimplexTableauEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 269;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(269, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, (double) int0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(269.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(269, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(269.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(269, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      Log log0 = new Log();
      assertNotNull(log0);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.mapToSelf((UnivariateFunction) log0);
      assertNotNull(arrayRealVector1);
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(269, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(269, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0, int0);
      assertNotNull(simplexTableau1);
      assertEquals(269.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(269, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertNotSame(simplexTableau1, simplexTableau0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean1);
      assertEquals(269.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(269, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertTrue(boolean0 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean1 == boolean0);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 222;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(222, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, (double) int0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(222.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(222, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(222.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(222, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0, int0);
      assertNotNull(simplexTableau1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(222.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(222, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertTrue(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(222.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(222, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertTrue(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean1 == boolean0);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1.282130763903269E70;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[4]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      int int0 = (-13);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertFalse(boolean0 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      double double0 = (-1.0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[10]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = true;
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertNotNull(simplexTableau1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = 624.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(624.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Relationship relationship0 = Relationship.GEQ;
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, double0, relationship0, doubleArray0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertTrue(boolean1);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 66;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(624.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList1 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList1);
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList1, goalType0, boolean0, int0);
      assertNotNull(simplexTableau1);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertEquals(624.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(boolean0 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean2);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertEquals(624.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-953.2328010482748);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-953.2328010482748), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-953.2328010482748), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-1);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction((RealVector) openMapRealVector0, double0);
      assertNotNull(linearObjectiveFunction1);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals((-953.2328010482748), linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals((-953.2328010482748), linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals((-953.2328010482748), linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertEquals((-953.2328010482748), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      assertTrue(boolean0 == boolean1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertTrue(boolean1 == boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = 624.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(624.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Relationship relationship0 = Relationship.GEQ;
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, double0, relationship0, doubleArray0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertTrue(boolean1);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 66;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1, linkedList0.size());
      assertEquals(624.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertFalse(boolean0 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, double0, int0);
      assertNotNull(simplexTableau1);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1, linkedList0.size());
      assertEquals(624.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertFalse(boolean1 == boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean2);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1, linkedList0.size());
      assertEquals(624.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[1]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) linkedList0);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1.3665449544924564);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1.3665449544924564), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertNotNull(simplexTableau0);
      assertEquals((-1.3665449544924564), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      simplexTableau0.divideRow(int0, double0);
      assertEquals((-1.3665449544924564), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      double double0 = (-1.0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[10]);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      //  // Unstable assertion: assertNotNull(arrayRealVector0);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(15, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction1);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(15, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), linearObjectiveFunction1.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      //  // Unstable assertion: assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, boolean0, double0);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(15, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), linearObjectiveFunction1.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      //  // Unstable assertion: assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      //  // Unstable assertion: assertNotNull(simplexTableau1);
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertNotSame(simplexTableau1, simplexTableau0);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      //  // Unstable assertion: assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(15, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), linearObjectiveFunction1.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertNotSame(simplexTableau1, simplexTableau0);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      //  // Unstable assertion: assertNotSame(simplexTableau0, simplexTableau1);
      //  // Unstable assertion: assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      //  // Unstable assertion: assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType1 = GoalType.MAXIMIZE;
      //  // Unstable assertion: assertNotSame(goalType1, goalType0);
      
      int int0 = 1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[0] = doubleArray0[2];
      LinearObjectiveFunction linearObjectiveFunction2 = new LinearObjectiveFunction(doubleArray0, (double) int0);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction2);
      //  // Unstable assertion: assertEquals(1.0, linearObjectiveFunction2.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction2, linearObjectiveFunction1);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction2, linearObjectiveFunction0);
      //  // Unstable assertion: assertFalse(linearObjectiveFunction2.equals((Object)linearObjectiveFunction1));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction2.equals((Object)linearObjectiveFunction0));
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[9], relationship0, doubleArray0, doubleArray0[10]);
      //  // Unstable assertion: assertNotNull(linearConstraint0);
      //  // Unstable assertion: assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = linkedList0.add(linearConstraint0);
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction2, linkedList0, goalType1, boolean1, doubleArray0[5]);
      //  // Unstable assertion: assertNotNull(simplexTableau2);
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, linearObjectiveFunction2.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(15, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), linearObjectiveFunction1.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertNotSame(simplexTableau1, simplexTableau0);
      //  // Unstable assertion: assertNotSame(simplexTableau1, simplexTableau2);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction0, linearObjectiveFunction2);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction2, linearObjectiveFunction1);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction2, linearObjectiveFunction0);
      //  // Unstable assertion: assertNotSame(goalType0, goalType1);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction1, linearObjectiveFunction2);
      //  // Unstable assertion: assertNotSame(goalType1, goalType0);
      //  // Unstable assertion: assertNotSame(simplexTableau2, simplexTableau1);
      //  // Unstable assertion: assertNotSame(simplexTableau2, simplexTableau0);
      //  // Unstable assertion: assertNotSame(simplexTableau0, simplexTableau2);
      //  // Unstable assertion: assertNotSame(simplexTableau0, simplexTableau1);
      //  // Unstable assertion: assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction2));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction2.equals((Object)linearObjectiveFunction1));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction2.equals((Object)linearObjectiveFunction0));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1 == boolean2);
      //  // Unstable assertion: assertFalse(goalType0.equals((Object)goalType1));
      //  // Unstable assertion: assertFalse(goalType1.equals((Object)goalType0));
      //  // Unstable assertion: assertFalse(simplexTableau2.equals((Object)simplexTableau1));
      //  // Unstable assertion: assertFalse(simplexTableau2.equals((Object)simplexTableau0));
      //  // Unstable assertion: assertTrue(boolean0 == boolean2);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      //  // Unstable assertion: assertFalse(simplexTableau1.equals((Object)simplexTableau2));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction2));
      //  // Unstable assertion: assertFalse(simplexTableau0.equals((Object)simplexTableau2));
      //  // Unstable assertion: assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = simplexTableau2.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      double double0 = (-1.0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[10]);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      
      boolean boolean0 = true;
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType1 = GoalType.MAXIMIZE;
      //  // Unstable assertion: assertNotSame(goalType1, goalType0);
      
      int int0 = 1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[0] = doubleArray0[2];
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, (double) int0);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction1);
      //  // Unstable assertion: assertEquals(1.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      //  // Unstable assertion: assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[9], relationship0, doubleArray0, doubleArray0[10]);
      //  // Unstable assertion: assertNotNull(linearConstraint0);
      //  // Unstable assertion: assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = linkedList0.add(linearConstraint0);
      //  // Unstable assertion: assertTrue(boolean2);
      //  // Unstable assertion: assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType1, boolean1, doubleArray0[5]);
      //  // Unstable assertion: assertNotNull(simplexTableau1);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertEquals(1.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertNotSame(goalType1, goalType0);
      //  // Unstable assertion: assertNotSame(simplexTableau0, simplexTableau1);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      //  // Unstable assertion: assertNotSame(simplexTableau1, simplexTableau0);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      //  // Unstable assertion: assertNotSame(goalType0, goalType1);
      //  // Unstable assertion: assertFalse(goalType1.equals((Object)goalType0));
      //  // Unstable assertion: assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
      //  // Unstable assertion: assertTrue(boolean0 == boolean2);
      //  // Unstable assertion: assertTrue(boolean1 == boolean2);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      //  // Unstable assertion: assertFalse(goalType0.equals((Object)goalType1));
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = simplexTableau1.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) openMapRealVector0, (double) int0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(pointValuePair0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[6] = double0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[1]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.isOptimal();
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = true;
      int int0 = 1389;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[2], int0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.isOptimal();
      assertTrue(boolean1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[10]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[9], relationship0, doubleArray0, doubleArray0[10]);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertTrue(boolean0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-2651);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0], int0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.dropPhase1Objective();
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-3639.71389533);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-3639.71389533), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = true;
      GoalType goalType0 = GoalType.MINIMIZE;
      int int0 = 278;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-3639.71389533), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.dropPhase1Objective();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-3639.71389533), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = (-1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      double[] doubleArray0 = new double[7];
      double double1 = 1.0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      //  // Unstable assertion: assertNotNull(arrayRealVector0);
      //  // Unstable assertion: assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(7, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, (-1.0), 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) arrayRealVector0, relationship0, doubleArray0[5]);
      //  // Unstable assertion: assertNotNull(linearConstraint0);
      //  // Unstable assertion: assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(7, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, (-1.0), 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(7, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, (-1.0), 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, (-1.0), 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, doubleArray0[0]);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(7, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, (-1.0), 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.dropPhase1Objective();
      //  // Unstable assertion: assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(7, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.4142135623730951, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, (-1.0), 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = simplexTableau0.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = 624.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(624.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Relationship relationship0 = Relationship.GEQ;
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      double double1 = 2907.135241666263;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, double1, relationship0, doubleArray0, double0);
      assertNotNull(linearConstraint0);
      assertEquals((-2283.135241666263), linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertTrue(boolean1);
      assertEquals((-2283.135241666263), linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(624.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0 == boolean1);
      assertFalse(double0 == double1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = 624.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(624.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(624.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = simplexTableau0.getData();
      assertNotNull(doubleArray1);
      assertEquals(624.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      double double0 = (-1.0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[10]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = true;
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumDecisionVariables();
      assertEquals(15, int0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-1775.7425968598081);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int0 = 1196;
      // Undeclared exception!
      try {
        simplexTableau0.subtractRow(int0, int0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1,196)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1.3665449544924564);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1.3665449544924564), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals((-1.3665449544924564), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 0;
      simplexTableau0.setEntry(int0, int0, double0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals((-1.3665449544924564), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test22() {}
//   @Test
//   public void test22()  throws Throwable  {
//       int int0 = 269;
//       ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
//       assertNotNull(arrayRealVector0);
//       assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
//       assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
//       assertEquals(false, arrayRealVector0.isInfinite());
//       assertEquals(269, arrayRealVector0.getDimension());
//       assertEquals(false, arrayRealVector0.isNaN());
//       assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
//       
//       LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, (double) int0);
//       assertNotNull(linearObjectiveFunction0);
//       assertEquals(269.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
//       assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
//       assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
//       assertEquals(false, arrayRealVector0.isInfinite());
//       assertEquals(269, arrayRealVector0.getDimension());
//       assertEquals(false, arrayRealVector0.isNaN());
//       assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
//       
//       LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
//       assertNotNull(linkedList0);
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       
//       GoalType goalType0 = GoalType.MINIMIZE;
//       boolean boolean0 = false;
//       SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0, int0);
//       assertNotNull(simplexTableau0);
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       assertEquals(269.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
//       assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
//       assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
//       assertEquals(false, arrayRealVector0.isInfinite());
//       assertEquals(269, arrayRealVector0.getDimension());
//       assertEquals(false, arrayRealVector0.isNaN());
//       assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
//       
//       int int1 = simplexTableau0.hashCode();
//       assertEquals(1237, int1);
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       assertEquals(269.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
//       assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
//       assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
//       assertEquals(false, arrayRealVector0.isInfinite());
//       assertEquals(269, arrayRealVector0.getDimension());
//       assertEquals(false, arrayRealVector0.isNaN());
//       assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//   }

  @Test
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      double double0 = (-1.0);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[10]);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      //  // Unstable assertion: assertNotNull(arrayRealVector0);
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(15, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction1);
      //  // Unstable assertion: assertEquals((-1.0), linearObjectiveFunction1.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(15, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      //  // Unstable assertion: assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, boolean0, double0);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals((-1.0), linearObjectiveFunction1.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(15, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      //  // Unstable assertion: assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      //  // Unstable assertion: assertNotNull(simplexTableau1);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      //  // Unstable assertion: assertNotSame(simplexTableau1, simplexTableau0);
      //  // Unstable assertion: assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      //  // Unstable assertion: assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), linearObjectiveFunction1.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(15, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      //  // Unstable assertion: assertNotSame(simplexTableau1, simplexTableau0);
      //  // Unstable assertion: assertNotSame(simplexTableau0, simplexTableau1);
      //  // Unstable assertion: assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      //  // Unstable assertion: assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType1 = GoalType.MAXIMIZE;
      //  // Unstable assertion: assertNotSame(goalType1, goalType0);
      
      int int0 = 1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[6] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[8] = (double) int0;
      doubleArray0[10] = (double) int0;
      doubleArray0[0] = doubleArray0[2];
      LinearObjectiveFunction linearObjectiveFunction2 = new LinearObjectiveFunction(doubleArray0, (double) int0);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction2);
      //  // Unstable assertion: assertEquals(1.0, linearObjectiveFunction2.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction2, linearObjectiveFunction0);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction2, linearObjectiveFunction1);
      //  // Unstable assertion: assertFalse(linearObjectiveFunction2.equals((Object)linearObjectiveFunction0));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction2.equals((Object)linearObjectiveFunction1));
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau2 = new SimplexTableau(linearObjectiveFunction2, linkedList0, goalType1, boolean1, doubleArray0[5]);
      //  // Unstable assertion: assertNotNull(simplexTableau2);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), linearObjectiveFunction1.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(15, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, linearObjectiveFunction2.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction0, linearObjectiveFunction2);
      //  // Unstable assertion: assertNotSame(goalType1, goalType0);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction1, linearObjectiveFunction2);
      //  // Unstable assertion: assertNotSame(simplexTableau1, simplexTableau2);
      //  // Unstable assertion: assertNotSame(simplexTableau1, simplexTableau0);
      //  // Unstable assertion: assertNotSame(goalType0, goalType1);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction2, linearObjectiveFunction0);
      //  // Unstable assertion: assertNotSame(linearObjectiveFunction2, linearObjectiveFunction1);
      //  // Unstable assertion: assertNotSame(simplexTableau2, simplexTableau1);
      //  // Unstable assertion: assertNotSame(simplexTableau2, simplexTableau0);
      //  // Unstable assertion: assertNotSame(simplexTableau0, simplexTableau2);
      //  // Unstable assertion: assertNotSame(simplexTableau0, simplexTableau1);
      //  // Unstable assertion: assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction2));
      //  // Unstable assertion: assertFalse(goalType1.equals((Object)goalType0));
      //  // Unstable assertion: assertFalse(goalType0.equals((Object)goalType1));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction2.equals((Object)linearObjectiveFunction0));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction2.equals((Object)linearObjectiveFunction1));
      //  // Unstable assertion: assertFalse(simplexTableau2.equals((Object)simplexTableau1));
      //  // Unstable assertion: assertFalse(simplexTableau2.equals((Object)simplexTableau0));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      //  // Unstable assertion: assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction2));
      //  // Unstable assertion: assertFalse(simplexTableau1.equals((Object)simplexTableau2));
      //  // Unstable assertion: assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(simplexTableau0.equals((Object)simplexTableau2));
      //  // Unstable assertion: assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = simplexTableau2.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
