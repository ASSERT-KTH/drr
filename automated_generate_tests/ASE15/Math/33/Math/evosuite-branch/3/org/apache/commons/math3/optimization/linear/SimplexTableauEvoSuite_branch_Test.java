/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:01:09 GMT 2014
 */

package org.apache.commons.math3.optimization.linear;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.LinkedList;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexTableau;



import org.junit.runner.RunWith;


public class SimplexTableauEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = Double.POSITIVE_INFINITY;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      int int0 = (-4865);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      GoalType goalType1 = GoalType.MAXIMIZE;
      assertNotSame(goalType1, goalType0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, boolean0, int0);
      assertNotNull(simplexTableau1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(goalType1.equals((Object)goalType0));
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(goalType1, goalType0);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(goalType0.equals((Object)goalType1));
      assertFalse(goalType1.equals((Object)goalType0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(goalType0, goalType1);
      assertNotSame(goalType1, goalType0);
      assertNotSame(simplexTableau0, simplexTableau1);
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[1]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      int int0 = (-4890);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertNotNull(simplexTableau1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = Double.POSITIVE_INFINITY;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      int int0 = (-4865);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0);
      assertNotNull(simplexTableau1);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertTrue(boolean1 == boolean0);
      assertTrue(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean0 == boolean1);
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      double double0 = 0.0;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, double0, relationship0, doubleArray0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)linearConstraint0.getCoefficients();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      
      int int0 = (-335);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, double0, int0);
      assertNotNull(simplexTableau1);
      assertTrue(boolean1 == boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      
      boolean boolean2 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean1 == boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = (-1644.1451003);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumArtificialVariables();
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, doubleArray0[1]);
      assertNotNull(linearObjectiveFunction1);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, boolean0, int0, int0);
      assertNotNull(simplexTableau1);
      assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertNotSame(simplexTableau0, simplexTableau1);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean0 == boolean1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertNotSame(simplexTableau0, simplexTableau1);
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = Double.POSITIVE_INFINITY;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      boolean boolean1 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, double0);
      assertNotNull(simplexTableau0);
      assertFalse(boolean1 == boolean0);
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0 == boolean1);
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      
      boolean boolean2 = simplexTableau0.equals((Object) simplexTableau1);
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertEquals(Double.POSITIVE_INFINITY, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      int int0 = (-574);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0], int0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.equals((Object) doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = (-1644.1451003);
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumArtificialVariables();
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0, int0);
      assertNotNull(simplexTableau1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean1 == boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean0 == boolean1);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      double double0 = 0.0;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, double0, relationship0, doubleArray0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)linearConstraint0.getCoefficients();
      assertNotNull(arrayRealVector0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int int0 = (-335);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int1 = 2;
      simplexTableau0.divideRow(int1, double0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      double double1 = (-656.1912496400189);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[1], relationship0, doubleArray0, double1);
      //  // Unstable assertion: assertNotNull(linearConstraint0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals((-655.1912496400189), linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals((-655.1912496400189), linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(boolean0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean1 = false;
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, doubleArray0[1]);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = simplexTableau0.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      double double1 = (-656.1912496400189);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[1], relationship0, doubleArray0, double1);
      //  // Unstable assertion: assertNotNull(linearConstraint0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals((-655.1912496400189), linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals((-655.1912496400189), linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(boolean0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals((-655.1912496400189), linearConstraint0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      //  // Unstable assertion: assertEquals(1, linkedList0.size());
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = simplexTableau0.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[4] = double0;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      
      PointValuePair pointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(pointValuePair0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double0 = 2845.833601945072;
      doubleArray0[2] = double0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 2845.833601945072, 0.0}, doubleArray0, 0.01);
      
      int int0 = (-14);
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1], int0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 2845.833601945072, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.isOptimal();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 2845.833601945072, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 144.12110691225809;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(144.12110691225809, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(144.12110691225809, linearConstraint0.getValue(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.offerFirst(linearConstraint0);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(144.12110691225809, linearConstraint0.getValue(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0]);
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(144.12110691225809, linearConstraint0.getValue(), 0.01D);
      assertEquals(144.12110691225809, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.isOptimal();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(144.12110691225809, linearConstraint0.getValue(), 0.01D);
      assertEquals(144.12110691225809, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-1.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[1], relationship0, doubleArray0, double0);
      assertNotNull(linearConstraint0);
      assertEquals((-1.0), linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals((-1.0), linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals((-1.0), linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.dropPhase1Objective();
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals((-1.0), linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      double double0 = 0.0;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, double0, relationship0, doubleArray0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)linearConstraint0.getCoefficients();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      simplexTableau0.dropPhase1Objective();
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      double double0 = 0.0;
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, double0, relationship0, doubleArray0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)linearConstraint0.getCoefficients();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int int0 = (-335);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      simplexTableau0.dropPhase1Objective();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[2]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = true;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[2]);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = simplexTableau0.getData();
      assertNotNull(doubleArray1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      int int0 = (-574);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[0], int0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = simplexTableau0.getNumDecisionVariables();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, int1);
  }

  @Test
  public void test19() {}
//   @Test
//   public void test19()  throws Throwable  {
//       double[] doubleArray0 = new double[1];
//       LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
//       assertNotNull(linkedList0);
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       
//       double double0 = 0.0;
//       Relationship relationship0 = Relationship.EQ;
//       LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, double0, relationship0, doubleArray0, double0);
//       assertNotNull(linearConstraint0);
//       assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
//       assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
//       assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
//       
//       ArrayRealVector arrayRealVector0 = (ArrayRealVector)linearConstraint0.getCoefficients();
//       assertNotNull(arrayRealVector0);
//       assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
//       assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
//       assertEquals(1, arrayRealVector0.getDimension());
//       assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
//       assertEquals(false, arrayRealVector0.isNaN());
//       assertEquals(false, arrayRealVector0.isInfinite());
//       assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
//       assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
//       assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
//       
//       LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
//       assertNotNull(linearObjectiveFunction0);
//       assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
//       assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
//       assertEquals(1, arrayRealVector0.getDimension());
//       assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
//       assertEquals(false, arrayRealVector0.isNaN());
//       assertEquals(false, arrayRealVector0.isInfinite());
//       assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
//       assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
//       assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
//       assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
//       
//       GoalType goalType0 = GoalType.MAXIMIZE;
//       boolean boolean0 = true;
//       SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
//       assertNotNull(simplexTableau0);
//       assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
//       assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
//       assertEquals(1, arrayRealVector0.getDimension());
//       assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
//       assertEquals(false, arrayRealVector0.isNaN());
//       assertEquals(false, arrayRealVector0.isInfinite());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
//       assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
//       assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
//       assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
//       
//       int int0 = (-335);
//       int int1 = simplexTableau0.hashCode();
//       assertFalse(int1 == int0);
//       assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
//       assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
//       assertEquals(1, arrayRealVector0.getDimension());
//       assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
//       assertEquals(false, arrayRealVector0.isNaN());
//       assertEquals(false, arrayRealVector0.isInfinite());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
//       assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
//       assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
//       assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
//       assertEquals(1216, int1);
//       
//       // Undeclared exception!
//       try {
//         simplexTableau0.subtractRow(int1, int1, int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // row index (1,216)
//          //
//       }
//   }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 1098;
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1098, openMapRealVector0.getDimension());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) openMapRealVector0, (double) int0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1098, openMapRealVector0.getDimension());
      assertEquals(1098.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, int0, int0);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1098, openMapRealVector0.getDimension());
      assertEquals(1098.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      
      // Undeclared exception!
      try {
        simplexTableau0.setEntry(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (1,098)
         //
      }
  }
}
