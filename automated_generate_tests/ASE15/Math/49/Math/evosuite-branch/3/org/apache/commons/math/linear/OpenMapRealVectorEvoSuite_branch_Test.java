/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:12:38 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.exception.DimensionMismatchException;
import org.apache.commons.math.exception.MathArithmeticException;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class OpenMapRealVectorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[51];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(51, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(51, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(51, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertFalse(boolean0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(51, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(51, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.11427051477092628;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(double0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector2.getDimension());
      assertNotNull(openMapRealVector2);
      
      boolean boolean0 = openMapRealVector2.equals((Object) openMapRealVector1);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector2.getDimension());
  }

  @Test
  public void test02()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double double0 = 3672.1150461;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(double0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.append(openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector2);
      
      boolean boolean0 = openMapRealVector2.equals((Object) openMapRealVector1);
      assertTrue(boolean0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 0.0;
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertFalse(boolean0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[51];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(51, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(51, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) arrayRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(51, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(51, openMapRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(51, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertTrue(boolean0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(51, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(51, openMapRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(51, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double double0 = 1676.435176719035;
      Double double1 = new Double(double0);
      assertEquals(1676.435176719035, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[0]);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = openMapRealVector0.equals(object0);
      assertFalse(boolean0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(0, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      
      double[] doubleArray0 = new double[51];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(51, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(0, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(51, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 2671.644;
      doubleArray0[3] = double0;
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) doubleArray0[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      int int0 = openMapRealVector0.hashCode();
      assertEquals(305044092, int0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) doubleArray0[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      int int0 = openMapRealVector0.hashCode();
      assertEquals((-818727110), int0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 237;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(237, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.6644457265;
      doubleArray0[2] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.6644457265, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.6644457265, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(0.16666666666666666, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract((RealVector) openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.6644457265, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(0.16666666666666666, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(6, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector2);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = 0.0;
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      openMapRealVector0.set((double) doubleArray0[0]);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.11427051477092628;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(double0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector1.outerProduct(doubleArray0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(2, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealMatrix0);
  }

  @Test
  public void test13()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      double double0 = openMapRealVector0.getMinValue();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(double0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector1.isNaN();
      assertTrue(boolean0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      boolean boolean0 = openMapRealVector0.isNaN();
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 156;
      double double0 = (-1110.1997653473154);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, double0);
      assertEquals(156, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.combineToSelf((double) int0, (double) int0, (RealVector) openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(156, openMapRealVector0.getDimension());
      assertEquals(156, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(156, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(156, openMapRealVector0.getDimension());
      assertEquals(156, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector2);
      
      boolean boolean0 = openMapRealVector2.isInfinite();
      assertFalse(boolean0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(156, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(156, openMapRealVector0.getDimension());
      assertEquals(156, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 156;
      double double0 = (-1110.1997653473154);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, double0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(156, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.combineToSelf((double) int0, (double) int0, (RealVector) openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(156, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(156, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertFalse(boolean0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(156, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double double0 = 1676.435176719035;
      Double double1 = new Double(double0);
      assertEquals(1676.435176719035, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[0]);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double[] doubleArray1 = new double[2];
      double double2 = openMapRealVector0.getLInfDistance(doubleArray1);
      assertEquals(1676.435176719035, double2, 0.01D);
      assertTrue(double2 == double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 1.589125938134424;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {1.589125938134424, 1.589125938134424, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.4, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {1.589125938134424, 1.589125938134424, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.4, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      
      double double1 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(1.589125938134424, double1, 0.01D);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(double1 == double0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {1.589125938134424, 1.589125938134424, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.4, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.11427051477092628;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(double0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector2);
      
      double double1 = openMapRealVector2.getLInfDistance((RealVector) openMapRealVector1);
      assertEquals(0.11427051477092628, double1, 0.01D);
      assertTrue(double0 == double1);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(double1 == double0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
  }

  @Test
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(0, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      
      double[] doubleArray0 = new double[51];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(51, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(0, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      
      double double0 = openMapRealVector0.getL1Distance(openMapRealVector1);
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01D);
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(51, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
  }

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 291.2189;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      double double1 = openMapRealVector0.getDistance(doubleArray0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
  }

  @Test
  public void test25()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      double double0 = openMapRealVector0.getDistance((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 1782;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1782, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) int0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {1782.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.1, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      double double0 = openMapRealVector0.getDistance(openMapRealVector1);
      assertEquals(1782.0, double0, 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {1782.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.1, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1782, openMapRealVector0.getDimension());
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-1342.271807);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      int int0 = 1;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(int0, int0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 2671.644;
      doubleArray0[3] = double0;
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) doubleArray0[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 4591;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4591, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtractToSelf((double) int0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4591, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4591, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) int0;
      // Undeclared exception!
      try {
        double double0 = openMapRealVector0.cosine(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4,591 != 6
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[51];
      double double0 = (-0.16624882440418567);
      doubleArray0[23] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-0.16624882440418567), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0196078431372549, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(51, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-0.16624882440418567), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.16624882440418567, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.16624882440418567, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(51, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.16624882440418567, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) arrayRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-0.16624882440418567), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(51, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0.0196078431372549, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(51, openMapRealVector0.getDimension());
      assertEquals(0.16624882440418567, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.16624882440418567, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(51, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.16624882440418567, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.projection(doubleArray0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-0.16624882440418567), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(51, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0.0196078431372549, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(51, openMapRealVector0.getDimension());
      assertEquals(0.0196078431372549, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(51, openMapRealVector2.getDimension());
      assertEquals(0.16624882440418567, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.16624882440418567, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(51, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.16624882440418567, arrayRealVector0.getLInfNorm(), 0.01D);
      assertNotNull(openMapRealVector2);
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = 0.0;
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = (Double) double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test34()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(arrayRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 803;
      double double0 = (-764.6978503261357);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, double0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(803, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(803, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(803, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.combineToSelf(double0, double0, (RealVector) openMapRealVector0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(803, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(803, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector2);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.add(openMapRealVector1);
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector3));
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01D);
      assertEquals(803, openMapRealVector3.getDimension());
      assertEquals(803, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(803, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector3);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 156;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertEquals(156, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(156, openMapRealVector1.getDimension());
      assertEquals(156, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.11427051477092628;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(double0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector2);
  }

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      int int0 = 0;
      openMapRealVector0.setSubVector(int0, (RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 237;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertEquals(237, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double double0 = openMapRealVector0.getSparsity();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(237, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 4591;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4591, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((double) int0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector1);
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      double[] doubleArray0 = openMapRealVector0.toArray();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(doubleArray0);
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      //  // Unstable assertion: assertEquals(0, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      
      double[] doubleArray0 = new double[51];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(51, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(51, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)openMapRealVector1.add((RealVector) arrayRealVector0);
      //  // Unstable assertion: assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertNotSame(arrayRealVector1, arrayRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(arrayRealVector0, arrayRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(false, arrayRealVector1.isNaN());
      //  // Unstable assertion: assertEquals(51, arrayRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector1.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(51, arrayRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(false, arrayRealVector0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(51, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertNotNull(arrayRealVector1);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 1782;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1782, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1782, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      
      // Undeclared exception!
      try {
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
  }
}
