/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:29:09 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.exception.MathArithmeticException;
import org.apache.commons.math.exception.OutOfRangeException;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class OpenMapRealVectorEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 138;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(138, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf((double) int0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(138, openMapRealVector1.getDimension());
      assertEquals(138, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector2);
      assertEquals(138, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(138, openMapRealVector2.getDimension());
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertTrue(boolean0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(138, openMapRealVector1.getDimension());
      assertEquals(138, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(138, openMapRealVector2.getDimension());
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 138;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(138, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(138, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(138, openMapRealVector1.getDimension());
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(138, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(138, openMapRealVector1.getDimension());
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 2415.887386946876;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(double0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.unitVector();
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector2);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector2.getDimension());
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector2.getDimension());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertEquals(0, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      //  // Unstable assertion: assertEquals(0, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(7, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(7, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 380.733658651;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = double1;
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double1);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      
      int int0 = (-2832);
      Integer integer0 = new Integer(int0);
      assertEquals((-2832), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = openMapRealVector0.equals((Object) integer0);
      assertFalse(boolean0);
      assertTrue(double1.equals((Object)double0));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1.7895092563028574);
      doubleArray0[1] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.7895092563028574)}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.5, openMapRealVector0.getSparsity(), 0.01D);
      
      int int0 = openMapRealVector0.hashCode();
      assertEquals((-503599653), int0);
      assertArrayEquals(new double[] {0.0, (-1.7895092563028574)}, doubleArray0, 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.5, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 2415.887386946876;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(double0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract(doubleArray0);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector2);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector2.getDimension());
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      int int0 = 1816;
      int int1 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int1, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) arrayRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 36;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(36, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((double) int0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(36, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(36, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract((RealVector) openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector2);
      assertEquals(36, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(36, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(36, openMapRealVector0.getDimension());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 192;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(192, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      double double0 = openMapRealVector0.getMaxValue();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(192, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      openMapRealVector0.set(double0);
      assertEquals(192, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 36;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(36, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      double[] doubleArray0 = new double[5];
      int int1 = 0;
      openMapRealVector0.setSubVector(int1, doubleArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(36, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      int int0 = 1251;
      double[] doubleArray0 = new double[15];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((double) int0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector1.outerProduct(doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertEquals(false, openMapRealMatrix0.isSquare());
      assertEquals(15, openMapRealMatrix0.getColumnDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1.7895092563028574);
      doubleArray0[1] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.7895092563028574)}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(0.5, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      
      boolean boolean0 = openMapRealVector0.isNaN();
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, (-1.7895092563028574)}, doubleArray0, 0.01);
      assertEquals(0.5, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 2391;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2391, openMapRealVector0.getDimension());
      
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(double0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2391, openMapRealVector0.getDimension());
      assertEquals(2391, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      
      boolean boolean0 = openMapRealVector0.isNaN();
      assertSame(openMapRealVector0, openMapRealVector1);
      assertTrue(boolean0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2391, openMapRealVector0.getDimension());
  }

  @Test
  public void test16()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      double double0 = (-111.64729527072465);
      Double double1 = new Double(double0);
      assertEquals((-111.64729527072465), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[3] = double1;
      doubleArray0[1] = doubleArray0[3];
      doubleArray0[4] = (Double) double0;
      double double2 = Double.NEGATIVE_INFINITY;
      Double double3 = new Double(double2);
      assertNotSame(double3, double1);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double3, 0.01D);
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double2 == double0);
      
      doubleArray0[2] = double3;
      doubleArray0[5] = double3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[4]);
      assertNotNull(openMapRealVector0);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertTrue(boolean0);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-0.258745736641395);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      
      openMapRealVector0.unitize();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 2415.887386946876;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(double0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      
      double double1 = openMapRealVector1.getLInfDistance(doubleArray0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(2415.887386946876, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 192;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertEquals(192, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      //  // Unstable assertion: assertEquals(192, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(192, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertEquals(192, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(192, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double double0 = 4573.25783;
      Double double1 = new Double(double0);
      assertEquals(4573.25783, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertNotNull(openMapRealVector0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      
      double double2 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(2.0910113921826303E7, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(double0 == double2);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[30];
      double double0 = 1.0E-12;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(30, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, doubleArray0[5]);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(30, openMapRealVector1.getDimension());
      
      double double1 = openMapRealVector0.getL1Distance(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(double0 == double1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(30, openMapRealVector1.getDimension());
      assertEquals(30, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[30];
      double double0 = (-1686.1255593757185);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(30, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      
      double double1 = openMapRealVector0.getL1Distance(openMapRealVector0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(30, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      double double0 = openMapRealVector0.getDistance((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 1251;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1251, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((double) int0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertEquals(1251, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1251, openMapRealVector0.getDimension());
      
      int int1 = 32;
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.getSubVector(int1, int1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector2);
      assertEquals(1251, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1251, openMapRealVector0.getDimension());
      assertEquals(32, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      
      double double0 = openMapRealVector0.getDistance(openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(7076.7246661149675, double0, 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertEquals(1251, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1251, openMapRealVector0.getDimension());
      assertEquals(32, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
  }

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-2076.6);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(double0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      double[] doubleArray1 = openMapRealVector1.toArray();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2076.6), (-2076.6), (-2076.6), (-2076.6), (-2076.6), (-2076.6), (-2076.6)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-0.258745736641395);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
  }

  @Test
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-0.258745736641395);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 138;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertEquals(138, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf((double) int0);
      //  // Unstable assertion: assertSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      //  // Unstable assertion: assertEquals(138, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(138, openMapRealVector1.getDimension());
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector2, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector2, openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector2);
      //  // Unstable assertion: assertSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector2);
      //  // Unstable assertion: assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      //  // Unstable assertion: assertNotNull(openMapRealVector2);
      //  // Unstable assertion: assertEquals(138, openMapRealVector2.getDimension());
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector2.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(138, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      //  // Unstable assertion: assertEquals(138, openMapRealVector1.getDimension());
  }

  @Test
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      
      double double0 = openMapRealVector0.dotProduct(doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
  }

  @Test
  public void test34()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      double double0 = 888.75946;
      Double double1 = new Double(double0);
      assertEquals(888.75946, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      double double2 = 0.0;
      Double double3 = new Double(double2);
      assertNotSame(double3, double1);
      assertEquals(0.0, (double)double3, 0.01D);
      assertTrue(double3.equals((Object)double2));
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double0));
      assertFalse(double2 == double0);
      
      doubleArray0[4] = double3;
      doubleArray0[5] = double3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.6666666666666666, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = double0;
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = doubleArray1[1];
      doubleArray1[5] = (double) double1;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {888.75946, 888.75946, 888.75946, 888.75946, 0.0, 888.75946}, doubleArray1, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(0.6666666666666666, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.8333333333333334, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
  }

  @Test
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(16, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
  }

  @Test
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      
      RealVector realVector0 = null;
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(realVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      int int0 = 2391;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(int0, int0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertEquals(2391, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.mapDivideToSelf(double0);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector2);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(2391, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(2391, openMapRealVector2.getDimension());
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector3);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector3.getSparsity(), 0.01D);
      assertEquals(2391, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(2391, openMapRealVector1.getDimension());
  }

  @Test
  public void test38()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      double double2 = 1238.4927631495;
      Double double3 = new Double(double2);
      assertNotSame(double3, double1);
      assertEquals(1238.4927631495, (double)double3, 0.01D);
      assertFalse(double3.equals((Object)double1));
      assertFalse(double3.equals((Object)double0));
      assertTrue(double3.equals((Object)double2));
      assertFalse(double2 == double0);
      
      doubleArray0[1] = double3;
      doubleArray0[2] = double3;
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = doubleArray0[1];
      doubleArray0[7] = double1;
      doubleArray0[8] = double3;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[8]);
      assertNotNull(openMapRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.4444444444444444, openMapRealVector0.getSparsity(), 0.01D);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[3] = (double) doubleArray0[6];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1238.4927631495, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(0.1111111111111111, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.4444444444444444, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1238.4927631495, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(openMapRealVector2);
      assertEquals(0.1111111111111111, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(9, openMapRealVector2.getDimension());
      assertEquals(0.4444444444444444, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.4444444444444444, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-5898.981904532);
      doubleArray0[2] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-5898.981904532), 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, (-5898.981904532), 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {0.0, 0.0, (-5898.981904532), 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector2);
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(0.25, openMapRealVector2.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector2.getDimension());
  }

  @Test
  public void test40()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = double1;
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double1);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(double1.equals((Object)double0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertNotNull(openMapRealVector1);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(17, openMapRealVector0.getDimension());
      
      int int0 = 1069;
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) doubleArray0[0];
      doubleArray1[1] = (Double) doubleArray0[0];
      doubleArray1[2] = (Double) doubleArray0[0];
      doubleArray1[3] = doubleArray1[1];
      doubleArray1[4] = (Double) doubleArray0[0];
      doubleArray1[5] = (Double) double0;
      doubleArray1[6] = doubleArray1[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(7, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      // Undeclared exception!
      try {
        openMapRealVector0.setSubVector(int0, (RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,069)
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      double double0 = 888.75946;
      Double double1 = new Double(double0);
      assertEquals(888.75946, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      
      double double2 = openMapRealVector0.getDistance(openMapRealVector0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = 138;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(138, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      double double0 = openMapRealVector0.getSparsity();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(138, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01D);
      
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 704.2946876811168;
      doubleArray0[2] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 704.2946876811168}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(996.0230992259585, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1408.5893753622336, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(704.2946876811168, arrayRealVector0.getLInfNorm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 704.2946876811168}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(996.0230992259585, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1408.5893753622336, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(704.2946876811168, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector0.getSparsity(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)openMapRealVector0.add((RealVector) arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 704.2946876811168}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(6, arrayRealVector0.getDimension());
      assertEquals(996.0230992259585, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1408.5893753622336, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(704.2946876811168, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.3333333333333333, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1992.046198451917, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(6, arrayRealVector1.getDimension());
      assertEquals(2817.178750724467, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1408.5893753622336, arrayRealVector1.getLInfNorm(), 0.01D);
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      // Undeclared exception!
      try {
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
      }
  }
}
