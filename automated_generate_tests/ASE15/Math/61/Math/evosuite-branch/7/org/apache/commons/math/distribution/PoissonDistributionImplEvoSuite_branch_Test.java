/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:37:33 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.apache.commons.math.exception.NotStrictlyPositiveException;



import org.junit.runner.RunWith;


public class PoissonDistributionImplEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = (-3170);
      double double0 = 268.182;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(268.182, poissonDistributionImpl0.getMean(), 0.01D);
      
      double double1 = poissonDistributionImpl0.cumulativeProbability(int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(268.182, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 0.5;
      int int0 = 3192;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, int0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
      
      double double1 = poissonDistributionImpl0.probability((double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 924.335697702;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double1);
      assertFalse(double1 == double0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(924.335697702, poissonDistributionImpl0.getMean(), 0.01D);
      
      double double2 = poissonDistributionImpl0.probability(double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(924.335697702, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 0.041666663879186654;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(0.041666663879186654, poissonDistributionImpl0.getMean(), 0.01D);
      
      int int0 = Integer.MAX_VALUE;
      double double1 = poissonDistributionImpl0.probability(int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.041666663879186654, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 0.041666663879186654;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(0.041666663879186654, poissonDistributionImpl0.getMean(), 0.01D);
      
      int int0 = (-1614);
      double double1 = poissonDistributionImpl0.probability(int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.041666663879186654, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = (-14.20344696);
      int int0 = Integer.MAX_VALUE;
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl(double0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -14.203 is smaller than, or equal to, the minimum (0): mean (-14.203)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 1.0E-12;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(1.0E-12, poissonDistributionImpl0.getMean(), 0.01D);
      
      double double1 = poissonDistributionImpl0.getMean();
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(1.0E-12, double1, 0.01D);
      assertEquals(1.0E-12, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = 1.0;
      int int0 = 0;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, int0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(1.0, poissonDistributionImpl0.getMean(), 0.01D);
      
      PoissonDistributionImpl poissonDistributionImpl1 = new PoissonDistributionImpl(double0);
      assertFalse(poissonDistributionImpl1.equals((Object)poissonDistributionImpl0));
      assertNotSame(poissonDistributionImpl1, poissonDistributionImpl0);
      assertNotNull(poissonDistributionImpl1);
      assertEquals(1.0, poissonDistributionImpl1.getMean(), 0.01D);
      
      int int1 = poissonDistributionImpl1.inverseCumulativeProbability(double0);
      assertFalse(poissonDistributionImpl1.equals((Object)poissonDistributionImpl0));
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
      assertNotSame(poissonDistributionImpl1, poissonDistributionImpl0);
      assertEquals(1.0, poissonDistributionImpl1.getMean(), 0.01D);
      
      double double1 = poissonDistributionImpl0.normalApproximateProbability(int1);
      assertFalse(int0 == int1);
      assertTrue(double0 == double1);
      assertFalse(poissonDistributionImpl1.equals((Object)poissonDistributionImpl0));
      assertTrue(double1 == double0);
      assertFalse(poissonDistributionImpl0.equals((Object)poissonDistributionImpl1));
      assertFalse(int1 == int0);
      assertEquals(1.0, double1, 0.01D);
      assertNotSame(poissonDistributionImpl1, poissonDistributionImpl0);
      assertNotSame(poissonDistributionImpl0, poissonDistributionImpl1);
      assertEquals(1.0, poissonDistributionImpl1.getMean(), 0.01D);
      assertEquals(1.0, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      double double0 = 1.0E-12;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
      assertNotNull(poissonDistributionImpl0);
      assertEquals(1.0E-12, poissonDistributionImpl0.getMean(), 0.01D);
      
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(0, int0);
      assertEquals(1.0E-12, poissonDistributionImpl0.getMean(), 0.01D);
  }
}
