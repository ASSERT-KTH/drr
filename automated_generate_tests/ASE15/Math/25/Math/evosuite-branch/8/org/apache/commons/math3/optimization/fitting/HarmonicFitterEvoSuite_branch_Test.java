/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:54:09 GMT 2014
 */

package org.apache.commons.math3.optimization.fitting;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.MathIllegalStateException;
import org.apache.commons.math3.exception.NumberIsTooSmallException;
import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;
import org.apache.commons.math3.optimization.fitting.HarmonicFitter;
import org.apache.commons.math3.optimization.fitting.WeightedObservedPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class HarmonicFitterEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      double double0 = 3001.275761097458;
      double double1 = (-162.5596544560509);
      double double2 = 0.0;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double1, double2);
      assertNotNull(weightedObservedPoint0);
      assertEquals(0.0, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(3001.275761097458, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals((-162.5596544560509), weightedObservedPoint0.getX(), 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertNotNull(weightedObservedPointArray0[0]);
      assertEquals((-162.5596544560509), weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(3001.275761097458, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(0.0, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(3001.275761097458, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals((-162.5596544560509), weightedObservedPoint0.getX(), 0.01D);
      
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double2, double2, double2);
      assertNotNull(weightedObservedPoint1);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertEquals(0.0, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(0.0, weightedObservedPoint1.getY(), 0.01D);
      assertEquals(0.0, weightedObservedPoint1.getX(), 0.01D);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      assertNotNull(weightedObservedPointArray0[1]);
      assertEquals(0.0, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(0.0, weightedObservedPoint1.getY(), 0.01D);
      assertEquals(0.0, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[1].getWeight(), 0.01D);
      
      double double3 = (-7.877917738262007E-9);
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(double3, double3, double3);
      assertNotNull(weightedObservedPoint2);
      assertNotSame(weightedObservedPoint2, weightedObservedPoint1);
      assertNotSame(weightedObservedPoint2, weightedObservedPoint0);
      assertEquals((-7.877917738262007E-9), weightedObservedPoint2.getWeight(), 0.01D);
      assertEquals((-7.877917738262007E-9), weightedObservedPoint2.getX(), 0.01D);
      assertEquals((-7.877917738262007E-9), weightedObservedPoint2.getY(), 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      assertNotNull(weightedObservedPointArray0[2]);
      assertEquals((-7.877917738262007E-9), weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals((-7.877917738262007E-9), weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals((-7.877917738262007E-9), weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals((-7.877917738262007E-9), weightedObservedPoint2.getWeight(), 0.01D);
      assertEquals((-7.877917738262007E-9), weightedObservedPoint2.getX(), 0.01D);
      assertEquals((-7.877917738262007E-9), weightedObservedPoint2.getY(), 0.01D);
      
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(double3, double0, double3);
      assertNotNull(weightedObservedPoint3);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint0);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint2);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint1);
      assertEquals((-7.877917738262007E-9), weightedObservedPoint3.getY(), 0.01D);
      assertEquals(3001.275761097458, weightedObservedPoint3.getX(), 0.01D);
      assertEquals((-7.877917738262007E-9), weightedObservedPoint3.getWeight(), 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      assertNotNull(weightedObservedPointArray0[3]);
      assertEquals((-7.877917738262007E-9), weightedObservedPointArray0[3].getY(), 0.01D);
      assertEquals((-7.877917738262007E-9), weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals(3001.275761097458, weightedObservedPointArray0[3].getX(), 0.01D);
      assertEquals((-7.877917738262007E-9), weightedObservedPoint3.getY(), 0.01D);
      assertEquals(3001.275761097458, weightedObservedPoint3.getX(), 0.01D);
      assertEquals((-7.877917738262007E-9), weightedObservedPoint3.getWeight(), 0.01D);
      
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(harmonicFitter_ParameterGuesser0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      double double0 = 0.482;
      double double1 = 0.4462171518349031;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double1, double1, double0);
      assertNotNull(weightedObservedPoint0);
      assertEquals(0.482, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(0.4462171518349031, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(0.4462171518349031, weightedObservedPoint0.getWeight(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertNotNull(weightedObservedPointArray0[0]);
      assertEquals(0.4462171518349031, weightedObservedPointArray0[0].getWeight(), 0.01D);
      assertEquals(0.4462171518349031, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(0.482, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(0.482, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(0.4462171518349031, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(0.4462171518349031, weightedObservedPoint0.getWeight(), 0.01D);
      
      double double2 = 0.3884038781464152;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double0, double2, double2);
      assertNotNull(weightedObservedPoint1);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertEquals(0.482, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(0.3884038781464152, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(0.3884038781464152, weightedObservedPoint1.getY(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      assertNotNull(weightedObservedPointArray0[1]);
      assertEquals(0.482, weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals(0.3884038781464152, weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals(0.3884038781464152, weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals(0.482, weightedObservedPoint1.getWeight(), 0.01D);
      assertEquals(0.3884038781464152, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(0.3884038781464152, weightedObservedPoint1.getY(), 0.01D);
      
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(double0, double0, double2);
      assertNotNull(weightedObservedPoint2);
      assertNotSame(weightedObservedPoint2, weightedObservedPoint0);
      assertNotSame(weightedObservedPoint2, weightedObservedPoint1);
      assertEquals(0.3884038781464152, weightedObservedPoint2.getY(), 0.01D);
      assertEquals(0.482, weightedObservedPoint2.getX(), 0.01D);
      assertEquals(0.482, weightedObservedPoint2.getWeight(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      assertNotNull(weightedObservedPointArray0[2]);
      assertEquals(0.482, weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals(0.3884038781464152, weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals(0.482, weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals(0.3884038781464152, weightedObservedPoint2.getY(), 0.01D);
      assertEquals(0.482, weightedObservedPoint2.getX(), 0.01D);
      assertEquals(0.482, weightedObservedPoint2.getWeight(), 0.01D);
      
      double double3 = 0.31061340524235137;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(double1, double3, double3);
      assertNotNull(weightedObservedPoint3);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint1);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint0);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint2);
      assertEquals(0.31061340524235137, weightedObservedPoint3.getY(), 0.01D);
      assertEquals(0.4462171518349031, weightedObservedPoint3.getWeight(), 0.01D);
      assertEquals(0.31061340524235137, weightedObservedPoint3.getX(), 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      assertNotNull(weightedObservedPointArray0[3]);
      assertEquals(0.31061340524235137, weightedObservedPoint3.getY(), 0.01D);
      assertEquals(0.4462171518349031, weightedObservedPoint3.getWeight(), 0.01D);
      assertEquals(0.31061340524235137, weightedObservedPoint3.getX(), 0.01D);
      assertEquals(0.4462171518349031, weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals(0.31061340524235137, weightedObservedPointArray0[3].getX(), 0.01D);
      assertEquals(0.31061340524235137, weightedObservedPointArray0[3].getY(), 0.01D);
      
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(harmonicFitter_ParameterGuesser0);
      
      double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.046798060926792395, 36.66089122118567, 2.373102791149258}, doubleArray0, 0.01);
  }

  @Test
  public void test2()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      double double0 = (-17.165478474228493);
      double double1 = 1.01;
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double1, double0);
      assertNotNull(weightedObservedPoint0);
      assertEquals((-17.165478474228493), weightedObservedPoint0.getY(), 0.01D);
      assertEquals(1.01, weightedObservedPoint0.getX(), 0.01D);
      assertEquals((-17.165478474228493), weightedObservedPoint0.getWeight(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertNotNull(weightedObservedPointArray0[0]);
      assertEquals((-17.165478474228493), weightedObservedPoint0.getY(), 0.01D);
      assertEquals(1.01, weightedObservedPoint0.getX(), 0.01D);
      assertEquals((-17.165478474228493), weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(1.01, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals((-17.165478474228493), weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals((-17.165478474228493), weightedObservedPointArray0[0].getWeight(), 0.01D);
      
      double double2 = 0.25593096643150337;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(double0, double2, double2);
      assertNotNull(weightedObservedPoint1);
      assertNotSame(weightedObservedPoint1, weightedObservedPoint0);
      assertEquals(0.25593096643150337, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(0.25593096643150337, weightedObservedPoint1.getY(), 0.01D);
      assertEquals((-17.165478474228493), weightedObservedPoint1.getWeight(), 0.01D);
      assertFalse(weightedObservedPoint1.equals((Object)weightedObservedPoint0));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      assertNotNull(weightedObservedPointArray0[1]);
      assertEquals(0.25593096643150337, weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals((-17.165478474228493), weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals(0.25593096643150337, weightedObservedPointArray0[1].getY(), 0.01D);
      assertEquals(0.25593096643150337, weightedObservedPoint1.getX(), 0.01D);
      assertEquals(0.25593096643150337, weightedObservedPoint1.getY(), 0.01D);
      assertEquals((-17.165478474228493), weightedObservedPoint1.getWeight(), 0.01D);
      
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(double0, double0, double2);
      assertNotNull(weightedObservedPoint2);
      assertNotSame(weightedObservedPoint2, weightedObservedPoint0);
      assertNotSame(weightedObservedPoint2, weightedObservedPoint1);
      assertEquals((-17.165478474228493), weightedObservedPoint2.getX(), 0.01D);
      assertEquals(0.25593096643150337, weightedObservedPoint2.getY(), 0.01D);
      assertEquals((-17.165478474228493), weightedObservedPoint2.getWeight(), 0.01D);
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint2.equals((Object)weightedObservedPoint1));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      assertNotNull(weightedObservedPointArray0[2]);
      assertEquals((-17.165478474228493), weightedObservedPoint2.getX(), 0.01D);
      assertEquals(0.25593096643150337, weightedObservedPoint2.getY(), 0.01D);
      assertEquals((-17.165478474228493), weightedObservedPoint2.getWeight(), 0.01D);
      assertEquals((-17.165478474228493), weightedObservedPointArray0[2].getWeight(), 0.01D);
      assertEquals(0.25593096643150337, weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals((-17.165478474228493), weightedObservedPointArray0[2].getX(), 0.01D);
      
      double double3 = (-18.96891668318611);
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(double1, double3, double3);
      assertNotNull(weightedObservedPoint3);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint2);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint0);
      assertNotSame(weightedObservedPoint3, weightedObservedPoint1);
      assertEquals((-18.96891668318611), weightedObservedPoint3.getX(), 0.01D);
      assertEquals((-18.96891668318611), weightedObservedPoint3.getY(), 0.01D);
      assertEquals(1.01, weightedObservedPoint3.getWeight(), 0.01D);
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint2));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint0));
      assertFalse(weightedObservedPoint3.equals((Object)weightedObservedPoint1));
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      assertNotNull(weightedObservedPointArray0[3]);
      assertEquals((-18.96891668318611), weightedObservedPointArray0[3].getY(), 0.01D);
      assertEquals(1.01, weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals((-18.96891668318611), weightedObservedPointArray0[3].getX(), 0.01D);
      assertEquals((-18.96891668318611), weightedObservedPoint3.getX(), 0.01D);
      assertEquals((-18.96891668318611), weightedObservedPoint3.getY(), 0.01D);
      assertEquals(1.01, weightedObservedPoint3.getWeight(), 0.01D);
      
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(harmonicFitter_ParameterGuesser0);
      
      double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {8.710704720329998, 0.31449079080786196, 1.9151814838775458}, doubleArray0, 0.01);
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 7.277411591674766;
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[9];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(double0, double0, doubleArray0[4]);
      assertNotNull(weightedObservedPoint0);
      assertEquals(0.0, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPoint0.getX(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      assertNotNull(weightedObservedPointArray0[0]);
      assertEquals(0.0, weightedObservedPoint0.getY(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPoint0.getWeight(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPoint0.getX(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[0].getY(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPointArray0[0].getX(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPointArray0[0].getWeight(), 0.01D);
      
      weightedObservedPointArray0[1] = weightedObservedPointArray0[0];
      assertNotNull(weightedObservedPointArray0[1]);
      assertEquals(7.277411591674766, weightedObservedPointArray0[1].getX(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPointArray0[1].getWeight(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[1].getY(), 0.01D);
      
      weightedObservedPointArray0[2] = weightedObservedPointArray0[0];
      assertNotNull(weightedObservedPointArray0[2]);
      assertEquals(7.277411591674766, weightedObservedPointArray0[2].getX(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[2].getY(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPointArray0[2].getWeight(), 0.01D);
      
      weightedObservedPointArray0[3] = weightedObservedPointArray0[0];
      assertNotNull(weightedObservedPointArray0[3]);
      assertEquals(7.277411591674766, weightedObservedPointArray0[3].getX(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPointArray0[3].getWeight(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[3].getY(), 0.01D);
      
      weightedObservedPointArray0[4] = weightedObservedPointArray0[1];
      assertNotNull(weightedObservedPointArray0[4]);
      assertEquals(0.0, weightedObservedPointArray0[4].getY(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPointArray0[4].getWeight(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPointArray0[4].getX(), 0.01D);
      
      weightedObservedPointArray0[5] = weightedObservedPointArray0[0];
      assertNotNull(weightedObservedPointArray0[5]);
      assertEquals(7.277411591674766, weightedObservedPointArray0[5].getX(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPointArray0[5].getWeight(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[5].getY(), 0.01D);
      
      weightedObservedPointArray0[6] = weightedObservedPointArray0[4];
      assertNotNull(weightedObservedPointArray0[6]);
      assertEquals(7.277411591674766, weightedObservedPointArray0[6].getX(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[6].getY(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPointArray0[6].getWeight(), 0.01D);
      
      weightedObservedPointArray0[7] = weightedObservedPointArray0[1];
      assertNotNull(weightedObservedPointArray0[7]);
      assertEquals(7.277411591674766, weightedObservedPointArray0[7].getWeight(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPointArray0[7].getX(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[7].getY(), 0.01D);
      
      weightedObservedPointArray0[8] = weightedObservedPointArray0[2];
      assertNotNull(weightedObservedPointArray0[8]);
      assertEquals(7.277411591674766, weightedObservedPointArray0[8].getX(), 0.01D);
      assertEquals(7.277411591674766, weightedObservedPointArray0[8].getWeight(), 0.01D);
      assertEquals(0.0, weightedObservedPointArray0[8].getY(), 0.01D);
      
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertNotNull(harmonicFitter_ParameterGuesser0);
      
      double[] doubleArray1 = harmonicFitter_ParameterGuesser0.guess();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test
  public void test4()  throws Throwable  {
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorOptimizer0);
      assertNotNull(harmonicFitter0);
      
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try {
        double[] doubleArray1 = harmonicFitter0.fit(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(differentiableMultivariateVectorOptimizer0);
      assertNotNull(harmonicFitter0);
      
      // Undeclared exception!
      try {
        double[] doubleArray0 = harmonicFitter0.fit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample contains 0 observed points, at least 4 are required
         //
      }
  }
}
