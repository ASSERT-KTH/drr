/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:22:21 GMT 2014
 */

package org.apache.commons.math3.exception.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Locale;
import org.apache.commons.math3.exception.util.LocalizedFormats;



import org.junit.runner.RunWith;


public class LocalizedFormatsEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.UNSUPPORTED_OPERATION;
      assertEquals(LocalizedFormats.UNSUPPORTED_OPERATION, localizedFormats0);
      assertEquals(291, localizedFormats0.ordinal());
      assertEquals("UNSUPPORTED_OPERATION", localizedFormats0.toString());
      assertEquals("unsupported operation", localizedFormats0.getSourceString());
      assertEquals("UNSUPPORTED_OPERATION", localizedFormats0.name());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = localizedFormats0.getLocalizedString(locale0);
      assertEquals("op\u00E9ration non disponible", string0);
      assertEquals(291, localizedFormats0.ordinal());
      assertEquals("UNSUPPORTED_OPERATION", localizedFormats0.toString());
      assertEquals("unsupported operation", localizedFormats0.getSourceString());
      assertEquals("UNSUPPORTED_OPERATION", localizedFormats0.name());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.UNSUPPORTED_OPERATION;
      assertEquals(LocalizedFormats.UNSUPPORTED_OPERATION, localizedFormats0);
      assertEquals("unsupported operation", localizedFormats0.getSourceString());
      assertEquals(291, localizedFormats0.ordinal());
      assertEquals("UNSUPPORTED_OPERATION", localizedFormats0.toString());
      assertEquals("UNSUPPORTED_OPERATION", localizedFormats0.name());
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = localizedFormats0.getLocalizedString(locale0);
      assertEquals("unsupported operation", string0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("unsupported operation", localizedFormats0.getSourceString());
      assertEquals(291, localizedFormats0.ordinal());
      assertEquals("UNSUPPORTED_OPERATION", localizedFormats0.toString());
      assertEquals("UNSUPPORTED_OPERATION", localizedFormats0.name());
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.UNSUPPORTED_OPERATION;
      assertEquals(LocalizedFormats.UNSUPPORTED_OPERATION, localizedFormats0);
      assertEquals(291, localizedFormats0.ordinal());
      assertEquals("UNSUPPORTED_OPERATION", localizedFormats0.toString());
      assertEquals("UNSUPPORTED_OPERATION", localizedFormats0.name());
      assertEquals("unsupported operation", localizedFormats0.getSourceString());
      
      String string0 = localizedFormats0.getSourceString();
      assertEquals("unsupported operation", string0);
      assertEquals(291, localizedFormats0.ordinal());
      assertEquals("UNSUPPORTED_OPERATION", localizedFormats0.toString());
      assertEquals("UNSUPPORTED_OPERATION", localizedFormats0.name());
      assertEquals("unsupported operation", localizedFormats0.getSourceString());
      assertNotNull(string0);
  }
}
