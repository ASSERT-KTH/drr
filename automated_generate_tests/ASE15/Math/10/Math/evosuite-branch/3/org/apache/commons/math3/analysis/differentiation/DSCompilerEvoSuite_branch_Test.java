/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:54:41 GMT 2014
 */

package org.apache.commons.math3.analysis.differentiation;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import org.apache.commons.math3.analysis.differentiation.DSCompiler;



import org.junit.runner.RunWith;


public class DSCompilerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(int0, int0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      dSCompiler0.tanh(doubleArray0, int0, doubleArray0, int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(int0, int0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[5];
      dSCompiler0.cos(doubleArray0, int0, doubleArray0, int0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 254;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(int0, int1);
      assertNotNull(dSCompiler0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(254, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.log1p(doubleArray0, int1, doubleArray0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(254, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[5];
      int int1 = 35;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(int0, int1);
      assertNotNull(dSCompiler0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(35, dSCompiler0.getOrder());
      
      dSCompiler0.pow(doubleArray0, int0, int1, doubleArray0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(35, dSCompiler0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(int0, int0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[5];
      int int1 = (-2885);
      dSCompiler0.pow(doubleArray0, int0, int1, doubleArray0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 202;
      int int1 = 1;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(int0, int1);
      assertNotNull(dSCompiler0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(203, dSCompiler0.getSize());
      assertEquals(202, dSCompiler0.getFreeParameters());
      assertEquals(1, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try {
        dSCompiler0.subtract(doubleArray0, int0, doubleArray0, int0, doubleArray0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 202
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(int0, int0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      
      double[] doubleArray0 = new double[2];
      dSCompiler0.expm1(doubleArray0, int0, doubleArray0, int0);
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }
}
