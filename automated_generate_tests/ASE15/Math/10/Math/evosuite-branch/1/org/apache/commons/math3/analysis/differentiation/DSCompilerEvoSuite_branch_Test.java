/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:33:45 GMT 2014
 */

package org.apache.commons.math3.analysis.differentiation;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.analysis.differentiation.DSCompiler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.junit.runner.RunWith;


public class DSCompilerEvoSuite_branch_Test  {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 877;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(dSCompiler0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(877, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      double[] doubleArray0 = new double[4];
      int int2 = dSCompiler0.getOrder();
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(877, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      
      dSCompiler0.tan(doubleArray0, int2, doubleArray0, int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dSCompiler0.getSize());
      assertEquals(877, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 877;
      int int1 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(dSCompiler0);
      assertEquals(877, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      int int2 = dSCompiler0.getFreeParameters();
      assertEquals(877, int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(877, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 0;
      DSCompiler dSCompiler0 = DSCompiler.getCompiler(int0, int0);
      assertNotNull(dSCompiler0);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
      
      double[] doubleArray0 = new double[9];
      dSCompiler0.atan2(doubleArray0, int0, doubleArray0, int0, doubleArray0, int0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, dSCompiler0.getFreeParameters());
      assertEquals(0, dSCompiler0.getOrder());
      assertEquals(1, dSCompiler0.getSize());
  }
}
