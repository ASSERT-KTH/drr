/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:06:45 GMT 2014
 */

package org.apache.commons.math.complex;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.apache.commons.math.exception.NotPositiveException;



import org.junit.runner.RunWith;


public class ComplexEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      int int0 = complex0.hashCode();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(2108686336, int0);
      
      Complex complex1 = Complex.valueOf(double0, (double) int0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(2.108686336E9, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = Complex.valueOf(double0, double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      
      int int0 = 1144;
      Complex complex1 = complex0.add((double) int0);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(1144.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(1144.0004370628535, complex1.abs(), 0.01D);
      assertEquals(8.741256514872688E-4, complex1.getArgument(), 0.01D);
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      
      Complex complex2 = complex1.exp();
      assertNotNull(complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(1144.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(1144.0004370628535, complex1.abs(), 0.01D);
      assertEquals(8.741256514872688E-4, complex1.getArgument(), 0.01D);
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      
      List<Complex> list0 = complex2.nthRoot(int0);
      assertNotNull(list0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(1144.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(1144.0004370628535, complex1.abs(), 0.01D);
      assertEquals(8.741256514872688E-4, complex1.getArgument(), 0.01D);
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      int int0 = 299;
      List<Complex> list0 = complex0.nthRoot(int0);
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      
      int int0 = (-3391);
      // Undeclared exception!
      try {
        List<Complex> list0 = complex0.nthRoot(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,391
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.557407724654902, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.557407724654902, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-3.14159265359);
      double double1 = Double.NaN;
      Complex complex0 = Complex.valueOf(double0, double1);
      assertNotNull(complex0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      
      Complex complex1 = complex0.tan();
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
  }

  @Test
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      
      double double0 = (-1.0661133078415956);
      Complex complex1 = complex0.createComplex(double0, double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(1.5077118989760272, complex1.abs(), 0.01D);
      assertEquals((-1.0661133078415956), complex1.getReal(), 0.01D);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.0661133078415956), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      
      Complex complex2 = complex1.tan();
      assertNotNull(complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(1.5077118989760272, complex1.abs(), 0.01D);
      assertEquals((-1.0661133078415956), complex1.getReal(), 0.01D);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.0661133078415956), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(1.1333238986179301, complex2.abs(), 0.01D);
      assertEquals((-1.110538867441575), complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals((-1.7716561586259754), complex2.getArgument(), 0.01D);
      assertEquals((-0.22611166064608063), complex2.getReal(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 3861.6195034736365;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.cosh();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      
      Complex complex2 = complex1.divide(complex0);
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      
      Complex complex3 = complex2.sinh();
      assertNotNull(complex3);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      
      double double0 = (-1.0661133078415956);
      Complex complex1 = complex0.createComplex(double0, double0);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(1.5077118989760272, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.0661133078415956), complex1.getImaginary(), 0.01D);
      assertEquals((-1.0661133078415956), complex1.getReal(), 0.01D);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      
      Complex complex2 = complex1.sinh();
      assertNotNull(complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(1.5077118989760272, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.0661133078415956), complex1.getImaginary(), 0.01D);
      assertEquals((-1.0661133078415956), complex1.getReal(), 0.01D);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.9813469871992508), complex2.getArgument(), 0.01D);
      assertEquals((-0.6188521663817843), complex2.getReal(), 0.01D);
      assertEquals((-1.4217137788971643), complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(1.5505637919613249, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isNaN());
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      
      Complex complex1 = complex0.pow(complex0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      
      Complex complex2 = complex1.sin();
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.divide(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      
      Complex complex2 = complex1.cosh();
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = complex0.atan();
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.pow(complex0);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      
      Complex complex2 = complex1.asin();
      assertNotNull(complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = 3861.6195034736365;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.cosh();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex2 = complex1.acos();
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      double double0 = (-0.336974314280666);
      Complex complex1 = Complex.valueOf(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.336974314280666, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-0.336974314280666), complex1.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      
      double double1 = complex0.abs();
      assertNotSame(complex0, complex1);
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, double1, 0.01D);
      
      Complex complex2 = complex1.subtract(double1);
      assertNotNull(complex2);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(double1 == double0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(0.336974314280666, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-0.336974314280666), complex1.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      double double0 = 3861.6195034736365;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.asin();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex2 = complex1.sin();
      assertNotNull(complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-6.123233790425913E-17), complex2.getArgument(), 0.01D);
      assertEquals(3861.6195034736393, complex2.getReal(), 0.01D);
      assertEquals((-2.3645599029437523E-13), complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(3861.6195034736393, complex2.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex3 = complex2.cosh();
      assertNotNull(complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01D);
      assertEquals((-0.7853981633974483), complex3.getArgument(), 0.01D);
      assertEquals(true, complex3.isInfinite());
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-6.123233790425913E-17), complex2.getArgument(), 0.01D);
      assertEquals(3861.6195034736393, complex2.getReal(), 0.01D);
      assertEquals((-2.3645599029437523E-13), complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(3861.6195034736393, complex2.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex4 = complex3.divide(complex3);
      assertNotNull(complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01D);
      assertEquals((-0.7853981633974483), complex3.getArgument(), 0.01D);
      assertEquals(true, complex3.isInfinite());
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-6.123233790425913E-17), complex2.getArgument(), 0.01D);
      assertEquals(3861.6195034736393, complex2.getReal(), 0.01D);
      assertEquals((-2.3645599029437523E-13), complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(3861.6195034736393, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex4.getReal(), 0.01D);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex4.getArgument(), 0.01D);
      assertEquals(true, complex4.isNaN());
      assertEquals(false, complex4.isInfinite());
      assertEquals(Double.NaN, complex4.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      double double1 = complex2.abs();
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-6.123233790425913E-17), complex2.getArgument(), 0.01D);
      assertEquals(3861.6195034736393, complex2.getReal(), 0.01D);
      assertEquals((-2.3645599029437523E-13), complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(3861.6195034736393, complex2.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3861.6195034736393, double1, 0.01D);
      
      Complex complex5 = complex4.subtract(double1);
      assertNotNull(complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(double0 == double1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01D);
      assertEquals((-0.7853981633974483), complex3.getArgument(), 0.01D);
      assertEquals(true, complex3.isInfinite());
      assertEquals(Double.NaN, complex5.getReal(), 0.01D);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01D);
      assertEquals(false, complex5.isInfinite());
      assertEquals(Double.NaN, complex5.abs(), 0.01D);
      assertEquals(Double.NaN, complex5.getArgument(), 0.01D);
      assertEquals(true, complex5.isNaN());
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-6.123233790425913E-17), complex2.getArgument(), 0.01D);
      assertEquals(3861.6195034736393, complex2.getReal(), 0.01D);
      assertEquals((-2.3645599029437523E-13), complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(3861.6195034736393, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex4.getReal(), 0.01D);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex4.getArgument(), 0.01D);
      assertEquals(true, complex4.isNaN());
      assertEquals(false, complex4.isInfinite());
      assertEquals(Double.NaN, complex4.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
  }

  @Test
  public void test19()  throws Throwable  {
      double double0 = (-3.14159265359);
      double double1 = Double.NaN;
      Complex complex0 = Complex.valueOf(double0, double1);
      assertNotNull(complex0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.sqrt1z();
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.subtract(complex0);
      assertNotNull(complex1);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.divide(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      Complex complex2 = complex1.negate();
      assertNotNull(complex2);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex1 = complex0.pow(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
  }

  @Test
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      double double0 = 8.0E298;
      Complex complex1 = complex0.subtract(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isNaN());
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals((-8.0E298), complex1.getReal(), 0.01D);
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(8.0E298, complex1.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex2 = complex1.sqrt1z();
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals((-8.0E298), complex1.getReal(), 0.01D);
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(8.0E298, complex1.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex3 = complex2.multiply(double0);
      assertNotNull(complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(true, complex3.isInfinite());
      assertEquals(0.7853981633974483, complex3.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01D);
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals((-8.0E298), complex1.getReal(), 0.01D);
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(8.0E298, complex1.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.cos();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      double double0 = complex1.getImaginary();
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
      
      Complex complex2 = complex0.pow(double0);
      assertNotNull(complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test25()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      int int0 = complex0.hashCode();
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(2108686336, int0);
      
      Complex complex1 = complex0.cosh();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex2 = complex1.pow((double) int0);
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      double double0 = 8.0E298;
      Complex complex1 = complex0.subtract(double0);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals((-8.0E298), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(8.0E298, complex1.abs(), 0.01D);
      
      Complex complex2 = complex1.sqrt1z();
      assertNotNull(complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(1.5707963267948966, complex2.getArgument(), 0.01D);
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals((-8.0E298), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(8.0E298, complex1.abs(), 0.01D);
      
      Complex complex3 = complex0.multiply(complex2);
      assertNotNull(complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(1.5707963267948966, complex2.getArgument(), 0.01D);
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.abs(), 0.01D);
      assertEquals(true, complex3.isInfinite());
      assertEquals(0.7853981633974483, complex3.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01D);
      assertEquals((-8.0E298), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.0, complex1.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(8.0E298, complex1.abs(), 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = Complex.ONE;
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      
      Complex complex2 = complex1.pow(complex0);
      assertNotNull(complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(1.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
  }

  @Test
  public void test28()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals((-1.0), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.subtract(complex0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals((-1.0), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      
      Complex complex2 = complex1.pow(double0);
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals((-1.0), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      
      Complex complex3 = complex0.pow(complex2);
      assertNotNull(complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals((-1.0), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
  }

  @Test
  public void test29()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.pow(complex0);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      
      int int0 = complex1.hashCode();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(7, int0);
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = 3861.6195034736365;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.asin();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      Complex complex2 = complex1.conjugate();
      assertNotNull(complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(9.088757336643058, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01D);
      assertEquals(8.951989098748427, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(1.3970956598519262, complex2.getArgument(), 0.01D);
      
      boolean boolean0 = complex2.equals((Object) complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(9.088757336643058, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01D);
      assertEquals(8.951989098748427, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(1.3970956598519262, complex2.getArgument(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.asin();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex0.equals((Object)complex1));
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      
      boolean boolean0 = complex0.equals((Object) complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex0.equals((Object)complex1));
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      
      double double0 = (-1.0661133078415956);
      Complex complex1 = complex0.createComplex(double0, double0);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals((-1.0661133078415956), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.5077118989760272, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.0661133078415956), complex1.getImaginary(), 0.01D);
      
      boolean boolean0 = complex1.equals((Object) complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals((-1.0661133078415956), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.5077118989760272, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals((-1.0661133078415956), complex1.getImaginary(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      
      Complex complex1 = Complex.ZERO;
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      
      boolean boolean0 = complex1.equals((Object) complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = complex0.equals(object0);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = complex0.divide(double0);
      assertNotNull(complex1);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      int int0 = complex0.hashCode();
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0, int0);
      
      Complex complex1 = complex0.divide((double) int0);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
  }

  @Test
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      
      double double0 = (-1.0661133078415956);
      Complex complex1 = complex0.createComplex(double0, double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals((-1.0661133078415956), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.0661133078415956), complex1.getReal(), 0.01D);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(1.5077118989760272, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      
      double double1 = 0.0;
      Complex complex2 = complex1.divide(double1);
      assertNotNull(complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(double0 == double1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double1 == double0);
      assertEquals(true, complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals((-1.0661133078415956), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.0661133078415956), complex1.getReal(), 0.01D);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals(1.5077118989760272, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
  }

  @Test
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      double double0 = 2515.065369504322;
      Complex complex1 = complex0.divide(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      double double0 = Double.NaN;
      Complex complex1 = complex0.divide(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
  }

  @Test
  public void test40()  throws Throwable  {
      double double0 = 3861.6195034736365;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.asin();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      
      Complex complex2 = complex1.sin();
      assertNotNull(complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-2.3645599029437523E-13), complex2.getImaginary(), 0.01D);
      assertEquals((-6.123233790425913E-17), complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(3861.6195034736393, complex2.abs(), 0.01D);
      assertEquals(3861.6195034736393, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      
      Complex complex3 = complex2.cosh();
      assertNotNull(complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01D);
      assertEquals(true, complex3.isInfinite());
      assertEquals(false, complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01D);
      assertEquals((-0.7853981633974483), complex3.getArgument(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-2.3645599029437523E-13), complex2.getImaginary(), 0.01D);
      assertEquals((-6.123233790425913E-17), complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(3861.6195034736393, complex2.abs(), 0.01D);
      assertEquals(3861.6195034736393, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      
      Complex complex4 = complex3.conjugate();
      assertNotNull(complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex4.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex4.getArgument(), 0.01D);
      assertEquals(true, complex4.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01D);
      assertEquals(true, complex3.isInfinite());
      assertEquals(false, complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01D);
      assertEquals((-0.7853981633974483), complex3.getArgument(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-2.3645599029437523E-13), complex2.getImaginary(), 0.01D);
      assertEquals((-6.123233790425913E-17), complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(3861.6195034736393, complex2.abs(), 0.01D);
      assertEquals(3861.6195034736393, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      
      Complex complex5 = complex4.divide(complex0);
      assertNotNull(complex5);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex4.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex4.getArgument(), 0.01D);
      assertEquals(true, complex4.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01D);
      assertEquals(true, complex3.isInfinite());
      assertEquals(false, complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01D);
      assertEquals((-0.7853981633974483), complex3.getArgument(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-2.3645599029437523E-13), complex2.getImaginary(), 0.01D);
      assertEquals((-6.123233790425913E-17), complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(3861.6195034736393, complex2.abs(), 0.01D);
      assertEquals(3861.6195034736393, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex5.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex5.abs(), 0.01D);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex5.getReal(), 0.01D);
      assertEquals(true, complex5.isNaN());
      assertEquals(false, complex5.isInfinite());
      
      Complex complex6 = complex5.divide(double0);
      assertNotNull(complex6);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01D);
      assertEquals(false, complex4.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex4.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex4.getArgument(), 0.01D);
      assertEquals(true, complex4.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01D);
      assertEquals(true, complex3.isInfinite());
      assertEquals(false, complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex3.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01D);
      assertEquals((-0.7853981633974483), complex3.getArgument(), 0.01D);
      assertEquals(3861.6195034736365, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3861.6195034736365, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-2.3645599029437523E-13), complex2.getImaginary(), 0.01D);
      assertEquals((-6.123233790425913E-17), complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(3861.6195034736393, complex2.abs(), 0.01D);
      assertEquals(3861.6195034736393, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex6.abs(), 0.01D);
      assertEquals(false, complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getReal(), 0.01D);
      assertEquals(Double.NaN, complex6.getArgument(), 0.01D);
      assertEquals(true, complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-8.951989098748427), complex1.getImaginary(), 0.01D);
      assertEquals(9.088757336643058, complex1.abs(), 0.01D);
      assertEquals((-1.3970956598519262), complex1.getArgument(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex5.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex5.abs(), 0.01D);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex5.getReal(), 0.01D);
      assertEquals(true, complex5.isNaN());
      assertEquals(false, complex5.isInfinite());
  }

  @Test
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      
      Complex complex1 = complex0.atan();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
  }

  @Test
  public void test42()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.log();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      
      Complex complex2 = complex0.divide(complex1);
      assertNotNull(complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(0.0, complex2.getReal(), 0.01D);
  }

  @Test
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      
      Complex complex1 = complex0.divide(complex0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      
      Complex complex1 = complex0.atan();
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
  }

  @Test
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      
      double double0 = (-0.336974314280666);
      Complex complex1 = Complex.valueOf(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.336974314280666, complex1.abs(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals((-0.336974314280666), complex1.getReal(), 0.01D);
      
      Complex complex2 = complex0.cos();
      assertNotNull(complex2);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      
      Complex complex3 = complex1.divide(complex2);
      assertNotNull(complex3);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertSame(complex3, complex2);
      assertSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.336974314280666, complex1.abs(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals((-0.336974314280666), complex1.getReal(), 0.01D);
  }

  @Test
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = complex0.conjugate();
      assertNotNull(complex1);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(double0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      
      double double1 = Double.NaN;
      Complex complex1 = complex0.add(double1);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
  }

  @Test
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      
      double double0 = (-1.0661133078415956);
      Complex complex1 = complex0.add(double0);
      assertNotNull(complex1);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
  }

  @Test
  public void test49()  throws Throwable  {
      double double0 = 1193.8;
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0, double1);
      assertNotNull(complex0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1193.8, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.acos();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex1.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1193.8, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
  }

  @Test
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.add(complex0);
      assertNotNull(complex1);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
  }

  @Test
  public void test51()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals((-1.0), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      
      Complex complex1 = complex0.pow(double0);
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.2246467991473532E-16), complex1.getImaginary(), 0.01D);
      assertEquals((-3.141592653589793), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals((-1.0), complex1.getReal(), 0.01D);
      assertEquals((-1.0), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      
      Complex complex2 = complex1.sqrt1z();
      assertNotNull(complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(false, complex1.isNaN());
      assertEquals((-1.2246467991473532E-16), complex1.getImaginary(), 0.01D);
      assertEquals((-3.141592653589793), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals((-1.0), complex1.getReal(), 0.01D);
      assertEquals((-1.0), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals((-0.7853981633974483), complex2.getArgument(), 0.01D);
      assertEquals(1.565021916234628E-8, complex2.abs(), 0.01D);
      assertEquals(1.1066376096750703E-8, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-1.1066376096750703E-8), complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
  }

  @Test
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      
      boolean boolean0 = complex0.isNaN();
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
  }

  @Test
  public void test54()  throws Throwable  {
      double double0 = 8.43422684388894;
      Complex complex0 = new Complex(double0, double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals(8.43422684388894, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(8.43422684388894, complex0.getReal(), 0.01D);
      assertEquals(11.927797990758965, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      
      int int0 = 471;
      List<Complex> list0 = complex0.nthRoot(int0);
      assertNotNull(list0);
      assertEquals(false, complex0.isNaN());
      assertEquals(8.43422684388894, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(8.43422684388894, complex0.getReal(), 0.01D);
      assertEquals(11.927797990758965, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(471, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      
      String string0 = complex0.toString();
      assertNotNull(string0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals("(NaN, NaN)", string0);
  }

  @Test
  public void test56()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(false, complex0.isNaN());
      assertEquals((-1.0), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      
      Complex complex1 = complex0.sqrt1z();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-1.0), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
  }

  @Test
  public void test57()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = new Complex(double0);
      assertNotNull(complex0);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1.0), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      
      Complex complex1 = (Complex)complex0.readResolve();
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex0.equals((Object)complex1));
      assertEquals((-1.0), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1.0), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
  }
}
