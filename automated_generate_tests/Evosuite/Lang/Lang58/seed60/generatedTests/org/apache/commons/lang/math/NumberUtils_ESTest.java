/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 02:13:47 GMT 2017
 */

package org.apache.commons.lang.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("u'<(u!xi].xG^9GuL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte) (-98), (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short short0 = NumberUtils.max((short)1, (short)0, (short)1);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = NumberUtils.max((long) (byte)1, (long) (byte)1, 0L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-33), (byte)0, (byte)41);
      assertEquals((byte) (-33), byte0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = NumberUtils.min(0, 108, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)108, byte0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)48;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)48, short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 1L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-96.223450137);
      double[] doubleArray1 = new double[9];
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[2];
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) 70;
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = new float[8];
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = new long[21];
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-683);
      int[] intArray1 = new int[6];
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[5];
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = new short[9];
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byte[] byteArray1 = new byte[5];
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[4];
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      try { 
        NumberUtils.createNumber("`di<Nz8(3t8=5,U-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // `di<Nz8(3t8=5,U- is not a valid number.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      try { 
        NumberUtils.createNumber("g");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // g is not a valid number.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        NumberUtils.createNumber("/Z9TCq2$fw?-n9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = NumberUtils.toLong("u", 873L);
      assertEquals(873L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = NumberUtils.toLong("9");
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = NumberUtils.toFloat("nt{1~lw8U.G|AVrVcTC", 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = NumberUtils.toDouble("%{_agb'l", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = NumberUtils.toDouble("6'vid;Y?JXO'", (-183.00152707));
      assertEquals((-183.00152707), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = NumberUtils.toDouble("4");
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = NumberUtils.stringToInt("GD8<Z6WeQXREUp[8}s", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = NumberUtils.stringToInt("", 70);
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1119;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)1119, short0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 4795L;
      longArray0[1] = 583L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(583L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 108;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(108, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)783;
      floatArray0[1] = 1.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-1137.1F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1137.1F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 3261.80526;
      doubleArray0[2] = 1.0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)37;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)37, byte0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      short short0 = NumberUtils.min((short)70, (short)76, (short)70);
      assertEquals((short)70, short0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)61, 0L, 158L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = NumberUtils.min(933L, 1914L, 1364L);
      assertEquals(933L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = NumberUtils.min((int) (short)3872, 21, (int) (short)550);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float float0 = NumberUtils.min(215.319F, 215.319F, 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float float0 = NumberUtils.min((-901.5267F), (float) (short) (-1261), (-173.4968F));
      assertEquals((-1261.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = NumberUtils.min(2934.80393991015, 3608.778208245063, 2934.80393991015);
      assertEquals(2934.80393991015, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = NumberUtils.min((-2332.89336), (-1.0), (-2959.432894743));
      assertEquals((-2959.432894743), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)1605;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1605, short0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2147);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-2147), short0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 2;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-65);
      intArray0[1] = (int) (byte) (-34);
      intArray0[2] = (int) (byte) (-121);
      intArray0[3] = (-46547694);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-34), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1305.859F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1305.859F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-1);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (short) (-1);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1681);
      doubleArray0[1] = (double) (-1681);
      doubleArray0[2] = (double) (-1681);
      doubleArray0[3] = (double) (-1681);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1681.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-17);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-17), byte0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1), (short) (-1), (short) (-1));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = NumberUtils.max((-5L), (long) (byte) (-121), (-5L));
      assertEquals((-5L), long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = NumberUtils.max(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = NumberUtils.max((-3541), (-3541), (-3541));
      assertEquals((-3541), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float float0 = NumberUtils.max(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = NumberUtils.max(1.0F, 1.0F, 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = NumberUtils.max((double) (short)0, (double) 0L, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = NumberUtils.max(457.129233, 271.0, 457.129233);
      assertEquals(457.129233, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long long0 = NumberUtils.createLong("4");
      assertEquals(4L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("9");
      assertEquals(9.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("4");
      assertEquals(4, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("4");
      assertEquals(4, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("Minimum abbreviation width is 4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Minimum abbreviation width is 4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = NumberUtils.compare(0.0F, (-1182.7594F));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = NumberUtils.compare(1.0F, 1.0F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = NumberUtils.compare((double) (byte)0, (-1776.36198089));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = NumberUtils.compare(0.0, 0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("0xUS");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("81");
      assertEquals(81, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("-0xA blak stringis not a vaid numbe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("UqF*HMWvx^6u*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = NumberUtils.toDouble("MPN%%Qel7`\"V=fE*/sw", (double) (short)70);
      assertEquals(70.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (float) (short) (-980));
      assertEquals((-980.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (long) (short) (-1052));
      assertEquals((-1052L), long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = NumberUtils.toLong("lyFdT-g~0!", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = NumberUtils.toInt("u", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = NumberUtils.toInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+P8-as~u%jc(<>[4'.-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xA blank strng is ot a vald number");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0bjS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("---0xA=ray cannot 1e empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("81");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("lyFdT-g~0!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = NumberUtils.compare((-1.0F), 0.0F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = NumberUtils.compare((-1141.5302751119), 370.166155);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)1, (byte)1, (byte)118);
      assertEquals((byte)118, byte0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-122), (byte)0, (byte) (-122));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-51), (byte) (-51), (byte) (-51));
      assertEquals((byte) (-51), byte0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1774), (short) (-1774), (short)239);
      assertEquals((short)239, short0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1261), (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = NumberUtils.max(0, 622, 1945);
      assertEquals(1945, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = NumberUtils.max(468, 0, 0);
      assertEquals(468, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = NumberUtils.max((-4467L), 0L, 997L);
      assertEquals(997L, long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = NumberUtils.max((long) 0, (long) (byte) (-17), (long) (byte) (-17));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)68, (byte)68, (byte)10);
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte) (-13), (byte)0);
      assertEquals((byte) (-13), byte0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      short short0 = NumberUtils.min((short)1, (short)1, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-136), (short) (-1845), (short)65);
      assertEquals((short) (-1845), short0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = NumberUtils.min((int) byteArray0[1], (-382), (-127));
      assertEquals((-382), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = NumberUtils.min(68, 499, (int) (byte) (-98));
      assertEquals((-98), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long long0 = NumberUtils.min(2416L, 2416L, (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = NumberUtils.min(1L, (-694L), (-694L));
      assertEquals((-694L), long0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-844.4F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 1305.859F;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1305.8590087890625, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-53);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1885);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[6] = 1182L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1182L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1534.143F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)783;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-73);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-73), byte0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[5] = (short) (-1953);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1953), short0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[3] = (-2262);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-2262), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = (-188L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-188L), long0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)7;
      double[] doubleArray1 = new double[2];
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[2];
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      boolean boolean0 = NumberUtils.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[6];
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = 1527.658F;
      float[] floatArray1 = new float[3];
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float[] floatArray1 = new float[3];
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = NumberUtils.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[3];
      boolean boolean0 = NumberUtils.equals(floatArray1, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = NumberUtils.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (-775L);
      long[] longArray1 = new long[5];
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = new long[5];
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = new long[2];
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[] longArray0 = new long[6];
      boolean boolean0 = NumberUtils.equals((long[]) null, longArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[] longArray0 = new long[6];
      boolean boolean0 = NumberUtils.equals(longArray0, longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = NumberUtils.equals(longArray0, (long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)39;
      int[] intArray1 = new int[5];
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[10];
      int[] intArray1 = new int[6];
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = NumberUtils.equals(intArray0, (int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = NumberUtils.equals((int[]) null, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = NumberUtils.equals(intArray0, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[5];
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = NumberUtils.equals((short[]) null, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      short[] shortArray0 = new short[4];
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = new short[5];
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)65;
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[17];
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = NumberUtils.equals(byteArray0, (byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = NumberUtils.equals((byte[]) null, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" is not a valid number.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // . is not a valid number.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Integer integer0 = (Integer)NumberUtils.createNumber("9");
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("A blak stringis not a vaid numbe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blak stringis not a vaid numbe is not a valid number.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber("04(=EO6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        NumberUtils.createNumber("'NE.la1QSYx(886E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 'NE.la1QSYx(886E is not a valid number.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        NumberUtils.createNumber("org.apache.commons.lang.math.NumberUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang.math.NumberUtils is not a valid number.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("u'<(u!xi].xG^9GuL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // u'<(u!xi].xG^9GuL is not a valid number.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xA=ray cannot 1e empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-A=ray cannot 1e empty.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--Vx}yK/Mu7+O6Zc");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Mc&o5pPtjrY%d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Mc&o5pPtjrY%d is not a valid number.
         //
         verifyException("org.apache.commons.lang.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (double) (byte)27);
      assertEquals(27.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      float float0 = NumberUtils.toFloat("");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 108);
      assertEquals(108, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      float float0 = NumberUtils.max((-4475.0F), (-137.576F), (-597.212F));
      assertEquals((-137.576F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double double0 = NumberUtils.max((-439.62988677), (-439.62988677), (-439.62988677));
      assertEquals((-439.62988677), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double double0 = NumberUtils.min(1809.7365579, 0.0, (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      float float0 = NumberUtils.min((float) 0L, (float) (byte)0, (float) 108);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = NumberUtils.toDouble("0xUS");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int int0 = NumberUtils.stringToInt("", (-382));
      assertEquals((-382), int0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short)304, (short)304, (short) numberUtils0.BYTE_ONE);
      assertEquals((short)304, short0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = NumberUtils.stringToInt("eTe\"w");
      assertEquals(0, int0);
  }
}
