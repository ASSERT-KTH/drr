/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 21:55:38 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2692.1991807340096), (-2692.1991807340096), (-2692.1991807340096));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2692.1991807340096), (-2692.1991807340096), (-1));
      double[] doubleArray0 = new double[6];
      eventState0.stepAccepted(2692.1991807340096, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-2692.1991807340096), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-1, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-1457));
      eventState0.reinitializeBegin(0.0, (double[]) null);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-1457, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2069.7287), 0.0, (-2776.14549));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 2811.2119, (-2776.14549), 1241);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1241, int0);
      assertFalse(eventState0.stop());
      assertEquals(2776.14549, eventState0.getConvergence(), 0.01);
      assertEquals(2811.2119, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-1457));
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals((-1457), int0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(610.2117745, 0.0, 610.2117745);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 0);
      eventState0.getMaxCheckInterval();
      assertEquals(0, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2692.1991807340096), (-2692.1991807340096), (-2692.1991807340096));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2692.1991807340096), (-2692.1991807340096), (-1));
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-2692.1991807340096), double0, 0.01);
      assertEquals(-1, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-1457));
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-1457, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(570.239, 570.239, 1039.2080517552147);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1039.2080517552147, 0.0, 2);
      double double0 = eventState0.getConvergence();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals(1039.2080517552147, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-303.5124), (-303.5124), 17);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted(17, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, (-0.25), 5);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 0.0, 0);
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1317.619208, 1317.619208, 1317.619208);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1317.619208, 1317.619208, (-1604));
      double[] doubleArray0 = new double[1];
      boolean boolean0 = eventState0.reset(1317.619208, doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1317.619208, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(-1604, eventState0.getMaxIterationCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2692.1991807340096), (-2692.1991807340096), (-2692.1991807340096));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2692.1991807340096), (-2692.1991807340096), (-1));
      boolean boolean0 = eventState0.stop();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-2692.1991807340096), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(-1, eventState0.getMaxIterationCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(570.239, 570.239, 1039.2080517552147);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1039.2080517552147, 0.0, 2);
      double[] doubleArray0 = new double[2];
      eventState0.stepAccepted(0.0, doubleArray0);
      assertEquals(1039.2080517552147, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(2, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1317.619208, 1317.619208, 1317.619208);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1317.619208, 1317.619208, (-1604));
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted(1317.619208, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-1604, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(1317.619208, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1317.619208, 1317.619208, 1317.619208);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1317.619208, 1317.619208, 1);
      double[] doubleArray0 = new double[0];
      eventState0.reinitializeBegin(3029.72978943151, doubleArray0);
      assertEquals(1, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1317.619208, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-1457));
      eventState0.reinitializeBegin((-1457), (double[]) null);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-1457, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2692.1991807340096), (-2692.1991807340096), (-2692.1991807340096));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2692.1991807340096), (-2692.1991807340096), (-1));
      double double0 = eventState0.getConvergence();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2692.1991807340096, double0, 0.01);
      assertEquals(-1, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals((-2692.1991807340096), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1173.750004206335, 1173.750004206335, 1173.750004206335);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1173.750004206335, 1173.750004206335, (-3892));
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-3892, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(1173.750004206335, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2692.1991807340096), (-2692.1991807340096), (-2692.1991807340096));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2692.1991807340096), (-2692.1991807340096), (-1));
      double double0 = eventState0.getEventTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-2692.1991807340096), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-1, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 0.0, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(0, int0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 1310.131163597, 4);
      eventState0.getEventHandler();
      assertEquals(4, eventState0.getMaxIterationCount());
      assertEquals(1310.131163597, eventState0.getConvergence(), 0.01);
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }
}
