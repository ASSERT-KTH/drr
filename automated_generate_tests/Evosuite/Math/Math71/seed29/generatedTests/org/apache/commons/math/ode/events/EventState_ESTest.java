/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 29 16:30:31 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((double) (-2797), (double) (-2797), (double) (-2797));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (double) (-2797), (double) (-2797), (-2797));
      eventState0.stepAccepted((-1.0), (double[]) null);
      assertEquals((-2797.0), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(-2797, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 0);
      double[] doubleArray0 = new double[12];
      eventState0.reinitializeBegin(0, doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 4491);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(4491, int0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2310.487417175628), (-2310.487417175628), (-2310.487417175628));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2310.487417175628), (-2310.487417175628), (-756));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-756), int0);
      assertEquals((-2310.487417175628), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(223.64850817, 223.64850817, 223.64850817);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 223.64850817, 223.64850817, 4);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(4, eventState0.getMaxIterationCount());
      assertEquals(223.64850817, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2310.487417175628), (-2310.487417175628), (-2310.487417175628));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2310.487417175628), (-2310.487417175628), (-756));
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals((-2310.487417175628), double0, 0.01);
      assertEquals(-756, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2310.487417175628), (-2310.487417175628), (-2310.487417175628));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2310.487417175628), (-2310.487417175628), (-756));
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-756, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals((-2310.487417175628), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1287.6636466241407), (-1287.6636466241407), (-1287.6636466241407));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1287.6636466241407), 0.0, (-1671));
      double double0 = eventState0.getConvergence();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-1671, eventState0.getMaxIterationCount());
      assertEquals(0.0, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-1287.6636466241407), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 3006.936965944, (-157.8033038643), 921);
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted((-157.8033038643), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-0.25), 1.0, 0);
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(1.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1287.6636466241407), (-1287.6636466241407), (-1287.6636466241407));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1287.6636466241407), 0.0, (-1671));
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1287.6636466241407), (-1287.6636466241407), (-1287.6636466241407));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1287.6636466241407), 0.0, (-1671));
      double[] doubleArray0 = new double[4];
      boolean boolean0 = eventState0.reset((-1287.6636466241407), doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals((-1287.6636466241407), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(boolean0);
      assertEquals(-1671, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(223.64850817, 223.64850817, 223.64850817);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 223.64850817, 223.64850817, 4);
      boolean boolean0 = eventState0.stop();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(4, eventState0.getMaxIterationCount());
      assertEquals(223.64850817, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 0);
      double[] doubleArray0 = new double[12];
      eventState0.stepAccepted((-2753.133371386251), doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1287.6636466241407), (-1287.6636466241407), (-1287.6636466241407));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1287.6636466241407), 0.0, (-1671));
      double[] doubleArray0 = new double[4];
      eventState0.stepAccepted((-1287.6636466241407), doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-1671, eventState0.getMaxIterationCount());
      assertEquals((-1287.6636466241407), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(235.000200310703, 235.000200310703, 235.000200310703);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 235.000200310703, 592.1452920732444, Integer.MAX_VALUE);
      eventState0.reinitializeBegin(592.1452920732444, (double[]) null);
      assertEquals(2147483647, eventState0.getMaxIterationCount());
      assertEquals(592.1452920732444, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(235.000200310703, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-2797));
      double[] doubleArray0 = new double[3];
      eventState0.reinitializeBegin((-2797), doubleArray0);
      assertEquals(-2797, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 578.426, 578.426, (-2144104616));
      double double0 = eventState0.getConvergence();
      assertFalse(eventState0.stop());
      assertEquals(-2144104616, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(578.426, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(578.426, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 2101.711, 2101.711);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 2101.711, 4);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(2101.711, eventState0.getConvergence(), 0.01);
      assertEquals(4, eventState0.getMaxIterationCount());
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2310.487417175628), (-2310.487417175628), (-2310.487417175628));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2310.487417175628), (-2310.487417175628), (-756));
      double double0 = eventState0.getEventTime();
      assertEquals(-756, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-2310.487417175628), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2646.521470839053), (-2646.521470839053), 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1.2599210498948732), (-2646.521470839053), 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(2646.521470839053, eventState0.getConvergence(), 0.01);
      assertEquals(0, int0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-1.2599210498948732), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, (-1.0), 3);
      eventState0.getEventHandler();
      assertEquals(3, eventState0.getMaxIterationCount());
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1.0, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
  }
}
