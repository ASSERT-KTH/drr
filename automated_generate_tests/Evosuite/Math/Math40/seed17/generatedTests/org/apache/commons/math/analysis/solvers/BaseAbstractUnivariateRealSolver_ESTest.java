/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 19 01:07:51 GMT 2017
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.MonitoredFunction;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.SincFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.XMinus5Function;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver2;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseAbstractUnivariateRealSolver_ESTest extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(0.0);
      mullerSolver2_0.verifySequence(401.8975197, Double.NaN, 401.8975197);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(1287.01333, 1287.01333, 1287.01333, 228);
      bracketingNthOrderBrentSolver0.verifyInterval((-2.0), 1.4212865829467773);
      assertEquals(1287.01333, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1287.01333, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1287.01333, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(225.595664, (-3319.0));
      SinFunction sinFunction0 = new SinFunction();
      riddersSolver0.setup(297, sinFunction0, (-2319.0), (-1836.951007297098), (-3319.0));
      riddersSolver0.incrementEvaluationCount();
      assertEquals((-2319.0), riddersSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2264.6577309076138, 2264.6577309076138);
      SincFunction sincFunction0 = new SincFunction();
      mullerSolver2_0.solve(1701, (UnivariateFunction) sincFunction0, (double) 0, (double) 1701, 2264.6577309076138);
      mullerSolver2_0.verifyBracketing(1701, 2264.6577309076138);
      assertEquals(2264.6577309076138, mullerSolver2_0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver(1.0, 1.0);
      boolean boolean0 = bisectionSolver0.isSequence(0.0, 1.0839714455426386E-8, 1.0);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0, bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(1253.6583709368472, 181.7229659680149);
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      brentSolver0.setup(0, xMinus5Function0, 0.0, 0.0, 1253.6583709368472);
      boolean boolean0 = brentSolver0.isBracketing((-897.9183489225134), 1881.58557);
      assertEquals(1253.6583709368472, brentSolver0.getStartValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      brentSolver0.setup(0, xMinus5Function0, (-1547.4), 1.0, 2899.31367089923);
      boolean boolean0 = brentSolver0.isBracketing(0.0, (-1547.4));
      assertEquals((-1547.4), brentSolver0.getMin(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2265.1376, 2265.1376);
      SincFunction sincFunction0 = new SincFunction();
      UnivariateFunction univariateFunction0 = sincFunction0.derivative();
      mullerSolver2_0.solve(1712, univariateFunction0, (double) 0, (double) 1712, 2265.1376);
      mullerSolver2_0.computeObjectiveValue(0.0);
      assertEquals(1712.0, mullerSolver2_0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2265.1376, 2265.1376);
      SincFunction sincFunction0 = new SincFunction();
      mullerSolver2_0.solve(1701, (UnivariateFunction) sincFunction0, (double) 0, (double) 1701, 2265.1376);
      mullerSolver2_0.computeObjectiveValue(851.3504515982372);
      assertEquals(1701.0, mullerSolver2_0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(225.595664, (-3319.0));
      SinFunction sinFunction0 = new SinFunction();
      riddersSolver0.setup(297, sinFunction0, (-2319.0), (-1836.951007297098), (-3319.0));
      double double0 = riddersSolver0.computeObjectiveValue(758.0);
      assertEquals((-1836.951007297098), riddersSolver0.getMax(), 0.01);
      assertEquals((-0.7682932534017909), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver(Double.NaN, Double.NaN);
      // Undeclared exception!
      try { 
        mullerSolver0.verifySequence((-850.732845564377), (-850.732845564377), 4066.4252945);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-850.733, -850.733]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver((-4002.571291404));
      // Undeclared exception!
      try { 
        laguerreSolver0.verifyInterval((-4002.571291404), (-4002.571291404));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-4,002.571, -4,002.571]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2265.1376, 2265.1376);
      SincFunction sincFunction0 = new SincFunction();
      UnivariateFunction univariateFunction0 = sincFunction0.derivative();
      mullerSolver2_0.solve(1712, univariateFunction0, (double) 0, (double) 1712, 2265.1376);
      // Undeclared exception!
      try { 
        mullerSolver2_0.verifyBracketing(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      // Undeclared exception!
      try { 
        brentSolver0.verifyBracketing((-885.6), 0.5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(116.5210641);
      // Undeclared exception!
      try { 
        riddersSolver0.setup((-2164), (UnivariateFunction) null, 0.0, (-766.81269426), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      MonitoredFunction monitoredFunction0 = new MonitoredFunction((UnivariateFunction) null);
      brentSolver0.setup((-916), monitoredFunction0, 2634.823078041, (-916), 2634.823078041);
      // Undeclared exception!
      try { 
        brentSolver0.isBracketing(2634.823078041, 2634.823078041);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.MonitoredFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      // Undeclared exception!
      try { 
        brentSolver0.incrementEvaluationCount();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 0.0);
      try { 
        riddersSolver0.computeObjectiveValue(1888.6134471685057);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      SincFunction sincFunction0 = new SincFunction();
      // Undeclared exception!
      try { 
        bisectionSolver0.solve(203, (UnivariateFunction) sincFunction0, (double) 203, (double) 203);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [203, 203]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        bracketingNthOrderBrentSolver0.solve(0, (UnivariateFunction) sinFunction0, 3068.0, 1230.0763482, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [3,068, 2,149.038]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(1253.6583709368472, 181.7229659680149);
      // Undeclared exception!
      try { 
        brentSolver0.isBracketing((-897.9183489225134), 1881.58557);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2265.1376, 2265.1376);
      mullerSolver2_0.isSequence(0.0, 0.0, 2265.1376);
      assertEquals(2265.1376, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2265.1376, mullerSolver2_0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver(0.0);
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      // Undeclared exception!
      try { 
        mullerSolver0.solve(289, (UnivariateFunction) xMinus5Function0, (double) 289);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [\uFFFD, \uFFFD]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2265.1376, 2265.1376);
      mullerSolver2_0.getMaxEvaluations();
      assertEquals(2265.1376, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2265.1376, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      int int0 = brentSolver0.getEvaluations();
      assertEquals(0, int0);
  }
}
