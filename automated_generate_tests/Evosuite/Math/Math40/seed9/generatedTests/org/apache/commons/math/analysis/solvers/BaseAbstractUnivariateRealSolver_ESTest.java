/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 00:27:55 GMT 2017
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableUnivariateFunction;
import org.apache.commons.math.analysis.QuinticFunction;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.SincFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.XMinus5Function;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver2;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseAbstractUnivariateRealSolver_ESTest extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      SincFunction sincFunction0 = new SincFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        bracketingNthOrderBrentSolver0.solve(0, (UnivariateFunction) sincFunction0, (double) 0, (double) 0, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.verifyInterval(0.0, 729.5025491);
      assertEquals(0.0, newtonSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(2732.285402, 2732.285402);
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      secantSolver0.setup(1011, xMinus5Function0, 1011, 1011, 1011);
      secantSolver0.verifyBracketing(1.0E-14, 2732.285402);
      assertEquals(1011.0, secantSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver((-1781.616814124885), (-1781.616814124885));
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      bisectionSolver0.setup(226, xMinus5Function0, 226, 1935.58806375, 226);
      bisectionSolver0.incrementEvaluationCount();
      assertEquals(226.0, bisectionSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      boolean boolean0 = secantSolver0.isSequence((-212.81475918), 0.0, 131.53883);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver((-1781.616814124885), (-1781.616814124885));
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      bisectionSolver0.setup(226, xMinus5Function0, 226, 1935.58806375, 226);
      boolean boolean0 = bisectionSolver0.isBracketing((-244.863237165), (-244.863237165));
      assertEquals(226.0, bisectionSolver0.getStartValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(0.0);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      newtonSolver0.solve(2086, (DifferentiableUnivariateFunction) quinticFunction0, 0.0, 1861.085164793, (-88.97130443133986));
      newtonSolver0.computeObjectiveValue(0.0);
      assertEquals(1861.085164793, newtonSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver((-1781.616814124885), (-1781.616814124885));
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      bisectionSolver0.setup(226, xMinus5Function0, 226, 1935.58806375, 226);
      bisectionSolver0.computeObjectiveValue((-2793.83828596));
      assertEquals(226.0, bisectionSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      // Undeclared exception!
      try { 
        newtonSolver0.verifySequence(1.0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver((-2217.575385), (-2217.575385));
      // Undeclared exception!
      try { 
        laguerreSolver0.verifyInterval((-2217.575385), (-2217.575385));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-2,217.575, -2,217.575]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(2732.285402, 2732.285402);
      // Undeclared exception!
      try { 
        secantSolver0.verifyBracketing(2732.285402, 2732.285402);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(1.0E-14);
      // Undeclared exception!
      try { 
        brentSolver0.setup(0, (UnivariateFunction) null, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(414.0, 2317.93654234328, (-462.74), 1604);
      // Undeclared exception!
      try { 
        bracketingNthOrderBrentSolver0.incrementEvaluationCount();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(1.0E-12, 0.0);
      try { 
        mullerSolver2_0.computeObjectiveValue((-665.0485231445095));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      // Undeclared exception!
      try { 
        newtonSolver0.isBracketing((-0.0625), 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(0.0);
      boolean boolean0 = newtonSolver0.isSequence(713.92024, 0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      QuinticFunction quinticFunction0 = new QuinticFunction();
      newtonSolver0.solve(380, (DifferentiableUnivariateFunction) quinticFunction0, (-1162.0065326639105));
      boolean boolean0 = newtonSolver0.isBracketing((-0.0625), 1.0);
      assertEquals(Double.NaN, newtonSolver0.getMax(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(2730.132313249773);
      SinFunction sinFunction0 = new SinFunction();
      UnivariateFunction univariateFunction0 = sinFunction0.derivative();
      secantSolver0.solve(1410, univariateFunction0, 1.0E-15, (double) 1410, (-67.00103625));
      // Undeclared exception!
      try { 
        secantSolver0.verifyBracketing(2730.132313249773, 2730.132313249773);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [2,730.132, 2,730.132]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver((-1781.616814124885), (-1781.616814124885));
      bisectionSolver0.getMaxEvaluations();
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1781.616814124885), bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-1781.616814124885), bisectionSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      SincFunction sincFunction0 = new SincFunction();
      // Undeclared exception!
      try { 
        mullerSolver2_0.solve(271, (UnivariateFunction) sincFunction0, 44.0, (-0.0625));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [44, -0.062]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver((-1781.616814124885), (-1781.616814124885));
      bisectionSolver0.verifySequence((-1.0), 1935.58806375, 2279.54582);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1781.616814124885), bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1781.616814124885), bisectionSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      int int0 = mullerSolver2_0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(0.0);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      newtonSolver0.solve(2086, (DifferentiableUnivariateFunction) quinticFunction0, 0.0, 1861.085164793, (-88.97130443133986));
      newtonSolver0.computeObjectiveValue(0.42399016746904905);
      assertEquals((-88.97130443133986), newtonSolver0.getStartValue(), 0.01);
  }
}
