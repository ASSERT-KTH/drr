/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 19:42:19 GMT 2017
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableUnivariateFunction;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.QuinticFunction;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.XMinus5Function;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver2;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseAbstractUnivariateRealSolver_ESTest extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(2311.4700464385146);
      secantSolver0.verifySequence(Double.NaN, 0.0, 1376.4);
      assertEquals(2311.4700464385146, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.0, 173);
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      bracketingNthOrderBrentSolver0.solve(173, (UnivariateFunction) xMinus5Function0, 0.0, 746.119608661231, allowedSolution0);
      bracketingNthOrderBrentSolver0.incrementEvaluationCount();
      assertEquals(373.0598043306155, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(0.4158326640437333, 0.4158326640437333);
      secantSolver0.verifyInterval(0.0, 0.4158326640437333);
      assertEquals(0.4158326640437333, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.4158326640437333, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      boolean boolean0 = mullerSolver2_0.isSequence((-0.0625), 0.95, (-0.0625));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SinFunction sinFunction0 = new SinFunction();
      BrentSolver brentSolver0 = new BrentSolver(0.0, (double) (-314));
      brentSolver0.setup((-314), sinFunction0, 2677.76617, 0.0, (-1.0));
      boolean boolean0 = brentSolver0.isBracketing(90.943175, 0.0);
      assertEquals(2677.76617, brentSolver0.getMin(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(2359.569852980216, 0.0);
      Expm1Function expm1Function0 = new Expm1Function();
      secantSolver0.setup(237, expm1Function0, 0.0, 237, 2079.50560672);
      boolean boolean0 = secantSolver0.isBracketing((-3119.5794840878802), (-530.79487774695));
      assertFalse(boolean0);
      assertEquals(0.0, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2359.569852980216, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(2359.569852980216, 0.0);
      Expm1Function expm1Function0 = new Expm1Function();
      secantSolver0.setup(237, expm1Function0, 0.0, 237, 2079.50560672);
      secantSolver0.computeObjectiveValue(0.0);
      assertEquals(0.0, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2359.569852980216, secantSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(2382.1, 0.0);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateFunction univariateFunction0 = expm1Function0.derivative();
      secantSolver0.setup(237, univariateFunction0, 0.0, 237, 2079.50560672);
      secantSolver0.computeObjectiveValue(0.0);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2382.1, secantSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(2382.1, (-0.5974310795989907));
      Expm1Function expm1Function0 = new Expm1Function();
      secantSolver0.setup(252, expm1Function0, (-19.243056641371126), 252, 2079.50560672);
      secantSolver0.computeObjectiveValue((-19.243056641371126));
      assertEquals((-19.243056641371126), secantSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(1.5);
      // Undeclared exception!
      try { 
        newtonSolver0.verifySequence(1692.236054, 1692.236054, (-94));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [1,692.236, 1,692.236]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(0.0625);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      newtonSolver0.solve(1649, (DifferentiableUnivariateFunction) quinticFunction0, 0.0);
      // Undeclared exception!
      try { 
        newtonSolver0.verifyBracketing(0.0625, (-3757.6119773));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0.062, -3,757.612]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver(Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        mullerSolver0.verifyBracketing(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      // Undeclared exception!
      try { 
        secantSolver0.setup((-1234), (UnivariateFunction) null, (-1345.5324502), (-1345.5324502), 3249.50037063834);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.0);
      // Undeclared exception!
      try { 
        laguerreSolver0.incrementEvaluationCount();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      // Undeclared exception!
      try { 
        laguerreSolver0.solve(165, (PolynomialFunction) null, (double) 165, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(2359.569852980216, 0.0);
      // Undeclared exception!
      try { 
        secantSolver0.isBracketing((-3119.5794840878802), (-530.79487774695));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(2382.1, (-0.5974310795989907));
      Expm1Function expm1Function0 = new Expm1Function();
      // Undeclared exception!
      try { 
        secantSolver0.solve(870, (UnivariateFunction) expm1Function0, (double) 252, 2382.1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [252, 2,382.1], values: [27,682,763,318,657,856,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, \u221E]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(1.5, (-1776.0));
      boolean boolean0 = riddersSolver0.isSequence((-1776.0), (-1567.297850061788), 332.339944538158);
      assertTrue(boolean0);
      assertEquals(1.5, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1776.0), riddersSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(2382.1, (-0.5974310795989907));
      secantSolver0.getMaxEvaluations();
      assertEquals((-0.5974310795989907), secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2382.1, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver(0.0, 0.0);
      // Undeclared exception!
      try { 
        brentSolver0.verifyInterval(2135.36632, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [2,135.366, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.0, 173);
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      bracketingNthOrderBrentSolver0.solve(173, (UnivariateFunction) xMinus5Function0, 0.0, 746.119608661231, allowedSolution0);
      bracketingNthOrderBrentSolver0.verifyBracketing(1.0, 601.6);
      assertEquals(373.0598043306155, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(0.4158326640437333, 0.4158326640437333);
      secantSolver0.getEvaluations();
      assertEquals(0.4158326640437333, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.4158326640437333, secantSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(2382.1, (-0.5974310795989907));
      try { 
        secantSolver0.computeObjectiveValue((-19.243056641371126));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }
}
