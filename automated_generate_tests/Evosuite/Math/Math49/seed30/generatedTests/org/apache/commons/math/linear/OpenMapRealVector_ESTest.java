/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 29 13:51:33 GMT 2017
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;
import org.apache.commons.math.analysis.XMinus5Function;
import org.apache.commons.math.linear.ArrayRealVectorTest;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.linear.SparseRealVectorTest;
import org.apache.commons.math.util.OpenIntToDoubleHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenMapRealVector_ESTest extends OpenMapRealVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(7);
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      openMapRealVector0.mapAddToSelf(1.0E-12);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapMultiply((-196.54727896464638));
      boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-1099.6);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      openMapRealVector0.hashCode();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      openMapRealVector0.hashCode();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      openMapRealVector0.mapAddToSelf((-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapMultiply((-196.54727896464638));
      openMapRealVector0.subtract(openMapRealVector1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct(doubleArray0);
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      assertEquals(4, openMapRealMatrix0.getColumnDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-196.54727896464638);
      double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
      assertEquals(196.54727896464638, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(433, 433);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-1068.0403497152602);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      double double0 = openMapRealVector0.getL1Distance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      double double0 = openMapRealVector0.getDistance(openMapRealVector1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      double double0 = openMapRealVector0.getDistance(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(433, 433);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = 1.2246467991473532E-16;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.2246467991473532E-16);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      assertFalse(openMapRealVector_OpenMapSparseIterator0.hasNext());
      assertEquals(0.07142857142857142, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // iterator exhausted
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(612.6);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[1];
      doubleArray0[7] = double0;
      doubleArray0[8] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      boolean boolean0 = openMapRealVector_OpenMapSparseIterator0.hasNext();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2009), (-2009));
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.setValue((-2676.938));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2496), (-2496), (-1242.4813843292152));
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-6.0));
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.setSubVector(0, (RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.setSubVector(0, (RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, (-196.54727896464638));
      double[] doubleArray0 = openMapRealVector0.toArray();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1073), (-1073));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, (-216.77));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      double[] doubleArray0 = openMapRealVector0.toArray();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1073), (-1073));
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(1.0E-12);
      assertEquals(0, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-11), (-11), (-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(1.0E-12);
      assertSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, (-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(0);
      assertEquals(0, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-11), (-11), (-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((-11));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      boolean boolean0 = openMapRealVector0.isDefaultValue(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      boolean boolean0 = openMapRealVector0.isDefaultValue((-2234.94835931));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(433, 433);
      double double0 = openMapRealVector0.getSparsity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      double[] doubleArray0 = openMapRealVector0.getData();
      double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(1.2393345855018391E-8);
      double double0 = openMapRealVector1.getL1Distance(doubleArray0);
      assertEquals(4.9573383420073566E-8, double0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(11, 11, (-196.54727896464638));
      openMapRealVector0.mapAddToSelf(1.0E-12);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapMultiply((-196.54727896464638));
      double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2.1730200686111105E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(91.55942);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      Double double1 = new Double(0.0);
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = double1;
      doubleArray0[7] = doubleArray0[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[4]);
      double double2 = openMapRealVector0.getEntry(2);
      assertEquals(0.75, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(921.15097);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.append(openMapRealVector0);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      
      openMapRealVector2.unitize();
      double[] doubleArray0 = openMapRealVector2.getData();
      double double0 = openMapRealVector1.getDistance(doubleArray0);
      assertEquals(920.15097, double0, 0.01);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      double double0 = openMapRealVector1.getDistance((RealVector) arrayRealVectorTest_RealVectorTestImpl0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      int int0 = openMapRealVector0.getDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(433, 433);
      int int0 = openMapRealVector0.getDimension();
      assertEquals(433, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1, 1, 1);
      double[] doubleArray0 = openMapRealVector0.getData();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, (-196.54727896464638));
      double[] doubleArray0 = openMapRealVector0.toArray();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(29);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1, 1, 1);
      double[] doubleArray0 = openMapRealVector0.getData();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1073), (-1073));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double double0 = openMapRealVector0.dotProduct((RealVector) openMapRealVector0);
      assertEquals(2.0E-24, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(1.0E-12);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.mapMultiply((-196.54727896464638));
      double double0 = openMapRealVector1.dotProduct(openMapRealVector2);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-1.3758309527525247E-21), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(433, 433);
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = openMapRealVector1.getData();
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(doubleArray1);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {1.0E-12, 1.0E-12}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, (-216.77));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-924), (-924));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      assertEquals(-1848, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
      assertEquals(872, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 3259);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(1768.0);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-34));
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1073), (-1073));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-11), (-11), (-196.54727896464638));
      // Undeclared exception!
      try { 
        openMapRealVector0.toArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 0);
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-277), 1, 1786.22445);
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != -277
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.subtract(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1, 2396, 2396);
      openMapRealVector0.getData();
      // Undeclared exception!
      openMapRealVector0.sparseIterator();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1, 1, 1);
      double[] doubleArray0 = openMapRealVector0.getData();
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector(1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(63);
      // Undeclared exception!
      try { 
        openMapRealVector0.setEntry(1905, (-271.647736761));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,905)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      openMapRealVector0.mapSubtractToSelf(436);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.map(xMinus5Function0);
      openMapRealVector0.subtract((RealVector) openMapRealVector0);
      // Undeclared exception!
      openMapRealVector0.projection((RealVector) openMapRealVector1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(83, 83, 83);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((double) 83);
      // Undeclared exception!
      try { 
        openMapRealVector1.projection((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 84 != 83
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.projection((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(433, 433);
      // Undeclared exception!
      try { 
        openMapRealVector0.outerProduct((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1580, 1580, (-196.54727896464638));
      openMapRealVector0.mapMultiply((-196.54727896464638));
      // Undeclared exception!
      boolean boolean0 = false;
      boolean0 = openMapRealVector0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-34));
      // Undeclared exception!
      try { 
        openMapRealVector0.getSubVector((-34), (-949));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-34)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(482);
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 482 != 4
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(11, 11, (-196.54727896464638));
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = openMapRealVector1.getData();
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, (-196.54727896464638));
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, (double) 0);
      // Undeclared exception!
      try { 
        openMapRealVector1.getL1Distance((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      openMapRealVector0.mapSubtractToSelf(436);
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 1.0E-12);
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (2)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(433, 433);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 433 != 0
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1, 2396, 2396);
      // Undeclared exception!
      openMapRealVector0.getDistance((RealVector) openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 0.1538461446762085);
      // Undeclared exception!
      try { 
        openMapRealVector1.getDistance((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 436
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1014.2));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[2];
      doubleArray0[6] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.getDistance(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 4581.044674691448);
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-27), 2396, 2396);
      // Undeclared exception!
      try { 
        openMapRealVector0.getData();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1, 2425, 2425);
      double[] doubleArray0 = openMapRealVector0.getData();
      // Undeclared exception!
      openMapRealVector0.ebeMultiply(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = openMapRealVector1.getData();
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 1.3828309527525247E-9;
      doubleArray0[2] = 1.3828309527525247E-9;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeMultiply(doubleArray0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(91.55942);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = doubleArray0[3];
      doubleArray0[7] = doubleArray0[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[4]);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeMultiply((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) openMapRealVector0);
      openMapRealVector0.mapSubtractToSelf(436);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((RealVector) openMapRealVector1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1014.2));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[1];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1, 1, 1);
      double[] doubleArray0 = openMapRealVector0.getData();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(2260, (-585.187836989));
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeDivide(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,260 != 1
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      Double double0 = new Double((-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(7);
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = openMapRealVector1.toArray();
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = (double) double0;
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.projection(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector2.ebeDivide(doubleArray1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(91.55942);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = double0;
      doubleArray0[7] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[4]);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(427, 427, (-196.54727896464638));
      openMapRealVector0.mapAddToSelf(1.0E-12);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapMultiply((-196.54727896464638));
      openMapRealVector0.isInfinite();
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(427);
      openMapRealVector2.getLInfDistance((RealVector) openMapRealVector1);
      // Undeclared exception!
      openMapRealVector0.ebeDivide((RealVector) openMapRealVector2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, (-355));
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeDivide((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -353 != 2
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      openMapRealVector0.mapSubtractToSelf(436);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
       //  fail("Expecting exception: ConcurrentModificationException");
       // Unstable assertion
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1014.2));
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = doubleArray0[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, (-216.77));
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, (double) 0);
      // Undeclared exception!
      try { 
        openMapRealVector1.dotProduct((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 277.2050234674285);
      // Undeclared exception!
      try { 
        openMapRealVector1.dotProduct(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 436
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(433, 433);
      // Undeclared exception!
      try { 
        openMapRealVector0.append((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) 0);
      // Undeclared exception!
      try { 
        openMapRealVector0.append((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-277), 1, 1785.167399667222);
      // Undeclared exception!
      try { 
        openMapRealVector1.append(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-277)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-515), (-515), 0.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.append((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-41), (-41), 579.06);
      // Undeclared exception!
      try { 
        openMapRealVector0.append(1563.656924026208);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-41)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(458, 458);
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.map(xMinus5Function0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      openMapRealVector1.mapSubtractToSelf(458);
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.add(openMapRealVector2);
      openMapRealVector2.subtract(openMapRealVector0);
      openMapRealVector1.isInfinite();
      // Undeclared exception!
      openMapRealVector1.add((RealVector) openMapRealVector3);
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(435.1110830642603);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = double0;
      doubleArray0[7] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray1);
      // Undeclared exception!
      try { 
        openMapRealVector0.add((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 1
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, 0.1538461446762085);
      // Undeclared exception!
      try { 
        openMapRealVector1.add(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 436
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(8, 1.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.add((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((double[]) null, (-327.249966412388));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 2498.74768008478;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.setEntry(0, 1.0E-12);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      openMapRealVector0.mapSubtractToSelf(436);
      double double0 = openMapRealVector0.getL1Distance(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = openMapRealVector0.getData();
      double double0 = openMapRealVector0.getDistance(doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0E-12, 1.0E-12}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      double double0 = openMapRealVector0.dotProduct((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      double double0 = openMapRealVector0.dotProduct(openMapRealVector0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-1099.6);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      double double0 = openMapRealVector1.dotProduct(openMapRealVector0);
      assertEquals(1209120.16, double0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.25, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      double[] doubleArray0 = openMapRealVector0.getData();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-924), (-924));
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        openMapRealVector0.append(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-924)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1073), (-1073));
      int int0 = openMapRealVector0.getDimension();
      assertEquals((-1073), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.outerProduct(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1, 1, 1);
      Iterator<RealVector.Entry> iterator0 = openMapRealVector0.sparseIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((OpenMapRealVector) null, (-1980));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1082.228838018);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(91.55942);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[2];
      doubleArray0[6] = doubleArray0[3];
      doubleArray0[7] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[4]);
      double double1 = openMapRealVector0.getEntry(2);
      assertEquals(91.55942, double1, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
      boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
      assertTrue(boolean0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0, (double) 7);
      boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
      assertFalse(boolean0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 4581.044674691448);
      Object object0 = new Object();
      boolean boolean0 = openMapRealVector0.equals(object0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      openMapRealVector0.mapAddToSelf((-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapMultiply((-196.54727896464638));
      boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf((-196.54727896464638));
      openMapRealVector1.unitVector();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      // Undeclared exception!
      try { 
        openMapRealVector0.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) openMapRealVector0);
      openMapRealVector0.mapSubtractToSelf(436);
      boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) arrayRealVectorTest_RealVectorTestImpl0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      openMapRealVector0.mapAddToSelf((-196.54727896464638));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-196.54727896464638);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.8571428571428571, openMapRealVector2.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      openMapRealVector0.set((-2783.64264574));
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.append(openMapRealVector0);
      double[] doubleArray1 = openMapRealVector2.getData();
      openMapRealVector2.setSubVector(0, doubleArray1);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertArrayEquals(new double[] {1.0E-12, 1.0E-12}, doubleArray1, 0.01);
      assertNotSame(openMapRealVector2, openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(7);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-196.54727896464638);
      double[] doubleArray1 = openMapRealVector1.toArray();
      doubleArray0[4] = 1.0E-12;
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.projection(doubleArray0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.ebeDivide(doubleArray1);
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0}, doubleArray1, 0.01);
      assertEquals(0.2857142857142857, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(0.14285714285714285, openMapRealVector3.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = openMapRealVector0.getData();
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct(doubleArray1);
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {1.0E-12, 1.0E-12}, doubleArray1, 0.01);
      assertEquals(2, openMapRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      boolean boolean0 = openMapRealVector1.isNaN();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      boolean boolean0 = openMapRealVector0.isNaN();
      assertFalse(boolean0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(1.0E-12);
      double[] doubleArray0 = new double[7];
      double double0 = openMapRealVector1.getLInfDistance(doubleArray0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0E-12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      double double0 = openMapRealVector0.getLInfDistance((RealVector) arrayRealVectorTest_RealVectorTestImpl0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      double double0 = openMapRealVector0.getL1Distance((RealVector) arrayRealVectorTest_RealVectorTestImpl0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(0.1111);
      double double0 = openMapRealVector0.getL1Distance(openMapRealVector1);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.1111, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector0);
      assertEquals(436, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      openMapRealVector0.mapSubtractToSelf(436);
      openMapRealVector0.getSubVector(82, 6);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(82, 6);
      assertEquals(436, openMapRealVector0.getDimension());
      assertEquals(6, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      openMapRealVector0.mapAddToSelf((-196.54727896464638));
      openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      double[] doubleArray0 = openMapRealVector0.getData();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf((-196.54727896464638));
      openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(433, 433);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
      assertEquals(433, openMapRealVector1.getDimension());
      assertEquals(0.5, openMapRealVector2.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(436, 436);
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.map(xMinus5Function0);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      
      openMapRealVector1.mapSubtractToSelf(436);
      openMapRealVector1.add(openMapRealVector0);
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      assertEquals(0, openMapRealVector1.getDimension());
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.add((RealVector) arrayRealVectorTest_RealVectorTestImpl0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported, unneeded for test purposes
         //
         verifyException("org.apache.commons.math.linear.ArrayRealVectorTest$RealVectorTestImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-6.0));
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.047197551196598;
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray1);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVectorTest_RealVectorTestImpl0);
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector((RealVector) openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.1111111111111111, openMapRealVector2.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-2312.02548));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector(doubleArray0, 841.13333);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        openMapRealVector0.projection(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2951), (-1474));
      // Undeclared exception!
      try { 
        openMapRealVector0.getEntry(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(91.55942);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[4]);
      double double1 = openMapRealVector0.getSparsity();
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(7);
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(7.0, double0, 0.01);
      assertEquals(7, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      assertEquals(7, openMapRealVector0.getDimension());
      
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
      assertFalse(boolean0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(7, 7, (-196.54727896464638));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(0.1111);
      openMapRealVector0.getDistance(openMapRealVector1);
  }
}
