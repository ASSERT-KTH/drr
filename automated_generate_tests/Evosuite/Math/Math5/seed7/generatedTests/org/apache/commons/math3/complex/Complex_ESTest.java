/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 13 00:01:21 GMT 2017
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.4770587682723999, 0.0);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.tanh();
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.tan();
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals((-6.331009331992412E-18), complex1.getReal(), 0.01);
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(1.266762260299142E-50, 1.266762260299142E-50);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.acos();
      assertEquals(1.125505335526732E-25, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.266762260299142E-50, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1090.1593210719), 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.cos();
      assertEquals(1.0922309152948338E14, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(33.0175607983373, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(317.21118353752);
      Complex complex1 = complex0.multiply(0.0);
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(317.21118353752, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.reciprocal();
      assertEquals(0.3360364354522668, complex2.getImaginary(), 0.01);
      assertEquals((-0.8499580454078004), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-672.6), (-672.6));
      Complex complex1 = complex0.subtract((-672.6));
      Complex complex2 = complex1.reciprocal();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals((-672.6), complex1.getImaginary(), 0.01);
      assertEquals(0.001486767766874814, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-1828.56737));
      Complex complex1 = complex0.divide(complex0);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals((-1828.56737), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-20.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-1828.56737));
      Complex complex1 = complex0.tanh();
      assertEquals((-2.6799673472427634E-18), complex1.getImaginary(), 0.01);
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertEquals((-1828.56737), complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-1432.0));
      Complex complex1 = complex0.subtract(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-1432.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-299.19058909465));
      Complex complex1 = complex0.subtract(16.4);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-315.59058909465), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2892.09155370274, 2892.09155370274);
      Complex complex1 = complex0.pow(2892.09155370274);
      Complex complex2 = complex1.subtract(7.749348772180658E175);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(2892.09155370274, complex0.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(1.266762260299142E-50, 1.266762260299142E-50);
      Complex complex1 = complex0.sqrt1z();
      assertEquals((-1.6046866241181912E-100), complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      assertTrue(complex2.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-1915.3443032108191), (-1915.3443032108191));
      Complex complex1 = complex0.sqrt();
      assertEquals(19.916846976918396, complex1.getReal(), 0.01);
      assertEquals((-1915.3443032108191), complex0.getImaginary(), 0.01);
      assertEquals((-48.08352209138597), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-1023.473), (-1023.473));
      Complex complex1 = complex0.sinh();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals((-1023.473), complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-1023.473), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sinh();
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4394452571868896, (-1.0));
      Complex complex1 = complex0.sinh();
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertEquals(1.4394452571868896, complex0.getReal(), 0.01);
      assertEquals(1.0755516604093889, complex1.getReal(), 0.01);
      assertEquals((-1.8745509271692353), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1369.9618));
      Complex complex1 = complex0.sin();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1369.9618), complex0.getReal(), 0.01);
      assertEquals((-0.22544817991626662), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
      Complex complex1 = complex0.createComplex(1432.0, (-4374.5319180333));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.pow(complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals((-5809.110936226141), complex2.getReal(), 0.01);
      assertEquals((-4374.5319180333), complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(459.18776149, 459.18776149);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.divide(459.18776149);
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex4.pow(complex3);
      assertEquals((-0.19620548690659), complex5.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1250.357468), (-1250.357468));
      Complex complex1 = complex0.pow(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1454.7659737), (-1454.7659737));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.negate();
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.negate();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1454.7659737));
      Complex complex1 = Complex.valueOf((-1454.7659737), (-1454.7659737));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.negate();
      assertEquals(2116344.0382353086, complex2.getReal(), 0.01);
      assertEquals(2116344.0382353086, complex2.getImaginary(), 0.01);
      assertEquals((-2116344.0382353086), complex3.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-2116344.0382353086), complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1454.7659737));
      Complex complex1 = Complex.valueOf((-1454.7659737), (-1454.7659737));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.multiply(complex2);
      assertEquals((-1454.7659737), complex1.getReal(), 0.01);
      assertEquals(1454.7659737, complex3.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-299.19058909465));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.multiply(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-89515.00860280372), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
      Complex complex1 = complex0.divide((-1.0004441581014705));
      Complex complex2 = complex0.createComplex(1432.0, (-4374.5319180333));
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex1.multiply(complex4);
      assertEquals(1.388269604011484E-4, complex5.getReal(), 0.01);
      assertEquals((-2.741352390116988E-4), complex5.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-299.19058909465));
      Complex complex1 = complex0.multiply(4381);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-299.19058909465), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1310753.9708236617), complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1454.7659737), (-1454.7659737));
      Complex complex1 = complex0.multiply(1351);
      assertEquals((-1965388.8304686998), complex1.getReal(), 0.01);
      assertEquals((-1454.7659737), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1965388.8304686998), complex1.getImaginary(), 0.01);
      assertEquals((-1454.7659737), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-1828.56737));
      Complex complex1 = complex0.multiply((-520.6));
      Complex complex2 = complex1.multiply((-20.0));
      assertEquals(951952.172822, complex1.getImaginary(), 0.01);
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(10412.0, complex1.getReal(), 0.01);
      assertEquals((-1828.56737), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1090.1593210719), 0.0);
      Complex complex1 = complex0.divide((-1090.1593210719));
      Complex complex2 = complex1.log();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      boolean boolean0 = complex1.isNaN();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-1.0356006160554071E245));
      Complex complex1 = complex0.acos();
      boolean boolean0 = complex1.isInfinite();
      assertFalse(complex0.isInfinite());
      assertEquals((-1.0356006160554071E245), complex0.getReal(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3660.0439462));
      double double0 = complex0.getReal();
      assertEquals((-3660.0439462), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-1872.1), (-1872.1));
      Complex complex1 = complex0.cosh();
      double double0 = complex1.getReal();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-1872.1), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-782.427931129));
      double double0 = complex0.getImaginary();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-782.427931129), complex0.getReal(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(459.18776149, 459.18776149);
      Complex complex1 = complex0.reciprocal();
      double double0 = complex1.getImaginary();
      assertEquals(459.18776149, complex0.getReal(), 0.01);
      assertEquals(0.0010888791948147093, complex1.getReal(), 0.01);
      assertEquals((-0.0010888791948147093), double0, 0.01);
      assertEquals(459.18776149, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      double double0 = complex0.getArgument();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(4.01780853635105E197, 4.01780853635105E197);
      Complex complex1 = complex0.exp();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(4.01780853635105E197, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-1915.3443032108191), (-1915.3443032108191));
      Complex complex1 = complex0.exp();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1915.3443032108191), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(4.139493534401503, 4.139493534401503);
      Complex complex1 = complex0.exp();
      assertEquals(4.139493534401503, complex0.getImaginary(), 0.01);
      assertEquals((-52.74868509458444), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-34.02612860704615), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
      Complex complex1 = complex0.createComplex(1432.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide(complex0);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1.0004441581014705), complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6146.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(6146.0);
      assertEquals(6146.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(4.139493534401503, 4.139493534401503);
      Complex complex1 = complex0.divide((-7.40238661307607E-8));
      assertEquals((-5.592106641781213E7), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-5.592106641781213E7), complex1.getReal(), 0.01);
      assertEquals(4.139493534401503, complex0.getImaginary(), 0.01);
      assertEquals(4.139493534401503, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(4.139493534401503, 4.139493534401503);
      Complex complex1 = complex0.cosh();
      assertEquals(4.139493534401503, complex0.getImaginary(), 0.01);
      assertEquals((-26.36764889355211), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-17.017382119646896), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-939.213137), 0.6881450095794239);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.cosh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5430806348152437, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.6881450095794239, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1090.1593210719), 0.0);
      Complex complex1 = complex0.cos();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-0.9996443692634647), complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.conjugate();
      assertTrue(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3660.0439462));
      Complex complex1 = complex0.conjugate();
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(boolean0);
      assertEquals(3660.0439462, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-1915.3443032108191), (-1915.3443032108191));
      Complex complex1 = complex0.multiply((-1));
      Complex complex2 = complex1.conjugate();
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(1915.3443032108191, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1915.3443032108191, complex2.getReal(), 0.01);
      assertEquals((-1915.3443032108191), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-939.213137), 0.6881450095794239);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atan();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-0.7853981633974483), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-299.19058909465));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.asin();
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.asin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-1023.473), (-1023.473));
      Complex complex1 = complex0.asin();
      assertEquals((-0.7853980440653622), complex1.getReal(), 0.01);
      assertEquals((-7.970677795524931), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.0697130057384643E245), 0.9999990246875953);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.add(complex1);
      assertTrue(complex2.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2019.10587988545), (-2019.10587988545));
      Complex complex1 = complex0.add(complex0);
      assertEquals((-2019.10587988545), complex0.getReal(), 0.01);
      assertEquals((-4038.2117597709), complex1.getReal(), 0.01);
      assertEquals((-4038.2117597709), complex1.getImaginary(), 0.01);
      assertEquals((-2019.10587988545), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.add(0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add(0.0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.add(826.7351376433444);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(826.7351376433444, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4394452571868896, (-1.0));
      Complex complex1 = complex0.add(0.0);
      assertEquals(1.4394452571868896, complex1.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(1.7067952022610908, 0.0);
      Complex complex1 = complex0.acos();
      assertEquals(1.1281587313406138, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.acos();
      assertEquals(2.022918657888705, complex2.getReal(), 0.01);
      assertEquals((-0.5303849800103073), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-1915.3443032108191), (-1915.3443032108191));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2507.0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(1174.262444217);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.001396647363608656, 0.001396647363608656);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1090.1593210719), 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.atan();
      assertEquals((-1.5707963267948966), complex2.getReal(), 0.01);
      assertEquals(0.030296179060946258, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.sqrt();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.log();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1.0);
      Complex complex1 = complex0.exp();
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(1174.262444217);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.subtract(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(0.0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(459.18776149, 459.18776149);
      Complex complex1 = complex0.pow(459.18776149);
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(459.18776149, complex0.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(459.18776149, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-3.4650891244084597E148), (-3.4650891244084597E148));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply(complex0);
      assertTrue(complex1.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals((-3.4650891244084597E148), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2.0);
      Complex complex1 = complex0.createComplex((-195.3837234663), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-195.3837234663), complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1.0);
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-1872.1), (-1872.1));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.divide(complex1);
      assertTrue(complex2.isNaN());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-1872.1), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
      Complex complex1 = complex0.createComplex((-1.0004441581014705), (-4374.5319180333));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.divide(complex2);
      assertEquals(2.2874973327104465E-4, complex3.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.000228749733271), complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1.0);
      Complex complex1 = complex0.createComplex((-267.2428), (-267.2428));
      Complex complex2 = complex1.add(complex0);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals((-267.2428), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-267.2428), complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(1.266762260299142E-50, 1.266762260299142E-50);
      Complex complex1 = complex0.pow(37.841775856849004);
      double double0 = complex1.abs();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.createComplex((-806.1688217906), (-2625.69));
      double double0 = complex1.abs();
      assertEquals((-2625.69), complex1.getImaginary(), 0.01);
      assertEquals(2746.6627287177516, double0, 0.01);
      assertTrue(complex0.isNaN());
      assertEquals((-806.1688217906), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1369.9618));
      double double0 = complex0.abs();
      assertEquals((-1369.9618), complex0.getReal(), 0.01);
      assertEquals(1369.9618, double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-4.2365298585101096E-8), Double.NaN);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals((-4.2365298585101096E-8), complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-1023.473), (-1023.473));
      double double0 = complex0.getArgument();
      assertEquals((-2.356194490192345), double0, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1090.1593210719), 0.0);
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals((-1090.1593210719), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1250.357468), (-1250.357468));
      double double0 = complex0.getReal();
      assertFalse(complex0.isInfinite());
      assertEquals((-1250.357468), double0, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1250.357468), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6146.0, Double.POSITIVE_INFINITY);
      double double0 = complex0.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(6146.0, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2801.9384936), Double.NaN);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
      Complex complex1 = complex0.createComplex(1432.0, Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex1.nthRoot(1444);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(1, list0.size());
      assertEquals(1432.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.0697130057384643E245), 0.9999990246875953);
      try { 
        complex0.nthRoot((-1679));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,679
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3747.0, 20.0);
      Complex complex1 = complex0.tanh();
      assertEquals(3747.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(20.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2.0);
      Complex complex1 = complex0.multiply(1805);
      Complex complex2 = complex1.tanh();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(2.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(-0.0, 0.0875862700108075);
      Complex complex1 = complex0.tanh();
      assertEquals(-0.0, complex0.getReal(), 0.01);
      assertEquals(0.08781092785587577, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0875862700108075, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1.0);
      Complex complex1 = complex0.tanh();
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1454.7659737), (-1454.7659737));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sin();
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals((-1.1752011936438014), complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-1454.7659737), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
      Complex complex1 = complex0.createComplex(1432.0, (-4374.5319180333));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.tan();
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(4373.531473875199, complex2.getImaginary(), 0.01);
      assertEquals((-1433.0004441581016), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1454.7659737));
      Complex complex1 = complex0.tan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1454.7659737), complex0.getReal(), 0.01);
      assertEquals((-0.21165325025208648), complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1.0);
      Complex complex1 = complex0.tan();
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex(-0.0, 0.0875862700108075);
      Complex complex1 = complex0.multiply(-0.0);
      Complex complex2 = complex1.sqrt();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex(-0.0, 0.0875862700108075);
      Complex complex1 = complex0.sqrt();
      assertEquals(0.20926809361535204, complex1.getImaginary(), 0.01);
      assertEquals(0.20926809361535206, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.sinh();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.sin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-1.0004441581014705), complex0.getImaginary(), 0.01);
      assertSame(complex3, complex2);
      assertEquals((-1.0004441581014705), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1872.1));
      Complex complex1 = complex0.divide(Double.NaN);
      Complex complex2 = complex1.pow(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
      assertEquals((-1872.1), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex(-0.0, 0.0875862700108075);
      Complex complex1 = complex0.multiply(-0.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.cosh();
      assertSame(complex3, complex2);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0875862700108075, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex0.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1872.1));
      Complex complex1 = complex0.divide(Double.NaN);
      Complex complex2 = complex1.cos();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1872.1), complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.atan();
      assertFalse(complex0.isInfinite());
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex(-0.0, 0.0875862700108075);
      Complex complex1 = complex0.multiply(-0.0);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.asin();
      assertTrue(complex3.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex0.getReal(), 0.01);
      assertNotSame(complex3, complex2);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0875862700108075, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.acos();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertSame(complex2, complex1);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1872.1));
      Complex complex1 = complex0.subtract(Double.NaN);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals((-1872.1), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1872.1));
      Complex complex1 = complex0.divide(Double.NaN);
      Complex complex2 = complex1.subtract(Double.NaN);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertSame(complex2, complex1);
      assertEquals((-1872.1), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1872.1));
      Complex complex1 = complex0.divide(Double.NaN);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.sqrt1z();
      assertEquals((-1872.1), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertSame(complex3, complex2);
      assertSame(complex3, complex1);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.negate();
      assertFalse(complex0.isInfinite());
      assertSame(complex2, complex1);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      assertFalse(complex0.isNaN());
      assertEquals((-1.0004441581014705), complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1.0004441581014705), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.multiply(Double.NaN);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2.0);
      Complex complex1 = complex0.createComplex((-195.3837234663), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(1805);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals((-195.3837234663), complex1.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1.0);
      Complex complex1 = complex0.multiply((-474));
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = new Complex(-0.0, 0.0875862700108075);
      Complex complex1 = complex0.multiply(1);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(0.0875862700108075, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
      Complex complex1 = complex0.createComplex(1432.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(1432.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2892.09155370274, 2892.09155370274);
      Complex complex1 = complex0.pow(2892.09155370274);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.pow(complex2);
      assertTrue(complex2.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(2892.09155370274, complex0.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      complex1.hashCode();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.0697130057384643E245), 0.9999990246875953);
      complex0.hashCode();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.9999990246875953, complex0.getImaginary(), 0.01);
      assertEquals((-2.0697130057384643E245), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 1.3480763914637323E214);
      boolean boolean0 = complex1.equals(complex0);
      assertFalse(complex1.isInfinite());
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.add(complex0);
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = new Complex(459.18776149, 459.18776149);
      Complex complex1 = complex0.multiply(Double.NaN);
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(459.18776149, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(459.18776149, complex0.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-299.19058909465));
      Complex complex1 = complex0.sinh();
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-299.19058909465), complex0.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals((-4.323066195029328E129), complex1.getReal(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      boolean boolean0 = complex0.equals(complex0);
      assertTrue(boolean0);
      assertTrue(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
      ComplexField complexField0 = complex0.getField();
      boolean boolean0 = complex0.equals(complexField0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-1.0004441581014705), complex0.getReal(), 0.01);
      assertEquals((-1.0004441581014705), complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.valueOf(459.18776149, 459.18776149);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.log();
      assertEquals((-6.4760327831226725), complex2.getReal(), 0.01);
      assertEquals((-0.7853981633974483), complex2.getImaginary(), 0.01);
      assertEquals((-0.0010888791948147093), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 1175.2580466093546);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.reciprocal();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(1175.2580466093546, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = new Complex((-1.0004441581014705), (-1.0004441581014705));
      Complex complex1 = complex0.createComplex((-1.0004441581014705), (-4374.5319180333));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.reciprocal();
      assertEquals((-2.2864817733069675E-4), complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1454.7659737), (-1454.7659737));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-1454.7659737), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-1454.7659737), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = new Complex((-1432.0));
      Complex complex1 = complex0.divide(0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-1432.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1872.1));
      Complex complex1 = complex0.divide(Double.NaN);
      Complex complex2 = complex1.reciprocal();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1872.1), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.divide(0.0);
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2019.10587988545), (-2019.10587988545));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-2019.10587988545), complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = new Complex(-0.0, 0.0875862700108075);
      Complex complex1 = complex0.atan();
      assertEquals(0.08781127502621154, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.valueOf(388.914277610333);
      Complex complex1 = complex0.pow(388.914277610333);
      Complex complex2 = complex0.divide(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.divide(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.conjugate();
      assertFalse(complex0.isNaN());
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1250.357468), (-1250.357468));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.multiply((-1250.357468));
      assertEquals((-1563393.7977833708), complex2.getImaginary(), 0.01);
      assertEquals((-1250.357468), complex1.getReal(), 0.01);
      assertEquals(1563393.7977833708, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add(Double.NaN);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = new Complex(-0.0, 0.0875862700108075);
      Complex complex1 = complex0.add((-1361.6197772));
      assertEquals((-1361.6197772), complex1.getReal(), 0.01);
      assertEquals(0.0875862700108075, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0875862700108075, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.add(Double.NaN);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.add(complex0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.0697130057384643E245), 0.9999990246875953);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(1410.62);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(0.9999990246875953, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 1.0);
      double double0 = complex0.abs();
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = new Complex((-2300.343), Double.POSITIVE_INFINITY);
      assertTrue(complex0.isInfinite());
      assertEquals((-2300.343), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = new Complex(-0.0, 0.0875862700108075);
      Complex complex1 = complex0.multiply(-0.0);
      Complex complex2 = complex1.pow(complex1);
      complex2.nthRoot(1);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0875862700108075, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.valueOf(317.21118353752);
      boolean boolean0 = complex0.isNaN();
      assertEquals(317.21118353752, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = new Complex(-0.0, 0.0875862700108075);
      String string0 = complex0.toString();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals("(-0.0, 0.0875862700108075)", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = (Complex)complex0.readResolve();
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = new Complex(-0.0, 0.0875862700108075);
      List<Complex> list0 = complex0.nthRoot(1);
      assertEquals(-0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1, list0.size());
      assertEquals(0.0875862700108075, complex0.getImaginary(), 0.01);
  }
}
