/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 22:33:38 GMT 2017
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.tanh();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(20.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 20.0);
      Complex complex1 = complex0.tan();
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(20.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-218.9));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sqrt();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(10.461780819728302, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2188.7734529354), (-5.3086706437795354E-9));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sinh();
      assertEquals((-0.7936924176732512), complex2.getImaginary(), 0.01);
      assertEquals(5.3086711978362585E-9, complex1.getReal(), 0.01);
      assertEquals((-2188.773224496945), complex1.getImaginary(), 0.01);
      assertEquals((-3.2293670395515627E-9), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = Complex.valueOf(1.0);
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3338.30640273472, 3338.30640273472);
      Complex complex1 = complex0.createComplex((-2471.13871134), 1.8828988075256348);
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(3338.30640273472, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.8828988075256348, complex1.getImaginary(), 0.01);
      assertEquals((-2471.13871134), complex1.getReal(), 0.01);
      assertEquals(3338.30640273472, complex0.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.reciprocal();
      assertEquals((-0.5), complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.5, complex1.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1165.7318, 1165.7318);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.reciprocal();
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertEquals(1165.7318, complex0.getReal(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1165.7318, 1165.7318);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.tanh();
      assertEquals(1165.7318, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(1165.7318, complex0.getReal(), 0.01);
      assertEquals((-1.557407724654902), complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.tan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-2.2275228051468313E7), (-5627.8));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.subtract(complex1);
      assertEquals((-5627.8), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-2.2275228051468313E7), complex0.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0948794730111198, (-327.0517498));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      assertEquals(1.9584309736546474E-5, complex1.getReal(), 0.01);
      assertEquals((-2.094859888701383), complex2.getReal(), 0.01);
      assertEquals(327.0548072946437, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1764.1), (-1764.1));
      Complex complex1 = complex0.subtract((-1764.1));
      assertFalse(complex1.isInfinite());
      assertEquals((-1764.1), complex0.getImaginary(), 0.01);
      assertEquals((-1764.1), complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sinh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2188.7734529354), (-5.3086706437795354E-9));
      Complex complex1 = complex0.sinh();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-5.3086706437795354E-9), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2188.7734529354), complex0.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-2980.359126097583), (-2980.359126097583));
      Complex complex1 = complex0.sin();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-2980.359126097583), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2980.359126097583), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-1582.054135), (-1582.054135));
      Complex complex1 = complex0.sin();
      assertFalse(complex0.isInfinite());
      assertEquals((-1582.054135), complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-1582.054135), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow(1472.3569);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals((-2.524630659933467), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3509.8), 4247.68539198388);
      Complex complex1 = complex0.pow(4247.68539198388);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-3509.8), complex0.getReal(), 0.01);
      assertEquals(4247.68539198388, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.negate();
      assertTrue(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(204959.64598361);
      Complex complex1 = complex0.sqrt1z();
      complex1.negate();
      assertEquals(204959.6459811705, complex1.getImaginary(), 0.01);
      assertEquals(204959.64598361, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2188.7734529354), (-5.3086706437795354E-9));
      Complex complex1 = complex0.acos();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex0.multiply(complex2);
      assertEquals(8.384243727469029, complex2.getImaginary(), 0.01);
      assertFalse(complex3.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2904.1748984917));
      Complex complex1 = complex0.multiply(37);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-107454.4712441929), complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-2904.1748984917), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2570.2724842301204), (-2570.2724842301204));
      Complex complex1 = complex0.multiply(37);
      assertEquals((-2570.2724842301204), complex0.getImaginary(), 0.01);
      assertEquals((-95100.08191651445), complex1.getReal(), 0.01);
      assertEquals((-95100.08191651445), complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2570.2724842301204), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(204959.64598361);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.multiply(1032);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-2.1151835465256795E8), complex3.getImaginary(), 0.01);
      assertEquals((-204959.6459811705), complex2.getImaginary(), 0.01);
      assertEquals(2.1151835465508553E8, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex1 = complex0.multiply((-1597.63248438));
      assertFalse(complex1.isInfinite());
      assertEquals((-10038.220952129235), complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(6.283185307179586, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(317.1312, 317.1312);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.multiply(0.5629583597183228);
      assertEquals(178.53166016750333, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-178.53166016750333), complex2.getImaginary(), 0.01);
      assertEquals(317.1312, complex1.getReal(), 0.01);
      assertEquals((-317.1312), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2090.1, 2090.1);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.log();
      assertEquals(2090.1, complex0.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.log();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2904.1748984917));
      Complex complex1 = complex0.log();
      assertEquals((-1.5707963267948966), complex1.getImaginary(), 0.01);
      assertEquals(7.9739046008844685, complex1.getReal(), 0.01);
      assertEquals((-2904.1748984917), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      boolean boolean0 = complex0.isNaN();
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-758.5418011186337), (-758.5418011186337));
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex1.isInfinite();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-758.5418011186337), complex0.getReal(), 0.01);
      assertEquals((-758.5418011186337), complex0.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getReal();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      double double0 = complex0.getReal();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(20.0, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1482.80744410987));
      double double0 = complex0.getImaginary();
      assertEquals((-1482.80744410987), double0, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3338.30640273472, 3338.30640273472);
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.7853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.437796532151255E213), (-2.437796532151255E213));
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2.356194490192345), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1959.7505172269505));
      Complex complex1 = complex0.exp();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1482.80744410987));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.exp();
      assertEquals((-0.0032441600139039126), complex2.getImaginary(), 0.01);
      assertEquals(4.810471911338912, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.437796532151255E213), (-2.437796532151255E213));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.divide(complex1);
      assertTrue(complex2.isInfinite());
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals(2.051032534527279E-214, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(227.732523);
      Complex complex1 = Complex.valueOf((-977.20184917647), (-5131.9725535025));
      Complex complex2 = complex1.divide(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-4.291006994975724), complex2.getReal(), 0.01);
      assertEquals((-22.53508847088345), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3338.30640273472, 3338.30640273472);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide((-1.0881464844514968));
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2570.2724842301204), (-2570.2724842301204));
      Complex complex1 = complex0.multiply((-1134.787312));
      Complex complex2 = complex1.divide((-1134.787312));
      assertFalse(complex2.isInfinite());
      assertEquals(2916712.6034870604, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex0));
      assertEquals(2916712.6034870604, complex1.getImaginary(), 0.01);
      assertEquals((-2570.2724842301204), complex0.getReal(), 0.01);
      assertEquals((-2570.2724842301204), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2904.1748984917));
      Complex complex1 = complex0.multiply((-1134.787312));
      Complex complex2 = complex1.divide((-1134.787312));
      assertEquals(3295620.8266372685, complex1.getImaginary(), 0.01);
      assertEquals((-2904.1748984917), complex2.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2904.1748984917));
      Complex complex1 = complex0.createComplex((-1.0), Double.NaN);
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-2904.1748984917), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2904.1748984917));
      Complex complex1 = complex0.createComplex((-1.0), 0.0);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertEquals((-2904.1748984917), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3509.8), 4247.68539198388);
      Complex complex1 = complex0.createComplex(2.0, 450.2109872);
      assertEquals((-3509.8), complex0.getReal(), 0.01);
      assertEquals(450.2109872, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(4247.68539198388, complex0.getImaginary(), 0.01);
      assertEquals(2.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1165.7318, 1165.7318);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.cosh();
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1165.7318, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(327.0517498, 3447.267116);
      Complex complex1 = complex0.cosh();
      assertEquals((-4.3944658225900116E141), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-3.209601013544176E141), complex1.getReal(), 0.01);
      assertEquals(3447.267116, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1482.80744410987));
      Complex complex1 = complex0.cos();
      assertTrue(complex1.isInfinite());
      assertEquals((-1482.80744410987), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.437796532151255E213), (-2.437796532151255E213));
      Complex complex1 = complex0.pow((-2.437796532151255E213));
      Complex complex2 = complex1.cos();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.conjugate();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3181.0226634542), (-408.04276));
      Complex complex1 = complex0.conjugate();
      assertEquals((-3181.0226634542), complex1.getReal(), 0.01);
      assertEquals(408.04276, complex1.getImaginary(), 0.01);
      assertEquals((-3181.0226634542), complex0.getReal(), 0.01);
      assertEquals((-408.04276), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.437796532151255E213), (-2.437796532151255E213));
      Complex complex1 = complex0.pow((-2.437796532151255E213));
      Complex complex2 = complex1.atan();
      assertEquals((-2.437796532151255E213), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.437796532151255E213), (-2.437796532151255E213));
      Complex complex1 = complex0.atan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1.5707963267948966), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(336.0, 336.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.asin();
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(1.2548596304377372E145, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1764.1), (-1764.1));
      Complex complex1 = complex0.asin();
      assertEquals((-0.7853981232309832), complex1.getReal(), 0.01);
      assertEquals((-8.51511669514228), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2904.1748984917));
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex1.asin();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.add(complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(0.0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5125.4163509);
      Complex complex1 = complex0.add((-8462.72275363472));
      assertEquals((-3337.30640273472), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, (-803.202791509));
      Complex complex2 = complex1.add(0.003368839226896444);
      assertEquals((-803.202791509), complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(538.4851169407);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.acos();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(7.262980436869339E233, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.acos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1959.7505172269505));
      Complex complex1 = complex0.acos();
      assertEquals((-8.27371957246008), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(2676.5345170028245);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2206.046345);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.sqrt();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1959.7505172269505));
      Complex complex1 = complex0.log();
      double double0 = complex1.getImaginary();
      assertEquals(3.141592653589793, double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(7.580572456993762, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.437796532151255E213), (-2.437796532151255E213));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.log();
      assertFalse(complex0.isInfinite());
      assertEquals((-2.437796532151255E213), complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isNaN());
      assertEquals((-2.437796532151255E213), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2904.1748984917));
      Complex complex1 = complex0.subtract(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals((-2904.1748984917), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex0.subtract(complex1);
      assertTrue(complex2.isNaN());
      assertNotSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1482.80744410987));
      Complex complex1 = complex0.negate();
      assertEquals(2.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-2.0), complex1.getReal(), 0.01);
      assertEquals((-1482.80744410987), complex0.getImaginary(), 0.01);
      assertEquals(1482.80744410987, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2188.7734529354), (-5.3086706437795354E-9));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.multiply((-2188.7734529354));
      assertEquals(5.3086711978362585E-9, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertTrue(complex3.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(204959.64598361);
      Complex complex1 = complex0.pow(204959.64598361);
      Complex complex2 = complex1.multiply(204959.64598361);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2188.7734529354), (-5.3086706437795354E-9));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.multiply(complex0);
      assertEquals(5.3086711978362585E-9, complex1.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.multiply(complex0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertNotSame(complex2, complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-2261.3));
      Complex complex2 = complex0.divide(complex1);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2188.7734529354), (-5.3086706437795354E-9));
      Complex complex1 = complex0.add(complex0);
      assertEquals((-5.3086706437795354E-9), complex0.getImaginary(), 0.01);
      assertEquals((-4377.5469058708), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-2188.7734529354), complex0.getReal(), 0.01);
      assertEquals((-1.0617341287559071E-8), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2904.1748984917));
      Complex complex1 = complex0.pow(complex0);
      double double0 = complex1.abs();
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1959.7505172269505));
      Complex complex1 = complex0.sqrt1z();
      double double0 = complex1.abs();
      assertEquals(1959.7502620924179, complex1.getImaginary(), 0.01);
      assertEquals(1959.7502620924179, double0, 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1959.7505172269505));
      double double0 = complex0.abs();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1959.7505172269505, double0, 0.01);
      assertEquals((-1959.7505172269505), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1.177739474561431E-7);
      Complex complex1 = complex0.pow(1.177739474561431E-7);
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.177739474561431E-7, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertNotSame(complex2, complex1);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1959.7505172269505));
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals((-1959.7505172269505), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1959.7505172269505));
      double double0 = complex0.getReal();
      assertFalse(complex0.isInfinite());
      assertEquals((-1959.7505172269505), double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1959.7505172269505));
      double double0 = complex0.getImaginary();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1959.7505172269505), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2570.2724842301204, Double.NaN);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      List<Complex> list0 = complex0.nthRoot(1868);
      assertEquals(1, list0.size());
      assertTrue(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(204959.64598361);
      Complex complex1 = complex0.pow(204959.64598361);
      List<Complex> list0 = complex1.nthRoot(1032);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1, list0.size());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0948794730111198, (-327.0517498));
      try { 
        complex0.nthRoot((-1643));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,643
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2188.7734529354), (-5.3086706437795354E-9));
      List<Complex> list0 = complex0.nthRoot(2406);
      assertEquals(2406, list0.size());
      assertEquals((-5.3086706437795354E-9), complex0.getImaginary(), 0.01);
      assertEquals((-2188.7734529354), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1165.7318, 1165.7318);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tanh();
      assertEquals(1.557407724654902, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1165.7318, complex0.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2188.7734529354), (-5.3086706437795354E-9));
      Complex complex1 = complex0.tanh();
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertEquals((-2188.7734529354), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-5.3086706437795354E-9), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(1592.5677278, 1592.5677278);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.tanh();
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(1592.5677278, complex0.getReal(), 0.01);
      assertEquals(1592.5677278, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(538.4851169407);
      Complex complex1 = complex0.tanh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(538.4851169407, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(204959.64598361);
      Complex complex1 = complex0.pow(204959.64598361);
      Complex complex2 = complex1.tanh();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex((-843.34), 2.03391170501709);
      Complex complex1 = complex0.tan();
      assertEquals((-0.012296952968521842), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.032540797449247, complex1.getImaginary(), 0.01);
      assertEquals(2.03391170501709, complex0.getImaginary(), 0.01);
      assertEquals((-843.34), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(2006.17, 2.9046141593926277E-8);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.tan();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(2.9046141593926277E-8, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.437796532151255E213), (-2.437796532151255E213));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.tan();
      assertEquals((-2.437796532151255E213), complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isNaN());
      assertEquals((-2.437796532151255E213), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-2261.3));
      Complex complex2 = complex1.sqrt();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(33.62513940491549, complex2.getReal(), 0.01);
      assertEquals((-33.62513940491548), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.valueOf(538.4851169407);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.sqrt();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.437796532151255E213), (-2.437796532151255E213));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sinh();
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
      assertEquals((-2.437796532151255E213), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex((double) 2901, Double.NaN);
      Complex complex1 = complex0.sin();
      assertEquals(2901.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.437796532151255E213), (-2.437796532151255E213));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cosh();
      assertSame(complex2, complex1);
      assertEquals((-2.437796532151255E213), complex0.getImaginary(), 0.01);
      assertEquals((-2.437796532151255E213), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.cos();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.atan();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      complex1.asin();
      assertTrue(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.437796532151255E213), (-2.437796532151255E213));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.acos();
      assertSame(complex2, complex1);
      assertEquals((-2.437796532151255E213), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2.437796532151255E213), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.valueOf(538.4851169407);
      Complex complex1 = complex0.acos();
      assertEquals(6.981906176645208, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.subtract(Double.NaN);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2904.1748984917));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.subtract(complex1);
      assertTrue(complex3.isNaN());
      assertNotSame(complex3, complex2);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals((-2904.1748984917), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8828988075256348, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.negate();
      assertFalse(complex1.isInfinite());
      assertNotSame(complex2, complex1);
      assertEquals(1.8828988075256348, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex((-2980.359126097583), (-2980.359126097583));
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-2980.359126097583), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2980.359126097583), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex((-843.34), 2.03391170501709);
      Complex complex1 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.multiply((-4193.125489));
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(2.03391170501709, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1382.678741);
      Complex complex1 = complex0.multiply(Double.NaN);
      assertEquals(1382.678741, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2904.1748984917));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.pow((double) 37);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex3, complex2);
      assertEquals((-2904.1748984917), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = new Complex(2006.17, 2.9046141593926277E-8);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply((-784));
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex1.isInfinite());
      assertEquals(2.9046141593926277E-8, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex1 = complex0.multiply(3347);
      assertFalse(complex0.isInfinite());
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = new Complex(2.412773544049425);
      Complex complex1 = complex0.multiply(1036);
      assertEquals(2499.6333916352046, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.412773544049425, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = new Complex((-2980.359126097583), (-2980.359126097583));
      Complex complex1 = new Complex((-2980.359126097583), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals((-2980.359126097583), complex1.getReal(), 0.01);
      assertEquals((-2980.359126097583), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = new Complex((-0.6629515829801749), (-2738.57216992334));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply(complex1);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-2738.57216992334), complex0.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3338.30640273472, 3338.30640273472);
      Complex complex1 = Complex.valueOf(1.8828988075256348, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(1.8828988075256348, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-2400.503504));
      Complex complex1 = Complex.valueOf((-2.2275228051468313E7), (-2400.503504));
      Complex complex2 = complex1.pow(complex0);
      assertEquals((-2400.503504), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-2.2275228051468313E7), complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2904.1748984917));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.pow(complex0);
      complex2.hashCode();
      assertTrue(complex2.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-2904.1748984917), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2188.7734529354), (-5.3086706437795354E-9));
      complex0.hashCode();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2188.7734529354), complex0.getReal(), 0.01);
      assertEquals((-5.3086706437795354E-9), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = new Complex(2.412773544049425);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sinh();
      boolean boolean0 = complex2.equals(complex1);
      assertEquals(0.81096915936743, complex2.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.valueOf(538.4851169407);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.divide(complex0);
      boolean boolean0 = complex1.equals(complex2);
      assertTrue(boolean0);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.pow(complex0);
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.valueOf(538.4851169407);
      Complex complex1 = complex0.exp();
      boolean boolean0 = complex1.equals(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(7.262980436869339E233, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.valueOf(538.4851169407);
      boolean boolean0 = complex0.equals(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(538.4851169407, complex0.getReal(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.valueOf(538.4851169407);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertEquals(538.4851169407, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.reciprocal();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.reciprocal();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1165.7318, 1165.7318);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.reciprocal();
      assertEquals(1165.7318, complex0.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.reciprocal();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.valueOf(538.4851169407);
      Complex complex1 = complex0.reciprocal();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.00185706153901023, complex1.getReal(), 0.01);
      assertEquals(538.4851169407, complex0.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5125.4163509);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      assertEquals(5125.4163509, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = new Complex(2.412773544049425);
      Complex complex1 = complex0.divide(0.0);
      assertFalse(complex0.isInfinite());
      assertEquals(2.412773544049425, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = new Complex((-0.12666527550473108));
      Complex complex1 = complex0.divide(Double.NaN);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-0.12666527550473108), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex1 = complex0.divide(Double.NaN);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.valueOf(317.1312, 317.1312);
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex0.divide(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2188.7734529354), (-5.3086706437795354E-9));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.atan();
      assertEquals(5.3086711978362585E-9, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.pow((-1527.68));
      Complex complex2 = complex0.divide(complex1);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.valueOf(204959.64598361);
      Complex complex1 = complex0.pow(204959.64598361);
      Complex complex2 = complex1.divide(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.437796532151255E213), (-2.437796532151255E213));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.conjugate();
      assertSame(complex2, complex1);
      assertFalse(complex0.isNaN());
      assertEquals((-2.437796532151255E213), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2.437796532151255E213), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = new Complex((-0.12666527550473108));
      Complex complex1 = complex0.add(Double.NaN);
      assertFalse(complex0.isNaN());
      assertEquals((-0.12666527550473108), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.add((-2261.3));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.valueOf(204959.64598361);
      Complex complex1 = complex0.pow(204959.64598361);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.exp();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertSame(complex3, complex2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1382.678741);
      Complex complex1 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex2 = complex1.add(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(1382.678741, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2904.1748984917));
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.pow(complex0);
      double double0 = complex2.abs();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-2904.1748984917), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.valueOf(538.4851169407);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sqrt1z();
      assertFalse(complex1.isInfinite());
      assertEquals(7.262980436869339E233, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = new Complex(2.412773544049425);
      Complex complex1 = complex0.subtract(2.412773544049425);
      Complex complex2 = complex1.pow(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      boolean boolean0 = complex0.isNaN();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = new Complex(2.412773544049425);
      String string0 = complex0.toString();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals("(2.412773544049425, 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = new Complex(2.412773544049425);
      complex0.getField();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2.412773544049425, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = new Complex(2.412773544049425);
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertEquals(2.412773544049425, complex0.getReal(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = new Complex(2.412773544049425);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.pow(complex1);
      assertEquals(0.03138598177056158, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }
}
