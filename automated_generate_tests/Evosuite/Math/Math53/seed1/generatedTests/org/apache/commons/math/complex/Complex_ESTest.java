/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 22:20:19 GMT 2017
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex((-1986.879913175), (-1986.879913175));
      try { 
        complex0.nthRoot((-789));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -789
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2.6033824355191673E-8));
      Complex complex1 = complex0.sqrt();
      assertEquals(1.1409168320958297E-4, complex1.getReal(), 0.01);
      assertEquals((-1.1409168320958297E-4), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.1538461446762085);
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      assertEquals(0.1538461446762085, complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-0.2499999997677497), (-0.2499999997677497));
      Complex complex1 = complex0.tanh();
      assertEquals((-0.2499999997677497), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-0.2598708802268379), complex1.getReal(), 0.01);
      assertEquals((-0.2499999997677497), complex0.getImaginary(), 0.01);
      assertEquals((-0.23909011542820968), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-13.9420739502787), (-13.9420739502787));
      Complex complex1 = complex0.tan();
      assertEquals((-5.906004228738439E-13), complex1.getReal(), 0.01);
      assertEquals((-13.9420739502787), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-13.9420739502787), complex0.getReal(), 0.01);
      assertEquals((-1.000000000001436), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(3411.49693317877, 3411.49693317877);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.subtract(complex0);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-3730.8044008761203));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(complex1);
      assertEquals((-3687.6256738398038), complex2.getImaginary(), 0.01);
      assertEquals((-41.20188038126062), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-1712.3046652297), 0.6666666269302368);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt();
      assertEquals(0.04421144017290024, complex2.getReal(), 0.01);
      assertEquals((-1.1050137898776995), complex2.getImaginary(), 0.01);
      assertEquals((-0.09770850212281533), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), 0.0);
      Complex complex1 = complex0.sin();
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.48799833580315244, complex1.getReal(), 0.01);
      assertEquals((-4408.164288), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-1712.3046652297), 0.6666666269302368);
      Complex complex1 = complex0.sin();
      assertEquals(0.16765848640942882, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1712.3046652297), complex0.getReal(), 0.01);
      assertEquals((-0.7104711371170829), complex1.getImaginary(), 0.01);
      assertEquals(0.6666666269302368, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(165.8110463, (-4167.17127));
      Complex complex1 = complex0.multiply((-4167.17127));
      Complex complex2 = complex0.pow(complex1);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-13.9420739502787), (-13.9420739502787));
      Complex complex1 = complex0.pow(complex0);
      assertEquals((-3.1125621988658245E-33), complex1.getImaginary(), 0.01);
      assertEquals((-3.643778271023661E-33), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.negate();
      assertEquals((-4408.164288), complex0.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(4408.164288, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(1172.3, 1172.3);
      Complex complex1 = complex0.negate();
      assertEquals(1172.3, complex0.getReal(), 0.01);
      assertEquals(1172.3, complex0.getImaginary(), 0.01);
      assertEquals((-1172.3), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1172.3), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-1255.4153292113397), (-1255.4153292113397));
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.multiply(complex0);
      assertFalse(complex0.isNaN());
      assertTrue(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-1255.4153292113397), (-1255.4153292113397));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(3152135.2976376326, complex2.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(559.5796127430266, 559.5796127430266);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.multiply(complex0);
      assertEquals(4561.86375528726, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-3395.46069744502), (-3395.46069744502));
      Complex complex1 = complex0.multiply(0.0);
      assertEquals((-3395.46069744502), complex0.getReal(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-3395.46069744502), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(1.2958646899018938E-9, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.log();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-1712.3046652297), 0.6666666269302368);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.log();
      assertEquals((-3.0616156032455586), complex2.getImaginary(), 0.01);
      assertEquals(0.2013151373429002, complex2.getReal(), 0.01);
      assertEquals((-0.09770850212281533), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-835.70839422), (-835.70839422));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt1z();
      boolean boolean0 = complex2.isNaN();
      assertTrue(complex1.isInfinite());
      assertTrue(boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals((-835.70839422), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.isInfinite();
      assertTrue(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getReal();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-3730.8044008761203));
      double double0 = complex0.getReal();
      assertEquals((-3730.8044008761203), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), 0.0);
      double double0 = complex0.getImaginary();
      assertEquals((-4408.164288), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), Double.POSITIVE_INFINITY);
      double double0 = complex0.getImaginary();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals((-4408.164288), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = complex0.divide(complex0);
      double double0 = complex1.getArgument();
      assertEquals(-0.0, double0, 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-1255.4153292113397), (-1255.4153292113397));
      Complex complex1 = complex0.conjugate();
      double double0 = complex1.getArgument();
      assertFalse(complex1.isInfinite());
      assertEquals((-1255.4153292113397), complex0.getReal(), 0.01);
      assertEquals((-1255.4153292113397), complex0.getImaginary(), 0.01);
      assertEquals(2.356194490192345, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-1255.4153292113397), (-1255.4153292113397));
      Complex complex1 = complex0.exp();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-1255.4153292113397), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-0.2499999997677497), (-0.2499999997677497));
      Complex complex1 = complex0.exp();
      assertEquals(0.7545897529758648, complex1.getReal(), 0.01);
      assertEquals((-0.19267839707188433), complex1.getImaginary(), 0.01);
      assertEquals((-0.2499999997677497), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-349.283729512), Double.NaN);
      Complex complex1 = complex0.createComplex((-349.283729512), Double.NaN);
      assertTrue(complex1.isNaN());
      assertEquals((-349.283729512), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 1741.0);
      assertTrue(complex1.isInfinite());
      assertEquals(1741.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2.6033824355191673E-8));
      Complex complex1 = complex0.createComplex(816.2147199132544, 0.0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(816.2147199132544, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-3395.46069744502), (-3395.46069744502));
      Complex complex1 = complex0.createComplex(2.0, (-3395.46069744502));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-3395.46069744502), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(2.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-761.9050180804551), (-957.478587519));
      Complex complex1 = complex0.cosh();
      assertEquals((-957.478587519), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-5196.443087191983), 0.0);
      Complex complex1 = complex0.cos();
      assertEquals(0.9691992128712421, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(3411.49693317877, 3411.49693317877);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.conjugate();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2.6033824355191673E-8));
      Complex complex1 = complex0.conjugate();
      assertEquals(2.6033824355191673E-8, complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = complex0.conjugate();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertEquals((-1.0), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-844.48473621489), (-844.48473621489));
      Complex complex1 = complex0.atan();
      assertEquals((-1.5702042496436945), complex1.getReal(), 0.01);
      assertEquals((-5.92076874461105E-4), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), (-4408.164288));
      Complex complex1 = complex0.asin();
      assertEquals((-9.430934391395567), complex1.getImaginary(), 0.01);
      assertEquals((-0.7853981569647309), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, (-1847.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.add(complex1);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals((-1847.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.add(complex0);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals((-8816.328576), complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-4408.164288), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-13.9420739502787), (-13.9420739502787));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.add(complex0);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.add(complex1);
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(2002.7398, 0.0);
      Complex complex1 = complex0.acos();
      assertEquals(8.295418540119528, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.06666666666666667, 0.06666666666666667);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-1.7976931348623157E308), (-1.7976931348623157E308));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-1225.7183514703927), 0.058823529411764705);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(318.24545, 0.0);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.exp();
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-1712.3046652297), 0.6666666269302368);
      Complex complex1 = complex0.subtract(complex0);
      assertFalse(complex1.isInfinite());
      assertEquals((-1712.3046652297), complex0.getReal(), 0.01);
      assertEquals(0.6666666269302368, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.subtract(complex2);
      assertTrue(complex3.isNaN());
      assertNotSame(complex3, complex2);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(944.0854175227812, 2081.6);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply((-1725.60408576));
      Complex complex3 = complex2.multiply(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(2081.6, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-1629117.6537837468), complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals((-3592017.464918016), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(929.24, 740.3792222359762);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply(complex0);
      assertTrue(complex1.isInfinite());
      assertEquals(740.3792222359762, complex0.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals(929.24, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-1255.4153292113397), (-1255.4153292113397));
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(3152135.2976376326, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1255.4153292113397), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(complex0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals((-4408.164288), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-349.283729512), Double.NaN);
      Complex complex1 = complex0.multiply(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals((-349.283729512), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, (-1847.0));
      double double0 = complex0.abs();
      assertEquals(1847.0015028831126, double0, 0.01);
      assertEquals(2.356194490192345, complex0.getReal(), 0.01);
      assertEquals((-1847.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), (-4408.164288));
      Complex complex1 = complex0.sinh();
      double double0 = complex1.abs();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-4408.164288), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-4408.164288), complex0.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(2205.1318, 2205.1318);
      double double0 = complex0.abs();
      assertEquals(2205.1318, complex0.getImaginary(), 0.01);
      assertEquals(2205.1318, complex0.getReal(), 0.01);
      assertEquals(3118.5272983801956, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.sqrt();
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(2205.1318, 2205.1318);
      boolean boolean0 = complex0.isInfinite();
      assertEquals(2205.1318, complex0.getImaginary(), 0.01);
      assertEquals(2205.1318, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), (-4408.164288));
      double double0 = complex0.getImaginary();
      assertFalse(complex0.isNaN());
      assertEquals((-4408.164288), double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-4408.164288), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-1255.4153292113397), (-1255.4153292113397));
      double double0 = complex0.getReal();
      assertEquals((-1255.4153292113397), double0, 0.01);
      assertEquals((-1255.4153292113397), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      List<Complex> list0 = complex1.nthRoot(1798);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1, list0.size());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, (-1847.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      List<Complex> list0 = complex2.nthRoot(203);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-1020.9789474901131), (-1020.9789474901131));
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(2205.1318, 2205.1318);
      List<Complex> list0 = complex0.nthRoot(1308);
      assertEquals(1308, list0.size());
      assertEquals(2205.1318, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, (-1847.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.tanh();
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-349.283729512), Double.NaN);
      Complex complex1 = complex0.tan();
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals((-349.283729512), complex0.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-1255.4153292113397), (-1255.4153292113397));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.sqrt();
      assertEquals(35.431839207733674, complex4.getImaginary(), 0.01);
      assertEquals(35.431839207733674, complex4.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), (-4408.164288));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.sinh();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex3.equals((Object)complex2));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, (-1847.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.sin();
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex0.isInfinite());
      assertTrue(complex3.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(2205.1318, 2205.1318);
      Complex complex1 = complex0.sin();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(2205.1318, complex0.getImaginary(), 0.01);
      assertEquals(2205.1318, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-349.283729512), Double.NaN);
      Complex complex1 = complex0.pow(complex0);
      assertEquals((-349.283729512), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, (-1847.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.cosh();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, (-1847.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.cos();
      assertTrue(complex3.equals((Object)complex2));
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-349.283729512), Double.NaN);
      Complex complex1 = complex0.atan();
      assertEquals((-349.283729512), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-1255.4153292113397), (-1255.4153292113397));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.cos();
      complex4.asin();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(2510.8304592853865, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = complex0.acos();
      assertEquals(3.141592653589793, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-349.283729512), Double.NaN);
      Complex complex1 = complex0.subtract(complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals((-349.283729512), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-1255.4153292113397), (-1255.4153292113397));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.negate();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex5, complex4);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertEquals(2510.8304592853865, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), (-4408.164288));
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals((-4408.164288), complex0.getReal(), 0.01);
      assertEquals((-4408.164288), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-4408.164288));
      assertEquals((-4408.164288), complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(3411.49693317877, 3411.49693317877);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply(3411.49693317877);
      assertEquals(3411.49693317877, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.NaN);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals((-4408.164288), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(3411.49693317877, 3411.49693317877);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.multiply(3411.49693317877);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.multiply(complex2);
      assertTrue(complex3.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(2205.1318, 2205.1318);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.pow(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(2205.1318, complex0.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex((-3395.46069744502), (-3395.46069744502));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals((-3395.46069744502), complex0.getImaginary(), 0.01);
      assertEquals((-3395.46069744502), complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt1z();
      assertEquals((-4408.164288), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertNotSame(complex2, complex1);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(5070.7, 0.0);
      Complex complex1 = complex0.tanh();
      complex1.hashCode();
      assertEquals(5070.7, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), (-4408.164288));
      complex0.hashCode();
      assertEquals((-4408.164288), complex0.getImaginary(), 0.01);
      assertEquals((-4408.164288), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(boolean0);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.1538461446762085, 235);
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(0.1538461446762085, complex1.getReal(), 0.01);
      assertFalse(boolean0);
      assertEquals(235.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(complex0.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex(2205.1318, 2205.1318);
      boolean boolean0 = complex0.equals("(2205.1318, 2205.1318)");
      assertFalse(complex0.isInfinite());
      assertEquals(2205.1318, complex0.getReal(), 0.01);
      assertEquals(2205.1318, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.equals(complex0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(complex0);
      assertEquals((-4408.164288), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex(2205.1318, 2205.1318);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(2205.1318, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), 0.0);
      Complex complex1 = new Complex(0.0, (-4408.164288));
      Complex complex2 = complex0.divide(complex1);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex((-3395.46069744502), (-3395.46069744502));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.divide(complex1);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals((-3395.46069744502), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-3395.46069744502), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex((-349.283729512), Double.NaN);
      Complex complex1 = complex0.divide(complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals((-349.283729512), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, (-1847.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.conjugate();
      assertTrue(complex1.isInfinite());
      assertSame(complex4, complex3);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-1847.0), complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex(2205.1318, 2205.1318);
      Complex complex1 = complex0.conjugate();
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(2205.1318, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(boolean0);
      assertEquals(2205.1318, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, (-1847.0));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.asin();
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(4.9976188600441254E17, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, (-1847.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.acos();
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, (-1847.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt1z();
      double double0 = complex2.abs();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1847.0), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), (-4408.164288));
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertEquals((-2.356194490192345), double0, 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, (-1847.0));
      Complex complex1 = complex0.add(complex0);
      assertEquals(2.356194490192345, complex0.getReal(), 0.01);
      assertEquals((-1847.0), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-3694.0), complex1.getImaginary(), 0.01);
      assertEquals(4.71238898038469, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = new Complex(2205.1318, 2205.1318);
      complex0.getField();
      assertEquals(2205.1318, complex0.getImaginary(), 0.01);
      assertEquals(2205.1318, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, (-1847.0));
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = new Complex(2.356194490192345, (-1847.0));
      String string0 = complex0.toString();
      assertFalse(complex0.isInfinite());
      assertEquals("(2.356194490192345, -1847.0)", string0);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = new Complex((-4408.164288), Double.POSITIVE_INFINITY);
      Complex complex1 = (Complex)complex0.readResolve();
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.isInfinite());
      assertEquals((-4408.164288), complex1.getReal(), 0.01);
  }
}
