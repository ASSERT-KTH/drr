/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 11 23:35:43 GMT 2017
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1403.662);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-839.6697814785887), (-839.6697814785887));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.asin();
      assertEquals((-7.772729468099072), complex2.getImaginary(), 0.01);
      assertEquals(839.6700792147343, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sinh();
      assertEquals(1.46383751424058, complex2.getReal(), 0.01);
      assertEquals((-1.9361155717005505), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-1134.74883569), 404.924804413);
      complex0.hashCode();
      assertFalse(complex0.isInfinite());
      assertEquals((-1134.74883569), complex0.getReal(), 0.01);
      assertEquals(404.924804413, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3570.0));
      Complex complex1 = complex0.multiply(0.0);
      boolean boolean0 = complex0.equals(complex1);
      assertEquals((-3570.0), complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 549.01);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.divide(complex2);
      assertEquals(-0.0, complex3.getReal(), 0.01);
      assertEquals((-549.01), complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-2565.128747), 0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.tan();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1.556831459840256), complex2.getReal(), 0.01);
      assertEquals((-0.9998317288973769), complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-2565.128747), 0.0);
      Complex complex1 = complex0.tan();
      assertEquals(54.503628669895164, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-2565.128747), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3570.0));
      Complex complex1 = complex0.multiply(3.9736429850260626E-8);
      Complex complex2 = complex1.tan();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-1.4185905456543045E-4), complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1.418590536138591E-4), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.subtract(complex0);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-2565.128747), 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(complex0);
      assertEquals((-8.54291109267275), complex2.getImaginary(), 0.01);
      assertEquals(2568.27033965359, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(8.0E298, 539.683);
      Complex complex1 = complex0.sqrt1z();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-494.8977));
      Complex complex1 = complex0.sqrt1z();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(494.8987103087762, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-2565.128747), 0.0);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(2565.128552078003, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-2422.150591), (-2422.150591));
      Complex complex1 = complex0.sinh();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-2422.150591), complex0.getImaginary(), 0.01);
      assertEquals((-2422.150591), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-2565.128747), 0.0);
      Complex complex1 = complex0.sinh();
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-2565.128747), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3570.0));
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.sinh();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-2565.128747), 0.0);
      Complex complex1 = complex0.pow(complex0);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.negate();
      assertTrue(complex2.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-494.8977));
      Complex complex1 = complex0.negate();
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(494.8977, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-494.8977), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-2565.128747), 0.0);
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = complex0.subtract(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-6582450.617432792), complex2.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-494.8977));
      Complex complex1 = complex0.createComplex((-2530.36001863571), 423.766767539);
      Complex complex2 = complex1.multiply(complex1);
      assertEquals(6223143.550639657, complex2.getReal(), 0.01);
      assertEquals((-2144564.971614357), complex2.getImaginary(), 0.01);
      assertEquals(423.766767539, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-2565.128747), 0.0);
      Complex complex1 = complex0.multiply(1482.812200947853);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-2565.128747), complex0.getReal(), 0.01);
      assertEquals((-3803604.2030536784), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.log();
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-1.5707963267948966), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt();
      boolean boolean0 = complex2.isNaN();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(boolean0);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(1931.33, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(5311.802, 5311.802);
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex1.isInfinite();
      assertEquals(5311.802, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getReal();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-2211.3903208), (-2211.3903208));
      Complex complex1 = complex0.cosh();
      double double0 = complex1.getReal();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-2211.3903208), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      double double0 = complex0.getImaginary();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      Complex complex1 = complex0.sin();
      double double0 = complex1.getImaginary();
      assertEquals(1931.33, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(1931.33, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getArgument();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-2119.201656029), Double.POSITIVE_INFINITY);
      double double0 = complex0.getArgument();
      assertTrue(complex0.isInfinite());
      assertEquals((-2119.201656029), complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(1945.7159464318509, (-2000.0));
      Complex complex1 = complex0.exp();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2000.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.divide(complex0);
      assertTrue(complex3.equals((Object)complex1));
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.7853981633974483), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(1.9868161777724352E-8, 1.9868161777724352E-8);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624882440418567), 1326.2);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.divide(complex1);
      assertEquals((-1042.0156282940723), complex2.getImaginary(), 0.01);
      assertEquals(2402.9864036183094, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-468.649383597), (-468.649383597));
      Complex complex1 = complex0.createComplex(542.95172244, Double.NaN);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-468.649383597), complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(542.95172244, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-1134.74883569), 404.924804413);
      Complex complex1 = complex0.createComplex(404.924804413, 0.0);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(404.924804413, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-2565.128747), 0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      assertEquals(1.542882904259943, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(5.0, 5.0);
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.cos();
      assertTrue(complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals((-856.7116375683576), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-494.8977));
      Complex complex1 = complex0.cos();
      assertEquals(4.268843377269386E214, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-494.8977), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.conjugate();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-1844.7), (-1844.7));
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertEquals((-1844.7), complex1.getReal(), 0.01);
      assertEquals((-1844.7), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3570.0));
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.conjugate();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-336.14), 2609.084);
      Complex complex1 = complex0.atan();
      assertEquals((-1.5707477538153982), complex1.getReal(), 0.01);
      assertEquals(3.7701841920984285E-4, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3570.0));
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.atan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-494.8977));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.asin();
      assertEquals((-4.268843377269386E214), complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals((-494.8977), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-336.14), 2609.084);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cosh();
      assertEquals((-0.09708551068692649), complex2.getImaginary(), 0.01);
      assertEquals((-0.6603599013520338), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-1134.74883569), 404.924804413);
      Complex complex1 = complex0.multiply((-1134.74883569));
      Complex complex2 = complex1.asin();
      assertEquals((-14.821408823435169), complex2.getImaginary(), 0.01);
      assertEquals(1.2280402043464997, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.add(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-2565.128747), 0.0);
      Complex complex1 = complex0.add(complex0);
      assertFalse(complex1.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-5130.257494), complex1.getReal(), 0.01);
      assertEquals((-2565.128747), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 1);
      Complex complex2 = complex0.add(complex1);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(5.0, 5.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.acos();
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals((-3.0543401489442316E61), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624882440418567), 1326.2);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(181.2152652101717, 181.2152652101717);
      complex0.nthRoot(4286);
      // Undeclared exception!
      complex0.nthRoot(4286);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(2016.9395887, 2016.9395887);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2409.674428348306);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3570.0));
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.sqrt();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.log();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(1931.33, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-2211.3903208), (-2211.3903208));
      Complex complex1 = complex0.exp();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-2211.3903208), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(1931.33, complex0.getImaginary(), 0.01);
      assertEquals(1931.33, complex0.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      Complex complex1 = complex0.createComplex(753.27, Double.NEGATIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(753.27, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-468.649383597), (-468.649383597));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(complex0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertTrue(complex2.isNaN());
      assertEquals((-468.649383597), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-468.649383597), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3570.0));
      Complex complex1 = complex0.multiply(0.0);
      double double0 = complex1.abs();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-3570.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-2422.150591), (-2422.150591));
      double double0 = complex0.abs();
      assertEquals((-2422.150591), complex0.getReal(), 0.01);
      assertEquals((-2422.150591), complex0.getImaginary(), 0.01);
      assertEquals(3425.438215902208, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-2211.3903208), (-2211.3903208));
      Complex complex1 = complex0.cosh();
      double double0 = complex1.abs();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2211.3903208), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624882440418567), 1326.2);
      double double0 = complex0.abs();
      assertEquals((-0.16624882440418567), complex0.getReal(), 0.01);
      assertEquals(1326.2, complex0.getImaginary(), 0.01);
      assertEquals(1326.2000104202502, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1403.662);
      boolean boolean0 = complex0.isInfinite();
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(boolean0);
      assertEquals(1403.662, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-2565.128747), 0.0);
      double double0 = complex0.getImaginary();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-2565.128747), complex0.getReal(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-2211.3903208), (-2211.3903208));
      double double0 = complex0.getReal();
      assertEquals((-2211.3903208), double0, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-2211.3903208), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      Complex complex1 = complex0.sin();
      List<Complex> list0 = complex1.nthRoot(2368);
      assertTrue(complex1.isInfinite());
      assertEquals(1931.33, complex0.getImaginary(), 0.01);
      assertEquals(1931.33, complex0.getReal(), 0.01);
      assertEquals(1, list0.size());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt();
      List<Complex> list0 = complex2.nthRoot(1185);
      assertEquals(1931.33, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.nthRoot((-2290));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,290
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-468.649383597), (-468.649383597));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tanh();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals((-468.649383597), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals((-468.649383597), complex0.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3570.0));
      Complex complex1 = complex0.tanh();
      assertEquals((-2.2389723008046105), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-3570.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-468.649383597), (-468.649383597));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tan();
      assertTrue(complex1.isNaN());
      assertEquals((-468.649383597), complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals((-468.649383597), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3570.0));
      Complex complex1 = complex0.sqrt();
      assertEquals(42.24926034855522, complex1.getReal(), 0.01);
      assertEquals((-42.24926034855521), complex1.getImaginary(), 0.01);
      assertEquals((-3570.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624882440418567), 1326.2);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt();
      assertEquals(1326.2, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals((-0.16624882440418567), complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-468.649383597), (-468.649383597));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sinh();
      assertTrue(complex2.equals((Object)complex1));
      assertEquals((-468.649383597), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals((-468.649383597), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-2211.3903208), (-2211.3903208));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.sin();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2211.3903208), complex0.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertNotSame(complex3, complex2);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.NaN);
      Complex complex1 = complex0.exp();
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.cosh();
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-2211.3903208), (-2211.3903208));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.asin();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-2211.3903208), complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotSame(complex3, complex2);
      assertTrue(complex3.isNaN());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-2211.3903208), (-2211.3903208));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.acos();
      assertTrue(complex3.isNaN());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotSame(complex3, complex2);
      assertEquals((-2211.3903208), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-494.8977));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.subtract(complex1);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals((-494.8977), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-468.649383597), (-468.649383597));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.subtract(complex0);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-468.649383597), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals((-468.649383597), complex0.getReal(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(1.9868161777724352E-8, 1.9868161777724352E-8);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex3.negate();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex4, complex3);
      assertTrue(complex4.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-2119.201656029), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-2119.201656029));
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-2119.201656029), complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(0.0);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = complex0.multiply(Double.NaN);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624882440418567), 1326.2);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(1326.2000104202502);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(1326.2, complex0.getImaginary(), 0.01);
      assertEquals((-0.16624882440418567), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply(complex1);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(1931.33, complex0.getReal(), 0.01);
      assertEquals(1931.33, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex((-2119.201656029), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-494.8977));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals((-494.8977), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex((-468.649383597), (-468.649383597));
      Complex complex1 = complex0.tan();
      complex1.hashCode();
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals((-468.649383597), complex0.getImaginary(), 0.01);
      assertEquals((-468.649383597), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex1.isNaN());
      assertTrue(boolean0);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3570.0));
      Complex complex1 = complex0.multiply(3.9736429850260626E-8);
      boolean boolean0 = complex1.equals(complex0);
      assertEquals((-3570.0), complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals((-1.4185905456543045E-4), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex((-468.649383597), (-468.649383597));
      Complex complex1 = complex0.tan();
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(complex1.isNaN());
      assertEquals((-468.649383597), complex0.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-468.649383597), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3570.0));
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(boolean0);
      assertEquals((-3570.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.equals(complex0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      Complex complex1 = complex0.multiply(complex0);
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      assertFalse(complex1.isInfinite());
      assertEquals(7460071.1378, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1931.33, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex(1962.7592609265719, (-1890.83227));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(1962.7592609265719, complex0.getReal(), 0.01);
      assertEquals((-1890.83227), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3570.0));
      Complex complex1 = complex0.atan();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals((-2.8011205214406836E-4), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624882440418567), 1326.2);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals(1326.2, complex0.getImaginary(), 0.01);
      assertEquals((-0.16624882440418567), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex((-2211.3903208), (-2211.3903208));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.divide(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-2211.3903208), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertNotSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.conjugate();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex1.add(complex0);
      assertTrue(complex2.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex((-468.649383597), (-468.649383597));
      Complex complex1 = complex0.tan();
      double double0 = complex1.abs();
      assertEquals((-468.649383597), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals((-468.649383597), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      Complex complex1 = complex0.createComplex(753.27, Double.NEGATIVE_INFINITY);
      Complex complex2 = complex0.pow(complex1);
      assertEquals(753.27, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.atan();
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(1931.33, complex0.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.divide(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(1931.33, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(1931.33, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3570.0));
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertEquals((-1.5707963267948966), double0, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      complex0.getField();
      assertEquals(1931.33, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1931.33, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      String string0 = complex0.toString();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals("(1931.33, 1931.33)", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = new Complex(1931.33, 1931.33);
      boolean boolean0 = complex0.isNaN();
      assertEquals(1931.33, complex0.getReal(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals(1931.33, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }
}
