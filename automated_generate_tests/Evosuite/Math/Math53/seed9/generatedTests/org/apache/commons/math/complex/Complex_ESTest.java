/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 00:05:47 GMT 2017
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.nthRoot((-402));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -402
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.11113807559013367);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.sqrt();
      assertEquals((-0.010666015455492757), complex3.getImaginary(), 0.01);
      assertEquals((-2.275277713936208E-4), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.cosh();
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertEquals(0.8337300251311491, complex1.getReal(), 0.01);
      assertEquals(0.9888977057628651, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-2036.3112153610061), 0.0);
      complex0.hashCode();
      assertEquals((-2036.3112153610061), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.11113807559013367);
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(boolean0);
      assertEquals(0.11113807559013367, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.11136700710196351, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-2666.43091), (-2666.43091));
      Complex complex1 = complex0.acos();
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      assertEquals(8.928216887889183, complex1.getImaginary(), 0.01);
      assertEquals(2.3561944732166116, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      Complex complex1 = complex0.tanh();
      assertEquals((-2.185039863261519), complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(2.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-20.0));
      Complex complex1 = complex0.createComplex((-2499.36), 0.3333333333332802);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.tan();
      assertEquals((-0.9999999199590253), complex3.getImaginary(), 0.01);
      assertEquals((-2.1349726674880854E-11), complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(2845.9788632, 2845.9788632);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.subtract(complex0);
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.subtract(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(1695.06163, Double.NaN);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(1695.06163, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-2047.171432081306), 4993.1349805343);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sqrt();
      assertEquals(2.3928126144338404, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(2845.9788632, 2845.9788632);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sin();
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(2845.9788632, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-2845.9788632), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-3364.5307598), 0.0);
      Complex complex1 = complex0.pow(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 4205.5606);
      Complex complex1 = complex0.negate();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals((-4205.5606), complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(4205.5606, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-2036.3112153610061), 0.0);
      Complex complex1 = complex0.negate();
      assertFalse(complex1.isInfinite());
      assertEquals(2036.3112153610061, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-2036.3112153610061), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-3214.705180703096), (-3214.705180703096));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.tanh();
      assertEquals((-0.9854214215934167), complex3.getReal(), 0.01);
      assertEquals(0.010275352635478609, complex3.getImaginary(), 0.01);
      assertEquals((-3214.705180703096), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.multiply(complex1);
      assertFalse(complex2.isInfinite());
      assertEquals((-0.6634936666312412), complex2.getReal(), 0.01);
      assertEquals(1.9334214962007135, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-2036.3112153610061), 0.0);
      Complex complex1 = complex0.multiply(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(4146563.3658050178, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-3214.705180703096), (-3214.705180703096));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals((-36877.18887525414), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-3568.923312106), (-3568.923312106));
      Complex complex1 = complex0.multiply(2264.825167);
      assertEquals((-8082987.3363506645), complex1.getReal(), 0.01);
      assertEquals((-8082987.3363506645), complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-3568.923312106), complex0.getReal(), 0.01);
      assertEquals((-3568.923312106), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(1695.06163, Double.NaN);
      boolean boolean0 = complex0.isNaN();
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertEquals(1695.06163, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(901.5803959, (-1500.0244564497968));
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex1.isInfinite();
      assertEquals(901.5803959, complex0.getReal(), 0.01);
      assertEquals((-1500.0244564497968), complex0.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getReal();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-1383.8), 4505.149240468588);
      double double0 = complex0.getReal();
      assertFalse(complex0.isInfinite());
      assertEquals((-1383.8), double0, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(4505.149240468588, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-497.87357));
      Complex complex1 = complex0.cos();
      double double0 = complex1.getImaginary();
      assertEquals((-497.87357), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(8.369781890843375E215, complex1.getReal(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(1695.06163, Double.NaN);
      double double0 = complex0.getImaginary();
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1695.06163, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getArgument();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      double double0 = complex0.getArgument();
      assertFalse(complex0.isNaN());
      assertEquals((-2.356194490192345), double0, 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(2338.929296, (-1317.786484143801));
      Complex complex1 = complex0.exp();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-1317.786484143801), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-3705.9491065559), (-3705.9491065559));
      Complex complex1 = complex0.exp();
      assertEquals((-3705.9491065559), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-3214.705180703096), (-3214.705180703096));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.exp();
      assertEquals((-0.13889951941558157), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.multiply((-1.0));
      Complex complex2 = complex1.divide(complex0);
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.divide(complex0);
      assertEquals(0.7097907230031882, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(1695.06163, Double.NaN);
      Complex complex1 = complex0.createComplex(1695.06163, Double.NaN);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(1695.06163, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-3214.705180703096), (-3214.705180703096));
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      assertFalse(complex1.isNaN());
      assertEquals((-3214.705180703096), complex0.getReal(), 0.01);
      assertEquals((-3214.705180703096), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.createComplex((-1.0), (-1.0));
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-1.0), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.log();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-2059.25699), 0.0);
      Complex complex1 = complex0.cos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-0.05696357667152191), complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-3568.923312106), (-3568.923312106));
      Complex complex1 = complex0.cos();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-3568.923312106), complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-2047.171432081306), 4993.1349805343);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.conjugate();
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-3364.5307598), 0.0);
      Complex complex1 = complex0.atan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1.5704991085371527), complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(352.9407297920187, (-349.6184305504027));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.asin();
      assertEquals((-349.6184305504027), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.4952738746797198E153, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-3705.9491065559), (-3705.9491065559));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.add(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-3214.705180703096), (-3214.705180703096));
      Complex complex1 = complex0.add(complex0);
      assertEquals((-3214.705180703096), complex0.getImaginary(), 0.01);
      assertEquals((-6429.410361406192), complex1.getReal(), 0.01);
      assertEquals((-3214.705180703096), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-6429.410361406192), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.acos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0232274785475506, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-3568.923312106), (-3568.923312106));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-3364.5307598), 0.0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-542.455826617051), 1.0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(2338.929296, (-1317.786484143801));
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(1.1430250008909141E-8, 1.1430250008909141E-8);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.11113807559013367);
      Complex complex1 = complex0.sqrt();
      assertEquals(0.23573085880950512, complex1.getImaginary(), 0.01);
      assertEquals(0.11113807559013367, complex0.getImaginary(), 0.01);
      assertEquals(0.23573085880950512, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex1.log();
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isNaN());
      assertNotSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.log();
      assertEquals((-2.356194490192345), complex1.getImaginary(), 0.01);
      assertEquals(0.3465735902799727, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.negate();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-2047.171432081306), 4993.1349805343);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(complex1);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(4993.1349805343, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-2047.171432081306), 4993.1349805343);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply(complex1);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(4993.1349805343, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(2.0, complex1.getImaginary(), 0.01);
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-912.601740372403), (-912.601740372403));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.multiply(complex2);
      assertTrue(complex3.isNaN());
      assertNotSame(complex3, complex2);
      assertEquals((-912.601740372403), complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-912.601740372403), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-20.0));
      Complex complex1 = complex0.divide(complex0);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex2.abs();
      assertEquals(0.5978886096799212, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-2047.171432081306), 4993.1349805343);
      Complex complex1 = complex0.cosh();
      double double0 = complex1.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(4993.1349805343, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      double double0 = complex0.abs();
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertEquals(1.4142135623730951, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, (-2967.8363666451));
      assertFalse(complex0.isInfinite());
      assertEquals((-2967.8363666451), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-20.0));
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-497.87357));
      double double0 = complex0.getImaginary();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals((-497.87357), double0, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      double double0 = complex0.getReal();
      assertFalse(complex0.isInfinite());
      assertEquals(1946.04773248922, double0, 0.01);
      assertEquals(1946.04773248922, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 4205.5606);
      List<Complex> list0 = complex0.nthRoot(199);
      assertTrue(complex0.isInfinite());
      assertEquals(1, list0.size());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(4205.5606, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(1695.06163, Double.NaN);
      List<Complex> list0 = complex0.nthRoot(3843);
      assertEquals(1, list0.size());
      assertFalse(complex0.isInfinite());
      assertEquals(1695.06163, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-1144.0), 2063.40444009);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-20.0));
      List<Complex> list0 = complex0.nthRoot(1);
      assertEquals(1, list0.size());
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tanh();
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(1946.04773248922, complex0.getReal(), 0.01);
      assertEquals(1946.04773248922, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-4356.2006));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tan();
      assertEquals((-4356.2006), complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.acos();
      assertEquals((-0.7861513777574233), complex1.getImaginary(), 0.01);
      assertEquals(0.6662394324925153, complex2.getReal(), 0.01);
      assertEquals(1.0612750619050355, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt();
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(1946.04773248922, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1946.04773248922, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sinh();
      assertEquals(1946.04773248922, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(1946.04773248922, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(1695.06163, Double.NaN);
      Complex complex1 = complex0.sin();
      assertEquals(1695.06163, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(1695.06163, Double.NaN);
      Complex complex1 = complex0.cosh();
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(1695.06163, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(1695.06163, Double.NaN);
      Complex complex1 = complex0.cos();
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(1695.06163, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(1695.06163, Double.NaN);
      Complex complex1 = complex0.atan();
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(1695.06163, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.asin();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(1946.04773248922, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(1946.04773248922, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-2047.171432081306), 4993.1349805343);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.acos();
      assertTrue(complex3.isNaN());
      assertEquals(4993.1349805343, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-912.601740372403), (-912.601740372403));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.subtract(complex2);
      assertTrue(complex3.isNaN());
      assertEquals((-912.601740372403), complex0.getReal(), 0.01);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.isInfinite());
      assertEquals((-912.601740372403), complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-4356.2006));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(complex1);
      assertTrue(complex0.isInfinite());
      assertEquals((-4356.2006), complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.negate();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(1946.04773248922, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1946.04773248922, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(Double.NEGATIVE_INFINITY);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-2047.171432081306), 4993.1349805343);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply(4993.1349805343);
      assertTrue(complex1.isInfinite());
      assertEquals(4993.1349805343, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(Double.NaN);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.11113807559013367);
      Complex complex1 = complex0.multiply(0.0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.11113807559013367, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(0.0);
      assertEquals(1946.04773248922, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(1946.04773248922, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-4356.2006));
      Complex complex1 = complex0.createComplex((-4356.2006), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.acos();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals((-4356.2006), complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.pow(complex1);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1946.04773248922, complex0.getImaginary(), 0.01);
      assertEquals(1946.04773248922, complex0.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-4356.2006));
      Complex complex1 = complex0.acos();
      complex1.hashCode();
      assertTrue(complex0.isInfinite());
      assertEquals((-4356.2006), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-20.0));
      complex0.hashCode();
      assertFalse(complex0.isNaN());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      boolean boolean0 = complex1.equals(complex0);
      assertFalse(complex1.isInfinite());
      assertTrue(boolean0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 2.0);
      Complex complex1 = complex0.pow(complex0);
      boolean boolean0 = complex1.equals(complex0);
      assertEquals((-41147.196958809836), complex1.getImaginary(), 0.01);
      assertEquals(63544.79762016803, complex1.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(1695.06163, Double.NaN);
      Complex complex1 = complex0.multiply(complex0);
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(1695.06163, complex0.getReal(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex((-1144.0), 2063.40444009);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals(2063.40444009, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1144.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      boolean boolean0 = complex0.equals(complex0);
      assertEquals(1946.04773248922, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(boolean0);
      assertEquals(1946.04773248922, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.11113807559013367);
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(0.11136700710196351, complex1.getImaginary(), 0.01);
      assertEquals(0.11113807559013367, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex((-3214.705180703096), (-3214.705180703096));
      Complex complex1 = complex0.sin();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex0.divide(complex2);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.11113807559013367);
      Complex complex1 = complex0.atan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.1115990772749416, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 4205.5606);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex0.divide(complex1);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(4205.5606, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertNotSame(complex2, complex1);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex(1695.06163, Double.NaN);
      Complex complex1 = complex0.divide(complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(1695.06163, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex((-1144.0), 2063.40444009);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.conjugate();
      assertFalse(complex2.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 2.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.acos();
      complex2.pow(complex3);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals((-2.5071587336043892), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-497.87357));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt1z();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.exp();
      double double0 = complex2.abs();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1946.04773248922, complex0.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals(1946.04773248922, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex((-3597.6782382482), Double.POSITIVE_INFINITY);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals((-3597.6782382482), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.add(complex2);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1946.04773248922, complex0.getImaginary(), 0.01);
      assertEquals(1946.04773248922, complex0.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 2.0);
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.30816907111598496, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      complex0.getField();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1946.04773248922, complex0.getImaginary(), 0.01);
      assertEquals(1946.04773248922, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      String string0 = complex0.toString();
      assertEquals("(1946.04773248922, 1946.04773248922)", string0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = new Complex(1946.04773248922, 1946.04773248922);
      boolean boolean0 = complex0.isNaN();
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
      assertEquals(1946.04773248922, complex0.getReal(), 0.01);
      assertEquals(1946.04773248922, complex0.getImaginary(), 0.01);
  }
}
