/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 27 23:58:06 GMT 2017
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 249.32);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3820.8419198180536));
      Complex complex1 = complex0.sqrt();
      assertEquals((-3820.8419198180536), complex0.getImaginary(), 0.01);
      assertEquals((-43.70836258553993), complex1.getImaginary(), 0.01);
      assertEquals(43.70836258553993, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-2233.3382060759127), 1.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sinh();
      assertEquals(2.1377093678760284, complex2.getImaginary(), 0.01);
      assertEquals(1.203092576144877, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(2599.01547177, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 2599.01547177);
      Complex complex2 = complex1.tan();
      boolean boolean0 = complex2.equals(complex1);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(2599.01547177, complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(4462606.273269387, 4462606.273269387);
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      assertEquals(4462606.273269387, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(0.008336750013465571, 917.59);
      Complex complex1 = complex0.divide(complex0);
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(917.59, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 311.82212682898);
      Complex complex1 = complex0.atan();
      assertEquals(0.003206967505418994, complex1.getImaginary(), 0.01);
      assertEquals((-1.5707963267948966), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-271.7678491), 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tanh();
      assertEquals((-6.632281154677804E-21), complex2.getImaginary(), 0.01);
      assertEquals(5.604948205905064, complex1.getReal(), 0.01);
      assertEquals(0.9999729212906231, complex2.getReal(), 0.01);
      assertEquals(3.141592653589793, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-1876.449511677147), 0.0);
      Complex complex1 = complex0.tan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.3097208423944078), complex1.getReal(), 0.01);
      assertEquals((-1876.449511677147), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-1876.449511677147), (-1876.449511677147));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.subtract(complex1);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.tanh();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex0));
      assertFalse(complex3.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-2233.3382060759127), 1.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sqrt1z();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(0.008336750013465571, 917.59);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.sqrt1z();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(917.59, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-758.368235457835), (-758.368235457835));
      Complex complex1 = complex0.sqrt();
      assertEquals((-758.368235457835), complex0.getImaginary(), 0.01);
      assertEquals(12.532485954502164, complex1.getReal(), 0.01);
      assertEquals((-30.256097561609444), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-3902.0), (-419.0));
      Complex complex1 = complex0.sinh();
      assertFalse(complex0.isInfinite());
      assertEquals((-419.0), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-3902.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-2298.292888007985), 0.0);
      Complex complex1 = complex0.sinh();
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-2298.292888007985), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 311.82212682898);
      Complex complex1 = complex0.sinh();
      assertFalse(complex1.isInfinite());
      assertEquals(311.82212682898, complex0.getImaginary(), 0.01);
      assertEquals((-0.7204521825485775), complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-2233.3382060759127), 1.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sin();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-1876.449511677147), 0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.subtract(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1877.244323532096), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-3902.0), (-419.0));
      Complex complex1 = complex0.sin();
      assertEquals((-3902.0), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-419.0), complex0.getImaginary(), 0.01);
      assertEquals((-6.591064495622037E180), complex1.getReal(), 0.01);
      assertEquals((-4.612849365254901E181), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-758.368235457835), (-758.368235457835));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.pow(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-3075.135558), (-1861.0));
      Complex complex1 = complex0.pow(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-1808.0165719), (-1808.0165719));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.negate();
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(1021.53811274, 1021.53811274);
      Complex complex1 = complex0.negate();
      assertEquals((-1021.53811274), complex1.getReal(), 0.01);
      assertEquals(1021.53811274, complex0.getImaginary(), 0.01);
      assertEquals(1021.53811274, complex0.getReal(), 0.01);
      assertEquals((-1021.53811274), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-271.7678491), 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals((-853.7838782144594), complex2.getImaginary(), 0.01);
      assertEquals((-1523.244718235723), complex2.getReal(), 0.01);
      assertEquals(3.141592653589793, complex1.getImaginary(), 0.01);
      assertEquals(5.604948205905064, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-758.368235457835), (-758.368235457835));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1150244.7611028606), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(1545.51319, 591.7186446498398);
      Complex complex1 = complex0.multiply((-1974.804537));
      assertEquals(591.7186446498398, complex0.getImaginary(), 0.01);
      assertEquals((-1168528.6640819944), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1545.51319, complex0.getReal(), 0.01);
      assertEquals((-3052086.4596053427), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply((-7.800414592973399E-9));
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.log();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-1493.754711), (-1493.754711));
      Complex complex1 = complex0.tanh();
      boolean boolean0 = complex1.isNaN();
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1493.754711), complex0.getReal(), 0.01);
      assertEquals((-1493.754711), complex0.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.isInfinite();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(0.008336750013465571, 917.59);
      double double0 = complex0.getReal();
      assertEquals(917.59, complex0.getImaginary(), 0.01);
      assertEquals(0.008336750013465571, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-1808.0165719), (-1808.0165719));
      double double0 = complex0.getReal();
      assertEquals((-1808.0165719), complex0.getImaginary(), 0.01);
      assertEquals((-1808.0165719), double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getImaginary();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(1044.3044, 0.0);
      Complex complex1 = complex0.exp();
      double double0 = complex1.getImaginary();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getArgument();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(1021.53811274, 1021.53811274);
      Complex complex1 = complex0.exp();
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(1021.53811274, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-2233.3382060759127), 1.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.divide(complex0);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      assertTrue(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-271.7678491), 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(20.680219672661934, complex2.getImaginary(), 0.01);
      assertEquals((-271.7678491), complex0.getReal(), 0.01);
      assertEquals(3.141592653589793, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.createComplex(Double.NaN, 6.283185307179586);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(6.283185307179586, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-2233.3382060759127), 1.0);
      Complex complex1 = complex0.createComplex((-1827.53383), 0.0);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1827.53383), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-758.368235457835), (-758.368235457835));
      Complex complex1 = complex0.cosh();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-758.368235457835), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-1876.449511677147), 0.0);
      Complex complex1 = complex0.conjugate();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1876.449511677147), complex0.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1876.449511677147), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-758.368235457835), (-758.368235457835));
      Complex complex1 = complex0.atan();
      assertEquals((-1.5701370162891042), complex1.getReal(), 0.01);
      assertEquals((-6.593101236648327E-4), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(1.073741824E9, 1.073741824E9);
      Complex complex1 = complex0.asin();
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-1808.0165719), (-1808.0165719));
      Complex complex1 = complex0.asin();
      assertEquals((-0.7853981251585651), complex1.getReal(), 0.01);
      assertEquals((-8.539706477623929), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-1876.449511677147), (-1876.449511677147));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.add(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-1493.754711), (-1493.754711));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.add(complex1);
      assertTrue(complex2.isNaN());
      assertEquals((-1493.754711), complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1493.754711), complex0.getReal(), 0.01);
      assertEquals((-1493.754711), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.acos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-271.7678491), 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.acos();
      assertEquals(3.141592653589793, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 249.32);
      Complex complex1 = complex0.acos();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals((-6.211888414325436), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(3456.7486709736845, 3456.7486709736845);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(3064.2545, 0.0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-2274.74660323), (-2274.74660323));
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(677.165968, 734.86754611658);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.log();
      assertEquals(734.86754611658, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.exp();
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-1876.449511677147), (-1876.449511677147));
      Complex complex1 = complex0.subtract(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(complex0);
      assertTrue(complex0.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-1876.449511677147), 0.0);
      Complex complex1 = complex0.multiply(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(3521062.7698734035, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(complex0);
      assertTrue(complex0.isInfinite());
      assertNotSame(complex2, complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(2599.01547177, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(complex1);
      assertFalse(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-1808.0165719), (-1808.0165719));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.add(complex0);
      double double0 = complex2.abs();
      assertEquals(2553.049476128916, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-1808.0165719), (-1808.0165719));
      double double0 = complex0.abs();
      assertEquals(2556.92155697629, double0, 0.01);
      assertEquals((-1808.0165719), complex0.getReal(), 0.01);
      assertEquals((-1808.0165719), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-992.5939234852), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 2412.4767075);
      assertTrue(complex1.isInfinite());
      assertEquals(2412.4767075, complex1.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((double) 17, Double.NaN);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(17.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-1493.754711), (-1493.754711));
      boolean boolean0 = complex0.isInfinite();
      assertFalse(complex0.isNaN());
      assertFalse(boolean0);
      assertEquals((-1493.754711), complex0.getReal(), 0.01);
      assertEquals((-1493.754711), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1672.761847534807));
      double double0 = complex0.getImaginary();
      assertEquals((-1672.761847534807), double0, 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 427.8409995891);
      double double0 = complex0.getReal();
      assertEquals(427.8409995891, complex0.getImaginary(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-1876.449511677147), (-1876.449511677147));
      Complex complex1 = complex0.cos();
      List<Complex> list0 = complex1.nthRoot(39);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals((-1876.449511677147), complex0.getImaginary(), 0.01);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(1.073741824E9, 1.073741824E9);
      Complex complex1 = complex0.tan();
      List<Complex> list0 = complex1.nthRoot(90);
      assertEquals(1.073741824E9, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(1.073741824E9, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 311.82212682898);
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 427.8409995891);
      List<Complex> list0 = complex0.nthRoot(33);
      assertEquals(427.8409995891, complex0.getImaginary(), 0.01);
      assertEquals(33, list0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-2233.3382060759127), 1.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tanh();
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals((-2233.3382060759127), complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(346.85069837048, (-3342.80857433));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.tan();
      assertFalse(complex0.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-3342.80857433), complex0.getImaginary(), 0.01);
      assertNotSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-271.7678491), 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.asin();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 427.8409995891);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.divide(complex0);
      assertEquals(0.03418564686152713, complex2.getReal(), 0.01);
      assertEquals(14.626021324835746, complex1.getImaginary(), 0.01);
      assertEquals((-0.03418564686152713), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(1.073741824E9, 1.073741824E9);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt();
      assertEquals(1.073741824E9, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(1.073741824E9, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-2233.3382060759127), 1.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sinh();
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals((-2233.3382060759127), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-1493.754711), (-1493.754711));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sin();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals((-1493.754711), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1493.754711), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(1044.3044, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.cosh();
      assertFalse(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 427.8409995891);
      Complex complex1 = complex0.cosh();
      assertEquals(427.8409995891, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.8340439721464672, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(1044.3044, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.cos();
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-1493.754711), (-1493.754711));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atan();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1493.754711), complex0.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals((-1493.754711), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(346.85069837048, (-3342.80857433));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.asin();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-3342.80857433), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertNotSame(complex3, complex2);
      assertTrue(complex3.isNaN());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.acos();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertNotSame(complex2, complex1);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex0.subtract(complex1);
      assertFalse(complex0.isInfinite());
      assertSame(complex2, complex1);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-1493.754711), (-1493.754711));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract(complex1);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1493.754711), complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1493.754711), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.negate();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(1.073741824E9, 1.073741824E9);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(1.073741824E9, complex0.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(1.073741824E9, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.multiply(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isInfinite());
      assertTrue(complex3.isInfinite());
      assertEquals(0.7853981633974483, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertTrue(complex5.isInfinite());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(1.073741824E9, 1.073741824E9);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(0.0);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(1.073741824E9, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(1.073741824E9, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.NaN);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 427.8409995891);
      Complex complex1 = complex0.multiply((-119.06059884536073));
      double double0 = complex1.getArgument();
      assertEquals((-1.5707963267948966), double0, 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(427.8409995891, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals((-50939.005621675984), complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex((-1493.754711), (-1493.754711));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply((-1493.754711));
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals((-1493.754711), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1493.754711), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.008336750013465571, 917.59);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(917.59, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.pow(complex1);
      assertTrue(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertNotSame(complex2, complex1);
      assertFalse(complex1.isInfinite());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      complex1.hashCode();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex((-758.368235457835), (-758.368235457835));
      complex0.hashCode();
      assertFalse(complex0.isNaN());
      assertEquals((-758.368235457835), complex0.getReal(), 0.01);
      assertEquals((-758.368235457835), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(2599.01547177, 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-0.4579028990391944));
      Complex complex2 = complex1.tan();
      boolean boolean0 = complex2.equals(complex1);
      assertEquals((-0.4283734758436346), complex2.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(boolean0);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-0.4579028990391944), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(boolean0);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex((-1493.754711), (-1493.754711));
      Complex complex1 = complex0.tanh();
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1493.754711), complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1493.754711), complex0.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex((-1876.449511677147), (-1876.449511677147));
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals((-1876.449511677147), complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex((-1876.449511677147), 0.0);
      boolean boolean0 = complex0.equals(complex0);
      assertFalse(complex0.isInfinite());
      assertTrue(boolean0);
      assertEquals((-1876.449511677147), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 427.8409995891);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(427.8409995891, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex(0.008336750013465571, 917.59);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(917.59, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isNaN());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex(0.008336750013465571, 917.59);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(917.59, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.divide(complex1);
      assertSame(complex2, complex1);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex(346.85069837048, (-3342.80857433));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.divide(complex1);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals((-3342.80857433), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertNotSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.conjugate();
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex((-2233.3382060759127), 1.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.log();
      double double0 = complex2.abs();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 427.8409995891);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.acos();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(427.8409995891, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex((-2233.3382060759127), 1.0);
      Complex complex1 = complex0.tanh();
      double double0 = complex1.abs();
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals((-2233.3382060759127), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 427.8409995891);
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex((-271.7678491), 0.0);
      complex0.getField();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-271.7678491), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 427.8409995891);
      Complex complex1 = complex0.pow(complex0);
      assertEquals((-4.8797323214201825E-293), complex1.getImaginary(), 0.01);
      assertEquals((-1.2640473360052051E-292), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex((-271.7678491), 0.0);
      String string0 = complex0.toString();
      assertFalse(complex0.isInfinite());
      assertEquals("(-271.7678491, 0.0)", string0);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 427.8409995891);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = new Complex((-271.7678491), 0.0);
      boolean boolean0 = complex0.isNaN();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals((-271.7678491), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 427.8409995891);
      Complex complex1 = (Complex)complex0.readResolve();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(427.8409995891, complex1.getImaginary(), 0.01);
  }
}
