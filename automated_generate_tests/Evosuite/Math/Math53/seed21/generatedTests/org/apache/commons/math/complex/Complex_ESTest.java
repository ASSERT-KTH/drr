/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 22 17:15:24 GMT 2017
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex((-1465.6), (-1465.6));
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(9.591923178479039, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.multiply(complex0);
      boolean boolean0 = complex4.equals(complex5);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(3.070992439016112, complex5.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(122.3534385742063, 122.3534385742063);
      Complex complex1 = complex0.sqrt1z();
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(122.3534385742063, complex0.getReal(), 0.01);
      assertEquals((-122.3513953303431), complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-1940.0), (-1940.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.atan();
      assertEquals(1.5408880031498184, complex2.getReal(), 0.01);
      assertEquals(2.35619445666837, complex1.getReal(), 0.01);
      assertEquals((-1940.0), complex0.getImaginary(), 0.01);
      assertEquals(0.10837720688340438, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.divide(complex1);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(9.591923178479039, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.tanh();
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals((-0.09559378419360627), complex3.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(353.9922858, 353.9922858);
      Complex complex1 = complex0.tanh();
      assertFalse(complex1.isInfinite());
      assertEquals((-6.064938196633775E-308), complex1.getImaginary(), 0.01);
      assertEquals(353.9922858, complex0.getReal(), 0.01);
      assertEquals(353.9922858, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-0.0013888888689039883), (-0.0013888888689039883));
      Complex complex1 = complex0.tan();
      assertEquals((-0.001388890655023702), complex1.getImaginary(), 0.01);
      assertEquals((-0.0013888870827787668), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-1940.0), (-1940.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.subtract(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(0.19999954120254515, 0.19999954120254515);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.subtract(complex0);
      assertEquals((-0.002677294519439627), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.002655961475946156, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-1484.3953985621786), (-1484.3953985621786));
      Complex complex1 = complex0.sinh();
      assertEquals((-1484.3953985621786), complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1484.3953985621786), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-1484.950480657344), (-1484.950480657344));
      Complex complex1 = complex0.subtract(complex0);
      Complex complex2 = complex1.sinh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-1465.6), (-1465.6));
      Complex complex1 = complex0.sinh();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-1465.6), complex0.getReal(), 0.01);
      assertEquals((-1465.6), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(360.25701691059, 913.4277656979);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals((-360.25683008165163), complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(913.4277656979, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(726.324815340403, 0.041666666666666664);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.negate();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.negate();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex1));
      assertEquals((-1.0), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = complex0.negate();
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-1483.13954), (-1483.13954));
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.multiply(complex0);
      assertFalse(complex0.isNaN());
      assertTrue(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-2296.885806779651), 0.0);
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(5275684.409385808, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-2296.885806779651), 0.0);
      Complex complex1 = complex0.subtract(complex0);
      Complex complex2 = complex1.multiply((-2296.885806779651));
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-2296.885806779651), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-2296.885806779651), 0.0);
      Complex complex1 = complex0.multiply((-2296.885806779651));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(5275684.409385808, complex1.getReal(), 0.01);
      assertEquals((-2296.885806779651), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-0.0013888888689039883), (-0.0013888888689039883));
      Complex complex1 = complex0.multiply(1.0);
      assertFalse(complex1.isInfinite());
      assertEquals((-0.0013888888689039883), complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = complex0.log();
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(2.384185791015625E-7, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sinh();
      boolean boolean0 = complex1.isNaN();
      assertTrue(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(2.384185791015625E-7, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(5575.0, 5575.0);
      Complex complex1 = complex0.exp();
      boolean boolean0 = complex1.isInfinite();
      assertFalse(complex0.isInfinite());
      assertTrue(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(5575.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.exp();
      double double0 = complex1.getReal();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-1483.13954), (-1483.13954));
      double double0 = complex0.getReal();
      assertEquals((-1483.13954), complex0.getImaginary(), 0.01);
      assertEquals((-1483.13954), double0, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-2759.59747507), 0.0);
      double double0 = complex0.getImaginary();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-2759.59747507), complex0.getReal(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(3.8172913423, 3.8172913423);
      double double0 = complex0.getImaginary();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(3.8172913423, complex0.getReal(), 0.01);
      assertEquals(3.8172913423, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getArgument();
      assertFalse(complex0.isNaN());
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-2296.885806779651), 0.0);
      double double0 = complex0.getArgument();
      assertFalse(complex0.isNaN());
      assertEquals(3.141592653589793, double0, 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-2759.59747507), 0.0);
      Complex complex1 = complex0.exp();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-2759.59747507), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-1483.13954), (-1483.13954));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.divide(complex0);
      assertEquals((-0.0017841529364302786), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-1484.950480657344), (-1484.950480657344));
      Complex complex1 = new Complex(0.0, (-1484.950480657344));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.divide(complex0);
      assertFalse(complex2.isInfinite());
      assertEquals((-0.5), complex3.getImaginary(), 0.01);
      assertEquals((-1484.950480657344), complex0.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-2296.885806779651), 0.0);
      Complex complex1 = complex0.createComplex(1.7976931348623157E308, 0.0);
      Complex complex2 = complex1.sqrt();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = complex0.createComplex(0.6299605249474366, Double.NaN);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.6299605249474366, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-1483.13954), (-1483.13954));
      Complex complex1 = complex0.createComplex((-1.0), (-1.0));
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1484.950480657344));
      Complex complex1 = complex0.cosh();
      assertEquals((-0.5209400239288912), complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1484.950480657344), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-1484.950480657344), (-1484.950480657344));
      Complex complex1 = complex0.subtract(complex0);
      Complex complex2 = complex1.cos();
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(726.324815340403, 0.041666666666666664);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.conjugate();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1484.950480657344));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.conjugate();
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(1484.9508173688707, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(124.221569699462, 124.221569699462);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.asin();
      assertTrue(complex2.isInfinite());
      assertEquals(4.406642103800313E53, complex1.getImaginary(), 0.01);
      assertEquals(5.701072642892697E52, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-2296.885806779651), 0.0);
      Complex complex1 = complex0.asin();
      assertEquals(8.432456621399085, complex1.getImaginary(), 0.01);
      assertEquals((-1.5707963267948966), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.asin();
      assertEquals(0.9045568943023813, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-445.0), 562.5);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.add(complex1);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(562.5, complex2.getImaginary(), 0.01);
      assertEquals(562.5, complex0.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals((-445.0), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-1447.3420139960472), (-1.7976931348623157E308));
      Complex complex1 = complex0.add(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-1.7976931348623157E308), complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-2894.6840279920943), complex1.getReal(), 0.01);
      assertEquals((-1447.3420139960472), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-1484.3953985621786), (-1484.3953985621786));
      Complex complex1 = complex0.subtract(complex0);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.add(complex2);
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.isInfinite());
      assertTrue(complex3.equals((Object)complex2));
      assertEquals((-1484.3953985621786), complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.acos();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(122.3534385742063, 122.3534385742063);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.acos();
      assertEquals((-1.5707963267948966), complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(2171.7, (-870.61999062));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-1008.4201146), (-1008.4201146));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3554.4));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(9.0, 2.718281828459045);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(353.9922858, 353.9922858);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-0.0013888888689039883), (-0.0013888888689039883));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.add(complex0);
      assertEquals(0.015571308743875464, complex2.getReal(), 0.01);
      assertEquals((-0.04233442796620393), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(2.384185791015625E-7, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt();
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(2.384185791015625E-7, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.85040095144011776E17);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.log();
      assertSame(complex3, complex2);
      assertEquals(2.0, complex0.getReal(), 0.01);
      assertEquals(2.85040095144011776E17, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-445.0), 562.5);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.exp();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(562.5, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals((-445.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-175.1620252725621), (-0.3058015757857271));
      Complex complex1 = complex0.exp();
      assertEquals(8.081052570378602E-77, complex1.getReal(), 0.01);
      assertEquals((-2.5512244348495647E-77), complex1.getImaginary(), 0.01);
      assertEquals((-0.3058015757857271), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(726.324815340403, 0.041666666666666664);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.subtract(complex1);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.041666666666666664, complex0.getImaginary(), 0.01);
      assertEquals(726.324815340403, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-1964.54), 0.0);
      Complex complex1 = complex0.negate();
      assertEquals((-1964.54), complex0.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1964.54, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(complex1);
      assertTrue(complex2.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(3821.9933937, 3821.9933937);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(complex0);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(3821.9933937, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(3821.9933937, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(408.0354, Double.NaN);
      Complex complex1 = complex0.multiply(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(408.0354, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(3549.76, (-1159.456));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(3549.76, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertTrue(complex1.isNaN());
      assertEquals((-1159.456), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-1447.3420139960472), (-1.7976931348623157E308));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex1);
      assertEquals((-1447.3420139960472), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-1.7976931348623157E308), complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = complex0.acos();
      double double0 = complex1.abs();
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      assertEquals(1.8011719796199461, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(2.384185791015625E-7, Double.POSITIVE_INFINITY);
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(2.384185791015625E-7, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1330.003);
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(1330.003, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.08713622391223907);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(0.08713622391223907, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      boolean boolean0 = complex0.isInfinite();
      assertFalse(complex0.isNaN());
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-1081.98248945), (-1081.98248945));
      double double0 = complex0.getImaginary();
      assertEquals((-1081.98248945), double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1081.98248945), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      double double0 = complex0.getReal();
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(3821.9933937, 3821.9933937);
      Complex complex1 = complex0.sin();
      List<Complex> list0 = complex1.nthRoot(1421);
      assertEquals(1, list0.size());
      assertTrue(complex1.isInfinite());
      assertEquals(3821.9933937, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(3821.9933937, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(408.0354, Double.NaN);
      complex0.nthRoot(1);
      assertEquals(408.0354, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-0.0013888888689039883), (-0.0013888888689039883));
      try { 
        complex0.nthRoot((-3963));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,963
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(122.3534385742063, 122.3534385742063);
      List<Complex> list0 = complex0.nthRoot(1451);
      assertEquals(1451, list0.size());
      assertEquals(122.3534385742063, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(408.0354, Double.NaN);
      Complex complex1 = complex0.tan();
      assertEquals(408.0354, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1484.3953985621786));
      Complex complex1 = complex0.sqrt();
      assertEquals(27.2433055865306, complex1.getReal(), 0.01);
      assertEquals((-1484.3953985621786), complex0.getImaginary(), 0.01);
      assertEquals((-27.243305586530596), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(2.384185791015625E-7, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sinh();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(2.384185791015625E-7, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(2.384185791015625E-7, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sin();
      assertEquals(2.384185791015625E-7, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(2.384185791015625E-7, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.cosh();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex1.isInfinite());
      assertEquals(2.384185791015625E-7, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(3549.76, (-1159.456));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.cos();
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(3549.76, complex0.getReal(), 0.01);
      assertEquals((-1159.456), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(408.0354, Double.NaN);
      Complex complex1 = complex0.atan();
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(408.0354, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(408.0354, Double.NaN);
      Complex complex1 = complex0.asin();
      assertEquals(408.0354, complex0.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(408.0354, Double.NaN);
      Complex complex1 = complex0.acos();
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(408.0354, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1484.950480657344));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals((-1484.950480657344), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(408.0354, Double.NaN);
      Complex complex1 = complex0.subtract(complex0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(408.0354, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(2.384185791015625E-7, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.negate();
      assertTrue(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(2.384185791015625E-7, complex0.getReal(), 0.01);
      assertNotSame(complex2, complex1);
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-391.9512799563838));
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-391.9512799563838), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(2.384185791015625E-7, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(2.384185791015625E-7, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(3821.9933937, 3821.9933937);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply((double) 125);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(3821.9933937, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(Double.NaN);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-1484.950480657344), (-1484.950480657344));
      Complex complex1 = complex0.multiply((-2962.41589559216));
      assertEquals(4399040.908066534, complex1.getImaginary(), 0.01);
      assertEquals(4399040.908066534, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1484.950480657344), complex0.getImaginary(), 0.01);
      assertEquals((-1484.950480657344), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(2.384185791015625E-7, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(1312.03);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(2.384185791015625E-7, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex((-1447.3420139960472), (-1.7976931348623157E308));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.pow(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-1447.3420139960472), complex0.getReal(), 0.01);
      assertEquals((-1.7976931348623157E308), complex0.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(2.384185791015625E-7, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(complex0);
      assertTrue(complex0.isInfinite());
      assertEquals(2.384185791015625E-7, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex((-1484.950480657344), (-1484.950480657344));
      complex0.hashCode();
      assertEquals((-1484.950480657344), complex0.getImaginary(), 0.01);
      assertEquals((-1484.950480657344), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(boolean0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex((-1484.3953985621786), (-1484.3953985621786));
      Complex complex1 = new Complex(0.0, (-1484.3953985621786));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.sqrt1z();
      boolean boolean0 = complex3.equals(complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1484.395061724664, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(122.3534385742063, 122.3534385742063);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.sinh();
      complex0.equals(complex3);
      assertFalse(complex1.isInfinite());
      assertEquals((-6.763719577359195E52), complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertFalse(complex3.equals((Object)complex0));
      assertEquals((-1.1518141139827865E52), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex(122.3534385742063, 122.3534385742063);
      Complex complex1 = complex0.sqrt1z();
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(122.3534385742063, complex0.getImaginary(), 0.01);
      assertEquals((-122.3513953303431), complex1.getImaginary(), 0.01);
      assertEquals(122.35548185219126, complex1.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex(122.3534385742063, 122.3534385742063);
      boolean boolean0 = complex0.equals(complex0);
      assertEquals(122.3534385742063, complex0.getImaginary(), 0.01);
      assertEquals(122.3534385742063, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex((-1484.950480657344), (-1484.950480657344));
      boolean boolean0 = complex0.equals("(-1484.950480657344, -1484.950480657344)");
      assertEquals((-1484.950480657344), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(boolean0);
      assertEquals((-1484.950480657344), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex(122.3534385742063, 122.3534385742063);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.divide(complex2);
      assertEquals((-6.763719577359195E52), complex1.getReal(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex(3821.9933937, 3821.9933937);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.divide(complex2);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertSame(complex3, complex2);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex((-1484.950480657344), (-1484.950480657344));
      Complex complex1 = complex0.atan();
      assertEquals((-3.367115393552953E-4), complex1.getImaginary(), 0.01);
      assertEquals((-1.570459615204642), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex((-1484.3953985621786), (-1484.3953985621786));
      Complex complex1 = new Complex(0.0, (-1484.3953985621786));
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.divide(complex0);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-1484.3953985621786), complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex(408.0354, Double.NaN);
      Complex complex1 = complex0.conjugate();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(408.0354, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.atan();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = new Complex((-1484.950480657344), (-1484.950480657344));
      Complex complex1 = complex0.subtract(complex0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.divide(complex0);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex(408.0354, Double.NaN);
      double double0 = complex0.abs();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(408.0354, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex(2.384185791015625E-7, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.hashCode();
      assertEquals(2.384185791015625E-7, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertTrue(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex((-1484.950480657344), (-1484.950480657344));
      double double0 = complex0.getArgument();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-2.356194490192345), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = new Complex(122.3534385742063, 122.3534385742063);
      complex0.getField();
      assertFalse(complex0.isNaN());
      assertEquals(122.3534385742063, complex0.getReal(), 0.01);
      assertEquals(122.3534385742063, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = new Complex((-1484.950480657344), (-1484.950480657344));
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = new Complex((-1484.950480657344), (-1484.950480657344));
      String string0 = complex0.toString();
      assertFalse(complex0.isNaN());
      assertEquals("(-1484.950480657344, -1484.950480657344)", string0);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = new Complex(2.384185791015625E-7, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.isNaN();
      assertTrue(complex0.isInfinite());
      assertEquals(2.384185791015625E-7, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = new Complex(2.384185791015625E-7, Double.POSITIVE_INFINITY);
      Complex complex1 = (Complex)complex0.readResolve();
      assertTrue(complex1.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(2.384185791015625E-7, complex0.getReal(), 0.01);
  }
}
