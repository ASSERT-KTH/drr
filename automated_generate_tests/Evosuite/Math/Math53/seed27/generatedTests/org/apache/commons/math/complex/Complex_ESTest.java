/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 28 15:02:31 GMT 2017
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 902.4043650880542);
      Complex complex1 = complex0.sqrt();
      assertEquals(21.241520250302873, complex1.getReal(), 0.01);
      assertEquals(21.241520250302877, complex1.getImaginary(), 0.01);
      assertEquals(902.4043650880542, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-620.9413806636));
      Complex complex1 = complex0.sinh();
      assertEquals(1.3709555121727013, complex1.getImaginary(), 0.01);
      assertEquals((-0.5393779663932837), complex1.getReal(), 0.01);
      assertEquals((-620.9413806636), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(3818.659724319, 3678.365167);
      Complex complex1 = complex0.conjugate();
      boolean boolean0 = complex1.equals(complex0);
      assertEquals((-3678.365167), complex1.getImaginary(), 0.01);
      assertEquals(3818.659724319, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(boolean0);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(3818.659724319, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(129.11209162590595, 129.11209162590595);
      Complex complex1 = complex0.cosh();
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.785047919898909E55), complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertEquals(129.11209162590595, complex0.getImaginary(), 0.01);
      assertEquals((-5.634712309635586E55), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-178.392), (-1447.1989736868861));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tanh();
      assertEquals((-0.9171390759302299), complex2.getReal(), 0.01);
      assertEquals((-1.0812498801812208E-4), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-16.984170275204), (-43.73001498));
      Complex complex1 = complex0.tan();
      assertEquals((-16.984170275204), complex0.getReal(), 0.01);
      assertEquals((-43.73001498), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals((-1.154635909754179E-38), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.subtract(complex2);
      assertEquals((-1740.4855508745359), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(complex1);
      assertEquals((-1759.471502526832), complex2.getReal(), 0.01);
      assertEquals((-1694.649408901003), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sqrt1z();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-8.0E298));
      Complex complex1 = complex0.sqrt1z();
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-8.0E298), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-2053.35382227), 0.0);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(2053.3535787659216, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(1.7976931348623157E308, 1.7976931348623157E308);
      Complex complex1 = complex0.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(1.7976931348623157E308, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-1355.77864293), (-1355.77864293));
      Complex complex1 = complex0.sin();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-1355.77864293), complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1355.77864293), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-1355.77864293), (-1355.77864293));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals((-1355.77864293), complex0.getImaginary(), 0.01);
      assertEquals((-1355.7784585341294), complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-2089.556854), 2215.375788061005);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.negate();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.negate();
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-2089.556854), 2215.375788061005);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.negate();
      assertFalse(complex2.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(1.1921056801463227E-8, 1.1921056801463227E-8);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals((-2.0400489922174487E-7), complex2.getImaginary(), 0.01);
      assertEquals((-2.2273045145699665E-7), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(1.1921056801463227E-8, 1.1921056801463227E-8);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.multiply(complex1);
      assertEquals(319.73536866418306, complex2.getReal(), 0.01);
      assertEquals((-28.114718876157976), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-2089.556854), 2215.375788061005);
      Complex complex1 = complex0.multiply((double) 225);
      assertFalse(complex0.isInfinite());
      assertEquals(498459.55231372616, complex1.getImaginary(), 0.01);
      assertEquals((-2089.556854), complex0.getReal(), 0.01);
      assertEquals(2215.375788061005, complex0.getImaginary(), 0.01);
      assertEquals((-470150.29215), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3572.139));
      Complex complex1 = complex0.multiply(9.140260083262505E-9);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-3572.139), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-3.265027951356524E-5), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.log();
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.cosh();
      boolean boolean0 = complex2.isNaN();
      assertTrue(boolean0);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-1740.4855508745359), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(2398.9055751026, 1263.0);
      Complex complex1 = complex0.exp();
      boolean boolean0 = complex1.isInfinite();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(2398.9055751026, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertEquals(1263.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.7249995199969751);
      double double0 = complex0.getReal();
      assertTrue(complex0.isInfinite());
      assertEquals(0.7249995199969751, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(1.7976931348623157E308, (-474.9));
      Complex complex1 = complex0.cosh();
      double double0 = complex1.getReal();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-474.9), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(2118.52201, 2118.52201);
      double double0 = complex0.getImaginary();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(2118.52201, double0, 0.01);
      assertEquals(2118.52201, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(2048.15974866, (-0.16624882440418567));
      double double0 = complex0.getImaginary();
      assertEquals((-0.16624882440418567), double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2048.15974866, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-1740.89694), (-1740.89694));
      Complex complex1 = complex0.tanh();
      double double0 = complex1.getArgument();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1740.89694), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals((-1740.89694), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(1.7976931348623157E308, 1.7976931348623157E308);
      Complex complex1 = complex0.exp();
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(1.7976931348623157E308, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-2426.0543), 1.1430250008909141E-8);
      Complex complex1 = complex0.exp();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.1430250008909141E-8, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-2089.556854), 2215.375788061005);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.divide(complex0);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(2.356194490192345, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-1740.89694), (-1740.89694));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.divide(complex0);
      assertEquals(18.98819532290813, complex1.getReal(), 0.01);
      assertEquals(2.872082709272842E-4, complex3.getImaginary(), 0.01);
      assertEquals(3.506315772925571E-17, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-2089.556854), 2215.375788061005);
      Complex complex1 = complex0.createComplex((-2089.556854), 501.364594);
      Complex complex2 = complex0.divide(complex1);
      assertFalse(complex2.isInfinite());
      assertEquals(501.364594, complex1.getImaginary(), 0.01);
      assertEquals(1.1861014086883799, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3022.81967));
      Complex complex1 = complex0.createComplex(2539.207538649938, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(2539.207538649938, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3022.81967));
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      assertEquals((-3022.81967), complex0.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-889.13299), (-2764.045759992334));
      Complex complex1 = complex0.createComplex((-2764.045759992334), (-1.8820207537977545));
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-2764.045759992334), complex1.getReal(), 0.01);
      assertEquals((-1.8820207537977545), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-4994.943891), 0.0);
      Complex complex1 = complex0.cos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.9822998689028671, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-1740.89694), (-1740.89694));
      Complex complex1 = complex0.conjugate();
      assertEquals((-1740.89694), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1740.89694), complex0.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-8.0E298));
      Complex complex1 = complex0.asin();
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-178.392), (-1447.1989736868861));
      Complex complex1 = complex0.asin();
      assertEquals((-0.12264834963771708), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 902.4043650880542);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.add(complex0);
      assertTrue(complex2.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(902.4043650880542, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-738.79215), (-7.44321345601866E-11));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.add(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(complex0);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-738.79215), (-7.44321345601866E-11));
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = complex0.add(complex1);
      assertEquals(1.0990532130705895E-7, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(545075.0487516224, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(129.11209162590595, 129.11209162590595);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.acos();
      assertFalse(complex1.isInfinite());
      assertEquals((-1.785047919898909E55), complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals((-5.634712309635586E55), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(2404.202594090651, 0.0);
      Complex complex1 = complex0.acos();
      assertEquals(8.478120702241883, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-2053.35382227), 0.0);
      Complex complex1 = complex0.acos();
      assertEquals(3.141592653589793, complex1.getReal(), 0.01);
      assertEquals((-8.32037686745363), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(1159.997479, (-1840.455443061));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-121.5934));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(3818.659724319, 3678.365167);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.sqrt();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(3818.659724319, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(3678.365167, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3572.139));
      Complex complex1 = complex0.sqrt();
      assertEquals(42.26191547954257, complex1.getReal(), 0.01);
      assertEquals((-42.26191547954257), complex1.getImaginary(), 0.01);
      assertEquals((-3572.139), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1740.4855508745359), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1740.4855508745359), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(1.7976931348623157E308, (-474.9));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.log();
      assertEquals((-474.9), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(1.7976931348623157E308, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertNotSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-178.392), (-1447.1989736868861));
      Complex complex1 = complex0.log();
      assertEquals(7.284925469947124, complex1.getReal(), 0.01);
      assertEquals((-1.693444704986271), complex1.getImaginary(), 0.01);
      assertEquals((-1447.1989736868861), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.exp();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals((-1740.4855508745359), complex0.getReal(), 0.01);
      assertEquals((-1740.4855508745359), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      Complex complex1 = complex0.subtract(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(2048.15974866, (-0.16624882440418567));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.subtract(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals((-0.16624882440418567), complex0.getImaginary(), 0.01);
      assertEquals(2048.15974866, complex0.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-738.79215), (-7.44321345601866E-11));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.multiply(complex0);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-738.79215), complex0.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals((-7.44321345601866E-11), complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(1807.67874264, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(1807.67874264, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-2089.556854), 2215.375788061005);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply(complex0);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-2089.556854), complex0.getReal(), 0.01);
      assertEquals(2215.375788061005, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(1.01, 1528.501);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.multiply(complex2);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertSame(complex3, complex2);
      assertTrue(complex1.isInfinite());
      assertFalse(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3022.81967));
      Complex complex1 = complex0.divide(complex0);
      assertFalse(complex1.isInfinite());
      assertEquals((-3022.81967), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-2249.703263), 3.876309703645687E-17);
      double double0 = complex0.abs();
      assertEquals(3.876309703645687E-17, complex0.getImaginary(), 0.01);
      assertEquals(2249.703263, double0, 0.01);
      assertEquals((-2249.703263), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.3143427442671269);
      double double0 = complex0.abs();
      assertEquals(0.3143427442671269, double0, 0.01);
      assertEquals(0.3143427442671269, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-738.79215), (-7.44321345601866E-11));
      Complex complex1 = complex0.sinh();
      double double0 = complex1.abs();
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals((-738.79215), complex0.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-7.44321345601866E-11), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      double double0 = complex0.getArgument();
      assertEquals((-2.356194490192345), double0, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      boolean boolean0 = complex0.isInfinite();
      assertEquals((-1740.4855508745359), complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals((-1740.4855508745359), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getImaginary();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-1346.2873393), 1.5707963267948966);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getReal();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(1.01, 1528.501);
      Complex complex1 = complex0.cos();
      List<Complex> list0 = complex1.nthRoot(46);
      assertEquals(1528.501, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(1, list0.size());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      Complex complex1 = complex0.tanh();
      List<Complex> list0 = complex1.nthRoot(17);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1, list0.size());
      assertEquals((-1740.4855508745359), complex0.getImaginary(), 0.01);
      assertEquals((-1740.4855508745359), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-889.13299), (-2764.045759992334));
      try { 
        complex0.nthRoot((-567));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -567
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 902.4043650880542);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tanh();
      assertEquals(902.4043650880542, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex2.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(1.7976931348623157E308, 1.7976931348623157E308);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tan();
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(1.7976931348623157E308, complex0.getImaginary(), 0.01);
      assertEquals(1.7976931348623157E308, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-738.79215), (-7.44321345601866E-11));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.sinh();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
      assertEquals((-738.79215), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-2500.49735), 0.0);
      Complex complex1 = complex0.createComplex(3.141592653589793, Double.NaN);
      Complex complex2 = complex1.sin();
      assertFalse(complex0.isNaN());
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(129.11209162590595, 129.11209162590595);
      Complex complex1 = complex0.sin();
      assertFalse(complex1.isInfinite());
      assertEquals((-5.634712309635586E55), complex1.getImaginary(), 0.01);
      assertEquals(129.11209162590595, complex0.getReal(), 0.01);
      assertEquals((-1.785047919898909E55), complex1.getReal(), 0.01);
      assertEquals(129.11209162590595, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.cosh();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-1740.4855508745359), complex0.getReal(), 0.01);
      assertEquals((-1740.4855508745359), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.asin();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-1740.4855508745359), complex0.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals((-1740.4855508745359), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(2061.537452544, 2061.537452544);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.acos();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(2061.537452544, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(2061.537452544, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract(complex0);
      assertEquals((-1740.4855508745359), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1740.4855508745359), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(2118.52201, 2118.52201);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.negate();
      assertEquals(2118.52201, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertSame(complex3, complex2);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(2118.52201, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(129.11209162590595, 129.11209162590595);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(129.11209162590595, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(129.11209162590595, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(1807.67874264, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(1807.67874264);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(1807.67874264, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(1.7976931348623157E308, 1.7976931348623157E308);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply(784.320099593156);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(1.7976931348623157E308, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex((-2249.703263), 3.876309703645687E-17);
      Complex complex1 = complex0.multiply(Double.NaN);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(3.876309703645687E-17, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals((-2249.703263), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex((-1740.89694), (-1740.89694));
      Complex complex1 = complex0.multiply((-2.356194490192345));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.multiply(complex2);
      assertTrue(complex2.isInfinite());
      assertEquals(4101.891778020713, complex1.getReal(), 0.01);
      assertTrue(complex3.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(4101.891778020713, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(1807.67874264, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.acos();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex((-2089.556854), 2215.375788061005);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.pow(complex1);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-2089.556854), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(1.7976931348623157E308, 1.7976931348623157E308);
      Complex complex1 = complex0.acos();
      complex1.hashCode();
      assertFalse(complex0.isInfinite());
      assertEquals(1.7976931348623157E308, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex((-1346.2873393), 1.5707963267948966);
      complex0.hashCode();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getImaginary(), 0.01);
      assertEquals((-1346.2873393), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex(129.11209162590595, 129.11209162590595);
      Complex complex1 = complex0.cosh();
      boolean boolean0 = complex1.equals(complex0);
      assertEquals((-5.634712309635586E55), complex1.getReal(), 0.01);
      assertFalse(boolean0);
      assertEquals(129.11209162590595, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.785047919898909E55), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex(1807.67874264, 1807.67874264);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.multiply(0.0);
      boolean boolean0 = complex1.equals(complex3);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertTrue(complex3.equals((Object)complex2));
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex((-178.392), (-1447.1989736868861));
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(boolean0);
      assertEquals((-1447.1989736868861), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-178.392), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.equals(complex0);
      assertFalse(complex0.isInfinite());
      assertTrue(boolean0);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex((-2249.703263), 3.876309703645687E-17);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(3.876309703645687E-17, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-2249.703263), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex(1807.67874264, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.cos();
      assertEquals(1807.67874264, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1740.4855508745359), complex0.getReal(), 0.01);
      assertEquals((-1740.4855508745359), complex0.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.divide(complex0);
      assertEquals((-1740.4855508745359), complex0.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1740.4855508745359), complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = new Complex(1333.28943, 1333.28943);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.conjugate();
      assertTrue(complex3.isNaN());
      assertEquals(1333.28943, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.3143427442671269);
      Complex complex1 = complex0.atan();
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(0.3253570648792463, complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex((-2249.703263), 3.876309703645687E-17);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt();
      double double0 = complex2.abs();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-2249.703263), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = new Complex((-2089.556854), 2215.375788061005);
      List<Complex> list0 = complex0.nthRoot(139);
      assertEquals(139, list0.size());
      assertEquals(2215.375788061005, complex0.getImaginary(), 0.01);
      assertEquals((-2089.556854), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.3143427442671269);
      complex0.getField();
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.3143427442671269, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = new Complex((-2089.556854), 2215.375788061005);
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = new Complex((-2089.556854), 2215.375788061005);
      String string0 = complex0.toString();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals("(-2089.556854, 2215.375788061005)", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = new Complex((-1740.4855508745359), (-1740.4855508745359));
      boolean boolean0 = complex0.isNaN();
      assertFalse(complex0.isInfinite());
      assertEquals((-1740.4855508745359), complex0.getReal(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1740.4855508745359), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.3143427442671269);
      Complex complex1 = (Complex)complex0.readResolve();
      assertFalse(complex1.isNaN());
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertEquals(0.3143427442671269, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }
}
