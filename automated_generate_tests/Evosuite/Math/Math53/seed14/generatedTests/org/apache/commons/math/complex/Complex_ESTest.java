/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 12:49:49 GMT 2017
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(1378.8694244415383, 1378.8694244415383);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(1.176342548272881E-8, 4483.8964);
      Complex complex1 = complex0.sinh();
      assertEquals(4483.8964, complex0.getImaginary(), 0.01);
      assertEquals((-0.7470965472593506), complex1.getImaginary(), 0.01);
      assertEquals(1.176342548272881E-8, complex0.getReal(), 0.01);
      assertEquals((-7.81933174070587E-9), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-415.7));
      Complex complex1 = complex0.tanh();
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals((-1.5913922768526518), complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals((-415.7), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(16.505496289797946, 16.505496289797946);
      Complex complex1 = complex0.acos();
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(16.505496289797946, complex0.getImaginary(), 0.01);
      assertEquals((-3.843414520539313), complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      boolean boolean0 = complex0.equals(complex0);
      assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624882440418567), 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-0.16624882440418567));
      Complex complex2 = complex1.tanh();
      assertFalse(complex1.isInfinite());
      assertEquals((-0.16624882440418567), complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals((-0.1677975811131024), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624882440418567), 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-0.16624882440418567));
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.tanh();
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-0.16924287644892863), complex3.getReal(), 0.01);
      assertEquals((-0.16311937692094433), complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(16.505496289797946, 16.505496289797946);
      Complex complex1 = complex0.multiply(16.505496289797946);
      Complex complex2 = complex1.tan();
      assertEquals(272.43140777253376, complex1.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-4.5820477443513123E-237), complex2.getReal(), 0.01);
      assertEquals(272.43140777253376, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-2353.58512898), (-2353.58512898));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-3.141592653589793), (-151.860599));
      Complex complex1 = complex0.tan();
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals((-151.860599), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(6.104224738447093E-148, complex1.getReal(), 0.01);
      assertEquals((-3.141592653589793), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-2002.146749), (-2002.146749));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.subtract(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.subtract(complex1);
      assertEquals((-1479.3435846704072), complex1.getImaginary(), 0.01);
      assertEquals((-2958.6876763223618), complex2.getReal(), 0.01);
      assertEquals((-1.689938428626192E-4), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.subtract(complex1);
      assertFalse(complex2.isInfinite());
      assertEquals((-2958.6875073285), complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.sqrt();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(117.428065447474, (-4340.33));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sinh();
      assertEquals(1.0858177101129363E50, complex1.getReal(), 0.01);
      assertEquals(4.861377954416558E50, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2246.022));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.pow(complex0);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(16.505496289797946, 16.505496289797946);
      Complex complex1 = complex0.multiply(16.505496289797946);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.pow(complex2);
      assertEquals((-18920.093790987376), complex3.getImaginary(), 0.01);
      assertEquals(6063.624922281846, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(1059.46, 1059.46);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.negate();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2246.022));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.negate();
      assertEquals((-8.410063161208774), complex2.getImaginary(), 0.01);
      assertEquals((-1.5707963267948966), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-2002.146749), (-2002.146749));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(8017183.209062538, complex2.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-1463.942583486), (-1463.942583486));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.multiply(complex0);
      assertEquals((-0.4999999995343387), complex2.getImaginary(), 0.01);
      assertEquals((-4286255.775487358), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-0.16666666666666666), (-0.16666666666666666));
      Complex complex1 = complex0.multiply(0.9825467094779015);
      assertEquals((-0.16666666666666666), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-0.16666666666666666), complex0.getReal(), 0.01);
      assertEquals((-0.16375778491298357), complex1.getImaginary(), 0.01);
      assertEquals((-0.16375778491298357), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(0.7685319114506848, 0.7685319114506848);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.log();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.7685319114506848, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624882440418567), 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-0.16624882440418567));
      Complex complex2 = complex1.log();
      assertEquals((-1.7942696707241934), complex2.getReal(), 0.01);
      assertEquals((-0.16624882440418567), complex1.getImaginary(), 0.01);
      assertEquals((-1.5707963267948966), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(117.428065447474, (-4340.33));
      Complex complex1 = complex0.tan();
      boolean boolean0 = complex1.isNaN();
      assertEquals(117.428065447474, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(boolean0);
      assertEquals((-4340.33), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(1059.46, 1059.46);
      Complex complex1 = complex0.cosh();
      boolean boolean0 = complex1.isInfinite();
      assertFalse(complex0.isInfinite());
      assertEquals(1059.46, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624882440418567), 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-0.16624882440418567));
      double double0 = complex1.getReal();
      assertEquals((-0.16624882440418567), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(356.764836357297, 356.764836357297);
      Complex complex1 = complex0.sin();
      double double0 = complex1.getReal();
      assertEquals(356.764836357297, complex0.getReal(), 0.01);
      assertEquals(8.417807347950513E153, complex1.getImaginary(), 0.01);
      assertEquals((-4.2829148964548916E154), double0, 0.01);
      assertEquals(356.764836357297, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getImaginary();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(117.428065447474, (-4340.33));
      Complex complex1 = complex0.cosh();
      double double0 = complex1.getImaginary();
      assertEquals((-4340.33), complex0.getImaginary(), 0.01);
      assertEquals(1.0858177101129363E50, complex1.getReal(), 0.01);
      assertEquals(4.861377954416558E50, double0, 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2246.022));
      double double0 = complex0.getArgument();
      assertEquals((-1.5707963267948966), double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(393.1389, 393.1389);
      Complex complex1 = complex0.exp();
      assertEquals((-4.950184916981081E170), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(393.1389, complex0.getImaginary(), 0.01);
      assertEquals((-2.329351969759455E170), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(1144.7, 1144.7);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.divide(complex1);
      assertEquals((-126.66700123126184), complex2.getReal(), 0.01);
      assertEquals(153.93328536827542, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-1986.65985), (-1986.65985));
      Complex complex1 = complex0.createComplex((-1986.65985), (-1986.65985));
      assertEquals((-1986.65985), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-1986.65985), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-711.42418));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cos();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(711.4248828152361, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(1059.46, 1059.46);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.conjugate();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-0.1428571423679182));
      Complex complex1 = complex0.atan();
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals((-0.14384103572647358), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-0.16666666666666666), (-0.16666666666666666));
      Complex complex1 = complex0.atan();
      assertEquals((-0.16348161685166604), complex1.getImaginary(), 0.01);
      assertEquals((-0.1696463072270223), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(117.428065447474, (-4340.33));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.atan();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0858177101129363E50, complex1.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertEquals(4.861377954416558E50, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-2353.58512898), (-2353.58512898));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.asin();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-0.16666666666666666), (-0.16666666666666666));
      Complex complex1 = complex0.asin();
      assertEquals((-0.16508619852699113), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-244.16537192145), 1501.924058);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.add(complex1);
      assertEquals((-244.16537192145), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-244.16537192145), complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1501.924058, complex0.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.add(complex1);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.acos();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-3.141592653589793), (-151.860599));
      Complex complex1 = complex0.createComplex(0.0, 151.89309113004413);
      Complex complex2 = complex1.acos();
      assertEquals((-5.716334941810854), complex2.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-595.5985), (-595.5985));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-3059.4), 2.4384203044354907E-8);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-2800.002373177), (-2800.002373177));
      complex0.nthRoot(5104);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-1158.5577032665879), (-1158.5577032665879));
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(427.9, 427.9);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2246.022));
      Complex complex1 = complex0.sqrt();
      assertEquals((-33.511356284101666), complex1.getImaginary(), 0.01);
      assertEquals((-2246.022), complex0.getImaginary(), 0.01);
      assertEquals(33.51135628410166, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
      assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertNotSame(complex3, complex2);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-1124.64701344312), (-1124.64701344312));
      Complex complex1 = complex0.sqrt();
      assertEquals((-1124.64701344312), complex0.getImaginary(), 0.01);
      assertEquals((-36.84520370914495), complex1.getImaginary(), 0.01);
      assertEquals(15.261783084727302, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.log();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertSame(complex3, complex2);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
      Complex complex1 = complex0.subtract(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
      Complex complex1 = complex0.createComplex(466.79473470918, Double.NaN);
      Complex complex2 = complex0.subtract(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(466.79473470918, complex1.getReal(), 0.01);
      assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-1463.942583486), (-1463.942583486));
      Complex complex1 = complex0.multiply(complex0);
      assertEquals((-1463.942583486), complex0.getImaginary(), 0.01);
      assertEquals(4286255.775487329, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
      Complex complex1 = complex0.createComplex(466.79473470918, Double.NaN);
      Complex complex2 = complex1.multiply(complex0);
      assertEquals(466.79473470918, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(1059.46, 1059.46);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(1059.46);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex1.divide(complex3);
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex2.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(1122455.4916, complex2.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(1059.46, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624882440418567), 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-0.16624882440418567));
      Complex complex2 = complex0.divide(complex1);
      assertFalse(complex2.isInfinite());
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertEquals((-0.16624882440418567), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      double double0 = complex1.abs();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(2268.2777592243538, 2268.2777592243538);
      Complex complex1 = complex0.sinh();
      double double0 = complex1.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(2268.2777592243538, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(2268.2777592243538, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-244.16537192145), 1501.924058);
      double double0 = complex0.abs();
      assertEquals(1501.924058, complex0.getImaginary(), 0.01);
      assertEquals((-244.16537192145), complex0.getReal(), 0.01);
      assertEquals(1521.6414179578342, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-244.16537192145), Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals((-244.16537192145), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(1930.016, Double.NaN);
      assertFalse(complex0.isInfinite());
      assertEquals(1930.016, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-0.16624882440418567), 0.0);
      double double0 = complex0.getArgument();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-2002.146749), (-2002.146749));
      boolean boolean0 = complex0.isInfinite();
      assertEquals((-2002.146749), complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals((-2002.146749), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(117.428065447474, (-4340.33));
      double double0 = complex0.getImaginary();
      assertEquals(117.428065447474, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-4340.33), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(117.428065447474, (-4340.33));
      Complex complex1 = complex0.add(complex0);
      assertEquals(234.856130894948, complex1.getReal(), 0.01);
      assertEquals((-8680.66), complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-4340.33), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(117.428065447474, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(3362.225, (-73.76));
      double double0 = complex0.getReal();
      assertFalse(complex0.isInfinite());
      assertEquals(3362.225, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-73.76), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex0.nthRoot(1312145731);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
      Complex complex1 = complex0.createComplex(466.79473470918, Double.NaN);
      Complex complex2 = complex1.cos();
      List<Complex> list0 = complex2.nthRoot(5);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(466.79473470918, complex1.getReal(), 0.01);
      assertEquals(1, list0.size());
      assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.7685319114506848, 0.7685319114506848);
      try { 
        complex0.nthRoot((-2912));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,912
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.tanh();
      assertTrue(complex2.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex2, complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(1059.46, 1059.46);
      Complex complex1 = complex0.tanh();
      assertEquals(1059.46, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1059.46, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tan();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sqrt1z();
      assertEquals((-1479.3435846704072), complex1.getImaginary(), 0.01);
      assertEquals(1479.34375366425, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.7685319114506848, 0.7685319114506848);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.sqrt1z();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.sinh();
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotSame(complex3, complex2);
      assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
      assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
      Complex complex1 = complex0.createComplex(466.79473470918, Double.NaN);
      Complex complex2 = complex1.sin();
      assertFalse(complex0.isInfinite());
      assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(466.79473470918, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.exp();
      assertNotSame(complex3, complex2);
      assertTrue(complex1.isInfinite());
      assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
      assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
      Complex complex1 = complex0.createComplex(466.79473470918, Double.NaN);
      Complex complex2 = complex1.cosh();
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(466.79473470918, complex1.getReal(), 0.01);
      assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
      Complex complex1 = complex0.createComplex(466.79473470918, Double.NaN);
      Complex complex2 = complex1.atan();
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(466.79473470918, complex1.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.asin();
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.acos();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex3.equals((Object)complex2));
      assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
      assertNotSame(complex3, complex2);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertNotSame(complex3, complex2);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.subtract(complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
      assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
      assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.negate();
      assertNotSame(complex3, complex2);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(1.5707963267948966, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply((-0.040448696321584876));
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(1059.46, 1059.46);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply(1025.2519);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(1059.46, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
      Complex complex1 = complex0.multiply(Double.NaN);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
      assertEquals((-1479.34375366425), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.multiply(6.283185307179586);
      assertTrue(complex1.isInfinite());
      assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex3.isNaN());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.createComplex(1.5707963267948966, Double.POSITIVE_INFINITY);
      complex1.pow(complex2);
      assertTrue(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex((-1463.942583486), (-1463.942583486));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.multiply(complex2);
      assertEquals((-1463.9424127142854), complex1.getImaginary(), 0.01);
      assertEquals((-1463.942583486), complex0.getReal(), 0.01);
      assertTrue(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(1.5707963267948966, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(1059.46, 1059.46);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.multiply(complex2);
      assertEquals(1059.46, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      complex2.hashCode();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
      assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      complex0.hashCode();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
      assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2246.022));
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(boolean0);
      assertEquals((-2246.022), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex(3362.225, (-73.76));
      boolean boolean0 = complex0.equals("(3362.225, -73.76)");
      assertEquals((-73.76), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(boolean0);
      assertEquals(3362.225, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex(2268.2777592243538, 2268.2777592243538);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.divide(complex1);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(2268.2777592243538, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(2268.2777592243538, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.divide(complex1);
      assertSame(complex2, complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex((-1479.34375366425), (-1479.34375366425));
      Complex complex1 = complex0.createComplex(466.79473470918, Double.NaN);
      Complex complex2 = complex1.divide(complex0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals((-1479.34375366425), complex0.getImaginary(), 0.01);
      assertEquals(466.79473470918, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.conjugate();
      assertSame(complex3, complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex(16.505496289797946, 16.505496289797946);
      Complex complex1 = complex0.conjugate();
      assertEquals(16.505496289797946, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(16.505496289797946, complex0.getImaginary(), 0.01);
      assertEquals(16.505496289797946, complex1.getReal(), 0.01);
      assertEquals((-16.505496289797946), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex(16.505496289797946, 16.505496289797946);
      Complex complex1 = complex0.multiply(16.505496289797946);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.asin();
      assertFalse(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals((-6.529563616124844E117), complex2.getReal(), 0.01);
      assertEquals(8.014636705007629E117, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.acos();
      double double0 = complex2.abs();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.acos();
      boolean boolean0 = complex3.equals(complex2);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
      assertNotSame(complex3, complex2);
      assertTrue(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2246.022));
      List<Complex> list0 = complex0.nthRoot(6);
      assertEquals((-2246.022), complex0.getImaginary(), 0.01);
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex((-3241.3970414274795), (-3241.3970414274795));
      complex0.getField();
      assertEquals((-3241.3970414274795), complex0.getImaginary(), 0.01);
      assertEquals((-3241.3970414274795), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2246.022));
      Complex complex1 = complex0.pow(complex0);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = new Complex(16.505496289797946, 16.505496289797946);
      String string0 = complex0.toString();
      assertEquals("(16.505496289797946, 16.505496289797946)", string0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2246.022));
      Complex complex1 = complex0.acos();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2246.022));
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2246.022), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2246.022));
      Complex complex1 = (Complex)complex0.readResolve();
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(boolean0);
      assertEquals((-2246.022), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }
}
