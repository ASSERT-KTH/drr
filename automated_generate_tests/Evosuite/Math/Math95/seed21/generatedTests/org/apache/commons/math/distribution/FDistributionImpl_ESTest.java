/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 21 18:05:17 GMT 2017
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FDistributionImpl_ESTest extends FDistributionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = null;
      try {
        fDistributionImpl0 = new FDistributionImpl(1142.0002577705447, (-731.0027689278306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(0.54916, 0.54916);
      // Undeclared exception!
      try { 
        fDistributionImpl0.setNumeratorDegreesOfFreedom(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(Double.NaN, Double.NaN);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(730.3305, 730.3305);
      double double0 = fDistributionImpl0.getInitialDomain(730.3305);
      assertEquals(730.3305, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0027460061057445, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(4300.224772043195, 4300.224772043195);
      double double0 = fDistributionImpl0.getDomainUpperBound(4300.224772043195);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(4300.224772043195, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(4300.224772043195, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(14.136097974741746, 1175.0);
      fDistributionImpl0.setDenominatorDegreesOfFreedom(1.0E-14);
      fDistributionImpl0.setNumeratorDegreesOfFreedom(911.0);
      double double0 = fDistributionImpl0.cumulativeProbability(3.6899182659531625E-6);
      assertEquals(911.0, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals((-5.706546346573305E-14), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(4.7421875, 4.7421875);
      // Undeclared exception!
      try { 
        fDistributionImpl0.inverseCumulativeProbability(4.7421875);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // p must be between 0.0 and 1.0, inclusive.
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = null;
      try {
        fDistributionImpl0 = new FDistributionImpl((-459.48129173), (-459.48129173));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(14.136097974741746, 1175.0);
      fDistributionImpl0.setDenominatorDegreesOfFreedom(0.5);
      double double0 = fDistributionImpl0.getInitialDomain(2788.0);
      assertEquals(0.5, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals((-0.3333333333333333), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(14.136097974741746, 1175.0);
      double double0 = fDistributionImpl0.cumulativeProbability((-5.706546346573305E-14));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1175.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(14.136097974741746, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(14.136097974741746, 1175.0);
      double double0 = fDistributionImpl0.getDenominatorDegreesOfFreedom();
      assertEquals(1175.0, double0, 0.01);
      assertEquals(14.136097974741746, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(14.136097974741746, 1175.0);
      double double0 = fDistributionImpl0.getNumeratorDegreesOfFreedom();
      assertEquals(14.136097974741746, double0, 0.01);
      assertEquals(1175.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(2.0, 2.0);
      // Undeclared exception!
      try { 
        fDistributionImpl0.setDenominatorDegreesOfFreedom(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(0.5, 1.0E-15);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(1.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0.5, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0E-15, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(14.136097974741746, 1175.0);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1175.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(14.136097974741746, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.7976931348623157E308, 1.7976931348623157E308);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(0.5);
      assertEquals(1.7976931348623157E308, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.7976931348623157E308, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(2.002200220022002, 2.002200220022002);
      // Undeclared exception!
      fDistributionImpl0.inverseCumulativeProbability(4.652362892704858E-5);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(14.136097974741746, 1175.0);
      double double0 = fDistributionImpl0.getDomainLowerBound(4083.598922844);
      assertEquals(14.136097974741746, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1175.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(14.136097974741746, 1175.0);
      double double0 = fDistributionImpl0.cumulativeProbability(14.136097974741746);
      assertEquals(14.136097974741746, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }
}
