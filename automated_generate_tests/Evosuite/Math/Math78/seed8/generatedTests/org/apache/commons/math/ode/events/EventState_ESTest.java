/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 19:30:06 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(2421.6738286588, 2421.6738286588, 2421.6738286588);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 2421.6738286588, 2421.6738286588, 3);
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted(2421.6738286588, doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(3, eventState0.getMaxIterationCount());
      assertEquals(2421.6738286588, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1254.077716584815), (-1254.077716584815), (-1254.077716584815));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1254.077716584815), (-1254.077716584815), 1091);
      double[] doubleArray0 = new double[8];
      eventState0.reinitializeBegin((-1254.077716584815), doubleArray0);
      assertEquals(1091, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-1254.077716584815), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 1.23, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(0, int0);
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1.23, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1254.077716584815), (-1254.077716584815), (-1254.077716584815));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1254.077716584815), (-1254.077716584815), 1091);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(1091, int0);
      assertEquals((-1254.077716584815), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(979.9286, 1343.9944689813296, 2990.325421047);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1343.9944689813296, 979.9286, (-2129));
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(-2129, eventState0.getMaxIterationCount());
      assertEquals(1343.9944689813296, double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(979.9286, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1254.077716584815), (-1254.077716584815), (-1254.077716584815));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1254.077716584815), (-1254.077716584815), 1091);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1091, eventState0.getMaxIterationCount());
      assertEquals((-1254.077716584815), double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-33.71732938231657), (-33.71732938231657), (-33.71732938231657));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-33.71732938231657), (-33.71732938231657), (-1604));
      eventState0.getEventHandler();
      assertEquals((-33.71732938231657), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-1604, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2503.16127), (-2503.16127), (-2503.16127));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2503.16127), 0.0, 12);
      double double0 = eventState0.getConvergence();
      assertEquals((-2503.16127), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(12, eventState0.getMaxIterationCount());
      assertEquals(0.0, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-144.43), (-144.43), (-1206));
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted(0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 0.0, (-413));
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin((-413), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-2035.4440703719424), 2.220446049250313E-16, 3360);
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1254.077716584815), (-1254.077716584815), (-1254.077716584815));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1254.077716584815), (-1254.077716584815), 1091);
      double[] doubleArray0 = new double[8];
      boolean boolean0 = eventState0.reset(1091, doubleArray0);
      assertEquals((-1254.077716584815), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertFalse(boolean0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1091, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1254.077716584815), (-1254.077716584815), (-1254.077716584815));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1254.077716584815), (-1254.077716584815), 1091);
      boolean boolean0 = eventState0.stop();
      assertFalse(boolean0);
      assertEquals(1091, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-1254.077716584815), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(69.96, 69.96, 69.96);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 69.96, 69.96, (-1));
      double[] doubleArray0 = new double[6];
      eventState0.stepAccepted(0.0, doubleArray0);
      assertEquals(-1, eventState0.getMaxIterationCount());
      assertEquals(69.96, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1437.1567), (-1437.1567), (-1437.1567));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1437.1567), (-1437.1567), (-1));
      double[] doubleArray0 = new double[6];
      eventState0.stepAccepted(0.0, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-1, eventState0.getMaxIterationCount());
      assertEquals((-1437.1567), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1437.1567), (-1437.1567), (-1437.1567));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1437.1567), (-1437.1567), (-1));
      double[] doubleArray0 = new double[6];
      eventState0.reinitializeBegin((-1), doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-1, eventState0.getMaxIterationCount());
      assertEquals((-1437.1567), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(69.96, 69.96, 69.96);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 69.96, 69.96, (-1));
      double[] doubleArray0 = new double[6];
      eventState0.reinitializeBegin((-1), doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-1, eventState0.getMaxIterationCount());
      assertEquals(69.96, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-2035.4440703719424), 2.220446049250313E-16, 3360);
      double double0 = eventState0.getConvergence();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(3360, eventState0.getMaxIterationCount());
      assertEquals(2.220446049250313E-16, double0, 0.01);
      assertEquals((-2035.4440703719424), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 0.0, 800);
      eventState0.getMaxCheckInterval();
      assertEquals(800, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-33.71732938231657), (-33.71732938231657), (-33.71732938231657));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-33.71732938231657), (-33.71732938231657), (-1604));
      double double0 = eventState0.getEventTime();
      assertEquals((-33.71732938231657), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(-1604, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1.0), 1.0, (-1.0));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.0, (-1.0), (-1490));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(1.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals((-1490), int0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-2035.4440703719424), 2.220446049250313E-16, 3360);
      eventState0.getEventHandler();
      assertEquals(3360, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2.220446049250313E-16, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-2035.4440703719424), eventState0.getMaxCheckInterval(), 0.01);
  }
}
