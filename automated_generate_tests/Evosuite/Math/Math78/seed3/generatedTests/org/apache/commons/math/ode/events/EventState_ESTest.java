/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 17 20:41:13 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-3157.959983847353), (-3157.959983847353), (-3157.959983847353));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-3157.959983847353), 203.7161011868102, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted((-1404.60602), doubleArray0);
      assertEquals(203.7161011868102, eventState0.getConvergence(), 0.01);
      assertEquals(2147483647, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-3157.959983847353), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 2049);
      double[] doubleArray0 = new double[16];
      eventState0.reinitializeBegin(0.0, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(2049, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 20.08553692318767, (-1284.139130872026), 3130);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(3130, int0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(20.08553692318767, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(1284.139130872026, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-1151));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals((-1151), int0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 2049);
      eventState0.getMaxCheckInterval();
      assertEquals(2049, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-2733.6909932), 3.0, 40);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals((-2733.6909932), double0, 0.01);
      assertEquals(3.0, eventState0.getConvergence(), 0.01);
      assertEquals(40, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-1151));
      eventState0.getEventHandler();
      assertFalse(eventState0.stop());
      assertEquals(-1151, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 2049);
      eventState0.getConvergence();
      assertEquals(2049, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 20.08553692318767, (-1284.139130872026), 3130);
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted((-3501.8748), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 2461.94, 0);
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(2.2250738585072014E-308, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 2049);
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 2049);
      double[] doubleArray0 = new double[16];
      boolean boolean0 = eventState0.reset(0.0, doubleArray0);
      assertEquals(2049, eventState0.getMaxIterationCount());
      assertFalse(boolean0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-3157.959983847353), (-3157.959983847353), (-3157.959983847353));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-3157.959983847353), 203.7161011868102, Integer.MAX_VALUE);
      boolean boolean0 = eventState0.stop();
      assertFalse(boolean0);
      assertEquals((-3157.959983847353), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(2147483647, eventState0.getMaxIterationCount());
      assertEquals(203.7161011868102, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-1151));
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted((-1151), doubleArray0);
      assertEquals(-1151, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-1151));
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted(0.0, doubleArray0);
      assertEquals(-1151, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-16.73294240897273), (-16.73294240897273), 784.54294655532);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 784.54294655532, (-16.73294240897273), 2625);
      eventState0.reinitializeBegin(2625, (double[]) null);
      assertEquals(2625, eventState0.getMaxIterationCount());
      assertEquals(16.73294240897273, eventState0.getConvergence(), 0.01);
      assertEquals(784.54294655532, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-1151));
      double[] doubleArray0 = new double[1];
      eventState0.reinitializeBegin((-1151), doubleArray0);
      assertEquals(-1151, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-4001.9), (-4001.9), (-4001.9));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 2729.3533369920606, (-4001.9), 3);
      double double0 = eventState0.getConvergence();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(3, eventState0.getMaxIterationCount());
      assertEquals(4001.9, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(2729.3533369920606, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 1.414213562373095, 0.0, 21);
      double double0 = eventState0.getMaxCheckInterval();
      assertFalse(eventState0.stop());
      assertEquals(1.414213562373095, double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(21, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-1151));
      double double0 = eventState0.getEventTime();
      assertEquals(-1151, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1.0, 1.0, 3348.4202710104);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1239.22504617607, 1.0, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals(0, int0);
      assertEquals(1.0, eventState0.getConvergence(), 0.01);
      assertEquals(1239.22504617607, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 2100.272528, 2100.272528, 2257);
      eventState0.getEventHandler();
      assertEquals(2257, eventState0.getMaxIterationCount());
      assertEquals(2100.272528, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }
}
