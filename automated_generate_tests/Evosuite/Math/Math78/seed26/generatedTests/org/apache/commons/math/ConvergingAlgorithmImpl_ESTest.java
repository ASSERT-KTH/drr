/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 27 18:56:39 GMT 2017
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.integration.SimpsonIntegrator;
import org.apache.commons.math.analysis.integration.TrapezoidIntegrator;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConvergingAlgorithmImpl_ESTest extends ConvergingAlgorithmImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.setMaximalIterationCount((-1));
      assertEquals(-1, riddersSolver0.getMaximalIterationCount());
      
      riddersSolver0.resetMaximalIterationCount();
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      brentOptimizer0.setAbsoluteAccuracy(1606.0);
      assertEquals(1606.0, brentOptimizer0.getAbsoluteAccuracy(), 0.01);
      
      brentOptimizer0.resetAbsoluteAccuracy();
      assertEquals(1.0E-14, brentOptimizer0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.setRelativeAccuracy(314.7287817584456);
      assertEquals(314.7287817584456, trapezoidIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      brentSolver0.setMaximalIterationCount(999);
      assertEquals(999, brentSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      laguerreSolver0.setAbsoluteAccuracy(0.0);
      assertEquals(0, laguerreSolver0.getIterationCount());
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.resetRelativeAccuracy();
      assertEquals(1.0E-14, trapezoidIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      simpsonIntegrator0.resetMaximalIterationCount();
      assertEquals(64, simpsonIntegrator0.getMaximalIterationCount());
      assertEquals(0, simpsonIntegrator0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.resetAbsoluteAccuracy();
      assertEquals(0, trapezoidIntegrator0.getIterationCount());
      assertEquals(64, trapezoidIntegrator0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.setRelativeAccuracy(0.0);
      trapezoidIntegrator0.getRelativeAccuracy();
      assertEquals(64, trapezoidIntegrator0.getMaximalIterationCount());
      assertEquals(0, trapezoidIntegrator0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      assertEquals(64, simpsonIntegrator0.getMaximalIterationCount());
      
      simpsonIntegrator0.setMaximalIterationCount(0);
      int int0 = simpsonIntegrator0.getMaximalIterationCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.setMaximalIterationCount((-1583));
      int int0 = newtonSolver0.getMaximalIterationCount();
      assertEquals((-1583), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double[] doubleArray0 = new double[3];
      laguerreSolver0.solveAll(doubleArray0, (-1257.3304538606228));
      int int0 = laguerreSolver0.getIterationCount();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.setAbsoluteAccuracy((-1.0));
      double double0 = newtonSolver0.getAbsoluteAccuracy();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.setRelativeAccuracy((-40.689161469562634));
      double double0 = trapezoidIntegrator0.getRelativeAccuracy();
      assertEquals((-40.689161469562634), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.getRelativeAccuracy();
      assertEquals(0, trapezoidIntegrator0.getIterationCount());
      assertEquals(64, trapezoidIntegrator0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.setAbsoluteAccuracy(0.0);
      newtonSolver0.getAbsoluteAccuracy();
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0, newtonSolver0.getIterationCount());
      assertEquals(100, newtonSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      int int0 = laguerreSolver0.getIterationCount();
      assertEquals(0, int0);
      assertEquals(100, laguerreSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.getAbsoluteAccuracy();
      assertEquals(100, newtonSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0, newtonSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      int int0 = simpsonIntegrator0.getMaximalIterationCount();
      assertEquals(64, int0);
      assertEquals(0, simpsonIntegrator0.getIterationCount());
  }
}
