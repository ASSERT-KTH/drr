/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 10 19:07:22 GMT 2017
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.integration.RombergIntegrator;
import org.apache.commons.math.analysis.integration.SimpsonIntegrator;
import org.apache.commons.math.analysis.integration.TrapezoidIntegrator;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConvergingAlgorithmImpl_ESTest extends ConvergingAlgorithmImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      bisectionSolver0.setMaximalIterationCount((-2277));
      assertEquals(-2277, bisectionSolver0.getMaximalIterationCount());
      
      bisectionSolver0.resetMaximalIterationCount();
      assertEquals(100, bisectionSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.setAbsoluteAccuracy(1304.149);
      assertEquals(1304.149, trapezoidIntegrator0.getAbsoluteAccuracy(), 0.01);
      
      trapezoidIntegrator0.resetAbsoluteAccuracy();
      assertEquals(0, trapezoidIntegrator0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      
      riddersSolver0.setRelativeAccuracy(0.0);
      assertEquals(100, riddersSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      mullerSolver0.setMaximalIterationCount((-1110));
      assertEquals(-1110, mullerSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      brentOptimizer0.setAbsoluteAccuracy(4.0);
      assertEquals(4.0, brentOptimizer0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      simpsonIntegrator0.resetRelativeAccuracy();
      assertEquals(1.0E-14, simpsonIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.resetMaximalIterationCount();
      assertEquals(0, newtonSolver0.getIterationCount());
      assertEquals(100, newtonSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      simpsonIntegrator0.resetAbsoluteAccuracy();
      assertEquals(64, simpsonIntegrator0.getMaximalIterationCount());
      assertEquals(0, simpsonIntegrator0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.setRelativeAccuracy(0.0);
      trapezoidIntegrator0.getRelativeAccuracy();
      assertEquals(64, trapezoidIntegrator0.getMaximalIterationCount());
      assertEquals(0, trapezoidIntegrator0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.setRelativeAccuracy(Double.NEGATIVE_INFINITY);
      double double0 = trapezoidIntegrator0.getRelativeAccuracy();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      assertEquals(32, rombergIntegrator0.getMaximalIterationCount());
      
      rombergIntegrator0.setMaximalIterationCount(0);
      int int0 = rombergIntegrator0.getMaximalIterationCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      bisectionSolver0.setMaximalIterationCount((-308));
      int int0 = bisectionSolver0.getMaximalIterationCount();
      assertEquals((-308), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      Expm1Function expm1Function0 = new Expm1Function();
      GoalType goalType0 = GoalType.MAXIMIZE;
      brentOptimizer0.optimize((UnivariateRealFunction) expm1Function0, goalType0, (-636.206858), 1.0E-14);
      int int0 = brentOptimizer0.getIterationCount();
      assertEquals(60, brentOptimizer0.getEvaluations());
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      simpsonIntegrator0.setAbsoluteAccuracy((-3151.5580232542));
      double double0 = simpsonIntegrator0.getAbsoluteAccuracy();
      assertEquals((-3151.5580232542), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.getRelativeAccuracy();
      assertEquals(0, trapezoidIntegrator0.getIterationCount());
      assertEquals(64, trapezoidIntegrator0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.setAbsoluteAccuracy(0.0);
      newtonSolver0.getAbsoluteAccuracy();
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, newtonSolver0.getMaximalIterationCount());
      assertEquals(0, newtonSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      int int0 = brentOptimizer0.getIterationCount();
      assertEquals(1.0E-14, brentOptimizer0.getRelativeAccuracy(), 0.01);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.getAbsoluteAccuracy();
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, newtonSolver0.getMaximalIterationCount());
      assertEquals(0, newtonSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      int int0 = rombergIntegrator0.getMaximalIterationCount();
      assertEquals(0, rombergIntegrator0.getIterationCount());
      assertEquals(32, int0);
  }
}
