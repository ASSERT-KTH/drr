/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 10 18:47:27 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2262.072219), (-2262.072219), 2615.4896336734323);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2262.072219), 2615.4896336734323, (-836));
      double[] doubleArray0 = new double[6];
      eventState0.stepAccepted(2615.4896336734323, doubleArray0);
      assertEquals((-2262.072219), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2615.4896336734323, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-836, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-4045.795), (-4045.795), (-4045.795));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-4045.795), (-4045.795), 35);
      double[] doubleArray0 = new double[17];
      eventState0.reinitializeBegin((-4045.795), doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals((-4045.795), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(35, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(780.4836429, 780.4836429, 780.4836429);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 780.4836429, 0.0, Integer.MAX_VALUE);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(eventState0.stop());
      assertEquals(780.4836429, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-530.3402562392531), (-530.3402562392531), (-530.3402562392531));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-530.3402562392531), (-530.3402562392531), (-14));
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-14), int0);
      assertEquals((-530.3402562392531), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(2660.14042521422, 2660.14042521422, 2660.14042521422);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 2660.14042521422, 2660.14042521422, 581);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(581, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2660.14042521422, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-4045.795), (-4045.795), (-4045.795));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-4045.795), (-4045.795), 35);
      double double0 = eventState0.getMaxCheckInterval();
      assertFalse(eventState0.stop());
      assertEquals((-4045.795), double0, 0.01);
      assertEquals(35, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(873.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 4);
      eventState0.getEventHandler();
      assertFalse(eventState0.stop());
      assertEquals(4, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-530.3402562392531), (-530.3402562392531), (-530.3402562392531));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-530.3402562392531), (-530.3402562392531), 1);
      double double0 = eventState0.getConvergence();
      assertFalse(eventState0.stop());
      assertEquals(530.3402562392531, double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-530.3402562392531), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(1, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 156.40602293710037, (-701.9745777432009), (-200));
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted((-701.9745777432009), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 1792.0, 1792.0, 631);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(772.7664725811977, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(873.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 4);
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 156.40602293710037, (-701.9745777432009), (-200));
      double[] doubleArray0 = new double[7];
      boolean boolean0 = eventState0.reset((-200), doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(701.9745777432009, eventState0.getConvergence(), 0.01);
      assertEquals(-200, eventState0.getMaxIterationCount());
      assertEquals(156.40602293710037, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-4064.0594172387373), (-4064.0594172387373), (-4064.0594172387373));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-4064.0594172387373), (-4064.0594172387373), 35);
      boolean boolean0 = eventState0.stop();
      assertEquals(35, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(boolean0);
      assertEquals((-4064.0594172387373), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2262.072219), (-2262.072219), 2615.4896336734323);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2262.072219), 2615.4896336734323, (-836));
      double[] doubleArray0 = new double[6];
      eventState0.stepAccepted(0.0, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-836, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals((-2262.072219), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(2615.4896336734323, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1.570796326794897, 1.570796326794897, (-7279.3530726689005));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.570796326794897, 943.0, 0);
      double[] doubleArray0 = new double[0];
      eventState0.stepAccepted(1.570796326794897, doubleArray0);
      assertEquals(943.0, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(1.570796326794897, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-4064.0594172387373), (-4064.0594172387373), (-4064.0594172387373));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-4064.0594172387373), (-4064.0594172387373), 35);
      double[] doubleArray0 = new double[10];
      eventState0.reinitializeBegin(2.143256327628131E9, doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals((-4064.0594172387373), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(35, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2262.072219), (-2262.072219), 2615.4896336734323);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2262.072219), 2615.4896336734323, (-836));
      double[] doubleArray0 = new double[6];
      eventState0.reinitializeBegin((-2262.072219), doubleArray0);
      assertEquals(-836, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2615.4896336734323, eventState0.getConvergence(), 0.01);
      assertEquals((-2262.072219), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(873.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 4);
      eventState0.getConvergence();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(4, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 16);
      eventState0.getMaxCheckInterval();
      assertEquals(16, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(873.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 4);
      double double0 = eventState0.getEventTime();
      assertEquals(4, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(0, int0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 0.0, 0);
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, eventState0.getMaxIterationCount());
  }
}
