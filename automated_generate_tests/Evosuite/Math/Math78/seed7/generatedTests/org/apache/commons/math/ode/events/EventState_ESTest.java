/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 19:23:37 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-318.56335069176), (-318.56335069176), 12.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-318.56335069176), (-318.56335069176), 0);
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted(12.0, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-318.56335069176), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(10.06766199577777, 10.06766199577777, 10.06766199577777);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 10.06766199577777, 10.06766199577777, (-23));
      double[] doubleArray0 = new double[5];
      eventState0.reinitializeBegin(10.06766199577777, doubleArray0);
      assertEquals(-23, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(10.06766199577777, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 3345.3318, (-236.667), 1519);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(236.667, eventState0.getConvergence(), 0.01);
      assertEquals(1519, int0);
      assertFalse(eventState0.stop());
      assertEquals(3345.3318, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(10.06766199577777, 10.06766199577777, 10.06766199577777);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 10.06766199577777, 10.06766199577777, (-23));
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals((-23), int0);
      assertEquals(10.06766199577777, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.7615941559557649, 0.7615941559557649, 0.7615941559557649);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.7615941559557649, (-369));
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.7615941559557649, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-369, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-318.56335069176), (-318.56335069176), 12.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-318.56335069176), (-318.56335069176), 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-318.56335069176), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(3.7416573867739413, 3.7416573867739413, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 0);
      eventState0.getEventHandler();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 2147038762);
      eventState0.getConvergence();
      assertFalse(eventState0.stop());
      assertEquals(2147038762, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 13.0, 13.0, 2);
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted((-122.88293533150564), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 1.732050807568877, (-1127.0693584537732), 0);
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin((-1127.0693584537732), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 2147038762);
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 1.732050807568877, (-1127.0693584537732), 0);
      double[] doubleArray0 = new double[3];
      boolean boolean0 = eventState0.reset(0, doubleArray0);
      assertEquals(1127.0693584537732, eventState0.getConvergence(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1.732050807568877, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-589.44), (-589.44), (-589.44));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 18.0, 18.0, 1440);
      boolean boolean0 = eventState0.stop();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1440, eventState0.getMaxIterationCount());
      assertEquals(18.0, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-318.56335069176), (-318.56335069176), 12.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-318.56335069176), (-318.56335069176), 0);
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted(0.0, doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals((-318.56335069176), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-3456.43070742), 0.0, (-29.66));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, (-29.66), 2);
      eventState0.stepAccepted(0.0, (double[]) null);
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(29.66, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-589.44), (-589.44), (-589.44));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 18.0, 18.0, 1440);
      eventState0.reinitializeBegin(1440, (double[]) null);
      assertEquals(1440, eventState0.getMaxIterationCount());
      assertEquals(18.0, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(3472.650755900631, 4710.03650422803, 4710.03650422803);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 4710.03650422803, 3472.650755900631, (-1971));
      double[] doubleArray0 = new double[2];
      eventState0.reinitializeBegin(3472.650755900631, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(3472.650755900631, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-1971, eventState0.getMaxIterationCount());
      assertEquals(4710.03650422803, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-695.47), (-695.47), (-695.47));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-695.47), (-695.47), (-2320));
      double double0 = eventState0.getConvergence();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-2320, eventState0.getMaxIterationCount());
      assertEquals((-695.47), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(695.47, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(904.034, 904.034, 904.034);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 904.034, 904.034, 1);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(904.034, double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(1, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(10.06766199577777, 10.06766199577777, 10.06766199577777);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 10.06766199577777, 10.06766199577777, (-23));
      double double0 = eventState0.getEventTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(-23, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(10.06766199577777, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-558.7408), 0.0, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(0, int0);
      assertEquals((-558.7408), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 13.0, 13.0, 2);
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(13.0, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(2, eventState0.getMaxIterationCount());
  }
}
