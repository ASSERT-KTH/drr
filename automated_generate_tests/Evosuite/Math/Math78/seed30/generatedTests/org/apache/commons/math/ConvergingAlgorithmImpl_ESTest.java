/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 29 09:09:16 GMT 2017
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.MonitoredFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.integration.RombergIntegrator;
import org.apache.commons.math.analysis.integration.SimpsonIntegrator;
import org.apache.commons.math.analysis.integration.TrapezoidIntegrator;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConvergingAlgorithmImpl_ESTest extends ConvergingAlgorithmImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      rombergIntegrator0.resetRelativeAccuracy();
      assertEquals(1.0E-14, rombergIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      simpsonIntegrator0.setMaximalIterationCount(17);
      assertEquals(17, simpsonIntegrator0.getMaximalIterationCount());
      
      simpsonIntegrator0.resetMaximalIterationCount();
      assertEquals(64, simpsonIntegrator0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      bisectionSolver0.setAbsoluteAccuracy(0.95);
      assertEquals(0.95, bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      
      bisectionSolver0.resetAbsoluteAccuracy();
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      secantSolver0.setRelativeAccuracy(35.0);
      assertEquals(35.0, secantSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.setAbsoluteAccuracy((-208.08688));
      assertEquals((-208.08688), newtonSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      bisectionSolver0.resetRelativeAccuracy();
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(100, bisectionSolver0.getMaximalIterationCount());
      assertEquals(0, bisectionSolver0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.resetMaximalIterationCount();
      assertEquals(0, newtonSolver0.getIterationCount());
      assertEquals(100, newtonSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
      
      newtonSolver0.setRelativeAccuracy(0.0);
      newtonSolver0.getRelativeAccuracy();
      assertEquals(100, newtonSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      bisectionSolver0.setRelativeAccuracy((-1578.3750442212495));
      double double0 = bisectionSolver0.getRelativeAccuracy();
      assertEquals((-1578.3750442212495), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      assertEquals(100, secantSolver0.getMaximalIterationCount());
      
      secantSolver0.setMaximalIterationCount(0);
      int int0 = secantSolver0.getMaximalIterationCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      Expm1Function expm1Function0 = new Expm1Function();
      MonitoredFunction monitoredFunction0 = new MonitoredFunction((UnivariateRealFunction) expm1Function0);
      simpsonIntegrator0.integrate((UnivariateRealFunction) monitoredFunction0, (-3086.0), (-931.2603859375266));
      int int0 = simpsonIntegrator0.getIterationCount();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.setAbsoluteAccuracy(0.0);
      trapezoidIntegrator0.getAbsoluteAccuracy();
      assertEquals(64, trapezoidIntegrator0.getMaximalIterationCount());
      assertEquals(0, trapezoidIntegrator0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      double double0 = newtonSolver0.getRelativeAccuracy();
      assertEquals(1.0E-14, double0, 0.01);
      assertEquals(0, newtonSolver0.getIterationCount());
      assertEquals(100, newtonSolver0.getMaximalIterationCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.setAbsoluteAccuracy((-105.01735772186));
      double double0 = trapezoidIntegrator0.getAbsoluteAccuracy();
      assertEquals((-105.01735772186), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      mullerSolver0.setMaximalIterationCount((-1099));
      int int0 = mullerSolver0.getMaximalIterationCount();
      assertEquals((-1099), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      int int0 = mullerSolver0.getIterationCount();
      assertEquals(0, int0);
      assertEquals(100, mullerSolver0.getMaximalIterationCount());
      assertEquals(1.0E-14, mullerSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TrapezoidIntegrator trapezoidIntegrator0 = new TrapezoidIntegrator();
      trapezoidIntegrator0.getAbsoluteAccuracy();
      assertEquals(64, trapezoidIntegrator0.getMaximalIterationCount());
      assertEquals(0, trapezoidIntegrator0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      int int0 = mullerSolver0.getMaximalIterationCount();
      assertEquals(0, mullerSolver0.getIterationCount());
      assertEquals(100, int0);
      assertEquals(1.0E-14, mullerSolver0.getRelativeAccuracy(), 0.01);
  }
}
