/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 28 12:55:19 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, (-1.0), 0);
      double[] doubleArray0 = new double[0];
      eventState0.stepAccepted(0, doubleArray0);
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(1.0, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2.185039863261519), (-2.185039863261519), (-2.185039863261519));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2.185039863261519), (-2.185039863261519), 9);
      double[] doubleArray0 = new double[0];
      eventState0.reinitializeBegin((-2.185039863261519), doubleArray0);
      assertEquals(9, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-2.185039863261519), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1497.28, 0.0, 1.3862943611198906);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1497.28, 1497.28, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(0, int0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1497.28, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(2239.99373424, 2239.99373424, (-298.938));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 2239.99373424, (-298.938), 1337);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(1337, int0);
      assertEquals(298.938, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2239.99373424, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, (-1.0), 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertFalse(eventState0.stop());
      assertEquals(1.0, eventState0.getConvergence(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(2239.99373424, 2239.99373424, (-298.938));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 2239.99373424, (-298.938), 1337);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2239.99373424, double0, 0.01);
      assertEquals(298.938, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(1337, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2.185039863261519), (-2.185039863261519), (-2.185039863261519));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2.185039863261519), (-2.185039863261519), 9);
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-2.185039863261519), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(9, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1244.758212261588, 1244.758212261588, 1244.758212261588);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1244.758212261588, 0.0, 0);
      double double0 = eventState0.getConvergence();
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(0.0, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1244.758212261588, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 0.0, 2);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted(0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 541.7, (-1540));
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.6931471805599453, 0.6931471805599453, 0.6931471805599453);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.6931471805599453, 0.6931471805599453, 3115);
      double[] doubleArray0 = new double[25];
      boolean boolean0 = eventState0.reset(0.6931471805599453, doubleArray0);
      assertEquals(3115, eventState0.getMaxIterationCount());
      assertFalse(boolean0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.6931471805599453, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(2239.99373424, 2239.99373424, (-298.938));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 2239.99373424, (-298.938), 1337);
      boolean boolean0 = eventState0.stop();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(boolean0);
      assertEquals(298.938, eventState0.getConvergence(), 0.01);
      assertEquals(2239.99373424, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(1337, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1244.758212261588, 1244.758212261588, 1244.758212261588);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1244.758212261588, 0.0, 0);
      double[] doubleArray0 = new double[6];
      eventState0.stepAccepted(0.0, doubleArray0);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(1244.758212261588, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(2239.99373424, 2239.99373424, (-298.938));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 2239.99373424, (-298.938), 1337);
      double[] doubleArray0 = new double[3];
      eventState0.stepAccepted((-2.5655783933683063), doubleArray0);
      assertEquals(298.938, eventState0.getConvergence(), 0.01);
      assertEquals(1337, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2239.99373424, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(2239.99373424, 2239.99373424, (-298.938));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 2239.99373424, (-298.938), 1337);
      double[] doubleArray0 = new double[3];
      eventState0.reinitializeBegin(2923.494262028211, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1337, eventState0.getMaxIterationCount());
      assertEquals(2239.99373424, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(298.938, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2.185039863261519), (-2.185039863261519), Double.NaN);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2.185039863261519), (-715.5636), 9);
      double[] doubleArray0 = new double[0];
      eventState0.reinitializeBegin(Double.NaN, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(9, eventState0.getMaxIterationCount());
      assertEquals(715.5636, eventState0.getConvergence(), 0.01);
      assertEquals((-2.185039863261519), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1.0), (-1.0), (double) 3);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1.0), (double) 3, 3);
      double double0 = eventState0.getConvergence();
      assertEquals(3, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-1.0), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(3.0, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, (-1450.75566211), (-752.706309772634));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-752.706309772634), (-752.706309772634), (-4147));
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(-4147, eventState0.getMaxIterationCount());
      assertEquals((-752.706309772634), double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, (-1.0), 0);
      double double0 = eventState0.getEventTime();
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(1.0, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1.718281828459045, 1.718281828459045, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.718281828459045, 0.0, (-20));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(1.718281828459045, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals((-20), int0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 0.0, 0);
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }
}
