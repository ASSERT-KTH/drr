/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 20:21:29 GMT 2017
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 2286.229604783;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 791.416514;
      doubleArray1[1] = 2286.229604783;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2165.875373884318));
      eigenDecompositionImpl0.getVT();
      assertEquals((-1.4319572761549711E9), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-96.441813788351);
      double[] doubleArray1 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-96.441813788351));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertEquals((-96.441813788351), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2471.6;
      doubleArray0[1] = 2471.6;
      doubleArray0[2] = (-1559.68);
      doubleArray0[3] = 945.78197119778;
      doubleArray0[4] = 1088.82711;
      doubleArray0[5] = (-1559.68);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2.5011104298755527E-12;
      doubleArray1[1] = 189.8914167423186;
      doubleArray1[2] = (-1559.68);
      doubleArray1[3] = 1088.82711;
      doubleArray1[4] = 945.78197119778;
      doubleArray1[5] = 2471.6;
      doubleArray1[6] = 2471.6;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.232595164407831E-28);
      assertEquals((-3.89470684987452E27), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1819.7912;
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 1819.7912;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 586.229042834143);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (-559.47));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 2087.742729115495);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2286.229604783;
      double[] doubleArray1 = new double[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-2165.875373884318));
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(2286.229604783, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 586.229042834143;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 586.229042834143);
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(3);
      assertEquals((-586.229042834143), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 586.229042834143);
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(3);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 586.229042834143);
      eigenDecompositionImpl0.getEigenvector(3);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 586.229042834143;
      doubleArray1[2] = 20.250110502736362;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 586.229042834143);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(1.4092545822897702E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2471.6;
      doubleArray0[1] = 0.7615941559557649;
      doubleArray0[2] = (-1559.68);
      doubleArray0[5] = 3400.997126899534;
      double[] doubleArray1 = new double[7];
      doubleArray1[3] = 1088.82711;
      doubleArray1[6] = 3400.997126899534;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.232595164407831E-28);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals((-1.369222221487607E23), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 2023.59549401021);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 586.229042834143);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, 5838.2778);
      try { 
        eigenDecompositionImpl1.getEigenvector(2064);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2064
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1539.018);
      doubleArray0[4] = 490.2863029894431;
      doubleArray0[6] = (-602.93655395);
      doubleArray0[8] = 588.1928179058797;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 490.2863029894431;
      doubleArray1[1] = 1827.2980520895549;
      doubleArray1[2] = (-602.93655395);
      doubleArray1[3] = 12.566370614359172;
      doubleArray1[4] = 12.566370614359172;
      doubleArray1[5] = 0.5;
      doubleArray1[6] = (-602.93655395);
      doubleArray1[7] = (-602.93655395);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-817.955));
      assertEquals((-7.014271641786028E19), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1559.68);
      doubleArray0[3] = (-1559.68);
      doubleArray0[2] = 1088.82711;
      doubleArray0[5] = 3400.997126899534;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1088.82711;
      doubleArray1[1] = 189.8914167423186;
      doubleArray1[2] = (-1559.68);
      doubleArray1[3] = 1088.82711;
      doubleArray1[4] = (-1559.68);
      doubleArray1[5] = 3400.997126899534;
      doubleArray1[6] = 3400.997126899534;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.232595164407831E-28);
      assertEquals(7.774889703499805E25, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2471.6;
      doubleArray0[3] = 945.78197119778;
      doubleArray0[4] = 1088.82711;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2.5011104298755527E-12;
      doubleArray1[1] = 2471.6;
      doubleArray1[2] = (-1559.68);
      doubleArray1[3] = 1088.82711;
      doubleArray1[4] = 945.78197119778;
      doubleArray1[5] = 0.7615941559557649;
      doubleArray1[6] = 0.7615941559557649;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.232595164407831E-28);
      assertEquals(5.34512735554619E28, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 2471.6;
      doubleArray0[0] = (-1559.68);
      doubleArray0[3] = 945.78197119778;
      doubleArray0[2] = 1088.82711;
      doubleArray0[5] = 3400.997126899534;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1088.82711;
      doubleArray1[1] = 189.8914167423186;
      doubleArray1[2] = (-1559.68);
      doubleArray1[3] = 1088.82711;
      doubleArray1[4] = 945.78197119778;
      doubleArray1[5] = 3400.997126899534;
      doubleArray1[6] = 3400.997126899534;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.232595164407831E-28);
      assertEquals((-1.7962439551809516E26), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1539.018);
      doubleArray0[4] = 490.2863029894431;
      doubleArray0[6] = (-602.93655395);
      doubleArray0[7] = 12.566370614359172;
      doubleArray0[8] = 608.2980114185132;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 490.2863029894431;
      doubleArray1[1] = 1827.2980520895549;
      doubleArray1[2] = (-602.93655395);
      doubleArray1[3] = 12.566370614359172;
      doubleArray1[4] = 12.566370614359172;
      doubleArray1[5] = (-4.6813);
      doubleArray1[7] = (-602.93655395);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-817.955));
      assertEquals((-2.6332454019711133E21), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2471.6;
      doubleArray0[2] = (-1559.68);
      doubleArray0[4] = 1088.82711;
      doubleArray0[5] = (-1559.68);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2.5011104298755527E-12;
      doubleArray1[1] = 189.8914167423186;
      doubleArray1[2] = (-1559.68);
      doubleArray1[3] = 1088.82711;
      doubleArray1[4] = 945.78197119778;
      doubleArray1[5] = 0.7615941559557649;
      doubleArray1[6] = 0.7615941559557649;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.232595164407831E-28);
      assertEquals(7.279718008369591E25, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = (-602.93655395);
      double[] doubleArray1 = new double[8];
      doubleArray1[3] = 12.566370614359172;
      doubleArray1[4] = 12.566370614359172;
      doubleArray1[5] = (-4.6813);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-817.955));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1539.018);
      doubleArray0[4] = 490.2863029894431;
      doubleArray0[6] = (-602.93655395);
      doubleArray0[8] = 588.1928179058797;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 490.2863029894431;
      doubleArray1[1] = 1827.2980520895549;
      doubleArray1[2] = (-602.93655395);
      doubleArray1[3] = 12.566370614359172;
      doubleArray1[4] = 12.566370614359172;
      doubleArray1[5] = (-4.6813);
      doubleArray1[6] = (-602.93655395);
      doubleArray1[7] = (-602.93655395);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-817.955));
      assertEquals(2.6089782845276743E20, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2471.6;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2.5011104298755527E-12;
      doubleArray1[1] = 2471.6;
      doubleArray1[2] = (-1559.68);
      doubleArray1[3] = 1088.82711;
      doubleArray1[4] = 945.78197119778;
      doubleArray1[5] = 0.76159415595576;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.232595164407831E-28);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2471.6;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2.5011104298755527E-12;
      doubleArray1[1] = 189.8914167423186;
      doubleArray1[2] = (-1559.68);
      doubleArray1[3] = 1088.82711;
      doubleArray1[4] = 945.78197119778;
      doubleArray1[5] = 0.7615941559557649;
      doubleArray1[6] = 0.7615941559557649;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.232595164407831E-28);
      eigenDecompositionImpl0.getVT();
      assertEquals(1.0429786626628737E27, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, Double.POSITIVE_INFINITY);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2471.6;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2.5011104298755527E-12;
      doubleArray1[1] = 189.8914167423186;
      doubleArray1[2] = (-1559.68);
      doubleArray1[3] = 1088.82711;
      doubleArray1[4] = 945.78197119778;
      doubleArray1[5] = 3400.997126899534;
      doubleArray1[6] = 3400.997126899534;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.232595164407831E-28);
      assertEquals(3.066032329906638E29, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2471.6;
      doubleArray0[7] = 2471.6;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2.5011104298755527E-12;
      doubleArray1[1] = 1.232595164407831E-28;
      doubleArray1[2] = (-1559.68);
      doubleArray1[3] = 1088.82711;
      doubleArray1[4] = 945.78197119778;
      doubleArray1[5] = 0.7615941559557649;
      doubleArray1[6] = 0.7615941559557649;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      assertEquals((-5.884005305584132E12), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-8);
      doubleArray0[1] = 740.9583206891785;
      doubleArray0[3] = (-4751.190224024441);
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 740.9583206891785;
      doubleArray1[2] = 740.9583206891785;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-4751.190224024441));
      assertEquals((-1.7613555549722813E10), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-4.6813);
      doubleArray0[3] = 2.4541479959339085E-13;
      doubleArray0[4] = 490.2863029894431;
      doubleArray0[6] = (-602.93655395);
      doubleArray0[8] = 588.1928179058797;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 1827.2980520895549;
      doubleArray1[3] = 12.566370614359172;
      doubleArray1[4] = 12.566370614359172;
      doubleArray1[5] = (-4.6813);
      doubleArray1[6] = (-602.93655395);
      doubleArray1[7] = (-602.93655395);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-817.955));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 740.9583206891785;
      doubleArray0[2] = 740.9583206891785;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2286.229604783;
      doubleArray0[3] = 740.9583206891785;
      doubleArray1[2] = 2286.229604783;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-4734.51546946208));
      assertEquals(2.4450278202170812E13, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 490.2863029894431;
      doubleArray1[1] = 1827.2980520895549;
      doubleArray1[2] = (-602.93655395);
      doubleArray1[3] = 12.566370614359172;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-817.955));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 20.250110502736362;
      doubleArray1[2] = 1801.7524498011064;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 586.229042834143);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (-559.47));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 20.250110502736362;
      doubleArray0[1] = 1819.7912;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 586.229042834143;
      doubleArray1[1] = (-34.36071396575733);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 586.229042834143);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (-559.47));
      assertEquals((-4.763355068594394E-6), eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals((-4.763355068594394E-6), eigenDecompositionImpl1.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-4751.190224024441));
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getV();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 586.229042834143);
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 586.229042834143);
      eigenDecompositionImpl0.getVT();
      try { 
        eigenDecompositionImpl0.getEigenvector(2147475053);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147475053
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertTrue(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 586.229042834143);
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 586.229042834143);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      eigenDecompositionImpl0.getV();
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 586.229042834143;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 586.229042834143);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, 1819.7912);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-96.441813788351));
      try { 
        eigenDecompositionImpl0.getRealEigenvalue((-1012));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1012
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(2077);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2077
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 586.229042834143);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}
