/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 22:57:40 GMT 2017
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      doubleArray1[4] = 978.998387221723;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      eigenDecompositionImpl0.getVT();
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-388.96067);
      doubleArray0[1] = (-388.96067);
      double[] doubleArray1 = new double[1];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 0.0);
      try { 
        eigenDecompositionImpl0.getEigenvector(1750);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1750
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = 3053.044023913732;
      doubleArray0[8] = 3053.044023913732;
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-195.0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 3595.0530754690576);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1212.17257;
      doubleArray0[1] = 3053.044023913732;
      doubleArray0[3] = 1212.17257;
      doubleArray0[4] = 3053.044023913732;
      doubleArray0[5] = 3878.113;
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(4);
      assertEquals(1212.17257, double0, 0.01);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-810.0864406457952);
      doubleArray0[1] = 7714956.017522877;
      doubleArray0[2] = 1.2103555491194129E-8;
      double[] doubleArray1 = new double[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-810.0864406457952));
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(2);
      assertEquals((-1.0584481060504913E-6), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      eigenDecompositionImpl0.getImagEigenvalue(3);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1212.17257;
      doubleArray0[1] = 1212.17257;
      doubleArray0[2] = (-4108.0);
      doubleArray0[3] = (-681.0437434131267);
      doubleArray0[7] = 3759.0;
      doubleArray0[6] = 3047.5;
      doubleArray0[8] = 3053.044023913732;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-681.0437434131267);
      doubleArray1[4] = (-195.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-195.0));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(1.980558470871086E27, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1729.716746506;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1093.771693034238;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1521.066));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals((-2.069323307017268E9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 90
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-195.0));
      try { 
        eigenDecompositionImpl0.getImagEigenvalue((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 1572.4914667015553);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 2714.272642);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1212.17257;
      doubleArray0[1] = 1212.17257;
      doubleArray0[2] = (-4108.0);
      doubleArray0[3] = (-681.0437434131267);
      doubleArray0[7] = 3759.0;
      doubleArray0[6] = 3047.5;
      doubleArray0[8] = 3053.044023913732;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-681.0437434131267);
      doubleArray1[4] = (-195.0);
      doubleArray1[3] = 1.05;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-195.0));
      eigenDecompositionImpl0.getV();
      assertEquals(9.307062449773036E29, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = 3878.113;
      doubleArray0[5] = 3759.0;
      doubleArray0[6] = (-680.9580879804342);
      doubleArray0[7] = 3849.829;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-680.9580879804342);
      doubleArray1[2] = 7715422.8305260865;
      doubleArray1[3] = 3849.829;
      doubleArray1[4] = (-195.0);
      doubleArray1[5] = 1.05;
      doubleArray1[6] = 4.42510584514244E-5;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1212.17257;
      doubleArray0[4] = 3878.113;
      doubleArray0[5] = 3759.0;
      doubleArray0[7] = 3849.829;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-680.9580879804342);
      doubleArray1[2] = 7715422.8305260865;
      doubleArray1[3] = 3849.829;
      doubleArray1[4] = (-195.0);
      doubleArray1[5] = 1.05;
      doubleArray1[6] = 4.42510584514244E-5;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 3053.044023913732;
      doubleArray0[5] = 3878.113;
      doubleArray0[6] = 3878.113;
      double[] doubleArray1 = new double[8];
      doubleArray0[7] = (-195.0);
      doubleArray1[1] = (-683.0);
      doubleArray1[2] = 3053.044023913732;
      doubleArray1[3] = 3849.829;
      doubleArray1[4] = 978.998387221723;
      doubleArray1[5] = 1.05;
      doubleArray1[6] = 3878.113;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 3053.044023913732;
      doubleArray0[5] = 3878.113;
      doubleArray0[6] = 3878.113;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-683.0);
      doubleArray1[2] = 3053.044023913732;
      doubleArray1[3] = 3849.829;
      doubleArray1[4] = 978.998387221723;
      doubleArray1[5] = 1.05;
      doubleArray1[6] = 3878.113;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = 1212.17257;
      doubleArray0[5] = 3759.0;
      doubleArray0[7] = 3849.829;
      double[] doubleArray1 = new double[8];
      doubleArray1[4] = 978.998387221723;
      doubleArray1[5] = 1.05;
      doubleArray1[6] = 1212.17257;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = 1212.17257;
      doubleArray0[5] = 3759.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[4] = 978.998387221723;
      doubleArray1[5] = 1.05;
      doubleArray1[6] = 1212.17257;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = 3878.113;
      doubleArray0[5] = 3759.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = 7715422.8305260865;
      doubleArray1[3] = 3849.829;
      doubleArray1[4] = 978.998387221723;
      doubleArray1[5] = 1.05;
      doubleArray1[6] = 4.42510584514244E-5;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 3053.044023913732;
      doubleArray0[4] = 3878.113;
      doubleArray0[5] = 3759.0;
      doubleArray0[6] = 3849.829;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-683.0);
      doubleArray1[2] = 7715422.8305260865;
      doubleArray1[3] = 3849.829;
      doubleArray1[4] = 978.998387221723;
      doubleArray1[5] = 1.05;
      doubleArray1[6] = 3047.5;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 3053.044023913732;
      doubleArray0[5] = 3759.0;
      doubleArray0[6] = 3047.5;
      doubleArray0[7] = 3849.829;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-195.0);
      doubleArray1[1] = 1212.17257;
      doubleArray1[2] = 7715422.8305260865;
      doubleArray1[3] = 3849.829;
      doubleArray1[4] = 978.998387221723;
      doubleArray1[5] = 1.05;
      doubleArray1[6] = 3047.5;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 3759.0;
      doubleArray0[6] = 3878.113;
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = 7715422.8305260865;
      doubleArray1[3] = 3053.044023913732;
      doubleArray1[4] = 978.998387221723;
      doubleArray1[5] = 1.05;
      doubleArray1[6] = (-4108.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = 3878.113;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-680.9580879804342);
      doubleArray1[2] = 7715422.8305260865;
      doubleArray1[3] = 3849.829;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 3053.044023913732;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-683.0);
      doubleArray1[2] = 3053.044023913732;
      doubleArray1[3] = 3849.829;
      doubleArray1[4] = 978.998387221723;
      doubleArray1[5] = 1.05;
      doubleArray1[6] = 1212.17257;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = 3878.113;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-195.0);
      doubleArray1[1] = (-680.9580879804342);
      doubleArray1[2] = 7715422.8305260865;
      doubleArray1[3] = 3849.829;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = 1212.17257;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-195.0);
      doubleArray1[1] = (-683.0);
      doubleArray1[2] = 7715422.8305260865;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (-195.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1212.17257;
      doubleArray0[1] = 3053.044023913732;
      doubleArray0[4] = 3878.113;
      doubleArray0[5] = (-4108.0);
      doubleArray0[7] = 3849.829;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-195.0);
      doubleArray1[1] = (-680.9580879804342);
      doubleArray1[2] = 7715422.8305260865;
      doubleArray1[3] = 3849.829;
      doubleArray1[4] = 978.998387221723;
      doubleArray1[5] = 1.05;
      doubleArray1[6] = 4.42510584514244E-5;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 3053.044023913732;
      doubleArray0[4] = 3878.113;
      doubleArray0[5] = (-4108.0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-195.0);
      doubleArray1[1] = (-680.9580879804342);
      doubleArray1[2] = 7715422.8305260865;
      doubleArray1[3] = 3849.829;
      doubleArray1[4] = 978.998387221723;
      doubleArray1[5] = 1.05;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1212.17257;
      doubleArray0[1] = 3053.044023913732;
      doubleArray0[2] = 3053.044023913732;
      doubleArray0[4] = 3878.113;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-195.0);
      doubleArray1[1] = (-681.0437434131267);
      doubleArray0[3] = 7715422.8305260865;
      doubleArray1[4] = 978.998387221723;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-195.0));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1212.17257;
      doubleArray0[2] = 3053.044023913732;
      doubleArray0[3] = (-681.0437434131267);
      doubleArray0[4] = 3878.113;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-195.0);
      doubleArray1[1] = (-681.0437434131267);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-195.0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1212.17257;
      doubleArray0[1] = 3053.044023913732;
      doubleArray0[2] = (-4093.1017047995765);
      doubleArray0[3] = (-681.0437434131267);
      doubleArray0[7] = 3759.0;
      doubleArray0[6] = 3047.5;
      doubleArray0[8] = 3053.044023913732;
      double[] doubleArray1 = new double[8];
      doubleArray1[5] = (-195.0);
      doubleArray1[1] = (-681.0437434131267);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-195.0));
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1212.17257;
      doubleArray0[4] = 1212.17257;
      doubleArray0[5] = 3759.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = 1212.17257;
      doubleArray1[4] = 978.998387221723;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (-195.0));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(-0.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = 3047.5;
      doubleArray0[7] = 3053.044023913732;
      doubleArray0[8] = 3053.044023913732;
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-195.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      eigenDecompositionImpl0.getVT();
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-195.0));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-195.0));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(5);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-195.0));
      eigenDecompositionImpl0.getV();
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-195.0));
      eigenDecompositionImpl0.getVT();
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-195.0));
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      eigenDecompositionImpl0.getVT();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      eigenDecompositionImpl0.getV();
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertNotNull(array2DRowRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (-195.0));
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getVT();
      assertEquals(9, array2DRowRealMatrix1.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1212.17257;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-195.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, (-195.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-195.0));
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      eigenDecompositionImpl0.getRealEigenvalue(4);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 1.1102230246251565E-16);
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}
