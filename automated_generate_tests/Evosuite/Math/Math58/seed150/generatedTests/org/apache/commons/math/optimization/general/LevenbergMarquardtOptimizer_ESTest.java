/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 21 01:03:30 GMT 2017
 */

package org.apache.commons.math.optimization.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
import org.apache.commons.math.optimization.general.CircleVectorial;
import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LevenbergMarquardtOptimizer_ESTest extends LevenbergMarquardtOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // evaluations
         //
         verifyException("org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(0.0, 0.0, 0.0, 0.0, 0.0);
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray0 = new double[2];
      circleVectorial0.addPoint(2384.41679031, (-291.47397));
      circleVectorial0.addPoint(4.0, 4530.0);
      levenbergMarquardtOptimizer0.optimize(4530, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      levenbergMarquardtOptimizer0.rows = 1;
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // dimensions mismatch: 2 != 1
         //
         verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      levenbergMarquardtOptimizer0.cols = (-1713);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(6.070161590459059, (-785.969), 6.070161590459059, (-785.969), 0.0);
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray0 = new double[2];
      circleVectorial0.addPoint(6.070161590459059, (-291.47397));
      circleVectorial0.addPoint((-3025.788188748296), 0.651);
      levenbergMarquardtOptimizer0.optimize(4530, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      levenbergMarquardtOptimizer0.cols = 4530;
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(0.0, (-785.969), 0.0, (-785.969), 0.0);
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray0 = new double[2];
      circleVectorial0.addPoint((-785.969), (-785.969));
      circleVectorial0.addPoint(0.0, 0.0);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(4530, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unable to perform Q.R decomposition on the CONVERGENCE_FAILEDx2 jacobian matrix
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(0.6194403915594063, 0.0, 0.6194403915594063);
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray0 = new double[2];
      circleVectorial0.addPoint(2384.41679031, 2.85040095144011776E17);
      circleVectorial0.addPoint(0.0, 0.0);
      doubleArray0[1] = 0.6194403915594063;
      levenbergMarquardtOptimizer0.optimize(4530, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parameters relative tolerance is too small (CONVERGENCE_FAILED), no further improvement in the approximate solution is possible
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(0.0, 0.0, 0.0);
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4530;
      circleVectorial0.addPoint(2384.41679031, (-291.47397));
      circleVectorial0.addPoint(4.0, 4530.0);
      levenbergMarquardtOptimizer0.optimize(4530, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(8, levenbergMarquardtOptimizer0.getJacobianEvaluations());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(0.0, 0.0, 0.0);
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4530;
      circleVectorial0.addPoint((-0.09088451), 4530.0);
      circleVectorial0.addPoint(4.0, 4530.0);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(4530, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cost relative tolerance is too small (CONVERGENCE_FAILED), no further reduction in the sum of squares is possible
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray0 = new double[2];
      circleVectorial0.addPoint((-291.47397), 0.6194403915594);
      circleVectorial0.addPoint(1546, 0.0);
      doubleArray0[1] = 0.6194403915594;
      levenbergMarquardtOptimizer0.optimize(1546, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1.6364477143148036E-26, levenbergMarquardtOptimizer0.getChiSquare(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(0.6194403915594, 0.0, 0.6194403915594);
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray0 = new double[2];
      circleVectorial0.addPoint((-291.47397), 0.6194403915594);
      circleVectorial0.addPoint(1888.7298101600627, 0.0);
      doubleArray0[1] = 0.6194403915594;
      levenbergMarquardtOptimizer0.optimize(4530, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      levenbergMarquardtOptimizer0.doOptimize();
      assertEquals(5.289221447196053E-26, levenbergMarquardtOptimizer0.getChiSquare(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      levenbergMarquardtOptimizer0.optimize(10, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray1);
  }
}
