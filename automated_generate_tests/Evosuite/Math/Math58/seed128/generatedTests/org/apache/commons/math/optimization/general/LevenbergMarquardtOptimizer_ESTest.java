/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 20 22:30:41 GMT 2017
 */

package org.apache.commons.math.optimization.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
import org.apache.commons.math.optimization.VectorialPointValuePair;
import org.apache.commons.math.optimization.general.CircleVectorial;
import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LevenbergMarquardtOptimizer_ESTest extends LevenbergMarquardtOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // evaluations
         //
         verifyException("org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-135.8172842735638), (-135.8172842735638), (-135.8172842735638), (-202.07455474), (-135.8172842735638));
      double[] doubleArray0 = new double[2];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      circleVectorial0.addPoint((-135.8172842735638), (-202.07455474));
      double[] doubleArray1 = circleVectorial0.value(doubleArray0);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(128, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray1, doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-135.8172842735638), (-202.07455474), (-135.8172842735638));
      double[] doubleArray0 = new double[2];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      circleVectorial0.addPoint((-135.8172842735638), (-202.07455474));
      circleVectorial0.addPoint(635.242, 2865.9894783649465);
      double[] doubleArray1 = circleVectorial0.value(doubleArray0);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(128, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray1, doubleArray1, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unable to perform Q.R decomposition on the CONVERGENCE_FAILEDx2 jacobian matrix
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-202.07455474), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (-202.07455474), Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[3];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray1 = circleVectorial0.value(doubleArray0);
      double[] doubleArray2 = circleVectorial0.value(doubleArray0);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(128, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray1, doubleArray2, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parameters relative tolerance is too small (CONVERGENCE_FAILED), no further improvement in the approximate solution is possible
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-202.07455474), (-202.07455474), (-202.07455474), (-202.07455474), Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[3];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray1 = circleVectorial0.value(doubleArray0);
      double[] doubleArray2 = circleVectorial0.value(doubleArray0);
      VectorialPointValuePair vectorialPointValuePair0 = levenbergMarquardtOptimizer0.optimize(128, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray1, doubleArray2, doubleArray0);
      assertNotNull(vectorialPointValuePair0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[3];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray1 = circleVectorial0.value(doubleArray0);
      double[] doubleArray2 = circleVectorial0.value(doubleArray0);
      VectorialPointValuePair vectorialPointValuePair0 = levenbergMarquardtOptimizer0.optimize(128, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray1, doubleArray2, doubleArray0);
      assertNotNull(vectorialPointValuePair0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-135.8172842735638), (-202.07455474), (-135.8172842735638));
      double[] doubleArray0 = new double[2];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      circleVectorial0.addPoint((-135.8172842735638), (-202.07455474));
      circleVectorial0.addPoint(707.0, 202.07455474);
      VectorialPointValuePair vectorialPointValuePair0 = levenbergMarquardtOptimizer0.optimize(128, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      VectorialPointValuePair vectorialPointValuePair1 = levenbergMarquardtOptimizer0.doOptimize();
      assertFalse(vectorialPointValuePair1.equals((Object)vectorialPointValuePair0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      levenbergMarquardtOptimizer0.cols = (-1);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }
}
