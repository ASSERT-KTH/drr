/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 13 22:20:01 GMT 2017
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositionImpl_ESTest extends EigenDecompositionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = 4.0;
      doubleArray0[5] = 3035.4530854440213;
      doubleArray0[6] = 600.93;
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = (-1178.7976306713);
      doubleArray1[3] = 4.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1130.81408848));
      eigenDecompositionImpl0.getSolver();
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 1599.8643954;
      doubleArray0[8] = 3035.4530854440213;
      double[] doubleArray1 = new double[8];
      doubleArray1[4] = 4.0;
      doubleArray1[5] = (-1178.7976306713);
      doubleArray1[6] = 49.756738086712396;
      doubleArray1[7] = 600.93;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1178.7976306713);
      doubleArray0[1] = 3035.4530854440213;
      doubleArray0[2] = (-2780.0);
      doubleArray0[3] = 49.756738086712396;
      doubleArray0[5] = 1599.8643954;
      doubleArray0[6] = 1599.8643954;
      doubleArray0[7] = (-1130.81408848);
      doubleArray0[8] = 3035.4530854440213;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2780.0);
      doubleArray1[4] = 4.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals((-9.392997062979561E22), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1178.7976306713);
      doubleArray0[1] = (-1178.7976306713);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, 307.267230474089);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-1062.6164632296263));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 3035.4530854440213;
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      assertEquals(3035.4530854440213, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1178.7976306713);
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(8);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
      assertEquals((-1178.7976306713), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      eigenDecompositionImpl0.getImagEigenvalue(2);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1178.7976306713));
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(8);
      assertEquals(9, arrayRealVector0.getDimension());
      assertTrue(arrayRealVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1178.7976306713);
      doubleArray0[1] = (-1178.7976306713);
      doubleArray0[4] = 4.0;
      doubleArray0[5] = 3035.4530854440213;
      doubleArray0[6] = 600.93;
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = (-1178.7976306713);
      doubleArray1[7] = 600.93;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1130.81408848));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(5.087591000482664E24, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1178.7976306713);
      doubleArray0[1] = 3035.4530854440213;
      doubleArray0[2] = (-2780.0);
      doubleArray0[3] = 49.756738086712396;
      doubleArray0[6] = 1599.8643954;
      doubleArray0[7] = (-1130.81408848);
      doubleArray0[8] = 3035.4530854440213;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2780.0);
      doubleArray1[4] = 4.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals((-9.39299706329374E22), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      try { 
        eigenDecompositionImpl0.getRealEigenvalue(2146991673);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2146991673
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, 0.563);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (-1178.7976306713);
      doubleArray0[5] = 1599.8643954;
      doubleArray0[6] = 600.93;
      doubleArray0[8] = 600.93;
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = (-1178.7976306713);
      doubleArray1[3] = 4.0;
      doubleArray1[4] = 307.267230474089;
      doubleArray1[5] = (-1178.7976306713);
      doubleArray1[6] = (-1178.7976306713);
      doubleArray1[7] = 600.93;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1178.7976306713);
      doubleArray0[2] = (-2780.0);
      doubleArray0[5] = 1599.8643954;
      doubleArray0[1] = 600.93;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2780.0);
      doubleArray1[1] = (-1130.81408848);
      doubleArray1[2] = (-1178.7976306713);
      doubleArray1[3] = 4.0;
      doubleArray1[4] = 307.267230474089;
      doubleArray1[5] = (-1178.7976306713);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (-2780.0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2780.0);
      doubleArray1[1] = (-1130.81408848);
      doubleArray1[2] = (-1178.7976306713);
      doubleArray1[3] = 4.0;
      doubleArray1[4] = 223.0223193158528;
      doubleArray1[5] = (-1178.7976306713);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2780.0);
      doubleArray1[1] = (-1130.81408848);
      doubleArray1[2] = (-1178.7976306713);
      doubleArray1[3] = 4.0;
      doubleArray1[4] = 307.267230474089;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 1599.8643954;
      doubleArray0[6] = 600.93;
      double[] doubleArray1 = new double[8];
      doubleArray1[3] = 4.0;
      doubleArray1[4] = 307.267230474089;
      doubleArray1[5] = (-2780.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 3035.4530854440213;
      doubleArray0[2] = (-2780.0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2780.0);
      doubleArray1[1] = (-1130.81408848);
      doubleArray1[2] = (-1178.7976306713);
      doubleArray1[3] = 4.0;
      doubleArray1[4] = 307.267230474089;
      doubleArray0[3] = (-1178.7976306713);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = (-2780.0);
      doubleArray0[6] = 600.93;
      doubleArray0[7] = (-1178.7976306713);
      double[] doubleArray1 = new double[8];
      doubleArray1[3] = 4.0;
      doubleArray1[4] = 307.267230474089;
      doubleArray1[5] = (-1178.7976306713);
      doubleArray1[6] = (-2780.0);
      doubleArray1[7] = 600.93;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1178.7976306713);
      doubleArray0[1] = 3035.4530854440213;
      doubleArray0[2] = (-2780.0);
      doubleArray0[5] = 1599.8643954;
      doubleArray0[6] = 600.93;
      doubleArray0[7] = (-1130.81408848);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2780.0);
      doubleArray1[1] = (-1130.81408848);
      doubleArray1[2] = (-1178.7976306713);
      doubleArray1[3] = 4.0;
      doubleArray1[4] = 223.0223193158528;
      doubleArray1[5] = (-1178.7976306713);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-1178.7976306713);
      doubleArray0[2] = (-2780.0);
      doubleArray0[4] = 4.0;
      doubleArray0[5] = 3035.4530854440213;
      doubleArray0[6] = 600.93;
      double[] doubleArray1 = new double[8];
      doubleArray0[0] = (-2780.0);
      doubleArray1[2] = (-1178.7976306713);
      doubleArray1[3] = 4.0;
      doubleArray1[6] = 307.267230474089;
      doubleArray1[7] = 600.93;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1130.81408848));
      assertEquals(2.0489364702467386E29, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = (-1178.7976306713);
      doubleArray0[2] = (-2780.0);
      doubleArray0[3] = (-4.129304778254305);
      doubleArray0[4] = 4.0;
      doubleArray0[5] = 3035.4530854440213;
      double[] doubleArray1 = new double[8];
      doubleArray1[6] = (-4.129304778254305);
      doubleArray1[7] = 600.93;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1130.81408848));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1178.7976306713);
      doubleArray0[1] = 3035.4530854440213;
      doubleArray0[2] = (-2780.0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2780.0);
      doubleArray1[1] = (-1130.81408848);
      doubleArray1[2] = (-1178.7976306713);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1178.7976306713);
      doubleArray0[1] = 3035.4530854440213;
      doubleArray0[4] = 4.0;
      doubleArray0[5] = 1599.8643954;
      doubleArray0[6] = 600.93;
      doubleArray0[7] = (-1130.81408848);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2780.0);
      doubleArray1[1] = (-1130.81408848);
      doubleArray1[2] = (-1178.7976306713);
      doubleArray1[3] = 4.0;
      doubleArray1[7] = 600.93;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals(4.84588469195197E28, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1178.7976306713);
      doubleArray0[1] = 3035.4530854440213;
      doubleArray0[4] = 4.0;
      doubleArray0[5] = 1599.8643954;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-1130.81408848);
      doubleArray1[2] = (-1178.7976306713);
      doubleArray1[3] = 4.0;
      doubleArray1[5] = (-1178.7976306713);
      doubleArray1[6] = (-1178.7976306713);
      doubleArray1[7] = 600.93;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals(5.197899674326544E27, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = 1599.8643954;
      doubleArray0[6] = 600.93;
      double[] doubleArray1 = new double[8];
      doubleArray1[3] = 4.0;
      doubleArray1[4] = 4.0;
      doubleArray1[5] = (-1178.7976306713);
      doubleArray1[6] = (-2780.0);
      doubleArray1[7] = 600.93;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 3035.4530854440213;
      doubleArray0[4] = 4.0;
      doubleArray0[5] = 1599.8643954;
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-1130.81408848);
      doubleArray1[2] = (-1178.7976306713);
      doubleArray1[3] = 4.0;
      doubleArray1[5] = (-1178.7976306713);
      doubleArray1[6] = (-1178.7976306713);
      doubleArray1[7] = 600.93;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 380.6493868;
      doubleArray0[2] = 1.3862943611198906;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-477.5947);
      doubleArray0[0] = 380.6493868;
      doubleArray1[2] = (-477.5947);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-477.5947));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotNull(array2DRowRealMatrix0);
      
      eigenDecompositionImpl0.getSolver();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      try { 
        eigenDecompositionImpl0.getEigenvector((-1134));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1134
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      eigenDecompositionImpl0.getSolver();
      try { 
        eigenDecompositionImpl0.getEigenvector(894);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 894
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      eigenDecompositionImpl0.getV();
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      eigenDecompositionImpl0.getVT();
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1130.81408848));
      eigenDecompositionImpl0.getD();
      eigenDecompositionImpl0.getD();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1130.81408848));
      eigenDecompositionImpl0.getSolver();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1130.81408848));
      eigenDecompositionImpl0.getV();
      eigenDecompositionImpl0.getV();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, 27.0);
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getV();
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2780.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 307.267230474089);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, 4.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1130.81408848));
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-1130.81408848));
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(365);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 365
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[8];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-465.8754504));
      eigenDecompositionImpl0.getImagEigenvalues();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }
}
