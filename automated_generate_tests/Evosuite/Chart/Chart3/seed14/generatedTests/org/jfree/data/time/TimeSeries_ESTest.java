/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 02:46:52 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Quarter quarter1 = new Quarter(1, 1);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter1);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter1, (RegularTimePeriod) quarter0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, "yt?VA>y", "yt?VA>y");
      Month month0 = new Month();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) 0.0F);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 1392409281321L);
      timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) fixedMillisecond1);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) 21);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) (-126), false);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Quarter quarter1 = (Quarter)quarter0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter1);
      timeSeries0.add((RegularTimePeriod) quarter1, (-1.7976931348623157E308));
      timeSeries0.setMaximumItemAge(1);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) 21);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) (-126), false);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (-2165.832));
      assertEquals((-2165.832), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Quarter quarter1 = (Quarter)quarter0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter1);
      timeSeries0.add((RegularTimePeriod) quarter1, (-1.7976931348623157E308));
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4);
      timeSeries0.update((RegularTimePeriod) quarter0, (Number) 10);
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) 21);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) (-126), false);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals((-126.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Quarter quarter1 = (Quarter)quarter0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter1);
      timeSeries0.add((RegularTimePeriod) quarter1, (-1.7976931348623157E308));
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4);
      timeSeries0.getRawDataItem(quarter0);
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "First");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, "|PspxiEy=Gt?B,", "|PspxiEy=Gt?B,");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("|PspxiEy=Gt?B,", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("|PspxiEy=Gt?B,", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("ytBV$@y", timeSeries0.getRangeDescription());
      assertEquals("ytBV$@y", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (-1.7976931348623157E308));
      timeSeries0.getValue((RegularTimePeriod) quarter0);
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      Month month0 = new Month();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 21);
      timeSeries0.getValue((RegularTimePeriod) month0);
      assertEquals(21.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) (byte)28);
      timeSeries0.getTimePeriodClass();
      assertEquals(28.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (-1.7976931348623157E308));
      timeSeries0.getTimePeriod(0);
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (-1.7976931348623157E308));
      timeSeries0.getNextTimePeriod();
      assertEquals((-1.7976931348623157E308), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "?%tBV$@y", "?%tBV$@y");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 0L, false);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) (-5316836467277638485L), false);
      double double0 = timeSeries0.getMinY();
      assertEquals((-5.3168364672776387E18), timeSeries0.getMaxY(), 0.01);
      assertEquals((-5.3168364672776387E18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) (-126), false);
      double double0 = timeSeries0.getMaxY();
      assertEquals((-126.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
      timeSeries0.getItemCount();
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 1L, false);
      timeSeries0.getIndex(fixedMillisecond0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (-1.7976931348623157E308));
      timeSeries0.getDataItem(0);
      assertEquals((-1.7976931348623157E308), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Long long0 = new Long(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      Month month0 = new Month();
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) long0, false);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) month0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 21);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (-2165.832));
      assertEquals((-2165.832), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) (-126), false);
      timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 3);
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      timeSeries1.addAndOrUpdate(timeSeries2);
      assertEquals((-126.0), timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "yt?VA>y", "yt?VA>y");
      // Undeclared exception!
      try { 
        timeSeries0.update(2, (Number) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      // Undeclared exception!
      try { 
        timeSeries0.update((-126), (Number) 1935897188);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, "|PspxiEy=Gt?B,", "|PspxiEy=Gt?B,");
      // Undeclared exception!
      try { 
        timeSeries0.getValue(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-48), (-48), (-48), (-2321), 0, 31);
      Year year0 = new Year((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1581), 0, (-1581));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-1581));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      // Undeclared exception!
      try { 
        timeSeries0.delete(4093, 4093, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4093, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Week week0 = new Week(1, (-1));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-782), 0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod");
      // Undeclared exception!
      try { 
        timeSeries0.delete(1, 3250);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, "|PspxiEy=Gt?B,", "|PspxiEy=Gt?B,");
      // Undeclared exception!
      try { 
        timeSeries0.delete(59, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      Month month0 = new Month();
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) month0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      List list0 = timeSeriesCollection0.getSeries();
      timeSeries1.data = list0;
      try { 
        timeSeries1.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      double[][] doubleArray0 = new double[8][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      Month month0 = new Month();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 21);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 32770.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 3);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      timeSeries1.data = list0;
      // Undeclared exception!
      try { 
        timeSeries1.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Long long0 = new Long(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) long0, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 21);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Thu Jan 01 00:00:00 GMT 1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockDate mockDate0 = new MockDate(53L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, "Invalid index.", "");
      timeSeries0.add((RegularTimePeriod) week0, (double) 1, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Week 1, 1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockDate mockDate0 = new MockDate(53L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, "Invalid index.", "");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 90, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
      Minute minute0 = new Minute();
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (double) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Quarter.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "KK}[2+h''K13", "KK}[2+h''K13");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) (byte)11);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((int) (byte)11, (int) (byte)11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) 21);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) (-126), false);
      timeSeries0.removeAgedItems(true);
      assertEquals((-126.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.removeAgedItems(true);
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 1L, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 21);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      timeSeries0.add((RegularTimePeriod) month0, 0.0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(month0);
      timeSeries0.clear();
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 1L, false);
      Long long0 = new Long(1L);
      timeSeries0.update(0, (Number) long0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) quarter0);
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week((Date) mockDate0);
      timeSeries1.add((RegularTimePeriod) week0, (Number) (-1022), false);
      // Undeclared exception!
      try { 
        timeSeries1.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      assertEquals(1, timeSeries0.getItemCount());
      
      TimeSeries timeSeries1 = new TimeSeries((Comparable) quarter0);
      timeSeries1.add(timeSeriesDataItem0, true);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Q1/2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      timeSeries0.getIndex(fixedMillisecond0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ytBV$@y", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ytBV$@y", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-126));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 21);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1581), 0, (-1581));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-2054));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.getItemCount();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(1L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "yt?VA>y", "yt?VA>y");
      Long long0 = new Long(1L);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) long0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) 21);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) null);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("ytBV$@y", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ytBV$@y", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 21);
      timeSeries0.hashCode();
      assertEquals(21.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (String) null, (String) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "yt?VA>y", "yt?VA>y");
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0.0F);
      boolean boolean0 = timeSeries0.equals(timeSeriesDataItem0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, "ytBV$@y", "ytBV$@y");
      Month month0 = new Month();
      timeSeries0.add((RegularTimePeriod) fixedMillisecond1, (double) (-5316836467277638485L), false);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) month0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, "yt?VA>y", "yt?VA>y");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond1, (RegularTimePeriod) fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1581), 0, (-1581));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(1, 400);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 32);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(32, (-2341));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-827), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Quarter quarter1 = (Quarter)quarter0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter1);
      timeSeries0.add((RegularTimePeriod) quarter1, (-1.7976931348623157E308));
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4);
      timeSeries0.delete(1, 1, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(2027, 29, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) 21);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) (-126), false);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "yt?VA>y", "yt?VA>y");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 21);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.clear();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getDomainDescription());
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
      timeSeries0.removeAgedItems(9223372036854775807L, true);
      timeSeries0.removeAgedItems((long) 4, true);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.removeAgedItems(1392409281320L, false);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getRangeDescription());
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 21);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems((-2183L), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      Month month0 = new Month();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 21);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 21);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(21.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(21.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, "yt?VA>y", "yt?VA>y");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) 0.0F);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 1392409281321L);
      timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) 1.0F);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "yt?VA>y", "yt?VA>y");
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) 1.0F);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) 21);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) (-126), false);
      timeSeries0.hashCode();
      assertEquals(21.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Quarter quarter1 = (Quarter)quarter0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter1);
      timeSeries0.add((RegularTimePeriod) quarter1, (-1.7976931348623157E308));
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4);
      timeSeries0.delete(1, 1, true);
      timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      assertEquals((-1.7976931348623157E308), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      Month month0 = new Month();
      timeSeries0.getValue((RegularTimePeriod) month0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("ytBV$@y", timeSeries0.getDomainDescription());
      assertEquals("ytBV$@y", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      timeSeries0.add((RegularTimePeriod) month0, 0.0);
      timeSeries0.getTimePeriods();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      timeSeries0.add((RegularTimePeriod) month0, 0.0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(month0);
      timeSeriesDataItem0.setValue(13);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(13.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      timeSeries0.getRawDataItem(second0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getDomainDescription());
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "yt?VA>y", (String) null);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-239L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      timeSeries0.setMaximumItemCount(815);
      assertEquals(815, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 3);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(3.0, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      Long long0 = new Long(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) long0, false);
      timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 21);
      Day day0 = new Day();
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, 1.0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "org.jfree.data.time.RegularTimePeriod", "org.jfree.data.time.RegularTimePeriod");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-4), 3250);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      double double0 = timeSeries0.getMinY();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("ytBV$@y", timeSeries0.getDomainDescription());
      assertEquals("ytBV$@y", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(9223372036854775807L, long0);
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockDate mockDate0 = new MockDate(53L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, "Invalid index.", "");
      timeSeries0.setRangeDescription("");
      assertEquals("Invalid index.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      double double0 = timeSeries0.getMaxY();
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) (-126), false);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals((-126.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (-1.7976931348623157E308));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Q1/2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "ytBV$@y", "ytBV$@y");
      timeSeries0.getTimePeriodClass();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("ytBV$@y", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("ytBV$@y", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "yt?VA>y", "yt?VA>y");
      timeSeries0.getItems();
      assertEquals("yt?VA>y", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("yt?VA>y", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getRangeDescription());
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "org.jfree.data.gantt.SlidingGanttCategoryDataset", "org.jfree.data.gantt.SlidingGanttCategoryDataset");
      timeSeries0.setDomainDescription("org.jfree.data.gantt.SlidingGanttCategoryDataset");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("org.jfree.data.gantt.SlidingGanttCategoryDataset", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }
}
