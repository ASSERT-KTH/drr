/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 23:54:02 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.TextField;
import java.text.DateFormatSymbols;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.SpinnerNumberModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.hashCode();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      Quarter quarter1 = (Quarter)quarter0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter1, "", "0'>J}4zUyF)");
      timeSeries0.add((RegularTimePeriod) quarter1, (double) (-2951));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("0'>J}4zUyF)");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) quarter0);
      assertEquals((-2951.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("0'>J}4zUyF)");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) quarter0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("0'>J}4zUyF)");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 0L);
      timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
      timeSeries0.getTimePeriodClass();
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "caret-next-word", "caret-next-word", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("caret-next-word", timeSeries0.getDomainDescription());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 0L);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      Year year0 = new Year();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.getItemCount();
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
      timeSeries0.getIndex(quarter0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("Time", string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("0'>J}4zUyF)");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) 4);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("0'>J}4zUyF)");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-1160.0));
      assertEquals((-1160.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("0'>J}4zUyF)");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-1160.0));
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals((-1160.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "caret-next-word", "caret-next-word", "");
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1145261138);
      // Undeclared exception!
      try { 
        timeSeries0.update(1145261138, (Number) 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1145261138, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-2566), (Number) 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "caret-next-word", "caret-next-word", "caret-next-word");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(3415);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3415, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-1120));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(53, 53, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      // Undeclared exception!
      try { 
        timeSeries0.delete(1, (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-9999), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) (-9999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("Q1/2014");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (-1008.54669795678));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockDate mockDate0 = new MockDate(11L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("0'>J}4zUyF)");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel((-5193.223768), (-5193.223768), (-5193.223768), 0.0);
      Comparable comparable0 = spinnerNumberModel0.getMaximum();
      TimeSeries timeSeries0 = new TimeSeries(comparable0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 843271250);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "caret-next-word", "caret-next-word", "");
      Locale locale0 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 4);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 4, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Q4/1582 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 0L);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (double) 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Week 1, 1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "org.jfree.data.UnknownKeyException", "QQU'iSs=X]hB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("k^p5C97q|WL9]iapx");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(3, 2146396314);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1), 29, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.removeAgedItems(true);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("k^p5C97q|WL9]iapx");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.update(0, (Number) 4);
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.getIndex(millisecond0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 4, true);
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Month month0 = new Month(date0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-1650));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      timeSeries0.getItemCount();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("0'>J}4zUyF)", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      Year year0 = quarter0.getYear();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.hashCode();
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", (String) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      boolean boolean0 = timeSeries0.equals(mockDate0);
      assertEquals("0'>J}4zUyF)", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockDate mockDate0 = new MockDate(20L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 0L);
      Week week1 = (Week)timeSeries0.getNextTimePeriod();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) week1, (RegularTimePeriod) week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      Year year0 = new Year();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockDate mockDate0 = new MockDate(20L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(1, 1);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(2503, (-9999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-662), (-2724));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      // Undeclared exception!
      try { 
        timeSeries0.delete(2146396314, 1205, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) 0L);
      Quarter quarter0 = new Quarter();
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("0'>J}4zUyF)", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockDate mockDate0 = new MockDate(20L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.clear();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.removeAgedItems((long) 0, false);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
      timeSeries0.removeAgedItems((long) 2902, false);
      timeSeries0.removeAgedItems(77L, true);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      Quarter quarter1 = (Quarter)quarter0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter1, "", "0'>J}4zUyF)");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, false);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (double) 0L);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("0'>J}4zUyF)");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("0'>J}4zUyF)", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) week0, (Number) 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("0'>J}4zUyF)");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.update((RegularTimePeriod) quarter0, (Number) 1);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 1);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Q1/2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      Class<TextField> class0 = TextField.class;
      timeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of java.awt.TextField.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
      timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("0'>J}4zUyF)");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(9999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      Year year0 = quarter0.getYear();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.getRawDataItem(year0);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      Minute minute0 = new Minute();
      timeSeries0.getDataItem((RegularTimePeriod) minute0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("0'>J}4zUyF)", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1668), 2000, 2000, (-2632), (-86));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("S]fv#\"{EC.;7C{(c");
      Month month0 = new Month((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "S]fv#\"{EC.;7C{(c", (String) null);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-1668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.setMaximumItemAge(2902);
      assertEquals(2902L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-9999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 1);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("0'>J}4zUyF)", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("0'>J}4zUyF)");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      // Undeclared exception!
      try { 
        timeSeries0.delete(1, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("", string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("0'>J}4zUyF)", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      double double0 = timeSeries0.getMinY();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("0'>J}4zUyF)", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, long0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("0'>J}4zUyF)", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      timeSeries0.setRangeDescription("0'>J}4zUyF)");
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("0'>J}4zUyF)", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(2146396314);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146396314, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("0'>J}4zUyF)");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Month month0 = new Month(date0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      timeSeries0.getTimePeriodClass();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.getItems();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "0'>J}4zUyF)");
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("0'>J}4zUyF)");
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 9999);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) quarter0);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.clear();
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "caret-next-word", "caret-next-word", "");
      assertEquals("caret-next-word", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription("");
      assertEquals("", timeSeries0.getDomainDescription());
  }
}
