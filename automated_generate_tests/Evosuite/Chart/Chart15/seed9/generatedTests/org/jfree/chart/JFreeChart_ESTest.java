/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 13 21:58:20 GMT 2017
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import java.util.TimeZone;
import javax.swing.Box;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.ChartChangeEvent;
import org.jfree.chart.event.ChartChangeListener;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.ChartProgressListener;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;
import sun.awt.image.ToolkitImage;
import sun.java2d.SunGraphics2D;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JFreeChart_ESTest extends JFreeChart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart("=", (Plot) thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      jFreeChart0.addChangeListener(chartPanel0);
      thermometerPlot0.setBackgroundImage((Image) null);
      assertEquals(2, thermometerPlot0.getUnits());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (double) 1.0F, (-2616.43769), chartRenderingInfo0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(10, bufferedImage0.getTileHeight());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.setBackgroundPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (-327.51003440922), (-327.51003440922), chartRenderingInfo0);
      assertEquals(10, bufferedImage0.getTileWidth());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.event.ChartProgressListener", (Plot) ringPlot0);
      jFreeChart0.setBackgroundImageAlignment(10);
      jFreeChart0.setBackgroundImageAlignment(10);
      assertEquals(10, jFreeChart0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImageAlignment(420);
      int int0 = jFreeChart0.getBackgroundImageAlignment();
      assertEquals(420, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[][] floatArray0 = new float[4][1];
      NumberAxis numberAxis0 = new NumberAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, (ValueAxis) numberAxis0, (ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) fastScatterPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle(500, (Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'index' argument is out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[][] floatArray0 = new float[4][1];
      NumberAxis numberAxis0 = new NumberAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, (ValueAxis) numberAxis0, (ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) fastScatterPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend((-2670));
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(legendTitle0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) spiderWebPlot0);
      DateTitle dateTitle0 = new DateTitle();
      TitleChangeEvent titleChangeEvent0 = new TitleChangeEvent((Title) dateTitle0);
      jFreeChart0.titleChanged(titleChangeEvent0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent((Object) mockJapaneseDate0, jFreeChart0, 270, 321);
      jFreeChart0.notifyListeners(chartProgressEvent0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1226.9677738));
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) compassPlot0);
      ChartChangeEvent chartChangeEvent0 = new ChartChangeEvent((Object) compassPlot0);
      jFreeChart0.notifyListeners(chartChangeEvent0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot3D0);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) piePlot3D0);
      jFreeChart0.addLegend(legendTitle0);
      assertEquals(2, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) "h", oHLCDataItemArray0);
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) defaultOHLCDataset0, (ValueAxis) null, (ValueAxis) null, (XYItemRenderer) clusteredXYBarRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("h", (Plot) xYPlot0);
      jFreeChart0.getXYPlot();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) polarPlot0);
      jFreeChart0.getTitle();
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      List list0 = jFreeChart0.getSubtitles();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Font font0 = new Font("mOB", 15, 15);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("mOB", font0, (Plot) combinedRangeCategoryPlot0, false);
      int int0 = jFreeChart0.getSubtitleCount();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, categoryAxis0, (ValueAxis) symbolAxis0, (CategoryItemRenderer) areaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) categoryPlot0);
      categoryPlot0.setBackgroundImageAlignment((-3367));
      jFreeChart0.getPlot();
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("Transparency length must be equal to 2 with CCITT images", (Plot) multiplePiePlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(legendTitle0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Font font0 = new Font("mOB", 15, 15);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("mOB", font0, (Plot) combinedRangeCategoryPlot0, false);
      jFreeChart0.getCategoryPlot();
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Color color0 = (Color)jFreeChart0.getBackgroundPaint();
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(color0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) compassPlot0);
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale((double) 0.5F, (double) 10, symbolAxis0.DEFAULT_GRID_BAND_PAINT);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) lookupPaintScale0, (ValueAxis) symbolAxis0);
      jFreeChart0.drawTitle(paintScaleLegend0, (Graphics2D) null, rectangle2D_Double0, true);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) multiplePiePlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 2144, 10, chartRenderingInfo0);
      assertEquals(10, bufferedImage0.getType());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(2144, bufferedImage0.getTileHeight());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.plotChanged((PlotChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 3);
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("The 'index' argument is out of range.", (Plot) meterPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.handleClick(270, 544, (ChartRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.setFrameFromDiagonal(1260.0, 1260.0, 2972.0, (-9.0));
      PeriodAxis periodAxis0 = new PeriodAxis("Xr>");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Xr>", (Plot) combinedRangeCategoryPlot0);
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) lookupPaintScale0, (ValueAxis) periodAxis0);
      // Undeclared exception!
      try { 
        jFreeChart0.drawTitle(paintScaleLegend0, (Graphics2D) null, rectangle2D_Double0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.axis.Axis", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) waferMapPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.draw((Graphics2D) null, (Rectangle2D) null, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Rectangle2D$Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(0, 0);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) waferMapPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) multiplePiePlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2143768579, 2, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("!!`O;^r?", (Plot) combinedRangeXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, (-1943), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (-1943) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot3D0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(185, 64336, (ChartRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 2146736437, 10, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferByte", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) meterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 18, 859, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 859
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[][] floatArray0 = new float[3][2];
      String[] stringArray0 = new String[7];
      stringArray0[0] = "L";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      MockDate mockDate0 = new MockDate(693, (-506), 500, (-52), 500);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Day day0 = new Day((Date) mockDate0, (TimeZone) zoneInfo0);
      PeriodAxis periodAxis0 = new PeriodAxis("X\"W#w_{", (RegularTimePeriod) day0, (RegularTimePeriod) day0, (TimeZone) zoneInfo0);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, (ValueAxis) symbolAxis0, (ValueAxis) periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) fastScatterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(500, 500, 10, chartRenderingInfo0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.jfree.chart.axis.PeriodAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2, 3, (-2001), 333, (-72), 2, false, false, false, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(0, 1358, (double) 0, (-137.84915), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (0) and height (1358) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("Null 't' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(55, 2013265920);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (-2) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot3D0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(600, 420);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("Unrecognised exception.", (Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      boolean boolean0 = jFreeChart0.equals(jFreeChart0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(boolean0);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) multiplePiePlot0);
      jFreeChart0.addProgressListener((ChartProgressListener) null);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart("=", (Plot) thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      jFreeChart0.addChangeListener(chartPanel0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("*GSY=6)<qx~-^NfZa", (Plot) combinedRangeCategoryPlot0);
      Box.Filler box_Filler0 = (Box.Filler)Box.createHorizontalStrut(10);
      JScrollPane jScrollPane0 = new JScrollPane((Component) box_Filler0);
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      // Undeclared exception!
      try { 
        jFreeChart0.draw((Graphics2D) null, (Rectangle2D) rectangle0, (Point2D) null, (ChartRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("!!`O;^r?", (Plot) combinedRangeXYPlot0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-461.4117069874), (double) 15, (double) 1.0F, 53.2325);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(680, 100, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle2D_Double0, (Point2D) point2D_Float0, chartRenderingInfo0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(680, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(100, bufferedImage0.getTileHeight());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) multiplePiePlot0);
      jFreeChart0.setNotify(true);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertTrue(jFreeChart0.isNotify());
      
      jFreeChart0.setNotify(false);
      assertFalse(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot0);
      jFreeChart0.setBackgroundPaint(piePlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("Xr>");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) periodAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Xr>", (Plot) combinedRangeCategoryPlot0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      
      jFreeChart0.clearSubtitles();
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot3D0);
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend(0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNotNull(legendTitle0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      jFreeChart0.setTitle((TextTitle) null);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, categoryAxis0, (ValueAxis) symbolAxis0, (CategoryItemRenderer) areaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) categoryPlot0);
      TextTitle textTitle0 = new TextTitle("");
      jFreeChart0.setTitle(textTitle0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) defaultKeyedValues2DDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Font) null, (Plot) spiderWebPlot0, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1226.9677738));
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) compassPlot0);
      int int0 = jFreeChart0.getSubtitleCount();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("!!`O;^r?", (Plot) combinedRangeXYPlot0);
      boolean boolean0 = jFreeChart0.isBorderVisible();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(boolean0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) waferMapPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.setTextAntiAlias((Object) waferMapPlot0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.jfree.chart.plot.WaferMapPlot@2 incompatible with Text-specific antialiasing enable key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedDomainXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.titleChanged((TitleChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("wiPe~kyWCIC`2zw;\"", (Plot) combinedDomainCategoryPlot0);
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent((Plot) combinedDomainCategoryPlot0);
      jFreeChart0.plotChanged(plotChangeEvent0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.removeSubtitle((Title) null);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.fireChartChanged();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) meterPlot0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      
      jFreeChart0.removeLegend();
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, categoryAxis0, (ValueAxis) symbolAxis0, (CategoryItemRenderer) areaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) categoryPlot0);
      jFreeChart0.getPlot();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("yyrnj8`", (Plot) xYPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertTrue(jFreeChart1.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNotSame(jFreeChart1, jFreeChart0);
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBorderVisible(true);
      JFreeChart jFreeChart1 = new JFreeChart("E<y", jFreeChart0.DEFAULT_TITLE_FONT, (Plot) multiplePiePlot0, true);
      boolean boolean0 = jFreeChart0.equals(jFreeChart1);
      assertTrue(jFreeChart0.isBorderVisible());
      assertFalse(jFreeChart1.isBorderVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("!!`O;^r?", (Plot) combinedRangeXYPlot0);
      boolean boolean0 = jFreeChart0.equals("!!`O;^r?");
      assertFalse(boolean0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      JFreeChart jFreeChart1 = new JFreeChart("E<y", jFreeChart0.DEFAULT_TITLE_FONT, (Plot) multiplePiePlot0, true);
      boolean boolean0 = jFreeChart0.equals(jFreeChart1);
      assertFalse(boolean0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart1.isNotify());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(1, jFreeChart1.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, categoryAxis0, (ValueAxis) symbolAxis0, (CategoryItemRenderer) areaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      jFreeChart0.removeProgressListener(chartPanel0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      jFreeChart0.addProgressListener(chartPanel0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent((Object) mockJapaneseDate0, jFreeChart0, 270, 321);
      jFreeChart0.notifyListeners(chartProgressEvent0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot3D0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false, true, true, true, false);
      jFreeChart0.removeChangeListener(chartPanel0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.removeChangeListener((ChartChangeListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'listener' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultMultiValueCategoryDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_FONT, (Plot) multiplePiePlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      jFreeChart0.removeChangeListener(chartPanel0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(15, 270);
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(270, bufferedImage0.getHeight());
      assertEquals(15, bufferedImage0.getTileWidth());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.drawTitle((Title) null, (Graphics2D) null, rectangle2D_Double0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 't' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(1187, 1851);
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) waferMapPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2204, 1187);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.WaferMapPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("yyrnj8`", (Plot) xYPlot0);
      jFreeChart0.setBackgroundImageAlpha((-1672.2108F));
      jFreeChart0.setBackgroundImageAlpha(10);
      assertEquals(10.0F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImageAlpha(0.5F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImage((Image) null);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("wiPe~kyWCIC`2zw;\"", (Plot) combinedDomainCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      jFreeChart0.setBackgroundImage(bufferedImage0);
      jFreeChart0.setBackgroundImage(bufferedImage0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, true);
      int[] intArray0 = new int[3];
      Hashtable<PolarPlot, DefaultTableModel> hashtable0 = new Hashtable<PolarPlot, DefaultTableModel>();
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(2144802644, 2146248894, intArray0, 300, 3561, (Hashtable<?, ?>) hashtable0);
      ToolkitImage toolkitImage0 = (ToolkitImage)chartPanel0.createImage((ImageProducer) memoryImageSource0);
      jFreeChart0.setBackgroundImage(toolkitImage0);
      assertTrue(chartPanel0.getRefreshBuffer());
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 558);
      assertEquals(558, bufferedImage0.getHeight());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundPaint((Paint) null);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      jFreeChart0.setBackgroundPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) spiderWebPlot0);
      jFreeChart0.setTextAntiAlias(true);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("!!`O;^r?", (Plot) combinedRangeXYPlot0);
      jFreeChart0.setAntiAlias(false);
      assertFalse(jFreeChart0.getAntiAlias());
      
      jFreeChart0.setAntiAlias(true);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("!!`O;^r?", (Plot) combinedRangeXYPlot0);
      jFreeChart0.setAntiAlias(false);
      jFreeChart0.setAntiAlias(false);
      assertFalse(jFreeChart0.getAntiAlias());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setAntiAlias(false);
      JFreeChart jFreeChart1 = new JFreeChart("E<y", jFreeChart0.DEFAULT_TITLE_FONT, (Plot) multiplePiePlot0, false);
      boolean boolean0 = jFreeChart0.equals(jFreeChart1);
      assertFalse(jFreeChart0.getAntiAlias());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setAntiAlias(true);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.getAntiAlias());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((-2945), (Title) dateTitle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'index' argument is out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((-1226.9677738));
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) compassPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertNotSame(jFreeChart1, jFreeChart0);
      assertTrue(jFreeChart1.isNotify());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) multiplePiePlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle((-1942961394));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot3D0);
      List list0 = jFreeChart0.getSubtitles();
      jFreeChart0.setSubtitles(list0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.setSubtitles((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'subtitles' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1);
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) meterPlot0);
      List list0 = jFreeChart0.INFO.getContributors();
      // Undeclared exception!
      try { 
        jFreeChart0.setSubtitles(list0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.ui.Contributor cannot be cast to org.jfree.chart.title.Title
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.util.SerialUtilities", (Plot) fastScatterPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend(10);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertNull(legendTitle0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getLegend();
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      jFreeChart0.setTitle("ZOOM_RANGE_BOTH");
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 5000.0);
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) compassPlot0);
      jFreeChart0.setTitle((String) null);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.JFreeChart", (Plot) multiplePiePlot0);
      TextTitle textTitle0 = new TextTitle("org.jfree.chart.JFreeChart", jFreeChart0.DEFAULT_TITLE_FONT);
      jFreeChart0.setTitle(textTitle0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[][] floatArray0 = new float[4][1];
      NumberAxis numberAxis0 = new NumberAxis();
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, (ValueAxis) numberAxis0, (ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) fastScatterPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, categoryAxis0, (ValueAxis) symbolAxis0, (CategoryItemRenderer) areaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) categoryPlot0);
      jFreeChart0.setPadding(categoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      jFreeChart0.getPadding();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.setRenderingHints((RenderingHints) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // RenderingHints given are null
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) multiplePiePlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      jFreeChart0.setRenderingHints(renderingHints0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 'listener' argument.");
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((String) null, extendedCategoryAxis0.DEFAULT_TICK_LABEL_FONT, (Plot) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, categoryAxis0, (ValueAxis) symbolAxis0, (CategoryItemRenderer) areaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) categoryPlot0);
      jFreeChart0.getPadding();
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertFalse(jFreeChart0.isBorderVisible());
      
      jFreeChart0.setBorderVisible(true);
      jFreeChart0.createBufferedImage(10, 10);
      assertTrue(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, categoryAxis0, (ValueAxis) symbolAxis0, (CategoryItemRenderer) areaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) categoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      TextTitle textTitle0 = jFreeChart0.getTitle();
      jFreeChart0.addSubtitle((Title) textTitle0);
      jFreeChart0.getLegend(10);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) multiplePiePlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, false, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage((int) (byte)107, 10, (double) (-2368), (double) 1.0F, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      jFreeChart0.draw((Graphics2D) sunGraphics2D0, (Rectangle2D) rectangle2D_Double0);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(107, bufferedImage0.getWidth());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("!!`O;^r?", (Plot) combinedRangeXYPlot0);
      jFreeChart0.setTextAntiAlias(false);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("yyrnj8`", (Plot) xYPlot0);
      jFreeChart0.getBackgroundPaint();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBorderStroke(multiplePiePlot0.DEFAULT_OUTLINE_STROKE);
      JFreeChart jFreeChart1 = new JFreeChart("E<y", jFreeChart0.DEFAULT_TITLE_FONT, (Plot) multiplePiePlot0, true);
      boolean boolean0 = jFreeChart0.equals(jFreeChart1);
      assertFalse(jFreeChart1.isBorderVisible());
      assertEquals(1, jFreeChart1.getSubtitleCount());
      assertFalse(boolean0);
      assertTrue(jFreeChart1.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, categoryAxis0, (ValueAxis) symbolAxis0, (CategoryItemRenderer) areaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) categoryPlot0);
      BasicStroke basicStroke0 = (BasicStroke)jFreeChart0.getBorderStroke();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.PiePlot cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Title", (Plot) combinedDomainXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.CombinedDomainXYPlot cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JFreeChart.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedDomainXYPlot0);
      jFreeChart0.getBackgroundImage();
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("Null 't' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeXYPlot0);
      jFreeChart0.getAntiAlias();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      float float0 = jFreeChart0.getBackgroundImageAlpha();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      jFreeChart0.handleClick(10, 1122, chartRenderingInfo0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBorderPaint(multiplePiePlot0.DEFAULT_OUTLINE_PAINT);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Font) null, (Plot) categoryPlot0, false);
      int int0 = jFreeChart0.getBackgroundImageAlignment();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedDomainXYPlot0);
      Color color0 = (Color)jFreeChart0.getBorderPaint();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart("=", (Plot) thermometerPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.addLegend((LegendTitle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setTitle("8Ti%]EmbY3#k#l*X");
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, categoryAxis0, (ValueAxis) symbolAxis0, (CategoryItemRenderer) areaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      jFreeChart0.removeProgressListener(chartPanel0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Font) null, (Plot) categoryPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2099761789, 10, 0.0, 52.0, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      String[] stringArray0 = new String[1];
      SymbolAxis symbolAxis0 = new SymbolAxis("", stringArray0);
      AreaRenderer areaRenderer0 = new AreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, categoryAxis0, (ValueAxis) symbolAxis0, (CategoryItemRenderer) areaRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) categoryPlot0);
      jFreeChart0.getTextAntiAlias();
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      boolean boolean0 = jFreeChart0.isNotify();
      assertTrue(boolean0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertFalse(jFreeChart0.isBorderVisible());
  }
}
