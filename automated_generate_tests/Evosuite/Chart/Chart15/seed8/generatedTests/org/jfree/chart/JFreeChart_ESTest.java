/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 13 23:39:02 GMT 2017
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.Anchor;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.List;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.ChartChangeEvent;
import org.jfree.chart.event.ChartChangeListener;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.ChartProgressListener;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.TitleChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.title.Title;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JFreeChart_ESTest extends JFreeChart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("TextBlockAnchor.BOTTOM_LEFT");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("?uSgC9z>{IQ2b>g3Z", (Plot) combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true);
      jFreeChart0.addProgressListener(chartPanel0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500, 1.7976931348623157E308, 1.0E-8, chartRenderingInfo0);
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(500, bufferedImage0.getHeight());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1942), 1735, 1712, 1712, 10, 1463, false, false, false, true, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.handleClick((-2842), 168, chartRenderingInfo0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("TextBlockAnchor.BOTTOM_LEFT");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("?uSgC9z>{IQ2b>g3Z", (Plot) combinedDomainXYPlot0);
      jFreeChart0.setPadding(combinedDomainXYPlot0.DEFAULT_INSETS);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500, 1.7976931348623157E308, 1.0E-8, chartRenderingInfo0);
      assertEquals(2, bufferedImage0.getType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(500, bufferedImage0.getTileHeight());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) piePlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, (-7.3564), 90.0, chartRenderingInfo0);
      assertEquals(2, bufferedImage0.getType());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, bufferedImage0.getHeight());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, bufferedImage0.getWidth());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      jFreeChart0.setBackgroundImageAlpha(18);
      jFreeChart0.setBackgroundImageAlpha((-202.35803F));
      assertEquals((-202.35803F), jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("SansSerif", (Plot) combinedDomainXYPlot0);
      jFreeChart0.setBackgroundImageAlpha(10);
      float float0 = jFreeChart0.getBackgroundImageAlpha();
      assertEquals(10.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("K]x7", (Plot) compassPlot0);
      jFreeChart0.removeLegend();
      TextTitle textTitle0 = new TextTitle();
      jFreeChart0.addSubtitle(0, (Title) textTitle0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(633);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", spiderWebPlot0.DEFAULT_LABEL_FONT, (Plot) spiderWebPlot0, true);
      LegendTitle legendTitle0 = jFreeChart0.getLegend((-1012));
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(legendTitle0);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      ChartProgressEvent chartProgressEvent0 = new ChartProgressEvent((Object) "z'i<bF;hYYsm$", jFreeChart0, 500, 10);
      jFreeChart0.notifyListeners(chartProgressEvent0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      RingPlot ringPlot0 = new RingPlot();
      ChartChangeEvent chartChangeEvent0 = new ChartChangeEvent((Object) ringPlot0, jFreeChart0);
      jFreeChart0.notifyListeners(chartChangeEvent0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertFalse(jFreeChart0.isBorderVisible());
      
      jFreeChart0.setBorderVisible(true);
      boolean boolean0 = jFreeChart0.isBorderVisible();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(199, 199);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      XYPlot xYPlot0 = new XYPlot((XYDataset) dynamicTimeSeriesCollection0, (ValueAxis) numberAxis0, (ValueAxis) numberAxis0, (XYItemRenderer) deviationRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) xYPlot0);
      jFreeChart0.getXYPlot();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColumnArrangement", (Plot) combinedDomainXYPlot0);
      jFreeChart0.getTitle();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getSubtitles();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("TextBlockAnchor.BOTTOM_LEFT");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("?uSgC9z>{IQ2b>g3Z", (Plot) combinedDomainXYPlot0);
      jFreeChart0.getSubtitleCount();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 't' argument.", (Plot) combinedRangeXYPlot0);
      jFreeChart0.setPadding(numberAxis0.DEFAULT_TICK_LABEL_INSETS);
      jFreeChart0.getPadding();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getLegend();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("TextBlockAnchor.BOTTOM_LEFT");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("?uSgC9z>{IQ2b>g3Z", (Plot) combinedDomainXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.setWidth(200.0);
      jFreeChart0.getLegend();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("f", (Plot) combinedDomainCategoryPlot0);
      jFreeChart0.getCategoryPlot();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      Color color0 = (Color)jFreeChart0.getBackgroundPaint();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(color0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("K]x7", (Plot) compassPlot0);
      Anchor anchor0 = new Anchor("K]x7");
      // Undeclared exception!
      try { 
        jFreeChart0.setSubtitles(anchor0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.lowagie.text.Chunk cannot be cast to org.jfree.chart.title.Title
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.plotChanged((PlotChangeEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(".X", (Plot) xYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(159, 231, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.XYPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("svdZWyYQLwtx}2", piePlot3D0.DEFAULT_LABEL_FONT, (Plot) piePlot3D0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 1182575142, (ChartRenderingInfo) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 0, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (10) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("TextBlockAnchor.BOTTOM_LEFT");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("?uSgC9z>{IQ2b>g3Z", (Plot) combinedDomainXYPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2169, (-2013), 10, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferByte", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-35), (-35), 10, (ChartRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-35) and height (-35) must be > 0
         //
         verifyException("java.awt.image.SampleModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("Cannot handle box sizes higher than 2^32", (Plot) piePlot3D0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 10, 0, 1523, 100, 15, false, false, true, false, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(245, 200, 2, chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(2146358132, 680, (double) 200, 894.52, chartRenderingInfo0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(15, (-1816), 2.0, (-1122.8), chartRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (15) and height (-1816) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("svdZWyYQLwtx}2", piePlot3D0.DEFAULT_LABEL_FONT, (Plot) piePlot3D0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(4023, 572, 2212.0, (double) 1.0F, (ChartRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 2676);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 2145046095);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.DataBufferInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((-1201), 1952257861);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (-1201) and height (1952257861) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) piePlot3D0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) thermometerPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.addLegend((LegendTitle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart((Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1602.120671), "E@");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      jFreeChart0.addProgressListener((ChartProgressListener) null);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, false);
      jFreeChart0.addChangeListener(chartPanel0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1942), 1735, 1712, 1712, 10, 1463, false, false, false, true, false, false);
      jFreeChart0.addChangeListener(chartPanel0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("SansSerif", (Plot) combinedDomainXYPlot0);
      jFreeChart0.setNotify(true);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(12314, 12314, (Number) (-1166.9834929872543));
      WaferMapPlot waferMapPlot0 = new WaferMapPlot(waferMapDataset0, (WaferMapRenderer) null);
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) waferMapPlot0);
      assertTrue(jFreeChart0.isNotify());
      
      jFreeChart0.setNotify(false);
      assertFalse(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedDomainXYPlot0);
      TextTitle textTitle0 = new TextTitle();
      jFreeChart0.addSubtitle((Title) textTitle0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1668051567);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("\"3Wv9E92", (Plot) thermometerPlot0);
      jFreeChart0.getSubtitle(0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1668051567);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("\"3Wv9E92", (Plot) thermometerPlot0);
      jFreeChart0.getLegend(0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedDomainXYPlot0);
      TextTitle textTitle0 = new TextTitle();
      jFreeChart0.setTitle(textTitle0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Font font0 = MeterPlot.DEFAULT_LABEL_FONT;
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, font0, (Plot) multiplePiePlot0, true);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Font font0 = LegendTitle.DEFAULT_ITEM_FONT;
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("", font0, (Plot) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.getSubtitleCount();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedRangeXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.setTextAntiAlias((Object) combinedRangeXYPlot0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.jfree.chart.plot.CombinedRangeXYPlot@3d incompatible with Text-specific antialiasing enable key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeCategoryPlot0);
      TextTitle textTitle0 = new TextTitle("|!4KXS5{ !_IdY,noA");
      TitleChangeEvent titleChangeEvent0 = new TitleChangeEvent((Title) textTitle0);
      jFreeChart0.titleChanged(titleChangeEvent0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent((Plot) multiplePiePlot0);
      jFreeChart0.plotChanged(plotChangeEvent0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      CompositeTitle compositeTitle0 = new CompositeTitle();
      jFreeChart0.removeSubtitle(compositeTitle0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot3D0);
      jFreeChart0.fireChartChanged();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeCategoryPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertFalse(jFreeChart1.isBorderVisible());
      assertNotSame(jFreeChart1, jFreeChart0);
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      assertTrue(jFreeChart1.isNotify());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColumnArrangement", (Plot) combinedDomainXYPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      
      jFreeChart1.setBackgroundPaint(combinedDomainXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      boolean boolean0 = jFreeChart1.equals(jFreeChart0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColumnArrangement", (Plot) combinedDomainXYPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      
      combinedDomainXYPlot0.setOutlinePaint(jFreeChart1.DEFAULT_BACKGROUND_PAINT);
      boolean boolean0 = jFreeChart1.equals(jFreeChart0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColumnArrangement", (Plot) combinedDomainXYPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertEquals(1, jFreeChart0.getSubtitleCount());
      
      jFreeChart0.clearSubtitles();
      boolean boolean0 = jFreeChart1.equals(jFreeChart0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColumnArrangement", (Plot) combinedDomainXYPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      boolean boolean0 = jFreeChart1.equals(jFreeChart0);
      assertTrue(boolean0);
      assertTrue(jFreeChart1.isNotify());
      assertNotSame(jFreeChart1, jFreeChart0);
      assertFalse(jFreeChart1.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColumnArrangement", (Plot) combinedDomainXYPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      
      jFreeChart1.setBorderStroke(combinedDomainXYPlot0.DEFAULT_OUTLINE_STROKE);
      boolean boolean0 = jFreeChart1.equals(jFreeChart0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColumnArrangement", (Plot) combinedDomainXYPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      
      jFreeChart1.setTextAntiAlias(false);
      boolean boolean0 = jFreeChart1.equals(jFreeChart0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("K]x7", (Plot) compassPlot0);
      boolean boolean0 = jFreeChart0.equals(compassPlot0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("OFM8|r7tGQ");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      jFreeChart0.removeProgressListener((ChartProgressListener) null);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("Cannot handle box sizes higher than 2^32", (Plot) piePlot3D0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 0, 10, 0, 1523, 100, 15, false, false, true, false, false, false);
      jFreeChart0.removeProgressListener(chartPanel0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColumnArrangement", (Plot) combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false, false, true, true, false);
      jFreeChart0.setBackgroundImageAlignment((-250));
      assertEquals(-250, jFreeChart0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 1443, 1666, 2719, (-1413), (-1413), 3166, true, false, false, false, false, false);
      jFreeChart0.removeChangeListener(chartPanel0);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultMultiValueCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.removeChangeListener((ChartChangeListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'listener' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, false);
      jFreeChart0.removeChangeListener(chartPanel0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1942), 1735, 1712, 1712, 10, 1463, false, false, false, true, false, false);
      ChartPanel chartPanel1 = new ChartPanel(jFreeChart0);
      jFreeChart0.setBackgroundPaint(combinedDomainXYPlot0.DEFAULT_OUTLINE_PAINT);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) meterPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.addChangeListener((ChartChangeListener) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'listener' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) piePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      // Undeclared exception!
      try { 
        jFreeChart0.drawTitle((Title) null, (Graphics2D) null, defaultCaret0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 't' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-259), (-259), 10, 10, 0, 0, true, true, true, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 10, chartRenderingInfo0);
      assertEquals(10, bufferedImage0.getHeight());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(10, bufferedImage0.getType());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundImageAlpha(0.5F);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      jFreeChart0.setBackgroundImageAlignment(2705);
      jFreeChart0.setBackgroundImageAlignment(1);
      assertEquals(1, jFreeChart0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      jFreeChart0.setBackgroundImageAlignment(15);
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.event.ChartChangeListener", (Plot) piePlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 0.0, 90.0, chartRenderingInfo0);
      jFreeChart0.setBackgroundImage(bufferedImage0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(10, bufferedImage0.getWidth());
      
      BufferedImage bufferedImage1 = jFreeChart0.createBufferedImage(10, 105);
      assertEquals(105, bufferedImage1.getHeight());
      assertEquals(2, bufferedImage1.getType());
      assertEquals(10, bufferedImage1.getTileWidth());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColumnArrangement", (Plot) combinedDomainXYPlot0);
      jFreeChart0.setBackgroundImage((Image) null);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) categoryPlot0);
      PolarPlot polarPlot0 = new PolarPlot();
      jFreeChart0.setBackgroundPaint(categoryPlot0.DEFAULT_OUTLINE_PAINT);
      jFreeChart0.setBackgroundPaint(polarPlot0.DEFAULT_GRIDLINE_PAINT);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      jFreeChart0.setBackgroundPaint(multiplePiePlot0.DEFAULT_BACKGROUND_PAINT);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2162, 10);
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2162, bufferedImage0.getTileWidth());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("svdZWyYQLwtx}2", piePlot3D0.DEFAULT_LABEL_FONT, (Plot) piePlot3D0, true);
      jFreeChart0.setTextAntiAlias(true);
      jFreeChart0.getTextAntiAlias();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("K]x7", (Plot) compassPlot0);
      jFreeChart0.setAntiAlias(false);
      jFreeChart0.setAntiAlias(false);
      assertFalse(jFreeChart0.getAntiAlias());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      jFreeChart0.setAntiAlias(true);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.getAntiAlias());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      LookupPaintScale lookupPaintScale0 = (LookupPaintScale)xYBlockRenderer0.getPaintScale();
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) lookupPaintScale0, (ValueAxis) periodAxis0);
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle(2589, (Title) paintScaleLegend0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'index' argument is out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("K]x7", (Plot) compassPlot0);
      TextTitle textTitle0 = new TextTitle();
      jFreeChart0.addSubtitle(0, (Title) textTitle0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      LookupPaintScale lookupPaintScale0 = (LookupPaintScale)xYBlockRenderer0.getPaintScale();
      PeriodAxis periodAxis0 = new PeriodAxis("ZOOM_RESET_DOMAIN");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) lookupPaintScale0, (ValueAxis) periodAxis0);
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((-135), (Title) paintScaleLegend0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'index' argument is out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (String) null);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.addSubtitle((Title) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'subtitle' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("Index ", (Plot) compassPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColumnArrangement", (Plot) combinedDomainXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getSubtitle((-1273));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index out of range.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("TextBlockAnchor.BOTTOM_LEFT");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("?uSgC9z>{IQ2b>g3Z", (Plot) combinedDomainXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.setSubtitles((List) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'subtitles' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend(47);
      assertFalse(jFreeChart0.isBorderVisible());
      assertNull(legendTitle0);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      jFreeChart0.setTitle("z'i<bF;hYYsm$");
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) piePlot0);
      String[] stringArray0 = new String[9];
      jFreeChart0.setTitle(stringArray0[5]);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("K]x7", (Plot) compassPlot0);
      jFreeChart0.setTitle((TextTitle) null);
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      // Undeclared exception!
      try { 
        jFreeChart0.setRenderingHints((RenderingHints) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // RenderingHints given are null
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("SansSerif", (Plot) combinedDomainXYPlot0);
      RenderingHints renderingHints0 = jFreeChart0.getRenderingHints();
      jFreeChart0.setRenderingHints(renderingHints0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Null 'padding' arguent", (Font) null, (Plot) fastScatterPlot0, false);
      boolean boolean0 = jFreeChart0.isBorderVisible();
      assertFalse(boolean0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      JFreeChart jFreeChart0 = new JFreeChart("eJ4yP", font0, (Plot) spiderWebPlot0, false);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(929, 10, chartRenderingInfo0);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(929, bufferedImage0.getWidth());
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(10, bufferedImage0.getTileHeight());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JFreeChart jFreeChart0 = null;
      try {
        jFreeChart0 = new JFreeChart("Null 'origin' argument.", (Plot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("K]x7", (Plot) compassPlot0);
      jFreeChart0.getPadding();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertFalse(jFreeChart0.isBorderVisible());
      
      jFreeChart0.setBorderVisible(true);
      jFreeChart0.createBufferedImage(10, 2);
      assertTrue(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColumnArrangement", (Plot) combinedDomainXYPlot0);
      JFreeChart jFreeChart1 = (JFreeChart)jFreeChart0.clone();
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
      
      jFreeChart1.setTitle("");
      boolean boolean0 = jFreeChart1.equals(jFreeChart0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainCategoryPlot0);
      jFreeChart0.getTitle();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1024.093), (-670.09), (-1024.093), (-1024.093));
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("SansSerif", (Plot) combinedDomainXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CompassPlot compassPlot0 = new CompassPlot();
      JFreeChart jFreeChart0 = new JFreeChart("K]x7", (Plot) compassPlot0);
      jFreeChart0.getBackgroundPaint();
      assertTrue(jFreeChart0.isNotify());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BasicStroke basicStroke0 = (BasicStroke)jFreeChart0.getBorderStroke();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeCategoryPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getXYPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.CombinedRangeCategoryPlot cannot be cast to org.jfree.chart.plot.XYPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColumnArrangement", (Plot) combinedDomainXYPlot0);
      List list0 = jFreeChart0.getSubtitles();
      jFreeChart0.setSubtitles(list0);
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedDomainXYPlot0);
      // Undeclared exception!
      try { 
        jFreeChart0.getCategoryPlot();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.plot.CombinedDomainXYPlot cannot be cast to org.jfree.chart.plot.CategoryPlot
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JFreeChart.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColumnArrangement", (Plot) combinedDomainXYPlot0);
      jFreeChart0.getBackgroundImage();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart("svdZWyYQLwtx}2", piePlot3D0.DEFAULT_LABEL_FONT, (Plot) piePlot3D0, true);
      jFreeChart0.getAntiAlias();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) piePlot0);
      jFreeChart0.setBorderPaint(piePlot0.DEFAULT_LABEL_BACKGROUND_PAINT);
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("Null 'subtitles' argument.", (Plot) combinedDomainXYPlot0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) 10, (double) 0.0F, (-144.4), 3.0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      try { 
        jFreeChart0.draw((Graphics2D) null, (Rectangle2D) rectangle2D_Double0, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.JFreeChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.event.ChartChangeListener", (Plot) piePlot0);
      int int0 = jFreeChart0.getBackgroundImageAlignment();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("f", (Plot) combinedDomainCategoryPlot0);
      Color color0 = (Color)jFreeChart0.getBorderPaint();
      assertTrue(jFreeChart0.isNotify());
      assertEquals(0, color0.getRed());
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("TextBlockAnchor.BOTTOM_LEFT");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("?uSgC9z>{IQ2b>g3Z", (Plot) combinedDomainXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertNotNull(legendTitle0);
      
      jFreeChart0.addLegend(legendTitle0);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("org.jfree.chart.block.ColumnArrangement", (Plot) combinedDomainXYPlot0);
      jFreeChart0.getPlot();
      assertFalse(jFreeChart0.isBorderVisible());
      assertTrue(jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedDomainXYPlot0);
      jFreeChart0.getTextAntiAlias();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'padding' arguent");
      NumberAxis numberAxis0 = new NumberAxis("Null 'padding' arguent");
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultIntervalCategoryDataset0, categoryAxis0, (ValueAxis) numberAxis0, (CategoryItemRenderer) lineRenderer3D0);
      JFreeChart jFreeChart0 = new JFreeChart(">\"ck", (Plot) categoryPlot0);
      boolean boolean0 = jFreeChart0.isNotify();
      assertFalse(jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertTrue(boolean0);
  }
}
