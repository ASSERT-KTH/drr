/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 23:21:50 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneOffset;
import java.time.chrono.JapaneseDate;
import java.util.Date;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "UPPER_LEFT_CORNER");
      timePeriodValues0.add((TimePeriod) minute0, (Number) 0);
      timePeriodValues0.add((TimePeriod) minute0, 188.5);
      timePeriodValues0.clone();
      assertEquals(2, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "", "");
      Millisecond millisecond0 = new Millisecond();
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 999);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(3083, (-1));
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 59);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(0, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 189, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      Second second1 = (Second)second0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second1, "MM", "");
      timePeriodValues0.add((TimePeriod) second0, (-2200.981387351273));
      timePeriodValues0.add((TimePeriod) second1, (Number) 59);
      timePeriodValues0.add((TimePeriod) second0, (Number) (byte)10);
      assertEquals(1, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (double) 4);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.update(0, 4);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 182, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "MM", "");
      timePeriodValues0.add((TimePeriod) second0, (Number) 59);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (double) 4);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) quarter0, (-1831.86484516));
      timePeriodValues0.getValue(1);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (double) 4);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) quarter0, (-1831.86484516));
      timePeriodValues0.getTimePeriod(1);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) 6, (String) null, (String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(string0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Month month0 = new Month();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) month0, "Value", "Value");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", string0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 59);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (double) 4);
      timePeriodValues0.add(timePeriodValue0);
      Quarter quarter1 = (Quarter)quarter0.next();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-329), 4, 2717, 903, 1, 1);
      quarter1.peg(mockGregorianCalendar0);
      timePeriodValues0.add((TimePeriod) quarter1, (-1831.86484516));
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 4);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 182, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      Second second1 = (Second)second0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second1, "MM", "");
      timePeriodValues0.add((TimePeriod) second1, (Number) 59);
      timePeriodValues0.add((TimePeriod) second0, (Number) (byte)10);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 4);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 182, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      Second second1 = (Second)second0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second1, "MM", "");
      timePeriodValues0.add((TimePeriod) second1, (Number) 59);
      timePeriodValues0.add((TimePeriod) second0, (Number) (byte)10);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "Range", "Range");
      timePeriodValues0.add((TimePeriod) week0, (Number) 53);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 182, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "MM", "");
      timePeriodValues0.add((TimePeriod) second0, (Number) (byte)10);
      mockDate0.setTime((-18));
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 59);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "", "");
      Millisecond millisecond0 = new Millisecond();
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 999);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 182, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "MM", "");
      timePeriodValues0.add((TimePeriod) second0, (Number) (byte)10);
      mockDate0.setTime((-18));
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "", "");
      Millisecond millisecond0 = new Millisecond();
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 999);
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0, (String) null, (String) null);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(string0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) simpleTimePeriod0, "", "");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("", string0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "", "");
      Millisecond millisecond0 = new Millisecond();
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 999);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0, "", "");
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-1468), (-1430));
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals("", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals("", timePeriodValues1.getDomainDescription());
      assertNotSame(timePeriodValues1, timePeriodValues0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.update((-1018), 999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue(42);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 42, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (-328.56578202));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) timeSeriesDataItem0, "", (String) null);
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "m^OTOo2FkEZPtA", "m^OTOo2FkEZPtA");
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem((-84));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 182, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "MM", "");
      // Undeclared exception!
      try { 
        timePeriodValues0.delete((-18), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) japaneseDate0, "", "");
      MockDate mockDate0 = new MockDate((-1501L));
      Month month0 = new Month((Date) mockDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) month0, (double) (-1501L));
      timePeriodValues0.add(timePeriodValue0);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(37, 37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 4);
      timePeriodValues0.add(timePeriodValue0);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy((-3870), 501);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) zoneOffset0, "uE 7+5mz>2rR%eKD", "TaskSeriesCollection.remove(): index outside valid range.");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) 1380401696);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, "bu/G", "Value");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (double) (byte)3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, "Series ", "WPLk[@XFA`|~fcz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "", "");
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (-328.56578202));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) timeSeriesDataItem0, "", (String) null);
      timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 189, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "MM", "");
      timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("MM", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2745L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2426), "DTM~*U<1M)~oV");
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0, (String) null, "DTM~*U<1M)~oV");
      timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 59);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "", "");
      Millisecond millisecond0 = new Millisecond();
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 999);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(3083, (-1));
      timePeriodValues1.add((TimePeriod) millisecond0, (double) 999);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "]t^S@jE4,y?");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(11, 11);
      timePeriodValues1.setRangeDescription("|-b");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals("|-b", timePeriodValues1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "]t^S@jE4,y?");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(11, 11);
      timePeriodValues0.setDomainDescription("]");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals("]", timePeriodValues0.getDomainDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) "UPPER_LEFT_CORNER", "UPPER_LEFT_CORNER", "UPPER_LEFT_CORNER");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals("UPPER_LEFT_CORNER", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertFalse(boolean0);
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals("UPPER_LEFT_CORNER", timePeriodValues1.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0);
      boolean boolean0 = timePeriodValues0.equals(minute0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertFalse(boolean0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "]t^S@jE4,y?");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertTrue(boolean0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "]t^S@jE4,y?");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(11, 11);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timePeriodValues1.add((TimePeriod) fixedMillisecond0, (Number) 5);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(0, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 59);
      timePeriodValues0.delete(0, (-1690));
      assertEquals(1, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (double) 4);
      timePeriodValues0.add(timePeriodValue0);
      Quarter quarter1 = (Quarter)quarter0.next();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-329), 4, 2717, 903, 1, 1);
      quarter1.peg(mockGregorianCalendar0);
      timePeriodValues0.add((TimePeriod) quarter1, (double) 4);
      timePeriodValues0.createCopy(903, 1);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriodValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
         verifyException("org.jfree.data.time.TimePeriodValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 182, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "MM", "");
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("MM", timePeriodValues0.getDomainDescription());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timePeriodValues0.update(0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 182, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "MM", "");
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("MM", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) (-1.0), "", "");
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod((-86));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals((-1), int0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 182, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "MM", "");
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("MM", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 182, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "MM", "");
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("MM", timePeriodValues0.getDomainDescription());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 182, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "MM", "");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("MM", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 182, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "MM", "");
      timePeriodValues0.add((TimePeriod) second0, (Number) (byte)10);
      mockDate0.setTime((-18));
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      timePeriodValues0.createCopy(59, (-698));
      assertEquals(2, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "]t^S@jE4,y?");
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue((-95));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0);
      timePeriodValues0.getItemCount();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2745L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2426), "DTM~*U<1M)~oV");
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0, (String) null, "DTM~*U<1M)~oV");
      timePeriodValues0.setRangeDescription("DTM~*U<1M)~oV");
      assertEquals("DTM~*U<1M)~oV", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 182, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "MM", "");
      assertEquals("MM", timePeriodValues0.getDomainDescription());
      
      timePeriodValues0.setDomainDescription("");
      assertEquals("", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "", "");
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 182, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "MM");
      Second second0 = new Second((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "MM", "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("", string0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("MM", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }
}
