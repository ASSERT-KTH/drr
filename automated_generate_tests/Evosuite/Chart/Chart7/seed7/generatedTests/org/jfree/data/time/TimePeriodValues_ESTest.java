/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 22:54:41 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.plaf.synth.SynthSpinnerUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "Invalid bounds");
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      MockDate mockDate0 = new MockDate((long) (-2987));
      Month month0 = new Month((Date) mockDate0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) month0, (Number) (byte)9);
      timePeriodValues0.add(timePeriodValue0);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-2118.2838));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "rcl9Og>", "$#R^\"Kh`");
      MockDate mockDate0 = new MockDate((long) (-4368));
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour((-4368), day0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(0, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) mockDate0);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(40, 40);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 40, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-2118.2838));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "rcl9Og>", "$#R^\"Kh`");
      MockDate mockDate0 = new MockDate((long) (-4368));
      Day day0 = new Day((Date) mockDate0);
      timePeriodValues0.add((TimePeriod) day0, (Number) null);
      Hour hour0 = new Hour((-4368), day0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 23);
      assertEquals(2, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Week week0 = new Week((-2601), (-2601));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      timePeriodValues0.add((TimePeriod) week0, (double) 1);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-912L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "Quarter outside valid range.", "Quarter outside valid range.");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) (-912L));
      timePeriodValues0.update(0, 8);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "Invalid bounds");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertTrue(boolean0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-2118.2838));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "rcl9Og>", "$#R^\"Kh`");
      MockDate mockDate0 = new MockDate((long) (-4368));
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour((-4368), day0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1629);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "", "");
      Second second0 = new Second();
      timePeriodValues0.add((TimePeriod) second0, (double) 3);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Month month0 = new Month();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) month0);
      timePeriodValues0.add((TimePeriod) month0, (Number) null);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 68, (Number) 1668441193);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "", (String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertNull(string0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0, (String) null, "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertNotNull(string0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", string0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-912L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "Quarter outside valid range.", "Quarter outside valid range.");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) (-912L));
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-2118.2838));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "rcl9Og>", "$#R^\"Kh`");
      MockDate mockDate0 = new MockDate((long) (-4368));
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour((-4368), day0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      timePeriodValues0.add((TimePeriod) day0, (Number) 23);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(1, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3012, 4338, 3012, (-8), 3012);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      Second second0 = millisecond0.getSecond();
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-2118.2838));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "rcl9Og>", "$#R^\"Kh`");
      MockDate mockDate0 = new MockDate((long) (-4368));
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour((-4368), day0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      timePeriodValues0.add((TimePeriod) day0, (Number) 23);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(1, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Month month0 = new Month();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) month0);
      timePeriodValues0.add((TimePeriod) month0, (Number) null);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "rcl9Og>", "$#R^\"Kh`");
      MockDate mockDate0 = new MockDate((long) (-4368));
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour((-4368), day0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      timePeriodValues0.add((TimePeriod) day0, (Number) 23);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-912L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "Quarter outside valid range.", "Quarter outside valid range.");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) (-912L));
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3012, 4338, 3012, 0, 3012);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      Second second0 = millisecond0.getSecond();
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (double) 0);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1030), (-1030), (-1030), (-1030), (-1030));
      Month month0 = new Month((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) month0);
      timePeriodValues0.add((TimePeriod) month0, (Number) 2);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3012, 4338, 3012, (-8), 3012);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      Second second0 = millisecond0.getSecond();
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (double) (-8));
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1629);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "", "");
      Second second0 = new Second();
      timePeriodValues0.add((TimePeriod) second0, (double) 3);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "Invalid bounds");
      Year year0 = new Year();
      timePeriodValues0.add((TimePeriod) year0, 0.0);
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0, (String) null, "");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 68, (Number) 1668441193);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "", (String) null);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3012, 4338, 3012, (-8), 3012);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      Second second0 = millisecond0.getSecond();
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      TimePeriodValue timePeriodValue0 = timePeriodValues0.getDataItem(0);
      timePeriodValues0.add(timePeriodValue0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3017, 3017, 3017, 0, 3017);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(999, 0);
      assertEquals("DomainOrder.DESCENDING", timePeriodValues1.getRangeDescription());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals("DomainOrder.DESCENDING", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-2118.2838));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "rcl9Og>", "$#R^\"Kh`");
      MockDate mockDate0 = new MockDate((long) (-4368));
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour((-4368), day0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      timePeriodValues0.add((TimePeriod) day0, (Number) 23);
      timePeriodValues0.createCopy(23, (-1516));
      assertEquals(1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3012, 4338, 3012, 0, 3012);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      Second second0 = millisecond0.getSecond();
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (double) 0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.createCopy(2216, 0);
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-9223372036854775808L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "<Ty!&g 3'_e", "Time");
      // Undeclared exception!
      try { 
        timePeriodValues0.update((-2433), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-2118.2838));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "rcl9Og>", "$#R^\"Kh`");
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      timePeriodValues0.addPropertyChangeListener(synthSpinnerUI0);
      // Undeclared exception!
      try { 
        timePeriodValues0.setDomainDescription("$#R^\"Kh`");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimePeriodValues cannot be cast to javax.swing.JSpinner
         //
         verifyException("javax.swing.plaf.synth.SynthSpinnerUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-912L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "Quarter outside valid range.", "Quarter outside valid range.");
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod((-736));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1030), (-1030), (-1030), (-1030), (-1030));
      Month month0 = new Month((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) month0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0, "q+d!i", "jO");
      // Undeclared exception!
      try { 
        timePeriodValues0.delete((-1), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-912L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "Quarter outside valid range.", "Quarter outside valid range.");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) (-912L));
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy((-363), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1733843290, (Number) null);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "J36L~k+NY%<ez", "J36L~k+NY%<ez");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "XXX", "K\"m;/!9#Wh+;H]b", "XXX");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, "Range", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-912L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "Quarter outside valid range.", "Quarter outside valid range.");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) (-912L));
      timePeriodValues0.createCopy(0, 0);
      assertEquals(1, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "ID@h)=@PNN");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", string0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Date date0 = Date.from(instant0);
      Hour hour0 = new Hour(date0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-9223372036854775808L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "<Ty!&g 3'_e", "Time");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("<Ty!&g 3'_e", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3012, 4338, 3012, 0, 3012);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      timePeriodValues0.getItemCount();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("DomainOrder.DESCENDING", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("DomainOrder.DESCENDING", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) 68, (Number) 1668441193);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "", (String) null);
      timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-2118.2838));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "rcl9Og>", "$#R^\"Kh`");
      timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("$#R^\"Kh`", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("rcl9Og>", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "Invalid bounds");
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("Invalid bounds");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) minute0, (Number) 59);
      timePeriodValues0.add(timePeriodValue0);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "Invalid bounds");
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      Month month0 = new Month();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) month0, 3155.7);
      timePeriodValues1.add(timePeriodValue0);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "Invalid bounds");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-2970), 948);
      timePeriodValues1.setRangeDescription("Invalid bounds");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals("Invalid bounds", timePeriodValues1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "Invalid bounds");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-2970), 948);
      timePeriodValues1.setDomainDescription("Invalid bounds");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals("Invalid bounds", timePeriodValues1.getDomainDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "Invalid bounds");
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      timePeriodValues0.setDescription("Invalid bounds");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3012, 4338, 3012, (-8), 3012);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      boolean boolean0 = timePeriodValues0.equals(millisecond0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("DomainOrder.DESCENDING", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertFalse(boolean0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("DomainOrder.DESCENDING", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-2118.2838));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "rcl9Og>", "$#R^\"Kh`");
      MockDate mockDate0 = new MockDate((long) (-4368));
      Day day0 = new Day((Date) mockDate0);
      timePeriodValues0.add((TimePeriod) day0, (Number) null);
      timePeriodValues0.delete(0, (-1516));
      assertEquals(1, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-2118.2838));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "rcl9Og>", "$#R^\"Kh`");
      MockDate mockDate0 = new MockDate((long) (-4368));
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour((-4368), day0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 0);
      timePeriodValues0.add((TimePeriod) day0, (Number) 23);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("<|%(hhfpf+3");
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriodValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
         verifyException("org.jfree.data.time.TimePeriodValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3012, 4338, 3012, (-8), 3012);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("DomainOrder.DESCENDING", timePeriodValues0.getRangeDescription());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("DomainOrder.DESCENDING", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-912L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "Quarter outside valid range.", "Quarter outside valid range.");
      // Undeclared exception!
      try { 
        timePeriodValues0.update(0, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3012, 4338, 3012, (-8), 3012);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("DomainOrder.DESCENDING", timePeriodValues0.getRangeDescription());
      assertEquals("DomainOrder.DESCENDING", timePeriodValues0.getDomainDescription());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3012, 4338, 3012, (-8), 3012);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(1555);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1555, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-2118.2838));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "rcl9Og>", "$#R^\"Kh`");
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), int0);
      assertEquals("rcl9Og>", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("$#R^\"Kh`", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-912L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "Quarter outside valid range.", "Quarter outside valid range.");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) (-912L));
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3012, 4338, 3012, 0, 3012);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals((-1), int0);
      assertEquals("DomainOrder.DESCENDING", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("DomainOrder.DESCENDING", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-2118.2838));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "rcl9Og>", "$#R^\"Kh`");
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
      assertEquals("$#R^\"Kh`", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("rcl9Og>", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-2118.2838));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, "rcl9Og>", "$#R^\"Kh`");
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3012, 4338, 3012, (-8), 3012);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      Second second0 = millisecond0.getSecond();
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) millisecond0, (double) (-8));
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3012, 4338, 3012, (-8), 3012);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      timePeriodValues0.setRangeDescription("DomainOrder.DESCENDING");
      assertEquals("DomainOrder.DESCENDING", timePeriodValues0.getRangeDescription());
      assertEquals("DomainOrder.DESCENDING", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3012, 4338, 3012, (-8), 3012);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0, "DomainOrder.DESCENDING", "DomainOrder.DESCENDING");
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("DomainOrder.DESCENDING", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("DomainOrder.DESCENDING", timePeriodValues0.getRangeDescription());
  }
}
