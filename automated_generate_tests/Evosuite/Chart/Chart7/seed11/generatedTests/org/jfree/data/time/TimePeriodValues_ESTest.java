/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 22:18:12 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.SpinnerNumberModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) second0, (Number) 0);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      timePeriodValues0.add(timePeriodValue0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      timePeriodValues0.delete(0, 0);
      assertEquals(0, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete((-1428), (-1428));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Week week0 = new Week(1954, 1954);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      timePeriodValues0.add((TimePeriod) week0, (double) 53);
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "z%}J.je]}R91?c< ~", "ERROR : Relative To String");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 24);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 1482250784);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      timePeriodValues0.update(0, (byte) (-1));
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-975), (-975), (-975), (-975), (-975));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0, "", "");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertTrue(boolean0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) second0, (Number) 0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "z%}J.je]}R91?c< ~", "ERROR : Relative To String");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 24);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) ".t1^lC)j", ".t1^lC)j", "C4");
      assertEquals("C4", timePeriodValues0.getRangeDescription());
      
      timePeriodValues0.setRangeDescription((String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertNull(string0);
      assertEquals(".t1^lC)j", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      timePeriodValues0.setRangeDescription("");
      timePeriodValues0.getRangeDescription();
      assertEquals("", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) second0, (Number) 0);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "z%}J.je]}R91?c< ~", "ERROR : Relative To String");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 24);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      timePeriodValues0.add((TimePeriod) second0, (Number) 4);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "z%}J.je]}R91?c< ~", "ERROR : Relative To String");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 24);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) ".t1^lC)j", ".t1^lC)j", "C4");
      Quarter quarter0 = new Quarter();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 4);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "z%}J.je]}R91?c< ~", "ERROR : Relative To String");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 24);
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Week week0 = new Week(2682, 1718);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", string0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(7, 7, 7);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", "");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals("", string0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) ".t1^lC)j", ".t1^lC)j", "C4");
      Quarter quarter0 = new Quarter();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 4);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, (String) null, "q");
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy((-1439), 1024);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals("q", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      timePeriodValues0.add((TimePeriod) second0, (Number) 0);
      timePeriodValues0.createCopy(0, 0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel((-573), (-573), (-573), (-1669));
      Comparable comparable0 = spinnerNumberModel0.getMinimum();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(comparable0);
      // Undeclared exception!
      try { 
        timePeriodValues0.update((-1669), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Day day0 = new Day();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0, "", (String) null);
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "org.jfree.data.xy.YIntervalSeries", "Sq7;");
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) ".t1^lC)j", ".t1^lC)j", "C4");
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem((-533));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "");
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(6, 24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "z%}J.je]}R91?c< ~", "ERROR : Relative To String");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 24);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(0, 933);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-476), 59, (-476));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, (double) 59, (double) (-476), (double) 59, (-417.342), 0.0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) oHLCDataItem0, "tSpSd", "");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.5, 1.5);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0, (String) null, "");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, 1.5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, "", "org.jfree.data.time.TimePeriodValuesCollection");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "z%}J.je]}R91?c< ~", "ERROR : Relative To String");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 24);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy((-2026), (-2026));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, (String) null, (String) null);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "bidi level");
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "z%}J.je]}R91?c< ~", "ERROR : Relative To String");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals("ERROR : Relative To String", string0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("z%}J.je]}R91?c< ~", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      timePeriodValues0.getItemCount();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0, "<.:J", (String) null);
      timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("<.:J", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, (String) null, "q");
      timePeriodValues0.hashCode();
      assertEquals("q", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-975), 211, 243, (-975), (-975));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0, "", "");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(211, (-975));
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 4);
      timePeriodValues1.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 1);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(1, timePeriodValues1.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-975), 211, 243, (-975), (-975));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0, "", "");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(1541, 1670);
      timePeriodValues1.setRangeDescription("p9OZO@Y<G)O>V$7");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("p9OZO@Y<G)O>V$7", timePeriodValues1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel((-573), (-573), (-573), (-1669));
      Comparable comparable0 = spinnerNumberModel0.getMinimum();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(comparable0);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) comparable0, "Week ", "");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals("Week ", timePeriodValues1.getDomainDescription());
      assertFalse(boolean0);
      assertEquals("", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Week week0 = new Week(2682, 1718);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(29, 2682);
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      timePeriodValues1.setDescription("lxBZV.8S");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertFalse(boolean0);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      boolean boolean0 = timePeriodValues0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-975), 211, 243, (-975), (-975));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0, "", "");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(211, (-975));
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (Number) 4);
      timePeriodValues1.add(timePeriodValue0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(0, timePeriodValues1.getMaxMiddleIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriodValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
         verifyException("org.jfree.data.time.TimePeriodValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals((-1), int0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      // Undeclared exception!
      try { 
        timePeriodValues0.update(0, (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "z%}J.je]}R91?c< ~", "ERROR : Relative To String");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 24);
      timePeriodValues0.delete(0, (-1));
      assertEquals(1, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) second0, (Number) 0);
      timePeriodValues0.add(timePeriodValue0);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "z%}J.je]}R91?c< ~", "ERROR : Relative To String");
      timePeriodValues0.setDomainDescription("z%}J.je]}R91?c< ~");
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("z%}J.je]}R91?c< ~", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("ERROR : Relative To String", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "z%}J.je]}R91?c< ~", "ERROR : Relative To String");
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals("z%}J.je]}R91?c< ~", timePeriodValues0.getDomainDescription());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("ERROR : Relative To String", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
  }
}
