/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 00:38:36 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Year year0 = new Year(4130);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) year0, (Number) 1);
      timePeriodValues0.add(timePeriodValue0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Year year0 = new Year(4130);
      Year year1 = (Year)year0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year1, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      timePeriodValues0.add((TimePeriod) year0, (double) 4130);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4130, 4130, 4130, (-491), 4130, (-491));
      year1.peg(mockGregorianCalendar0);
      timePeriodValues0.add((TimePeriod) year1, (Number) 0);
      timePeriodValues0.add((TimePeriod) year0, (double) 0L);
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Year year0 = new Year(4130);
      Year year1 = (Year)year0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year1, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      timePeriodValues0.add((TimePeriod) year0, (double) 4130);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4130, 4130, 4130, 4130, 4130, 4130);
      mockGregorianCalendar0.getWeekYear();
      year1.peg(mockGregorianCalendar0);
      timePeriodValues0.add((TimePeriod) year1, (Number) 0);
      timePeriodValues0.add((TimePeriod) year0, (double) 79395638330000L);
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      timePeriodValues0.update(0, 59);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Year year0 = new Year(4130);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("@b^A|z-vC^f$W8^i", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertTrue(boolean0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("@b^A|z-vC^f$W8^i", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Month month0 = new Month();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) month0, (String) null, (String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(string0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "F4=n8O.90_?\u0006L{Zq", "F4=n8O.90_?\u0006L{Zq");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals("F4=n8O.90_?\u0006L{Zq", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("F4=n8O.90_?\u0006L{Zq", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "F4=n8O.90_?\u0006L{Zq", "F4=n8O.90_?\u0006L{Zq");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) week0, 0.0);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0, "", "");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) minute0, (-1369.07204905));
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Year year0 = new Year(4130);
      Year year1 = (Year)year0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year1, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      timePeriodValues0.add((TimePeriod) year0, (double) 4130);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4130, 4130, 4130, (-491), 4130, (-491));
      year1.peg(mockGregorianCalendar0);
      timePeriodValues0.add((TimePeriod) year1, (Number) 0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Year year0 = new Year(4130);
      Year year1 = (Year)year0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year1, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4130, 4130, 4130, (-491), 4130, (-491));
      year1.peg(mockGregorianCalendar0);
      timePeriodValues0.add((TimePeriod) year1, (Number) (-1));
      timePeriodValues0.add((TimePeriod) year0, (double) 0L);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Year year0 = new Year(4130);
      Year year1 = (Year)year0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year1, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4130, 4130, 4130, (-491), 4130, (-491));
      year1.peg(mockGregorianCalendar0);
      timePeriodValues0.add((TimePeriod) year1, (Number) 0);
      timePeriodValues0.add((TimePeriod) year0, (double) 0L);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) simpleTimePeriod0);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (double) (-1));
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0);
      timePeriodValues0.add((TimePeriod) quarter0, (double) 4);
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, (String) null, "0");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("0", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertNull(string0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) month0);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", string0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Year year0 = new Year(4130);
      Year year1 = (Year)year0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year1, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      timePeriodValues0.add((TimePeriod) year0, (double) 4130);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4130, 4130, 4130, (-491), 4130, (-491));
      year1.peg(mockGregorianCalendar0);
      timePeriodValues0.add((TimePeriod) year1, (Number) 0);
      timePeriodValues0.createCopy(4488, 4130);
      assertEquals(2, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Year year0 = new Year(4130);
      Year year1 = (Year)year0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year1, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4130, 4130, 4130, (-491), 4130, 1051);
      year1.peg(mockGregorianCalendar0);
      timePeriodValues0.add((TimePeriod) year1, (Number) 1852009522);
      timePeriodValues0.add((TimePeriod) year0, 1729.5);
      timePeriodValues0.createCopy(2800, 323);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4310), (-4310), (-4310), (-4310), (-4310), (-4310));
      Day day0 = new Day((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0);
      // Undeclared exception!
      try { 
        timePeriodValues0.update((-4310), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2546L));
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(1511, hour0);
      Second second0 = new Second(1511, minute0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "`AQ*.A<@>p0", "`AQ*.A<@>p0");
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod((-2364));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) month0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem((-2762));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate(373, 0, 373, 0, 52, 52);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Value");
      Month month0 = new Month((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) month0);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(0, 52);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "Background", "R5V&dd3!`0", "Background");
      // Undeclared exception!
      try { 
        timePeriodValues0.delete((-3260), (-3260));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Year year0 = new Year(4130);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      timePeriodValues0.add((TimePeriod) year0, (double) 4130);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(0, 4130);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      timePeriodValues0.add((TimePeriod) week0, (Number) 1);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy((-1375), (-1375));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Year year0 = new Year(4130);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) 1852009522);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (double) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, (String) null, "d!xFl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0, "", "");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) minute0, (-1369.07204905));
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.createCopy(0, 0);
      assertEquals(1, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0, "", "");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) minute0, (-1369.07204905));
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0, "", "");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("", string0);
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0, "", "");
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", string0);
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Year year0 = new Year(4130);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      timePeriodValues0.getItemCount();
      assertEquals("@b^A|z-vC^f$W8^i", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("@b^A|z-vC^f$W8^i", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Year year0 = new Year(4130);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("@b^A|z-vC^f$W8^i", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("@b^A|z-vC^f$W8^i", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, (String) null, (String) null);
      timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Year year0 = new Year(4130);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      timePeriodValues0.add((TimePeriod) year0, (double) 4130);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(8, 0);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(1, timePeriodValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "e", "e");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(8, 0);
      timePeriodValues1.setRangeDescription("Failed to add cloned item.");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals("Failed to add cloned item.", timePeriodValues1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 0);
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      timePeriodValues1.setDescription("");
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "e", "e");
      boolean boolean0 = timePeriodValues0.equals(second0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertFalse(boolean0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("e", timePeriodValues0.getDomainDescription());
      assertEquals("e", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "e", "e");
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      
      timePeriodValues0.delete(0, 0);
      assertEquals("e", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Year year0 = new Year(4130);
      Year year1 = (Year)year0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year1, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      timePeriodValues0.add((TimePeriod) year0, (double) 4130);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4130, 4130, 4130, 4130, 4130, 4130);
      mockGregorianCalendar0.getWeekYear();
      year1.peg(mockGregorianCalendar0);
      timePeriodValues0.add((TimePeriod) year1, (Number) 0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(1, timePeriodValues0.getMaxStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Year year0 = new Year(4130);
      Year year1 = (Year)year0.previous();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year1, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      timePeriodValues0.add((TimePeriod) year0, (double) 4130);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4130, 4130, 4130, (-491), 4130, (-491));
      year1.peg(mockGregorianCalendar0);
      timePeriodValues0.add((TimePeriod) year1, (Number) 0);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriodValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
         verifyException("org.jfree.data.time.TimePeriodValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "e", "e");
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("e", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("e", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "e", "e");
      // Undeclared exception!
      try { 
        timePeriodValues0.update(0, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Year year0 = new Year(4130);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("@b^A|z-vC^f$W8^i", timePeriodValues0.getDomainDescription());
      assertEquals("@b^A|z-vC^f$W8^i", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "e", "e");
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Year year0 = new Year(4130);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("@b^A|z-vC^f$W8^i", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), int0);
      assertEquals("@b^A|z-vC^f$W8^i", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "e", "e");
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("e", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("e", timePeriodValues0.getDomainDescription());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "", "");
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(date0, date0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) simpleTimePeriod0);
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 0);
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Year year0 = new Year(4130);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, "@b^A|z-vC^f$W8^i", "@b^A|z-vC^f$W8^i");
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      timePeriodValues0.setDomainDescription("XP");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("XP", timePeriodValues0.getDomainDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "e", "e");
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "e", "e");
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      timePeriodValues0.add((TimePeriod) second0, (Number) 59);
      timePeriodValues0.delete(0, 0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "e", "e");
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals("e", timePeriodValues0.getDomainDescription());
      assertEquals("e", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }
}
