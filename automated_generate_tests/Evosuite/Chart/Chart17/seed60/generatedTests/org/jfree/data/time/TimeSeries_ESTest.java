/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 18 04:49:26 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Button;
import java.awt.Canvas;
import java.awt.Checkbox;
import java.awt.Frame;
import java.awt.TextField;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.TimeZone;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "9K", "", (Class) class0);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("9K", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 4);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.clear();
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1, timeSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Day day0 = new Day();
      Day day1 = (Day)day0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 4);
      timeSeries0.add((RegularTimePeriod) day1, (Number) 1);
      timeSeries0.createCopy((RegularTimePeriod) day1, (RegularTimePeriod) day0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Day day0 = new Day();
      Day day1 = (Day)day0.next();
      Day day2 = (Day)day0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day1);
      timeSeries0.add((RegularTimePeriod) day1, (-1.7976931348623157E308));
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day2, 234.2);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Day day0 = new Day();
      Day day1 = (Day)day0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day1, 234.2);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 4);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Day day0 = new Day();
      Day day1 = (Day)day0.next();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day1);
      timeSeries0.add((RegularTimePeriod) day1, (-1.7976931348623157E308));
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 234.2);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.addOrUpdate((RegularTimePeriod) day1, (Number) 4);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      timeSeries0.setMaximumItemAge(4);
      assertEquals(4L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "9K", "", (Class) class0);
      timeSeries0.setRangeDescription(">}/)|0`7h*ly x7Ez");
      assertEquals(">}/)|0`7h*ly x7Ez", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) (byte)21);
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "Center");
      MockDate mockDate0 = new MockDate((-2730L));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Day day0 = new Day((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 3565, true);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      timeSeries1.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
      timeSeries0.addAndOrUpdate(timeSeries1);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update(0, (Number) 1);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(boolean0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Checkbox> class0 = Checkbox.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (String) null, "", (Class) class0);
      Year year0 = new Year();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) (-715));
      Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) year0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNotNull(double0);
      assertEquals((-715.0), (double)double0, 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Checkbox> class0 = Checkbox.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (String) null, "", (Class) class0);
      Year year0 = new Year();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 1442);
      Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) year0);
      assertEquals(1442.0, (double)double0, 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<Frame> class0 = Frame.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      timeSeries0.getValue(0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "9K", "", (Class) class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("9K", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "9K", "9K", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 59);
      timeSeries0.getNextTimePeriod();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("9K", timeSeries0.getRangeDescription());
      assertEquals("9K", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.getMaximumItemAge();
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Checkbox> class0 = Checkbox.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (String) null, "", (Class) class0);
      Year year0 = new Year();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 1442);
      timeSeries0.getItemCount();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      timeSeries1.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
      timeSeries0.addAndOrUpdate(timeSeries1);
      int int0 = timeSeries0.getIndex(quarter0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3891L));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription((String) null);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) Integer.MAX_VALUE);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) Integer.MAX_VALUE);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Checkbox> class0 = Checkbox.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (String) null, "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Year year0 = new Year();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-34), (Number) 1684370275);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 6, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems((long) 6, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Checkbox> class0 = Checkbox.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (String) null, "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<Frame> class0 = Frame.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-17));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "9K", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1162038354, (Class) class0);
      LinkedList<TextField> linkedList0 = new LinkedList<TextField>();
      timeSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1162038354, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-130));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Second second0 = new Second();
      Class<Button> class0 = Button.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(37, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 4);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Month month0 = new Month();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", "TimeSeries.update(TimePeriod, Number):  period does not exist.", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "9K", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (Number) 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Checkbox> class0 = Checkbox.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (String) null, "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (-1341.57963), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (-1.7976931348623157E308));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) (-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "~H", "~H", (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(29, 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "Center");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(3541, (-2854));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3530);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) spreadsheetDate0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-41), 3530);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "9K", "9K", (Class) class0);
      timeSeries0.removeAgedItems(true);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("9K", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("9K", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 234.2);
      timeSeries0.add((RegularTimePeriod) day0, (Number) 11, false);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) null);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "9K", "Vb", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.getIndex(day0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      timeSeries0.getTimePeriodClass();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Checkbox> class0 = Checkbox.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (String) null, "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (-1341.5796251), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of java.awt.Checkbox.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, Double.POSITIVE_INFINITY);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(312);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 312, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-1801));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1162038354, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(1162038354);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1162038354, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Checkbox> class0 = Checkbox.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (String) null, "", (Class) class0);
      timeSeries0.getItemCount();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Checkbox> class0 = Checkbox.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (String) null, "", (Class) class0);
      timeSeries0.hashCode();
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 4);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries0.setDescription("");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1, timeSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<Frame> class0 = Frame.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      boolean boolean0 = timeSeries0.equals((Object) null);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertFalse(boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Day day0 = new Day();
      Day day1 = (Day)day0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 4);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.add((RegularTimePeriod) day1, (double) 2950L);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(2, timeSeries1.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Day day0 = new Day();
      Day day1 = (Day)day0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 4);
      timeSeries0.createCopy((RegularTimePeriod) day1, (RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      Minute minute1 = (Minute)minute0.next();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) minute1, (RegularTimePeriod) minute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) minute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "Center");
      TimeSeries timeSeries1 = timeSeries0.createCopy(564, 3565);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3891L));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-1), (-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(Integer.MAX_VALUE, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 0.0);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3891L));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.clear();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.add((RegularTimePeriod) day0, (-1.7976931348623157E308));
      timeSeries0.removeAgedItems(2950L, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "9K", "", (Class) class0);
      timeSeries0.removeAgedItems(9223372036854775807L, false);
      timeSeries0.removeAgedItems((long) 0, false);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("9K", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Checkbox> class0 = Checkbox.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (String) null, "", (Class) class0);
      timeSeries0.setMaximumItemCount(0);
      MockDate mockDate0 = new MockDate(1L);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1442);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3545);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) spreadsheetDate0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      timeSeries1.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
      timeSeries0.addAndOrUpdate(timeSeries1);
      timeSeries0.hashCode();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, 0.0);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) minute0, (Number) 0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) day0, (Number) 1935897188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.add((RegularTimePeriod) day0, (-1.7976931348623157E308));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) 11, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 0.0);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "9K", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "9K", "", (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 59);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "9K", "", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 59);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) Integer.MAX_VALUE);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 0.0);
      timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      timeSeries0.getDataItem((RegularTimePeriod) quarter0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1466), (-1466), (-1466), (-1466), (-1466));
      Week week0 = new Week((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-1466));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Checkbox> class0 = Checkbox.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (String) null, "", (Class) class0);
      Year year0 = new Year();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 1442);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-3163));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1162038354, (Class) class0);
      timeSeries0.setMaximumItemCount(1162038354);
      assertEquals(1162038354, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) day0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 4);
      assertEquals(1, timeSeries0.getItemCount());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Checkbox> class0 = Checkbox.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (String) null, "", (Class) class0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 0.0);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1162038354, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.getItems();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of java.time.chrono.ChronoLocalDate.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.update(0, (Number) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "9K", "", (Class) class0);
      assertEquals("9K", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription("");
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", string0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }
}
