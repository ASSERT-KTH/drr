/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 11 23:07:36 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      xYSeries0.add(0.0, 0.0, true);
      xYSeries0.addOrUpdate((Number) 1, (Number) 4);
      xYSeries0.addOrUpdate((Number) 4, (Number) 4);
      xYSeries0.add((double) 1, (Number) 1);
      xYSeries0.hashCode();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "South", true, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(2243, (-463));
      xYSeries1.setMaximumItemCount(2243);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(2243, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.addOrUpdate((double) 3775, (double) 1427);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 3775);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.add((-2798.689), (Number) 0);
      xYSeries0.addOrUpdate((-2798.689), (double) (-1));
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "a4(L#26s:vn|PBn?f&K", true);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (double) 0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.add((double) 0, 1.0);
      xYSeries0.addOrUpdate(1.0, 1.0);
      xYSeries0.update(0, 4);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.add((double) 0, (Number) 999, false);
      xYSeries0.delete(0, 0);
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true);
      xYSeries0.add((-2798.689), (Number) 0);
      xYSeries0.add((double) 0, (Number) 127);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.add((Number) 0, (Number) 0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      Short short0 = new Short((short)1);
      xYSeries0.add((-1.0), (Number) short0);
      xYSeries0.updateByIndex(0, 1);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, true);
      xYSeries0.add((double) 1667329140, (double) (byte)18, true);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 1667329140);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(18.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.add(3274.396788, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(3274.396788, xYDataItem0.getXValue(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true);
      xYSeries0.add((-2798.689), (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-2798.689), xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Week week0 = new Week((-2085), (-2085));
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      xYSeries0.addOrUpdate((double) 1, 1191.86378);
      int int0 = xYSeries0.indexOf(1);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "a4(L#26s:vn|PBn?f&K", true);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (double) 0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.addOrUpdate(1.0, 1.0);
      int int0 = xYSeries0.indexOf(1);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, int0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true);
      xYSeries0.add((-2798.689), (Number) 0);
      Integer integer0 = (Integer)xYSeries0.getY(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, (int)integer0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.getY(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true);
      xYSeries0.add((-2798.689), (Number) 1);
      xYSeries0.add((-2798.689), (Number) (-1), true);
      assertEquals(2, xYSeries0.getItemCount());
      
      Integer integer0 = (Integer)xYSeries0.getY(1);
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.addOrUpdate(345.9, 729.5386139781);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(345.9, (double)double0, 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.add((-3398.51622103), (-3398.51622103));
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals((-3398.51622103), (double)double0, 0.01);
      
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) double0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-3398.51622103), xYDataItem0.getYValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "a4(L#26s:vn|PBn?f&K", true);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "a4(L#26s:vn|PBn?f&K", true);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (double) 0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, true);
      xYSeries0.add((double) 0, (Number) 999, true);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(999.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = new Locale("a4(L#26&:vn|PBn?f&K");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertFalse(boolean0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, false);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(1667329140, 12);
      assertFalse(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "a4(L#26s:vn|PBn?f&K", true);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(610, 29);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "South", false, false);
      xYSeries0.addOrUpdate((double) (-463), 0.0);
      xYSeries0.addOrUpdate((double) (-463), (double) (-463));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "South", false, false);
      xYSeries0.addOrUpdate((double) 11, (double) 11);
      xYSeries0.addOrUpdate((double) 11, (double) 11);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "South", false, false);
      xYSeries0.addOrUpdate((double) (-463), (double) (-463));
      xYSeries0.addOrUpdate((double) (-463), (double) (-463));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(410);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-1305), 1900);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-3108L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.update((byte)4, (byte)2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "South", true, true);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-463));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "left", true, true);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 1129142560);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "South", true, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-126));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((Date) mockDate0, (Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleTimePeriod0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "left", true, true);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, true, true);
      Object[][] objectArray0 = new Object[3][4];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(0.0F);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        xYSeries0.getX(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1120, 907, 1120, 1120, 1120);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      List list0 = xYSeries0.getItems();
      XYSeries xYSeries1 = new XYSeries((Comparable) mockDate0);
      xYSeries1.data = list0;
      // Undeclared exception!
      try { 
        xYSeries1.delete(1, 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 59);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.delete(59, 2910);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(53, 3779);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "a4(L#26s:vn|PBn?f&K", true);
      Object[][] objectArray0 = new Object[7][6];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 1863);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale locale0 = new Locale("a4(L#26s:vn|PBn?f&K");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      xYSeries0.addOrUpdate((Number) 4, (Number) 4);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-1396), 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "delete-next-word", false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-1980), (-1394));
      List list0 = xYSeries1.getItems();
      xYSeries1.data = list0;
      try { 
        xYSeries1.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Locale locale0 = new Locale("a4(L#26s:vn|PBn?f&C");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 4, (Number) 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 4, (Number) 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = new Locale("a4(L#26s:vn|PBn?f&K");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 4, (Number) 4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "South", false, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) (-463), (double) (-463));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "a4(L#26s:vn|PBn?f&K", true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, (double) 0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection0, 3351, 3351);
      List list0 = slidingGanttCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, true);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 12, (Number) 7);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Week week0 = new Week((-2101), (-2101));
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 59, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, (double) 999);
      xYSeries0.add(xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (Number) 999, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (Number) 999, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((-2798.689), (Number) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((-1.0), (Number) (short)5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.add((double) 1427, (Number) 0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 1427, (double) 999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 59);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.add(0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "a4(L#26s:vn|PBn?f&K", true);
      Object[][] objectArray0 = new Object[6][5];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, 1.0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.add((double) 0, (Number) 999, false);
      int int0 = xYSeries0.indexOf(999);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1), int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "a4(L#26s:vn|PBn?f&K", true);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((Number) (byte)17, (Number) 1835955314);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      xYSeries0.addOrUpdate((Number) 4, (Number) 4);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 4, (Number) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "a4(L#26s:vn|PBn?f&K", false);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (double) 0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.add((double) 0, (Number) 999, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      Double double0 = (Double)xYSeries0.getX(0);
      XYDataItem xYDataItem0 = xYSeries1.remove((Number) double0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true);
      xYSeries0.add((-2798.689), (Number) 0);
      xYSeries0.add(Double.NEGATIVE_INFINITY, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true);
      xYSeries0.add((-2798.689), (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "a4(L#26s:vn|PBn?f&K");
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, true);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      xYSeries0.add(0.0, 0.0, true);
      xYSeries0.addOrUpdate((Number) 1, (Number) 4);
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      xYSeries0.add(0.0, 0.0, true);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "South", false, false);
      xYSeries0.addOrUpdate((double) (-463), (double) (-463));
      XYSeries xYSeries1 = xYSeries0.createCopy(2262, (-463));
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "South", false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(2262, (-463));
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertTrue(boolean0);
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertFalse(xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      XYSeries xYSeries1 = new XYSeries((Comparable) fixedMillisecond0, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "South", true, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(2243, (-463));
      xYSeries1.setMaximumItemCount(2243);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(2243, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.setDescription("Fri Feb 14 20:21:21 GMT 2014");
      XYSeries xYSeries1 = new XYSeries((Comparable) millisecond0, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Month month0 = new Month();
      Locale locale0 = Locale.US;
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, false);
      boolean boolean0 = xYSeries0.equals(locale0);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "South", false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true, true);
      XYSeries xYSeries1 = new XYSeries((Comparable) millisecond0, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(boolean0);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.add((double) 0, (Number) 999, false);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      XYSeries xYSeries1 = xYSeries0.createCopy(23, 1453);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true);
      xYSeries0.add((-2798.689), (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((-2798.689), (double) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      // Undeclared exception!
      try { 
        xYSeries0.update(8, 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 8
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "a4(L#26s:vn|PBn?f&K", true);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (double) 0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.update(0, 4);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, true);
      xYSeries0.add((Number) (byte)18, (Number) 1667329140, true);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "left", true, true);
      xYSeries0.clear();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-869.250309561779));
      xYSeries0.add(xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, 0.0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.add((double) 0, (Number) 999, false);
      xYSeries0.addOrUpdate(0.0, 1.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "a4(L#26s:vn|PBn?f&K", false);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (double) 0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, true);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 12, (Number) 7);
      xYSeries0.add(xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-3453), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Quarter quarter0 = new Quarter(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      xYSeries0.add(0.0, 0.0, true);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "a4(L#26s:vn|PBn?f&K", true);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, int0);
  }
}
