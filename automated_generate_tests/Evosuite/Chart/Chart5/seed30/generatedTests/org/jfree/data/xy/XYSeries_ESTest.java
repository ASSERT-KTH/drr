/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 29 19:38:42 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1650L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-2690.53189389));
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true);
      xYSeries0.add((double) 9999, (double) (-9999), true);
      xYSeries0.addOrUpdate((double) 1650L, 3144.1009682);
      xYSeries0.add((Number) 9999, (Number) 9999);
      xYSeries0.addOrUpdate((double) (-9999), 2.0);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 3, true);
      xYSeries0.addOrUpdate((Number) 1, (Number) 3);
      xYSeries0.setMaximumItemCount(3);
      xYSeries0.add((Number) 1918128707, (Number) (short) (-21267), true);
      xYSeries0.addOrUpdate((double) 3, (double) 1);
      assertEquals(3, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      xYSeries0.add((Number) 1, (Number) 0);
      xYSeries0.addOrUpdate(0.0, (-2476.30465041519));
      xYSeries0.addOrUpdate(0.0, 3630.50019092);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3490), (-3490), (-3490), (-3490), (-1826), (-980));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.update(1, (byte)4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 1
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1650L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-2690.53189389));
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true);
      xYSeries0.add((double) 9999, (double) (-9999), true);
      xYSeries0.addOrUpdate((double) (-9999), 2.0);
      xYSeries0.update(9999, 9999);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1650L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-2690.53189389));
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true);
      xYSeries0.add((double) 9999, (double) (-9999), true);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 9999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Year year0 = new Year(0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, true, true);
      xYSeries0.add((double) 0, 0.0, true);
      xYSeries0.updateByIndex(0, (byte)119);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "u");
      xYSeries0.add(Double.NaN, Double.NaN, true);
      xYSeries0.update(16, 0);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 2);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1650L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-2690.53189389));
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true);
      xYSeries0.add((double) 9999, (double) (-9999), true);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 9999);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-9999.0), xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1650L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-2690.53189389));
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true);
      xYSeries0.addOrUpdate((double) (-9999), 2.0);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) (-9999));
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "u");
      xYSeries0.add(Double.NaN, Double.NaN, true);
      xYSeries0.remove(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, false);
      Integer integer0 = new Integer(0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.remove(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1650L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-2690.53189389));
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true);
      xYSeries0.add((double) 9999, (double) (-9999), true);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(9999.0, xYDataItem0.getXValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-9999.0), xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      xYSeries0.add(1.0, (Number) 1);
      xYSeries0.addOrUpdate((Number) 53, (Number) 53);
      int int0 = xYSeries0.indexOf(53);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "u");
      xYSeries0.add(Double.NaN, Double.NaN, true);
      xYSeries0.update(16, 0);
      Integer integer0 = (Integer)xYSeries0.getY(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "u");
      xYSeries0.add(Double.NaN, Double.NaN, true);
      xYSeries0.getY(0);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      xYSeries0.add(3009.009738, 3009.009738, true);
      Double double0 = (Double)xYSeries0.getY(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(3009.009738, (double)double0, 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Comparable comparable0 = defaultIntervalCategoryDataset0.getSeriesKey(0);
      XYSeries xYSeries0 = new XYSeries(comparable0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 2018.2, (Number) 0.0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.getX(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 3, true);
      xYSeries0.addOrUpdate((Number) 1, (Number) 3);
      xYSeries0.getItemCount();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Year year0 = new Year();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-2690.53189389));
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, false);
      xYSeries0.getAutoSort();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertFalse(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "u");
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-1), (-4));
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(4, 21);
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "u");
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(1668313716, 1128483922);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1668313716, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 3, true);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) (-1), true);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(141.9554886, 0.0);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      List list0 = timeSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 23, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      List list0 = defaultKeyedValuesDataset0.getKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((-2252));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-2243));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Comparable comparable0 = defaultIntervalCategoryDataset0.getSeriesKey(0);
      XYSeries xYSeries0 = new XYSeries(comparable0);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Quarter quarter0 = new Quarter(1, 1);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        xYSeries0.getX(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) (byte) (-15));
      // Undeclared exception!
      try { 
        xYSeries0.getX((byte) (-15));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Year year0 = new Year(1);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 3, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-478), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(243, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 3, false);
      xYSeries0.add(141.9554886, 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Week week0 = new Week(1244, 2902);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      xYSeries0.add((Number) 53, (Number) 1, false);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-5140), 182);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      List list0 = timeSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      xYSeries0.data = list0;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      Integer integer0 = new Integer(0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate(891L);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 891L, 3007.906);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Comparable comparable0 = defaultIntervalCategoryDataset0.getSeriesKey(0);
      XYSeries xYSeries0 = new XYSeries(comparable0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0.0, (Number) 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 3, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "u");
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      List list0 = xYSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(1.0, (Number) 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false, true);
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultIntervalCategoryDataset0, tableOrder0, 2);
      List list0 = categoryToPieDataset0.getKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (double) 23);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      xYSeries0.addOrUpdate((Number) 53, (Number) 53);
      int int0 = xYSeries0.indexOf(53);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, int0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1650L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-2690.53189389));
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      int int0 = xYSeries0.indexOf(1);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1), int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1650L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-2690.53189389));
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true);
      xYSeries0.addOrUpdate((Number) (-9999), (Number) (-9999));
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) (-9999), 2.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, false);
      Integer integer0 = new Integer(0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Comparable comparable0 = defaultIntervalCategoryDataset0.getSeriesKey(0);
      XYSeries xYSeries0 = new XYSeries(comparable0);
      xYSeries0.add((Number) 0.0, (Number) 0.0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0.0, (Number) 0.0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) 999);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-249), (-249), 100, (-4498), (-2250), (-249));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Week week0 = new Week(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1, (Number) 1);
      xYSeries0.add(xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3490), (-3490), (-3490), (-3490), (-1826), (-980));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-3490));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1650L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-2690.53189389));
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1162L, 1162L);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleTimePeriod0);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1650L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-2690.53189389));
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true);
      xYSeries0.add((double) 9999, (double) (-9999), true);
      xYSeries0.addOrUpdate((double) 1650L, 3144.1009682);
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      xYSeries0.add((Number) 0, (Number) 7);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      XYSeries xYSeries1 = new XYSeries((Comparable) week0, false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 711);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.setDescription("5s=6f*dJ^kL");
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1, false);
      boolean boolean0 = xYSeries0.equals((Object) null);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertTrue(boolean0);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1, false);
      xYSeries0.add((double) 64, (double) 64);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((Number) 22, (Number) 5);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Year year0 = new Year(0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      xYSeries0.add((Number) 1886549106, (Number) 12);
      Integer integer0 = (Integer)xYSeries0.getY(0);
      // Undeclared exception!
      try { 
        xYSeries0.update(integer0, integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 12
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockDate mockDate0 = new MockDate(891L);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.addOrUpdate((double) 0, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.clear();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete(2606, 2606);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2606, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "u");
      xYSeries0.delete((-4), (-5397));
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1, false);
      xYSeries0.add((double) 64, (double) 64);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.add((Number) 13, (Number) (short) (-21267), false);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3490), (-3490), (-3490), (-3490), (-1826), (-980));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4, (Number) 4);
      xYSeries0.add(xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 3, true);
      xYSeries0.add(141.9554886, (double) 3);
      xYSeries0.add((Number) 13, (Number) (short)5, true);
      xYSeries0.add((double) 13, (Number) 4, false);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "_4YEWHC> (/V$", true, false);
      xYSeries0.add((Number) (byte)4, (Number) 1733843290);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 4, (Number) 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1650L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-2690.53189389));
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1650L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-2690.53189389));
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, false);
      Integer integer0 = new Integer(0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-1554), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1650L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (-2690.53189389));
      XYSeries xYSeries0 = new XYSeries((Comparable) timeSeriesDataItem0, true);
      xYSeries0.add((double) 9999, (double) (-9999), true);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      int int0 = xYSeries0.getMaximumItemCount();
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertTrue(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1, false);
      xYSeries0.add((double) 64, (double) 64);
      xYSeries0.addOrUpdate((Number) 64, (Number) 3);
      xYSeries0.setMaximumItemCount(1);
      assertEquals(1, xYSeries0.getItemCount());
  }
}
