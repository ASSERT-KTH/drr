/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 22 17:03:24 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Checkbox;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.add((Number) 23, (Number) 23);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1849);
      Date date0 = spreadsheetDate0.toDate();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.add((-2630.1747814546), (Number) 0, false);
      xYSeries0.addOrUpdate((double) 0, 227.9122062);
      xYSeries0.addOrUpdate((double) 0, (double) 6);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "click", false, false);
      // Undeclared exception!
      try { 
        xYSeries0.update(44, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 44
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 888, 176.071591724014);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(888, 888);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 888, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 11);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.add((Number) 23, (Number) 23);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.add((Number) 23, (Number) 23);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.add((Number) 0, (Number) 0);
      xYSeries0.add((double) 0, (double) 0, false);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.setMaximumItemCount(59);
      assertEquals(59, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.add(2318.57164005005, (Number) 0, false);
      xYSeries0.updateByIndex(0, 0);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.add((Number) 0, (Number) 0, false);
      xYSeries0.remove((Number) 0);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.addOrUpdate(0.0, 345.9);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(345.9, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "layeredContainerLayer", false, false);
      xYSeries0.add((Number) (byte)12, (Number) (byte) (-1));
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1849);
      Date date0 = spreadsheetDate0.toDate();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.add((-2630.1747814546), (Number) 0, false);
      xYSeries0.addOrUpdate((double) 0, 227.9122062);
      XYDataItem xYDataItem0 = xYSeries0.remove(1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(227.9122062, xYDataItem0.getYValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.add((double) 59, (Number) 0, false);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.add(2318.57164005005, (Number) 0, false);
      xYSeries0.add((Number) 0, (Number) 0, false);
      int int0 = xYSeries0.indexOf(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.getY(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1849);
      Date date0 = spreadsheetDate0.toDate();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.add((-2630.1747814546), (Number) 0, false);
      xYSeries0.addOrUpdate((Number) 4, (Number) 2);
      xYSeries0.addOrUpdate((double) 0, (double) 6);
      Double double0 = (Double)xYSeries0.getX(2);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1849);
      Date date0 = spreadsheetDate0.toDate();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.addOrUpdate((double) 0, 227.9122062);
      xYSeries0.addOrUpdate((Number) 4, (Number) 2);
      xYSeries0.addOrUpdate((double) (-2351), (double) 6);
      assertEquals(3, xYSeries0.getItemCount());
      
      Double double0 = (Double)xYSeries0.getX(2);
      assertEquals((-2351.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "?R1V0");
      xYSeries0.add((-2766.202865741), (Number) 2, false);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1849);
      Date date0 = spreadsheetDate0.toDate();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.addOrUpdate((double) 0, 227.9122062);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(227.9122062, xYDataItem0.getYValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.add((Number) 23, (Number) 23);
      xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2931, 2931, 2931, (-1), (-663), (-1));
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(boolean0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "cellRenderer");
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(5504, 5504);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "layeredContainerLayer", false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-33), (-33));
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.getAutoSort());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "layeredContainerLayer", false, false);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-33), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "?R1V0");
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount(59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) (-1), true);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-1879));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 888, 176.071591724014);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      List list0 = timeSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((-216));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Year year0 = new Year((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 888, 176.071591724014);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX(53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1380));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Week week0 = new Week(72, 72);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1270));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries((Comparable) integer0, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-1057), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 888, 176.071591724014);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.addOrUpdate((Number) 3, (Number) null);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-33), (byte)2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "click", false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 888, 176.071591724014);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      List list0 = xYSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 888, 176.071591724014);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2931, 2931, 2931, (-1023), (-663), (-1023));
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((Date) mockDate0, (Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleTimePeriod0, false, false);
      Double double0 = new Double((double) 658);
      xYSeries0.add((Number) double0, (Number) double0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) double0, (Number) double0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "layeredContainerLayer", false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "layeredContainerLayer", false, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-2), Integer.MAX_VALUE);
      List list0 = slidingCategoryDataset0.getRowKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) (byte)12, (Number) (byte) (-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "layeredContainerLayer", false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "click", false, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.add((double) (-33), (Number) 4, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, (-11), 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      java.util.Vector<Checkbox> vector0 = new java.util.Vector<Checkbox>();
      xYSeries0.data = (List) vector0;
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(1.0, (-994.16555177), (-1.0), 0.0, 0.0, 0.0, 0.0, (-3950.7757340347407), (List) xYSeries0.data);
      List list0 = boxAndWhiskerItem0.getOutliers();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((-1622.0), (-1622.0), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2565, 1107, 1107, (-1183), 2565, 2565);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((Date) mockDate0, (Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleTimePeriod0);
      Object[][] objectArray0 = new Object[1][2];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((-1368.5307418), 1.0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.add((Number) 0, (Number) 0, false);
      int int0 = xYSeries0.indexOf(0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      xYSeries0.add(2318.57164005005, (Number) 0, false);
      int int0 = xYSeries0.indexOf(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-2055.223984263));
      xYSeries0.add(xYDataItem0, false);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 888, 176.071591724014);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      XYDataItem xYDataItem1 = new XYDataItem((double) 6, (double) 1667329140);
      xYSeries0.addOrUpdate((Number) 6, (Number) null);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(xYDataItem1, true);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 888, 176.071591724014);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      XYDataItem xYDataItem1 = new XYDataItem((double) 6, (double) 1667329140);
      xYSeries0.addOrUpdate((Number) 6, (Number) null);
      xYSeries0.add(xYDataItem1, true);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 888, 176.071591724014);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add(xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 888, 176.071591724014);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "?R1V0");
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "layeredContainerLayer", false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, (-329.66323888));
      xYSeries0.add(xYDataItem0, true);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2931, 2931, 2931, (-1), (-663), (-1));
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((Date) mockDate0, (Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleTimePeriod0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-663));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        xYSeries0.getY(5564);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5564, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2565, 1107, 1107, (-1183), 2565, 2565);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((Date) mockDate0, (Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleTimePeriod0);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2931, 2931, 2931, (-1), (-663), (-1));
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((Date) mockDate0, (Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleTimePeriod0, false, false);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1467L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      xYSeries0.hashCode();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1849);
      Date date0 = spreadsheetDate0.toDate();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.add((-2630.1747814546), (Number) 0, false);
      xYSeries0.addOrUpdate((double) 0, 227.9122062);
      xYSeries0.addOrUpdate((Number) 4, (Number) 2);
      xYSeries0.hashCode();
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "click", false, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.add((double) (-33), (Number) 4, false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "layeredContainerLayer", false, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.setDescription("layeredContainerLayer");
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "click", false, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertTrue(boolean0);
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "click", false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "click", false, false);
      boolean boolean0 = xYSeries0.equals("click");
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.add((Number) 23, (Number) 23);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "cellRenderer");
      xYSeries0.add((double) 2, (Number) null);
      xYSeries0.toArray();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1849);
      Date date0 = spreadsheetDate0.toDate();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.add((-2630.1747814546), (Number) 0, false);
      xYSeries0.addOrUpdate((Number) 4, (Number) 2);
      xYSeries0.hashCode();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2931, 2931, 2931, 17, (-649), 17);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((Date) mockDate0, (Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleTimePeriod0, false, false);
      xYSeries0.add((Number) 2, (Number) null);
      xYSeries0.addOrUpdate((Number) 2, (Number) 7);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.add((double) 0, 1.0, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2565, 1107, 1107, (-1183), 2565, 2565);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((Date) mockDate0, (Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleTimePeriod0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true);
      xYSeries0.addOrUpdate((double) 1, (double) 4);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.update(1, 4);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2565, 1107, 1107, (-1183), 2565, 2565);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((Date) mockDate0, (Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleTimePeriod0);
      xYSeries0.add((Number) 1668441193, (Number) 10, false);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.clear();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.delete(59, 0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "click", false, false);
      xYSeries0.addOrUpdate((double) (-33), 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (-33), (Number) 4, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "?R1V0");
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.add((Number) 23, (Number) 23);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.add((double) 0, (double) 0, false);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2931, (-689), (-689));
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, true, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "click", false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "");
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1849);
      Date date0 = spreadsheetDate0.toDate();
      Millisecond millisecond0 = new Millisecond(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.add((-2630.1747814546), (Number) 0, false);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      xYSeries0.add((double) 999, 2785.03);
      assertEquals(1, xYSeries0.getItemCount());
  }
}
