/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 21:30:03 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Frame;
import java.time.Instant;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      xYSeries0.addOrUpdate(211.7102496972, 2012.11505);
      xYSeries0.add((Number) 21, (Number) 15);
      xYSeries0.add((double) 2353, (double) (-741), false);
      xYSeries0.add(0.0, (Number) null);
      xYSeries0.addOrUpdate(0.0, (double) 21);
      xYSeries0.hashCode();
      assertEquals(5, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      xYSeries0.add(541.23573658022, (Number) 2, false);
      xYSeries0.setMaximumItemCount(2);
      xYSeries0.addOrUpdate((double) 2, (double) 2);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        xYSeries0.update(59, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 59
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-468L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      xYSeries0.add(0.0, (Number) 1001, true);
      xYSeries0.add((Number) 3, (Number) (byte)119);
      xYSeries0.update(3, 1987405156);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true);
      xYSeries0.add(Double.NEGATIVE_INFINITY, (double) 0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 4051);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      xYSeries0.addOrUpdate(211.7102496972, 2012.11505);
      xYSeries0.add((double) 2353, (double) (-741), false);
      xYSeries0.add((double) 2353, (Number) null);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.add((Number) 0, (Number) 23);
      xYSeries0.updateByIndex(0, 23);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      xYSeries0.add((Number) 0, (Number) 23);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 0);
      assertEquals(23.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true);
      xYSeries0.addOrUpdate((double) 999, (double) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 999);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-1149), year0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      xYSeries0.add(0.0, (Number) 53);
      xYSeries0.add((double) 1, (double) (-9999), true);
      XYDataItem xYDataItem0 = xYSeries0.remove(1);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-9999.0), xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-1149), year0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      xYSeries0.add(0.0, (Number) 53);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(53.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true);
      xYSeries0.add(Double.NEGATIVE_INFINITY, (double) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NEGATIVE_INFINITY, xYDataItem0.getXValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1005L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.add((Number) 0, (Number) null, false);
      Integer integer0 = (Integer)xYSeries0.getY(0);
      assertNull(integer0);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4, (Number) 4);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.getY(1);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.addOrUpdate((-1674.79341178953), 121.84);
      assertEquals(1, xYSeries0.getItemCount());
      
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals((-1674.79341178953), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-1149), year0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      xYSeries0.add(0.0, (Number) 53);
      xYSeries0.add((double) 1, (double) (-9999), true);
      assertEquals(2, xYSeries0.getItemCount());
      
      Double double0 = (Double)xYSeries0.getX(1);
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      xYSeries0.addOrUpdate(211.7102496972, 2012.11505);
      int int0 = xYSeries0.getItemCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-1149), year0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      xYSeries0.add((double) 1, (double) (-9999), true);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals((-9999.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-1149), year0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      xYSeries0.add(0.0, (Number) 53);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(53.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      xYSeries0.getAutoSort();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-1149), year0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(4, 1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(4, 1);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      xYSeries0.add(541.23573658022, (Number) 2, false);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(59, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-1090));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      LinkedList<Frame> linkedList0 = new LinkedList<Frame>();
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) (short) (-21267));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-55L));
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-406));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-741));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-121));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1162038354, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(1918392666);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1918392666, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-2638));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-2030), 1497);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-1149), year0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      xYSeries0.add(0.0, (Number) 53);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-9999), (-1149));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      xYSeries0.data = list0;
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      xYSeries0.add(541.23573658022, (Number) 2, false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(4, 1);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(4, 1);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.addOrUpdate((Number) 4, (Number) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 1340L, (double) 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      xYSeries0.add(0.0, (Number) null);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(0.0, (double) 21);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      List list0 = xYSeriesCollection0.getSeries();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 21, 0.0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeries cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      xYSeries0.add(541.23573658022, (Number) 2, false);
      List list0 = xYSeries0.getItems();
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1162038354, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1005L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      double[][] doubleArray0 = new double[8][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) null, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2326, (-741), 2326);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 21, (Number) 15);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1162038354, false, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(382.818735974958, (Number) 2, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (-1711L), (Number) 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4, (Number) 4);
      xYSeries0.add(xYDataItem0, false);
      int int0 = xYSeries0.indexOf(4);
      assertEquals(0, int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      xYSeries0.addOrUpdate(211.7102496972, 2012.11505);
      int int0 = xYSeries0.indexOf((Number) null);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 333, 0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("SpreadsheetDate: Serial must be in range 2 to 2958465.");
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false, false);
      xYSeries0.addOrUpdate((Number) 4, (Number) 1);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1162038354, false, false);
      xYSeries0.add((Number) (byte)112, (Number) 1093812785, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) (byte)112, (Number) 1986618743);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1162038354, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) (byte)25, (Number) 1918392666);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 2, (double) 0);
      xYSeries0.add(xYDataItem0, true);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      xYSeries0.getItemCount();
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1005L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, false);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(4, 1);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(xYSeries1.getAutoSort());
      assertTrue(boolean0);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(4, 1);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      
      xYSeries1.setMaximumItemCount(1);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      boolean boolean0 = xYSeries0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertTrue(boolean0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true, true);
      xYSeries0.addOrUpdate(0.0, Double.NaN);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(953, 1622);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 953, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4, (Number) 4);
      xYSeries0.add(xYDataItem0, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(4, 1);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(1919251312, 1919251312);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      xYSeries0.add(0.0, (Number) null);
      xYSeries0.toArray();
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      xYSeries0.add((double) (-1711L), (Number) 2, false);
      xYSeries0.setMaximumItemCount(2);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.addOrUpdate((Number) 1.15, (Number) 56);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1162038354, false, false);
      xYSeries0.add((Number) (byte)112, (Number) 0, false);
      xYSeries0.addOrUpdate((Number) (byte)112, (Number) 1986618743);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-468L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      xYSeries0.add((Number) 3, (Number) (byte)119);
      xYSeries0.update(3, 1987405156);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      xYSeries0.add(541.23573658022, (Number) 2, false);
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      xYSeries0.clear();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(499, 499);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 499, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.delete(90, 0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      xYSeries0.add(541.23573658022, (Number) 2, false);
      xYSeries0.setMaximumItemCount(2);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 1162038354, false, false);
      xYSeries0.add((-1674.79341178953), (Number) 90, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((-1674.79341178953), (Number) 1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      xYSeries0.add((Number) 21, (Number) 15);
      xYSeries0.addOrUpdate(0.0, (-635.07181291));
      xYSeries0.add(0.0, (Number) null);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1005L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, false);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, Double.NaN);
      xYSeries0.add((Number) 0, (Number) null, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1005L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, Double.NaN);
      xYSeries0.add((Number) 0, (Number) null, false);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.hashCode();
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockDate mockDate0 = new MockDate(997L);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4, (Number) 4);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(1L);
      Date date0 = Date.from(instant0);
      Day day0 = new Day(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertTrue(boolean0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) (short) (-21267));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      xYSeries0.addOrUpdate(211.7102496972, 2012.11505);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-2112), 1852009522);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1005L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1005L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1711L));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(2922.75257129229, (-8.4861), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1005L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, true);
      xYSeries0.add(Double.NEGATIVE_INFINITY, (double) 0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.getDataItem(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }
}
