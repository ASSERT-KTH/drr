/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 00:18:54 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.javax.swing.MockDefaultListSelectionModel;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 8, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(8, 8);
      xYSeries0.setMaximumItemCount(1196573017);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(1196573017, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(643L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 643L, (double) 643L);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((double) 12, 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 643L, (double) 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.7976931348623157E308), (-1.7976931348623157E308));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      xYSeries0.add((-1.7976931348623157E308), (Number) 20);
      xYSeries0.delete(0, 0);
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 643L, (double) 643L);
      xYSeries0.add(xYDataItem0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      xYSeries0.updateByIndex(0, integer0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true, true);
      xYSeries0.add((Number) 0, (Number) 0);
      xYSeries0.update(0, 1852662636);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(1.852662636E9, xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true, true);
      xYSeries0.add((Number) 0, (Number) 0);
      xYSeries0.remove((Number) 0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate(643L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.add((double) 12, 0.0);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 12);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0L, (double) 0L);
      xYDataItem0.setY((Number) 12);
      xYSeries0.add(xYDataItem0);
      xYSeries0.remove(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0L, (double) 0L);
      xYSeries0.add(xYDataItem0);
      xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate(627L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.add((double) 627L, (Number) 0, true);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(627.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true, true);
      xYSeries0.add(Double.NaN, 0.0, false);
      int int0 = xYSeries0.indexOf((byte)18);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(627L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate(39L);
      Day day0 = new Day((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true, true);
      xYSeries0.addOrUpdate((Number) 0, (Number) (byte)2);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(39L);
      Day day0 = new Day((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true, true);
      xYSeries0.addOrUpdate((Number) 1650877472, (Number) 4);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(4.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1.650877472E9, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(643L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertFalse(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      Millisecond millisecond0 = new Millisecond((-641), second0);
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 8, false, false);
      xYSeries0.addOrUpdate(1.2422468111538578, 0.0);
      xYSeries0.addOrUpdate(1.2422468111538578, (-3164.1236906654));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-1960), (byte)125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3673.4966788), 3775.19089, false, true);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, true);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(643L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-427.6403), 863.285486611);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false);
      Object[][] objectArray0 = new Object[1][9];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(18L);
      Day day0 = new Day((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(643L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 59);
      List list0 = xYSeries0.getItems();
      xYSeries1.data = list0;
      // Undeclared exception!
      try { 
        xYSeries1.remove(59);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Week week0 = new Week(0, 0);
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(643L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2L);
      Day day0 = new Day((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-1207));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate(643L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.getX(72);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false, false);
      Object[][] objectArray0 = new Object[2][1];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray0[0]);
      java.util.Vector vector0 = defaultTableModel0.getDataVector();
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "java.time.OffsetTime", false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1175));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.7976931348623157E308), (-1.7976931348623157E308));
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Year year0 = new Year((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-9999), (-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(643L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(59, 182);
      java.util.Vector vector0 = defaultTableModel0.getDataVector();
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 59);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.addOrUpdate((Number) 59, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-1479), (-1479));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3673.4966788), 3775.19089, true, false);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      xYSeries0.data = list0;
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Hour hour0 = new Hour(date0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      List list0 = defaultKeyedValuesDataset0.getKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 8, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(8, 8);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, (TimeZone) null);
      List list0 = timeSeriesCollection0.getSeries();
      xYSeries1.data = list0;
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-4198.918079948415));
      // Undeclared exception!
      try { 
        xYSeries1.add(xYDataItem0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate(643L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      xYSeries0.data = list0;
      XYDataItem xYDataItem0 = new XYDataItem((double) 643L, (double) 643L);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockDate mockDate0 = new MockDate(643L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 8, false, false);
      xYSeries0.addOrUpdate(0.0, (-3164.1236906654));
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (Number) 1281450528, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false, false);
      xYSeries0.addOrUpdate(Double.NaN, Double.NaN);
      // Undeclared exception!
      try { 
        xYSeries0.add(Double.NaN, 1.0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(Double.NaN, 0.0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false, false);
      xYSeries0.add((Number) 4, (Number) 0.857, true);
      int int0 = xYSeries0.indexOf((byte)18);
      assertEquals((-1), int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false, false);
      xYSeries0.add((Number) 4, (Number) 0.857, true);
      XYDataItem xYDataItem1 = xYSeries0.addOrUpdate((Number) 4, (Number) 7);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0.857, xYDataItem1.getYValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(643L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 643L, (double) 643L);
      xYSeries0.add(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 2, (Number) null);
      xYSeries0.add(xYDataItem0, false);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(643L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 643L, (double) 643L);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true, true);
      xYSeries0.add(xYDataItem0, true);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3673.4966788), 3775.19089, true, false);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-2262));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        xYSeries0.getY(484);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 484, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(643L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate(39L);
      Day day0 = new Day((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true, true);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false, false);
      xYSeries0.add((Number) 4, (Number) 0.857, true);
      xYSeries0.add(Double.NaN, 0.0, false);
      xYSeries0.addOrUpdate((Number) 11, (Number) 7);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockDate mockDate0 = new MockDate(39L);
      Day day0 = new Day((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true, true);
      xYSeries0.addOrUpdate((Number) 0, (Number) (byte)2);
      xYSeries0.hashCode();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockDate mockDate0 = new MockDate(39L);
      Day day0 = new Day((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true, true);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 8, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(8, 8);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(boolean0);
      assertFalse(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 64, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(64, 64);
      xYSeries1.setMaximumItemCount(29);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(29, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 8, false, false);
      xYSeries0.addOrUpdate(0.0, (-3164.1236906654));
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(0.0, (-3164.1236906654));
      assertEquals(1, xYSeries0.getItemCount());
      
      XYSeries xYSeries1 = new XYSeries((Comparable) xYDataItem0, true, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false, false);
      Object[][] objectArray0 = new Object[2][1];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray0[0]);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      MockDefaultListSelectionModel mockDefaultListSelectionModel0 = new MockDefaultListSelectionModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0, (TableColumnModel) defaultTableColumnModel0, (ListSelectionModel) mockDefaultListSelectionModel0);
      boolean boolean0 = xYSeries0.equals(jTable0);
      assertFalse(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 8, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(boolean0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(643L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 643L, (double) 643L);
      xYSeries0.add(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockDate mockDate0 = new MockDate(39L);
      Day day0 = new Day((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true, true);
      xYSeries0.addOrUpdate((Number) 1650877472, (Number) 4);
      xYSeries0.createCopy(873, 1);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 8, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(8, 8);
      xYSeries1.addOrUpdate(0.0, (double) 8);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(1, xYSeries1.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      xYSeries0.add((Number) 1004, (Number) null);
      xYSeries0.toArray();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, false, false);
      xYSeries0.add((Number) 4, (Number) 0.857, true);
      assertFalse(xYSeries0.getAutoSort());
      
      xYSeries0.add(Double.NaN, 0.0, false);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockDate mockDate0 = new MockDate(39L);
      Day day0 = new Day((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true, true);
      xYSeries0.addOrUpdate((Number) 0, (Number) (byte)2);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((Number) 1650877472, (Number) 4);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0, true, true);
      xYSeries0.add(Double.NaN, 0.0, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 11, (Number) 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 8, false, false);
      xYSeries0.addOrUpdate(0.0, (double) 8);
      xYSeries0.addOrUpdate(0.0, (-3164.1236906654));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockDate mockDate0 = new MockDate(39L);
      Day day0 = new Day((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, 999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = null
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true, true);
      xYSeries0.add((Number) 0, (Number) 0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.update(0, 1852662636);
      Integer integer0 = (Integer)xYSeries0.getY(0);
      assertEquals(1852662636, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(643L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      xYSeries0.clear();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-1), 129);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(643L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 643L, (double) 643L);
      xYSeries0.add(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 643L, (double) 643L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false);
      xYSeries0.add((Number) 1004, (Number) null);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(643L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 643L, (double) 643L);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((double) 1935897188, 0.0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(375L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0L, (double) 0L);
      xYSeries0.add(xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-1328));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockDate mockDate0 = new MockDate(39L);
      Day day0 = new Day((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, true, true);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((Number) 1650877472, (Number) 4);
      xYSeries0.add((double) 1, (-274.389641548768), true);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(643L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries((Comparable) day0, false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(643L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 643L, (double) 643L);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((double) 643L, (double) 643L);
      xYSeries0.add((double) 1935897188, 0.0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(4, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 8, false, false);
      xYSeries0.addOrUpdate(0.0, (double) 8);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 8, false, false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 8, (-4198.918079948415), false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      MockDate mockDate0 = new MockDate(627L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      xYSeries0.add((double) 627L, (Number) 0, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 627L, (double) 627L);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true, true);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3673.4966788), 3775.19089, false, true);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, true);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertNotSame(xYSeries1, xYSeries0);
  }
}
