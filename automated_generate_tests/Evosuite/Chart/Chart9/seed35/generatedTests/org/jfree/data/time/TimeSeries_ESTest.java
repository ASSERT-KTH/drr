/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 13 07:32:33 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Button;
import java.awt.Canvas;
import java.awt.Choice;
import java.awt.FileDialog;
import java.awt.List;
import java.awt.TextArea;
import java.awt.Window;
import java.time.Instant;
import java.time.chrono.ChronoLocalDate;
import java.util.Collection;
import java.util.Date;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.OHLCDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1397), (-1397), (-1397), (-1397), (-1397));
      Year year0 = new Year((Date) mockDate0);
      Class<Window> class0 = Window.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "S.|O]SKW5J2lyFD:", "S.|O]SKW5J2lyFD:", (Class) class0);
      timeSeries0.hashCode();
      assertEquals("S.|O]SKW5J2lyFD:", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("S.|O]SKW5J2lyFD:", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      Second second1 = (Second)second0.next();
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second1, (RegularTimePeriod) second0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 8, (Class) class0);
      timeSeries0.setMaximumItemCount(1415);
      assertEquals(1415, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, true);
      timeSeries0.update(0, (Number) 0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 59);
      Integer integer0 = (Integer)timeSeries0.getValue((RegularTimePeriod) second0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(integer0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 0.0);
      timeSeriesDataItem0.setValue((-1));
      timeSeries0.add(timeSeriesDataItem0, false);
      Integer integer0 = (Integer)timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(integer0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 24);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.getValue(0);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-447L), (-447L));
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0, (Class) class0);
      timeSeries0.getTimePeriodClass();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, false);
      timeSeries0.getTimePeriod(0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("nf3zgt,Q`'i8hjDo+", string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, true);
      Day day1 = (Day)timeSeries0.getNextTimePeriod();
      timeSeries0.addOrUpdate((RegularTimePeriod) day1, (Number) 4);
      timeSeries0.getDataItem((RegularTimePeriod) day1);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Second second0 = new Second(date0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.getMaximumItemAge();
      assertEquals("nf3zgt,Q`'i8hjDo+", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, true);
      timeSeries0.getItemCount();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, false);
      timeSeries0.getIndex(day0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zg,Q`'i8hjo+", (Class) class0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("", string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("nf3zg,Q`'i8hjo+", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, false);
      timeSeries0.getDataItem(0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      timeSeries0.setNotify(false);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals("nf3zgt,Q`'i8hjDo+", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertEquals("nf3zgt,Q`'i8hjDo+", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, 0.0, true);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((int) (byte)2, 3);
      assertEquals("nf3zgt,Q`'i8hjDo+", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy((int) (byte)2, 3);
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1397), 2, (-1397), 2, 2);
      Year year0 = new Year((Date) mockDate0);
      Class<Window> class0 = Window.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "S.|O]SKW5J2lyFD:", "S.|O]SKW5J2lyFD:", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-2095.485676933));
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-1), (Number) 1128483922);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Second second0 = new Second();
      Class<List> class0 = List.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems((long) 59, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-1532));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<FileDialog> class0 = FileDialog.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "Week ", "Week ", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1388), (-1388), (-1388), (-1388), (-1388));
      Year year0 = new Year((Date) mockDate0);
      Class<Window> class0 = Window.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "S.|O]SKW5J2lyFD:", "S.|O]SKW5J2lyFD:", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-2095.485676933));
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (393) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-1073741823));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      java.util.List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      timeSeries1.data = list0;
      // Undeclared exception!
      try { 
        timeSeries1.delete(0, 59);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-860), 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      java.util.List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      timeSeries0.data = list0;
      try { 
        timeSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      java.util.List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      timeSeries1.data = list0;
      Millisecond millisecond0 = new Millisecond(0, second0);
      // Undeclared exception!
      try { 
        timeSeries1.addOrUpdate((RegularTimePeriod) millisecond0, (double) 59);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 24);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, 1307.0, 1639.775584619141, 1639.775584619141, 1307.0, 1307.0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) oHLCDataItem0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<TextArea> class0 = TextArea.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 17, (Class) class0);
      Week week0 = new Week(17, 17);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (-314.2238));
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of java.awt.TextArea.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<FileDialog> class0 = FileDialog.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "Week ", "Week ", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) 4, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "", (Class) null);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "Null 'columnKey' argument.", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) (byte)2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Button> class0 = Button.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "X-value already exists.", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (double) 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of java.awt.Button.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 8, "", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 942.392847);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "Null 'end' argument.", "", (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      timeSeries0.delete((-2147483629), 59);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<FileDialog> class0 = FileDialog.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "Week ", "Week ", (Class) class0);
      timeSeries0.removeAgedItems(true);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Week ", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Week ", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, false);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (-179.706106));
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      Day day0 = new Day();
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, false);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) (byte)22);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, 0.0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "", (Class) class0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.getIndex(day0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, 1307.0, 1639.775584619141, 1639.775584619141, 1307.0, 1307.0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) oHLCDataItem0, (Class) class0);
      timeSeries0.getTimePeriodClass();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, long0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "", (Class) class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1397), (-1397), (-1397), (-1397), (-1397));
      Year year0 = new Year((Date) mockDate0);
      Class<Window> class0 = Window.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "S.|O]SKW5J2lyFD:", "S.|O]SKW5J2lyFD:", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-1397));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(0, hour0);
      Class<Button> class0 = Button.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      timeSeries0.getItemCount();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("nf3zgt,Q`'i8hjDo+", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, 0.0);
      timeSeries0.hashCode();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      timeSeries0.setRangeDescription((String) null);
      timeSeries0.hashCode();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) second0);
      timeSeries0.setMaximumItemCount(0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(814L);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      Class<Choice> class0 = Choice.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond1, (RegularTimePeriod) fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1397), (-1397), (-1397), (-1397), (-1397));
      Year year0 = new Year((Date) mockDate0);
      Class<Window> class0 = Window.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "S.|O]SKW5J2lyFD:", "S.|O]SKW5J2lyFD:", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-2095.485676933));
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(2647, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-32), (int) (byte)2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(Integer.MAX_VALUE, 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1397), (-1397), (-1397), (-1397), (-1397));
      Year year0 = new Year((Date) mockDate0);
      Class<Window> class0 = Window.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "S.|O]SKW5J2lyFD:", "S.|O]SKW5J2lyFD:", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-2095.485676933));
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals("S.|O]SKW5J2lyFD:", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.delete((RegularTimePeriod) day0);
      assertEquals("nf3zgt,Q`'i8hjDo+", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, false);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.clear();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 59);
      timeSeries0.removeAgedItems((long) 59, true);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      timeSeries0.removeAgedItems(12L, false);
      timeSeries0.removeAgedItems((long) 59, true);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Second second0 = new Second(date0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) second0);
      timeSeries1.addOrUpdate((RegularTimePeriod) second0, (Number) 59);
      timeSeries0.addAndOrUpdate(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "", (Class) class0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 0.0);
      timeSeries1.add(timeSeriesDataItem0, false);
      assertEquals(1, timeSeries1.getItemCount());
      
      Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) day0);
      timeSeries1.update((RegularTimePeriod) day0, (Number) double0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(814L);
      Class<Choice> class0 = Choice.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      Hour hour0 = new Hour();
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) hour0, (Number) 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, false);
      System.setCurrentTimeMillis(0L);
      Day day1 = new Day();
      timeSeries0.add((RegularTimePeriod) day1, (Number) null);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Day day1 = (Day)day0.previous();
      timeSeries0.add((RegularTimePeriod) day1, 0.0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, true);
      timeSeries0.hashCode();
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Second second0 = new Second(date0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockDate mockDate0 = new MockDate(375L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "7+R<seZ*K", 0, 0, 0, 0, 0, 0, 29, 29);
      Day day0 = new Day((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) 0);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries1.add((RegularTimePeriod) day0, (Number) (byte)2, false);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals("nf3zgt,Q`'i8hjDo+", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, false);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      boolean boolean0 = timeSeries0.equals(collection0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertFalse(boolean0);
      assertEquals("nf3zgt,Q`'i8hjDo+", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 24);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, true);
      timeSeries0.getDataItem((RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      timeSeries0.getDataItem((RegularTimePeriod) second0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1397), 2, (-1397), 2, 2);
      Year year0 = new Year((Date) mockDate0);
      Class<Window> class0 = Window.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "S.|O]ScKW5J2lyFD:", "S.|O]ScKW5J2lyFD:", (Class) class0);
      timeSeries0.setMaximumItemAge(59L);
      assertEquals(59L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 24);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1397), 2, (-1397), 2, 2);
      Year year0 = new Year((Date) mockDate0);
      Class<Window> class0 = Window.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "S.|O]SKW5J2lyFD:", "S.|O]SKW5J2lyFD:", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-1397));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) second0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) second0, (double) 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      timeSeries0.setRangeDescription("nf3zgt,Q`'i8hjDo+");
      assertEquals("nf3zgt,Q`'i8hjDo+", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "nf3zgt,Q`'i8hjDo+", (Class) class0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("nf3zgt,Q`'i8hjDo+", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 59, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2857L);
      Class<Button> class0 = Button.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "The number of categories does not match the data.", "{;vi@#@", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, "", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockDate mockDate0 = new MockDate(375L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "7+R<seZ*K", 0, 0, 0, 0, 0, 0, 29, 29);
      Day day0 = new Day((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.getItems();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Second second0 = new Second(date0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1388), (-1388), (-1388), (-1388), (-1388));
      Year year0 = new Year((Date) mockDate0);
      Class<Window> class0 = Window.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "S.|O]SKW5J2lyFD:", "S.|O]SKW5J2lyFD:", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.update(11, (Number) 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)2, false);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, " but the series already contains an observation", "awDba/ wv\"\"5~:^[6;", (Class) class0);
      timeSeries0.setDomainDescription(" but the series already contains an observation");
      assertEquals(" but the series already contains an observation", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("awDba/ wv\"\"5~:^[6;", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", string0);
  }
}
