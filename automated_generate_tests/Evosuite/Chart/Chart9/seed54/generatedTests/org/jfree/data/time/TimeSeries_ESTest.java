/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 13 11:11:51 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Canvas;
import java.awt.FileDialog;
import java.awt.ScrollPane;
import java.awt.TextArea;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.List;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.SpinnerNumberModel;
import javax.swing.plaf.metal.MetalComboBoxUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "", (Class) class0);
      timeSeries0.hashCode();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) week0);
      Week week1 = (Week)week0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 53);
      timeSeries1.addAndOrUpdate(timeSeries0);
      timeSeries1.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Canvas> class0 = Canvas.class;
      Class<Minute> class1 = Minute.class;
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 1485, (-7));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Minute minute0 = (Minute)RegularTimePeriod.createInstance(class1, mockDate0, zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "", (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(4, 9);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) week0);
      Week week1 = (Week)week0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 53);
      timeSeries1.addAndOrUpdate(timeSeries0);
      timeSeries1.delete((RegularTimePeriod) week0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) week0);
      Week week1 = (Week)week0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 53);
      timeSeries1.addAndOrUpdate(timeSeries0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 17);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) week0);
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(0, timeSeries2.getItemCount());
      
      timeSeries1.update(0, (Number) 1);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) week0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries1.getItemCount());
      
      timeSeries1.getValue(0);
      assertEquals("Time", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "", (Class) class0);
      timeSeries0.setRangeDescription("W`H#*");
      timeSeries0.getRangeDescription();
      assertEquals("W`H#*", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-91), "permitted.  Try using the addOrUpdate(/ method.");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.getItemCount();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.getIndex(hour0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      Week week1 = (Week)week0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 53);
      assertEquals(2, timeSeries0.getItemCount());
      
      timeSeries0.getDataItem(1);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-91), "permitted.  Try using the addOrUpdate() method.");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockDate mockDate0 = new MockDate(24L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-91), "permitted.  Try using the addOrUpdate() method.");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(0, 1207);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Hour hour0 = new Hour();
      Month month0 = new Month();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Week week0 = new Week((-1), (-141));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) week0, (Number) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (-141) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-91), "permitted.  Try using the addOrUpdate() method.");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-2930), (Number) 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 927157330, "wd0]PM8qKYc", "^", (Class) class0);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalPropertyChangeListener metalComboBoxUI_MetalPropertyChangeListener0 = (MetalComboBoxUI.MetalPropertyChangeListener)metalComboBoxUI0.createPropertyChangeListener();
      timeSeries0.addPropertyChangeListener(metalComboBoxUI_MetalPropertyChangeListener0);
      // Undeclared exception!
      try { 
        timeSeries0.setRangeDescription("Value");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeries cannot be cast to javax.swing.JComboBox
         //
         verifyException("javax.swing.plaf.basic.BasicComboBoxUI$Handler", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems((long) 23, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 17);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-1379));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-585L));
      Class<TextArea> class0 = TextArea.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Week week0 = new Week((-1), (-1));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (-1) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second((-2427), minute0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-838));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-91), "permitted.  Try using the addOrUpdate() method.");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "JScrollBar.isFreeStanding", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-2730));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 927157330, "wd0]PM8qKYc", "^", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "JScrollBar.isFreeStanding", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1421), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Hour hour0 = new Hour();
      Month month0 = new Month();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      List list0 = defaultCategoryDataset0.getRowKeys();
      timeSeries1.data = list0;
      // Undeclared exception!
      try { 
        timeSeries1.addOrUpdate((RegularTimePeriod) month0, (Number) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Hour hour0 = new Hour();
      Month month0 = new Month();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 0);
      List list0 = categoryToPieDataset0.getKeys();
      timeSeries1.data = list0;
      // Undeclared exception!
      try { 
        timeSeries1.addOrUpdate((RegularTimePeriod) month0, (double) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-378.4268028109));
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 927157330, "wd0]PM8qKYc", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel((-1078.48), (-1078.48), (-1078.48), 0.0);
      Comparable comparable0 = spinnerNumberModel0.getMaximum();
      TimeSeries timeSeries0 = new TimeSeries(comparable0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel((-1078.48), (-1078.48), (-1078.48), 0.0);
      Comparable comparable0 = spinnerNumberModel0.getMaximum();
      TimeSeries timeSeries0 = new TimeSeries(comparable0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 59, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 927157330, "wd0]PM8qKYc", "^", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "M5Z]!+NH'Hn3.,r", "M5Z]!+NH'Hn3.,r", (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<FileDialog> class0 = FileDialog.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      Week week1 = (Week)week0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 53);
      timeSeries0.removeAgedItems(true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.removeAgedItems(false);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "JScrollBar.isFreeStanding", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Canvas> class0 = Canvas.class;
      Class<Minute> class1 = Minute.class;
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 1485, (-7));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Minute minute0 = (Minute)RegularTimePeriod.createInstance(class1, mockDate0, zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "", (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (-316.55053408053686));
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of java.awt.Canvas.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockDate mockDate0 = new MockDate(44L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-91), "permitted.  Try using the addOrUpdate(/ method.");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      timeSeries0.getIndex(hour0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "", (Class) class0);
      timeSeries0.getTimePeriodClass();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(635);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 635, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1757, 0, 3313, 1757, 0, 1757);
      Minute minute0 = new Minute((Date) mockDate0);
      Second second0 = new Second(0, minute0);
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, "", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      timeSeries0.getItemCount();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.hashCode();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Hour hour0 = new Hour();
      Month month0 = new Month();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, month0.DEFAULT_TIME_ZONE);
      int int0 = timeSeriesCollection0.indexOf(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, int0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      Hour hour0 = new Hour();
      boolean boolean0 = timeSeries0.equals(hour0.FIRST_HOUR_IN_DAY);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      Quarter quarter1 = (Quarter)quarter0.previous();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-91), "permitted.  Try using the addOrUpdate() method.");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) minute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, (-1334));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-7), (-1730));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Hour hour0 = new Hour();
      Month month0 = new Month();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) 0);
      timeSeries0.delete(0, 0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "JScrollBar.isFreeStanding", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(93, (-545));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(91, 3634);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(1, hour0);
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Canvas> class0 = Canvas.class;
      Class<Minute> class1 = Minute.class;
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 1485, (-7));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Minute minute0 = (Minute)RegularTimePeriod.createInstance(class1, mockDate0, zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "", (Class) class0);
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 927157330, "wd0]PM8qKYc", "", (Class) class0);
      timeSeries0.clear();
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("wd0]PM8qKYc", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 17);
      timeSeries0.removeAgedItems(0L, false);
      timeSeries0.removeAgedItems(1L, false);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      System.setCurrentTimeMillis(1955L);
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      Week week1 = (Week)week0.previous();
      timeSeries0.setMaximumItemAge(1L);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 53);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      Week week1 = (Week)week0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (Number) 53);
      timeSeries0.hashCode();
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockDate mockDate0 = new MockDate(24L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-91), "permitted.  Try using the addOrUpdate() method.");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) week0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      timeSeries1.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      assertNull(timeSeriesDataItem0);
      
      timeSeries0.update((RegularTimePeriod) week0, (Number) 1);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Week week0 = new Week((-1), (-141));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) week0, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 17);
      Day day0 = new Day();
      timeSeries0.add((RegularTimePeriod) day0, (Number) (byte)115);
      timeSeries0.removeAgedItems(1L, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "JScrollBar.isFreeStanding", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      assertNull(timeSeriesDataItem0);
      
      Integer integer0 = (Integer)timeSeries0.getValue((RegularTimePeriod) week0);
      assertNotNull(integer0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-91), "permitted.  Try using the addOrUpdate(/ method.");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      timeSeries0.getValue((RegularTimePeriod) minute0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-83), "permitted.  Try using the addOrUpdate() method.");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      assertNull(timeSeriesDataItem0);
      
      TimeSeries timeSeries1 = new TimeSeries((Comparable) week0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      assertNull(timeSeriesDataItem0);
      
      timeSeries0.getTimePeriods();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      assertNull(timeSeriesDataItem0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) week0);
      assertNotNull(timeSeriesDataItem1);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-91), "permitted.  Try using the addOrUpdate(/ method.");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      timeSeries0.getDataItem((RegularTimePeriod) minute0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "JScrollBar.isFreeStanding", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-2730));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-240));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-91), "permitted.  Try using the addOrUpdate(/ method.");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      timeSeries0.setMaximumItemCount(1207);
      assertEquals(1207, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "", (Class) class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", string0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "", (Class) class0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of java.awt.Canvas.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second((-2427), minute0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) second0, (double) 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(1, hour0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-585L));
      Class<TextArea> class0 = TextArea.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, 699.1565782, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-585L));
      Class<TextArea> class0 = TextArea.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-91), "permitted.  Try using the addOrUpdate(/ method.");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      timeSeries0.getItems();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-585L));
      Class<TextArea> class0 = TextArea.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 6);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.getNextTimePeriod();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      // Undeclared exception!
      try { 
        timeSeries0.update(0, (Number) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "", (Class) class0);
      timeSeries0.setDomainDescription("");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", string0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }
}
