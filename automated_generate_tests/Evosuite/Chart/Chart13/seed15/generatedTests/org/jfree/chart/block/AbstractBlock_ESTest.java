/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 01:27:45 GMT 2017
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.DocListener;
import com.lowagie.text.Document;
import com.lowagie.text.pdf.AsianFontMapper;
import com.lowagie.text.pdf.FontMapper;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfGraphics2D;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.OutputStream;
import javax.swing.DefaultListCellRenderer;
import javax.swing.border.AbstractBorder;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.StyleConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.AbstractBlock;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.LineBorder;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBlock_ESTest extends AbstractBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      
      abstractBlock0.setWidth(1.0);
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      abstractBlock0.setMargin(combinedDomainXYPlot0.DEFAULT_INSETS);
      double double0 = abstractBlock0.trimToContentHeight(0.0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("c*EZl");
      CategoryAxis categoryAxis0 = new CategoryAxis();
      labelBlock0.setMargin(categoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      double double0 = labelBlock0.trimToContentWidth(0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Color color0 = (Color)stackedAreaRenderer0.getBaseOutlinePaint();
      BlockBorder blockBorder0 = new BlockBorder(1136.05, 5698.749036, 0.0, 147.8, (Paint) color0);
      abstractBlock0.setFrame(blockBorder0);
      double double0 = abstractBlock0.getContentYOffset();
      assertEquals(1136.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("com.lowagie.text.Cell");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("F)6]L", extendedCategoryAxis0.DEFAULT_TICK_LABEL_FONT, (Plot) fastScatterPlot0, true);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      double double0 = legendTitle0.getContentXOffset();
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(3.0, double0, 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("c*EZl");
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartRenderingInfo0.getChartArea();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.0);
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("c*EZl", (Plot) meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1776, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      labelBlock0.drawBorder(sunGraphics2D0, rectangle2D_Double0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.trimToContentWidth(173.21238);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(173.21238, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      double double0 = emptyBlock0.trimToContentHeight(2684.1F);
      assertEquals(2684.10009765625, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      abstractBlock0.trimPadding(defaultCaret0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(" Aa5>zNxg,KL");
      SystemColor systemColor0 = SystemColor.textHighlight;
      BevelBorder bevelBorder0 = new BevelBorder(0, (Color) systemColor0, (Color) systemColor0);
      CompoundBorder compoundBorder0 = new CompoundBorder((Border) bevelBorder0, (Border) bevelBorder0);
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) null, (Border) compoundBorder0, 0, 0, 0, 0);
      labelBlock0.trimPadding(rectangle0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.getBounds2D();
      rectangle2D_Double1.y = 10.0;
      TextTitle textTitle0 = new TextTitle();
      textTitle0.trimPadding(rectangle2D_Double1);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(100.0, (-2.015034057025211), 100.0, 0.0);
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.trimPadding(rectangle2D_Double0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-2017.7831773573), 0.0, (-2017.7831773573), 0.0);
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.trimPadding(rectangle2D_Double0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(100.0, 0.0, 100.0, 0.0);
      AbstractBlock abstractBlock0 = new AbstractBlock();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      abstractBlock0.setMargin(combinedDomainXYPlot0.DEFAULT_INSETS);
      abstractBlock0.trimMargin(rectangle2D_Double0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(90.0, 0.0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(2272.1F, (-9525.18F), 2272.1F, (float) 12);
      emptyBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(90.0, emptyBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(90.0, 0.0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      rectangle2D_Float0.y = (-9525.18F);
      emptyBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(90.0, emptyBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      int[] intArray0 = new int[1];
      Polygon polygon0 = new Polygon(intArray0, intArray0, 0);
      Rectangle rectangle0 = (Rectangle)polygon0.getBounds2D();
      abstractBlock0.trimMargin(rectangle0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("c*EZl");
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartRenderingInfo0.getChartArea();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.0);
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("c*EZl", (Plot) meterPlot0);
      jFreeChart0.createBufferedImage(10, 1776, chartRenderingInfo0);
      labelBlock0.trimMargin(rectangle2D_Double0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      rectangle2D_Float0.x = (-977.18756F);
      LabelBlock labelBlock0 = new LabelBlock("!1LFB/");
      labelBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(" Ana5zNxg*KL");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle rectangle0 = rectangle2D_Float0.getBounds();
      BlockBorder blockBorder0 = new BlockBorder();
      labelBlock0.setFrame(blockBorder0);
      labelBlock0.trimBorder(rectangle0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-2767.2896F), (-2767.2896F), (-2767.2896F), 1252.96F);
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) periodAxis0);
      Color color0 = (Color)combinedDomainXYPlot0.getRangeCrosshairPaint();
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 1352.2994967269, (double) 500);
      colorBlock0.trimBorder(rectangle2D_Float0);
      assertEquals(500.0, colorBlock0.getHeight(), 0.01);
      assertEquals(1352.2994967269, colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(" Ana5zNxg*KL");
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle rectangle0 = rectangle2D_Float0.getBounds();
      labelBlock0.trimBorder(rectangle0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(" Aa5>zNxg,KL");
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock0.getBounds();
      rectangle2D_Float0.setRect(2.54F, 2.54F, 0.0F, 2.54F);
      labelBlock0.trimBorder(rectangle2D_Float0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Color color0 = (Color)LineRenderer3D.DEFAULT_WALL_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 0.0, 0.0);
      BevelBorder bevelBorder0 = new BevelBorder((-3860), color0, color0, color0, color0);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      Rectangle rectangle0 = bevelBorder0.getInteriorRectangle((Component) defaultListCellRenderer_UIResource0, (-3860), 1, (-3860), (-3860));
      Rectangle rectangle1 = (Rectangle)colorBlock0.trimBorder(rectangle0);
      assertEquals((-3858.0), rectangle1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(90.0, 0.0);
      double double0 = emptyBlock0.getWidth();
      assertEquals(90.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) centerArrangement0);
      blockContainer0.setWidth((-1357.32));
      double double0 = blockContainer0.getWidth();
      assertEquals((-1357.32), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-1.0), 1427.19);
      emptyBlock0.setPadding(758.0, (-1640.640702267748), 0.0, (-1640.640702267748));
      emptyBlock0.getPadding();
      assertEquals(758.0, emptyBlock0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.getPadding();
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      abstractBlock0.setMargin(combinedDomainXYPlot0.DEFAULT_INSETS);
      abstractBlock0.getMargin();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setID("G3g$PWoZ.ayTX+V");
      abstractBlock0.getID();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      LookupPaintScale lookupPaintScale0 = (LookupPaintScale)xYBlockRenderer0.getPaintScale();
      LogAxis logAxis0 = new LogAxis("fF");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) lookupPaintScale0, (ValueAxis) logAxis0);
      paintScaleLegend0.setID("");
      paintScaleLegend0.getID();
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("X: ");
      textTitle0.setHeight(90.0);
      double double0 = textTitle0.getHeight();
      assertEquals(90.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      double double0 = compositeTitle0.getContentYOffset();
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      CategoryAxis categoryAxis0 = new CategoryAxis();
      labelBlock0.setPadding(categoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      double double0 = labelBlock0.getContentXOffset();
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("c*EZl");
      labelBlock0.setMargin((double) 2.0F, (-3379.936439196741), 2.5E11, (double) 718.9734F);
      double double0 = labelBlock0.getContentXOffset();
      assertEquals(2.0, labelBlock0.getContentYOffset(), 0.01);
      assertEquals((-3379.936439196741), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(100.0, 0.0, 100.0, 0.0);
      AbstractBlock abstractBlock0 = new AbstractBlock();
      rectangle2D_Double0.setRect(0.0, 100.0, 0.0, 0.0);
      abstractBlock0.setBounds(rectangle2D_Double0);
      abstractBlock0.getBounds();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(100.0, 0.0, 100.0, 0.0);
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setBounds(rectangle2D_Double0);
      rectangle2D_Double0.setFrameFromCenter(1.0, (-16.749356641492934), (-1244.6071), (double) 10);
      abstractBlock0.getBounds();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(100.0, 0.0, 100.0, 0.0);
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setBounds(rectangle2D_Double0);
      abstractBlock0.getBounds();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(100.0, 0.0, 100.0, 0.0);
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setBounds(rectangle2D_Double0);
      rectangle2D_Double0.setFrameFromCenter((-0.47387833611598595), 0.0, (-1244.6071), (double) 10);
      abstractBlock0.getBounds();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(" Ana5zNxg*KL");
      labelBlock0.calculateTotalWidth(0.0F);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(" Ana5zNxg*KL");
      double double0 = labelBlock0.calculateTotalWidth(304.02);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(304.02, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      Color color0 = (Color)stackedAreaRenderer0.getBaseOutlinePaint();
      BlockBorder blockBorder0 = new BlockBorder(1136.05, (-4762.59), 0.0, 147.8, (Paint) color0);
      abstractBlock0.setFrame(blockBorder0);
      double double0 = abstractBlock0.calculateTotalWidth(0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals((-4614.79), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(" Aa5>zNxg,KL");
      labelBlock0.calculateTotalHeight(0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(" Aa5>zNxg,KL");
      double double0 = labelBlock0.calculateTotalHeight(2.0E7);
      assertEquals(2.0E7, double0, 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      LabelBlock labelBlock0 = new LabelBlock("2$,T6T>]", stackedAreaRenderer0.DEFAULT_VALUE_LABEL_FONT);
      double double0 = labelBlock0.calculateTotalHeight((-2145.1));
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals((-2145.1), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("c*EZl");
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.0);
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("c*EZl", (Plot) meterPlot0);
      labelBlock0.setMargin((double) 2.0F, (-3379.936439196741), 2.5E11, (double) 718.9734F);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1776, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      labelBlock0.arrange((Graphics2D) sunGraphics2D0);
      assertEquals(2.0, labelBlock0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.0);
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1776, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      labelBlock0.arrange((Graphics2D) sunGraphics2D0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("c*EZl");
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.0);
      labelBlock0.setPadding(0.0, 0.0, (-3766.0258150533627), 0.0);
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("c*EZl", (Plot) meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1776, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Size2D size2D0 = labelBlock0.arrange((Graphics2D) sunGraphics2D0);
      assertEquals(25.0, size2D0.width, 0.01);
      assertEquals((-3754.3851900533627), size2D0.height, 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(" Aa5>[zNxg,KL");
      // Undeclared exception!
      try { 
        labelBlock0.trimPadding((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(" Aa5>[zNxg,KL");
      // Undeclared exception!
      try { 
        labelBlock0.trimMargin((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(" Aa5>zNxg,KL");
      // Undeclared exception!
      try { 
        labelBlock0.trimBorder((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(90.0, 0.0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      // Undeclared exception!
      try { 
        emptyBlock0.drawBorder((Graphics2D) null, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      // Undeclared exception!
      try { 
        labelBlock0.arrange((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.LabelBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.getFrame();
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      assertEquals(0.0, abstractBlock1.getWidth(), 0.01);
      
      abstractBlock1.setWidth(1.0);
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      assertTrue(abstractBlock1.equals((Object)abstractBlock0));
      
      abstractBlock1.setPadding(combinedDomainXYPlot0.DEFAULT_INSETS);
      boolean boolean0 = abstractBlock1.equals(abstractBlock0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      abstractBlock0.setMargin(combinedDomainXYPlot0.DEFAULT_INSETS);
      AbstractBlock abstractBlock1 = new AbstractBlock();
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertFalse(boolean0);
      assertEquals(0.0, abstractBlock1.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      assertTrue(abstractBlock1.equals((Object)abstractBlock0));
      
      LineBorder lineBorder0 = new LineBorder();
      abstractBlock1.setFrame(lineBorder0);
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertFalse(abstractBlock1.equals((Object)abstractBlock0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = new AbstractBlock();
      boolean boolean0 = abstractBlock1.equals(abstractBlock0);
      assertEquals(0.0, abstractBlock1.getWidth(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, abstractBlock1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      boolean boolean0 = abstractBlock0.equals(abstractBlock0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      boolean boolean0 = abstractBlock0.equals(styleConstants0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.toContentConstraint((RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setBounds((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bounds' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setBounds(rectangle2D_Double0);
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double((double) 10, 0.0, 0.0, (double) 10);
      rectangle2D_Double0.setRect((Rectangle2D) rectangle2D_Double1);
      AbstractBlock abstractBlock1 = new AbstractBlock();
      boolean boolean0 = abstractBlock1.equals(abstractBlock0);
      assertFalse(boolean0);
      assertEquals(0.0, abstractBlock1.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      // Undeclared exception!
      try { 
        textTitle0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Color color0 = Color.ORANGE;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-65.548015), 3896.1145028424);
      // Undeclared exception!
      try { 
        colorBlock0.setFrame((BlockFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'frame' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      // Undeclared exception!
      try { 
        blockContainer0.setMargin((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'margin' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getContentYOffset();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Color color0 = (Color)LineRenderer3D.DEFAULT_WALL_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 0.0, 0.0);
      double double0 = colorBlock0.getHeight();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) centerArrangement0);
      double double0 = blockContainer0.getWidth();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      double double0 = labelBlock0.getContentXOffset();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(" Ana5zNxg*KL");
      labelBlock0.setMargin((-511.3), (-511.3), 1.0, 1.0);
      labelBlock0.getMargin();
      assertEquals((-511.3), labelBlock0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getID();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(" Aa5>[zNxg,KL");
      labelBlock0.getMargin();
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.setPadding((-22.39914893057478), (-488.0588), (-22.39914893057478), (-22.39914893057478));
      double double0 = compositeTitle0.getContentYOffset();
      assertEquals((-488.0588), compositeTitle0.getContentXOffset(), 0.01);
      assertEquals((-22.39914893057478), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      Document document0 = new Document();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%2\"k`F0QCz+rdv.UPS+");
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) mockFileOutputStream0, (DocListener) document0);
      PdfContentByte pdfContentByte0 = new PdfContentByte(pdfWriter0);
      AsianFontMapper asianFontMapper0 = new AsianFontMapper("", "");
      PdfGraphics2D pdfGraphics2D0 = (PdfGraphics2D)pdfContentByte0.createGraphics((-74.4413F), 0.0F, (FontMapper) asianFontMapper0, true, (float) 16);
      Size2D size2D0 = compositeTitle0.arrange((Graphics2D) pdfGraphics2D0);
      assertEquals(2.0, size2D0.height, 0.01);
      assertEquals(2.0, size2D0.width, 0.01);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setID("G3g$PWoZ.ayTX+V");
      AbstractBlock abstractBlock1 = new AbstractBlock();
      boolean boolean0 = abstractBlock1.equals(abstractBlock0);
      assertFalse(boolean0);
      assertEquals(0.0, abstractBlock1.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getPadding();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }
}
