/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 29 21:19:20 GMT 2017
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.Cell;
import com.lowagie.text.Document;
import com.lowagie.text.pdf.PdfGraphics2D;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.pdf.Type3Font;
import com.lowagie.text.pdf.Type3Glyph;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import javax.swing.JScrollPane;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.block.AbstractBlock;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.LineBorder;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.ImageTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.junit.runner.RunWith;
import sun.awt.image.ShortInterleavedRaster;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBlock_ESTest extends AbstractBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      abstractBlock1.setWidth(10);
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertEquals(10.0, abstractBlock1.getWidth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      abstractBlock0.setMargin(thermometerPlot0.DEFAULT_INSETS);
      double double0 = abstractBlock0.trimToContentHeight((-4233.6));
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedDomainXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      double double0 = legendTitle0.getContentYOffset();
      assertEquals(3.0, double0, 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      BlockBorder blockBorder0 = new BlockBorder();
      abstractBlock0.setFrame(blockBorder0);
      double double0 = abstractBlock0.getContentXOffset();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      double double0 = labelBlock0.trimToContentWidth(817.28517852);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(817.28517852, double0, 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((double) (-2366.72F), (double) 0.85F);
      double double0 = emptyBlock0.trimToContentHeight(2986.4F);
      assertEquals((-2366.719970703125), emptyBlock0.getWidth(), 0.01);
      assertEquals(2986.39990234375, double0, 0.01);
      assertEquals(0.8500000238418579, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(4.0, 0.0, 0.0, (-3.0));
      Rectangle rectangle0 = line2D_Double0.getBounds();
      SystemColor systemColor0 = SystemColor.control;
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) 0, (Paint) systemColor0, (Stroke) basicStroke0);
      Font font0 = categoryMarker0.getLabelFont();
      LabelBlock labelBlock0 = new LabelBlock("7gJ{ID5", font0);
      RectangleInsets rectangleInsets0 = new RectangleInsets((-3.0), (-1795.40755), 5.0E-7, (-3.0));
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangleInsets0.createInsetRectangle((Rectangle2D) rectangle0);
      labelBlock0.trimPadding(rectangle2D_Double0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      Color color0 = (Color)textBox0.getShadowPaint();
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(",", (Plot) thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2, 2, (-116), 0, 10, (-1), true, true, true, false, true, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      colorBlock0.trimPadding(rectangle0);
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(1523);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) xYAreaRenderer0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((float) 1523, (float) 3, 0.0F, (-1497.9F));
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)rectangle2D_Float0.getFrame();
      blockContainer0.trimPadding(rectangle2D_Double0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1072.0233786693, 1072.0233786693, 1072.0233786693, 1072.0233786693);
      rectangle2D_Double0.x = (-2565.58614116273);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("3tm,[&VIR|k^pQ`t", (Comparable) 1072.0233786693, 1.0, (-1.0));
      LabelBlock labelBlock0 = new LabelBlock("", categoryPointerAnnotation0.DEFAULT_FONT);
      labelBlock0.trimMargin(rectangle2D_Double0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0E-4, 1.0, 1.0E-4, 1714.1611397);
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.trimMargin(rectangle2D_Double0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      FlowArrangement flowArrangement0 = new FlowArrangement();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) deviationRenderer0, (Arrangement) flowArrangement0, (Arrangement) flowArrangement0);
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)legendTitle0.getBounds();
      abstractBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      LabelBlock labelBlock0 = new LabelBlock("", extendedCategoryAxis0.DEFAULT_AXIS_LABEL_FONT);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(183.8F, (-200.0F), 724.7887F, 0.0F);
      labelBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("Null 'frame' argument.");
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      labelBlock0.trimMargin(rectangle0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(4.0, 0.0, 0.0, (-3.0));
      Rectangle rectangle0 = line2D_Double0.getBounds();
      rectangle0.x = (-2847);
      FlowArrangement flowArrangement0 = new FlowArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) flowArrangement0);
      blockContainer0.trimBorder(rectangle0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      Color color0 = (Color)textBox0.getShadowPaint();
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart(",", (Plot) thermometerPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 2, 2, (-116), 0, 10, (-1), true, true, true, false, true, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      colorBlock0.trimBorder(rectangle0);
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double(4.0, 0.0, 0.0, (-3.0));
      Rectangle rectangle0 = line2D_Double0.getBounds();
      FlowArrangement flowArrangement0 = new FlowArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) flowArrangement0);
      blockContainer0.trimBorder(rectangle0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("Null 'frame' argument.");
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      labelBlock0.trimBorder(rectangle0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      byte[] byteArray0 = new byte[6];
      IndexColorModel indexColorModel0 = new IndexColorModel(10, 1, byteArray0, byteArray0, byteArray0);
      ShortInterleavedRaster shortInterleavedRaster0 = (ShortInterleavedRaster)indexColorModel0.createCompatibleWritableRaster(15, 10);
      BufferedImage bufferedImage0 = indexColorModel0.convertToIntDiscrete(shortInterleavedRaster0, false);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) meterPlot0);
      ImageTitle imageTitle0 = new ImageTitle((Image) bufferedImage0, legendTitle0.DEFAULT_POSITION, legendTitle0.DEFAULT_HORIZONTAL_ALIGNMENT, legendTitle0.DEFAULT_VERTICAL_ALIGNMENT);
      double double0 = imageTitle0.getWidth();
      assertEquals(15.0, double0, 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-834.7403), 2.5E-7);
      double double0 = emptyBlock0.getWidth();
      assertEquals((-834.7403), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.getPadding();
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      RectangleInsets rectangleInsets0 = new RectangleInsets((-308.168753), (double) 0.0F, (-3324.23529777697), 0.0);
      compositeTitle0.setPadding(rectangleInsets0);
      compositeTitle0.getPadding();
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.setMargin(multiplePiePlot0.DEFAULT_INSETS);
      compositeTitle0.getMargin();
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.control;
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) 0, (Paint) systemColor0, (Stroke) basicStroke0);
      Font font0 = categoryMarker0.getLabelFont();
      LabelBlock labelBlock0 = new LabelBlock("7gJ{ID5", font0);
      labelBlock0.setMargin(10.0, 10000.0, (-2528.0), (-1.0));
      labelBlock0.getMargin();
      assertEquals(10.0, labelBlock0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("Null 'frame' argument.");
      double double0 = labelBlock0.getHeight();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_SHADOW_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 1.0, 1.0);
      double double0 = colorBlock0.getHeight();
      assertEquals(1.0, colorBlock0.getWidth(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("Null 'frame' argument.");
      double double0 = labelBlock0.getContentXOffset();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.setPadding((-1929.992213730647), (-1.0), (double) (byte)69, (double) 0.0F);
      double double0 = dateTitle0.getContentXOffset();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.width = (-1.0);
      abstractBlock0.setBounds(rectangle2D_Double0);
      abstractBlock0.getBounds();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 596.36175024602);
      emptyBlock0.calculateTotalWidth(0.0);
      assertEquals(596.36175024602, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_SHADOW_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 1.0, 1.0);
      double double0 = colorBlock0.calculateTotalWidth(1.0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, colorBlock0.getHeight(), 0.01);
      assertEquals(1.0, colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_SHADOW_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 1.0, (-1.0));
      double double0 = colorBlock0.calculateTotalWidth((-1.0));
      assertEquals(1.0, colorBlock0.getWidth(), 0.01);
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      double double0 = emptyBlock0.calculateTotalHeight(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Next");
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      Color color0 = styleContext0.getBackground(styleContext_NamedStyle0);
      LabelBlock labelBlock0 = new LabelBlock("qkRG>XLpY0R", subCategoryAxis0.DEFAULT_TICK_LABEL_FONT, (Paint) color0);
      double double0 = labelBlock0.calculateTotalHeight(0.05);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("", (Font) null);
      labelBlock0.setMargin((-1686.0517305722), 0.0, (-2467.8538975225338), (-1686.0517305722));
      double double0 = labelBlock0.calculateTotalHeight(0.0);
      assertEquals((-1686.0517305722), labelBlock0.getContentYOffset(), 0.01);
      assertEquals((-4153.905628094733), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.trimPadding((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("sQ~-I3u92");
      // Undeclared exception!
      try { 
        labelBlock0.trimMargin((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) centerArrangement0);
      // Undeclared exception!
      try { 
        blockContainer0.trimBorder((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(true, true);
      FlowArrangement flowArrangement0 = new FlowArrangement();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) deviationRenderer0, (Arrangement) flowArrangement0, (Arrangement) flowArrangement0);
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)legendTitle0.getBounds();
      // Undeclared exception!
      try { 
        abstractBlock0.drawBorder((Graphics2D) null, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("");
      // Undeclared exception!
      try { 
        textTitle0.arrange((Graphics2D) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.getFrame();
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      double double0 = blockContainer0.getWidth();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_SHADOW_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 1.0, (-1.0));
      double double0 = colorBlock0.getHeight();
      assertEquals(1.0, colorBlock0.getWidth(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      
      abstractBlock0.setHeight(0.0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertEquals(0.0, abstractBlock1.getWidth(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, abstractBlock1.getHeight(), 0.01);
      assertNotSame(abstractBlock1, abstractBlock0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      EmptyBlock emptyBlock0 = new EmptyBlock((double) 10, (double) 1);
      boolean boolean0 = abstractBlock0.equals(emptyBlock0);
      assertFalse(boolean0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(10.0, emptyBlock0.getWidth(), 0.01);
      assertEquals(1.0, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      TextTitle textTitle0 = new TextTitle("");
      boolean boolean0 = abstractBlock0.equals(textTitle0);
      assertFalse(boolean0);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      DateTitle dateTitle0 = new DateTitle();
      abstractBlock0.setMargin(dateTitle0.DEFAULT_PADDING);
      boolean boolean0 = abstractBlock0.equals(dateTitle0);
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.width = (-1.0);
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      assertTrue(abstractBlock1.equals((Object)abstractBlock0));
      
      abstractBlock0.setBounds(rectangle2D_Double0);
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertFalse(abstractBlock1.equals((Object)abstractBlock0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      TextTitle textTitle0 = new TextTitle("");
      LineBorder lineBorder0 = new LineBorder();
      abstractBlock0.setFrame(lineBorder0);
      boolean boolean0 = abstractBlock0.equals(textTitle0);
      assertFalse(boolean0);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 596.36175024602);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      boolean boolean0 = emptyBlock0.equals(rectangle2D_Float0);
      assertEquals(596.36175024602, emptyBlock0.getHeight(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      boolean boolean0 = abstractBlock0.equals(abstractBlock0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      abstractBlock1.setWidth((-1607.6597203609));
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertEquals((-1607.6597203609), abstractBlock1.getWidth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 15);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Color color0 = (Color)PiePlot.DEFAULT_LABEL_SHADOW_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 1.0, (-1.0));
      // Undeclared exception!
      try { 
        colorBlock0.toContentConstraint((RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.control;
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) 0, (Paint) systemColor0, (Stroke) basicStroke0);
      Font font0 = categoryMarker0.getLabelFont();
      LabelBlock labelBlock0 = new LabelBlock("7gJ{ID5", font0);
      // Undeclared exception!
      try { 
        labelBlock0.setBounds((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bounds' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) columnArrangement0);
      // Undeclared exception!
      try { 
        blockContainer0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      // Undeclared exception!
      try { 
        dateTitle0.setFrame((BlockFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'frame' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      // Undeclared exception!
      try { 
        compositeTitle0.setMargin((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'margin' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("Null 'frame' argument.");
      double double0 = labelBlock0.getContentYOffset();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getBounds();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getID();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      double double0 = emptyBlock0.trimToContentWidth(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.control;
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) 0, (Paint) systemColor0, (Stroke) basicStroke0);
      Font font0 = categoryMarker0.getLabelFont();
      LabelBlock labelBlock0 = new LabelBlock("7gJ{ID5", font0);
      labelBlock0.getMargin();
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.setPadding(3875.3599808281865, (-5.0), 10.0, 0.0);
      dateTitle0.getPadding();
      assertEquals((-5.0), dateTitle0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.setID("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]");
      dateTitle0.getID();
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      Cell cell0 = new Cell("");
      Document document0 = new Document((com.lowagie.text.Rectangle) cell0, 442.0F, (-3489.5557F), (float) 4, 698.01385F);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) pipedOutputStream0);
      char[] charArray0 = new char[6];
      Type3Font type3Font0 = new Type3Font(pdfWriter0, charArray0, false);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('7', (-2019.4658F), 2, 0.0F, (-2019.4658F), 0.0F);
      PdfGraphics2D pdfGraphics2D0 = (PdfGraphics2D)type3Glyph0.createGraphicsShapes(0.0F, (float) 1);
      Size2D size2D0 = compositeTitle0.arrange((Graphics2D) pdfGraphics2D0);
      assertEquals(2.0, size2D0.height, 0.01);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
      assertEquals(2.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(38.0F, 1.0F, (-524.8F), 0.0F);
      blockContainer0.trimPadding(rectangle2D_Float0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("Null 'frame' argument.");
      labelBlock0.getPadding();
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Cell cell0 = new Cell("");
      Document document0 = new Document((com.lowagie.text.Rectangle) cell0, 442.0F, (-3489.5557F), (float) 4, 698.01385F);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) pipedOutputStream0);
      char[] charArray0 = new char[6];
      Type3Font type3Font0 = new Type3Font(pdfWriter0, charArray0, false);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('7', (-2019.4658F), 2, 0.0F, (-2019.4658F), 0.0F);
      PdfGraphics2D pdfGraphics2D0 = (PdfGraphics2D)type3Glyph0.createGraphicsShapes(0.0F, (float) 1);
      Size2D size2D0 = abstractBlock0.arrange((Graphics2D) pdfGraphics2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Font font0 = XYTextAnnotation.DEFAULT_FONT;
      SystemColor systemColor0 = SystemColor.menuText;
      LabelBlock labelBlock0 = new LabelBlock("Null 'padding' argument.", font0, (Paint) systemColor0);
      // Undeclared exception!
      try { 
        labelBlock0.arrange((Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.LabelBlock", e);
      }
  }
}
