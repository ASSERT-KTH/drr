/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 00:31:37 GMT 2017
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.List;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Vector;
import javax.swing.JList;
import javax.swing.border.BevelBorder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.block.AbstractBlock;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.LineBorder;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.general.PieDataset;
import org.junit.runner.RunWith;
import sun.swing.PrintColorUIResource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBlock_ESTest extends AbstractBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      
      abstractBlock0.setWidth((-1.0));
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      abstractBlock1.setHeight((-1009.22478));
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertEquals((-1009.22478), abstractBlock1.getHeight(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin(6.0, 6.0, 6.0, 6.0);
      double double0 = abstractBlock0.trimToContentHeight(20.099285249722);
      assertEquals(6.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(8.099285249722001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 2.5E11);
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_AXIS_LABEL_INSETS;
      emptyBlock0.setMargin(rectangleInsets0);
      double double0 = emptyBlock0.trimToContentWidth(0.0);
      assertEquals(2.5E11, emptyBlock0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Color color0 = Color.cyan;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-807.3632810310263), 2208.21004);
      double double0 = colorBlock0.trimToContentWidth(2208.21004);
      assertEquals(2208.21004, double0, 0.01);
      assertEquals((-807.3632810310263), colorBlock0.getWidth(), 0.01);
      assertEquals(2208.21004, colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Color color0 = Color.cyan;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-807.4), (-807.4));
      double double0 = colorBlock0.trimToContentHeight((-807.4));
      assertEquals(0.0, double0, 0.01);
      assertEquals((-807.4), colorBlock0.getWidth(), 0.01);
      assertEquals((-807.4), colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      AbstractBlock abstractBlock0 = new AbstractBlock();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      rectangle0.grow((-465), 10);
      abstractBlock0.trimPadding(rectangle0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      AbstractBlock abstractBlock0 = new AbstractBlock();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, false, false);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      abstractBlock0.trimPadding(rectangle0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      DateTitle dateTitle0 = new DateTitle();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, false, false);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      dateTitle0.trimPadding(rectangle0);
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      rectangle2D_Float0.setRect(1.0, (-139.270053160815), (-1145.4498894), (-139.270053160815));
      PiePlot3D piePlot3D0 = new PiePlot3D();
      Color color0 = (Color)piePlot3D0.getLabelLinkPaint();
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (double) 10, 1.0E-5);
      colorBlock0.trimPadding(rectangle2D_Float0);
      assertEquals(10.0, colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0E-5, 1.0E-5, 1.0E-5, 0.0);
      LabelBlock labelBlock0 = new LabelBlock("vyGQ=fu");
      labelBlock0.trimPadding(rectangle2D_Double0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      AbstractBlock abstractBlock0 = new AbstractBlock();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, true, true);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      rectangle0.setFrameFromDiagonal((-1146.766795972265), (double) 200, 1.0, (double) 1.0F);
      abstractBlock0.trimPadding(rectangle0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      AbstractBlock abstractBlock0 = new AbstractBlock();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, false, false);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      abstractBlock0.trimMargin(rectangle0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Vector<List> vector0 = new Vector<List>();
      JList<List> jList0 = new JList<List>(vector0);
      PrintColorUIResource printColorUIResource0 = (PrintColorUIResource)jList0.getSelectionForeground();
      BevelBorder bevelBorder0 = new BevelBorder(15, (Color) printColorUIResource0, (Color) printColorUIResource0);
      Rectangle rectangle0 = bevelBorder0.getInteriorRectangle((Component) jList0, 15, 946, 445, 2601);
      abstractBlock0.trimMargin(rectangle0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, (-1759.74F), 0.0F, 0.0F);
      abstractBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1830.0F, (-3339.3965F), (-1.0F), 1830.0F);
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, (double) 1830.0F);
      rectangle2D_Float0.setRect((double) (-3339.3965F), (double) 1830.0F, (double) (-3339.3965F), 2.5E8);
      emptyBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(1830.0, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      AbstractBlock abstractBlock0 = new AbstractBlock();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, true, false, false);
      Rectangle rectangle0 = chartPanel0.getVisibleRect();
      abstractBlock0.trimBorder(rectangle0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, (-1759.74F), 0.0F, 0.0F);
      abstractBlock0.trimBorder(rectangle2D_Float0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1.0E-5, 1.0E-5, 1.0E-5, 0.0);
      LabelBlock labelBlock0 = new LabelBlock("vyGQ=fu");
      labelBlock0.trimBorder(rectangle2D_Double0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Line2D.Double line2D_Double0 = new Line2D.Double((-6446.28901128058), 0.08, (-6446.28901128058), 0.0);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      abstractBlock0.trimBorder(rectangle0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) xYErrorRenderer0);
      legendTitle0.setWidth(0.025);
      double double0 = legendTitle0.getWidth();
      assertEquals(0.025, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-1711.01), (-2595.69798));
      double double0 = emptyBlock0.getWidth();
      assertEquals((-1711.01), double0, 0.01);
      assertEquals((-2595.69798), emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.getPadding();
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setPadding(1567.437143862, Double.POSITIVE_INFINITY, (double) (-1522.0F), (-1069.7));
      abstractBlock0.getPadding();
      assertEquals(Double.POSITIVE_INFINITY, abstractBlock0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.setMargin(compositeTitle0.DEFAULT_PADDING);
      compositeTitle0.getMargin();
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setID("ke0Qp1Z\"&7.");
      abstractBlock0.getID();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Color color0 = Color.cyan;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-807.3632810310263), 2208.21004);
      double double0 = colorBlock0.getHeight();
      assertEquals(2208.21004, double0, 0.01);
      assertEquals((-807.3632810310263), colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      
      abstractBlock0.setHeight((-1.0));
      double double0 = abstractBlock0.getHeight();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot((PieDataset) null);
      JFreeChart jFreeChart0 = new JFreeChart((Plot) ringPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      double double0 = legendTitle0.getContentYOffset();
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      double double0 = compositeTitle0.getContentXOffset();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, (VerticalAlignment) null, (-3423.8583296669), (-3423.8583296669));
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) flowArrangement0);
      blockContainer0.calculateTotalWidth(0.0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("vyGQ=fu");
      double double0 = labelBlock0.calculateTotalWidth(266.9322068);
      assertEquals(266.9322068, double0, 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(5.0E-7, (double) (-4286.31F));
      double double0 = emptyBlock0.calculateTotalWidth((-4286.31005859375));
      assertEquals((-4286.31005859375), emptyBlock0.getHeight(), 0.01);
      assertEquals((-4286.31005859375), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, (-3751.91122));
      emptyBlock0.calculateTotalHeight(0.0F);
      assertEquals((-3751.91122), emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(Double.POSITIVE_INFINITY, 997.0281);
      double double0 = emptyBlock0.calculateTotalHeight(997.0281);
      assertEquals(Double.POSITIVE_INFINITY, emptyBlock0.getWidth(), 0.01);
      assertEquals(997.0281, emptyBlock0.getHeight(), 0.01);
      assertEquals(997.0281, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, (-2299.602034452));
      double double0 = emptyBlock0.calculateTotalHeight((-1545.5804016017673));
      assertEquals((-2299.602034452), emptyBlock0.getHeight(), 0.01);
      assertEquals((-1545.5804016017673), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      Size2D size2D0 = compositeTitle0.arrange((Graphics2D) null);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(2.0, size2D0.height, 0.01);
      assertEquals(2.0, size2D0.width, 0.01);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Color color0 = Color.MAGENTA;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1009.22478), (-1009.22478));
      // Undeclared exception!
      try { 
        colorBlock0.trimPadding((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(Double.POSITIVE_INFINITY, 997.0281);
      // Undeclared exception!
      try { 
        emptyBlock0.trimMargin((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(2770.865798, (-1007.8520081936389));
      // Undeclared exception!
      try { 
        emptyBlock0.trimBorder((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      EmptyBlock emptyBlock0 = new EmptyBlock((double) 0.4477F, 161.91511437659);
      // Undeclared exception!
      try { 
        emptyBlock0.drawBorder((Graphics2D) null, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.setPadding(compositeTitle0.DEFAULT_PADDING);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getWidth();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getHeight();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      abstractBlock0.setWidth(6.0);
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertEquals(6.0, abstractBlock0.getWidth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      abstractBlock1.setHeight(0.08);
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertEquals(0.08, abstractBlock1.getHeight(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertTrue(boolean0);
      assertNotSame(abstractBlock1, abstractBlock0);
      assertEquals(0.0, abstractBlock1.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin(6.0, 6.0, 6.0, 6.0);
      EmptyBlock emptyBlock0 = new EmptyBlock((-1.0), Double.POSITIVE_INFINITY);
      boolean boolean0 = abstractBlock0.equals(emptyBlock0);
      assertEquals(6.0, abstractBlock0.getContentYOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      assertTrue(abstractBlock1.equals((Object)abstractBlock0));
      
      LineBorder lineBorder0 = new LineBorder();
      abstractBlock1.setFrame(lineBorder0);
      boolean boolean0 = abstractBlock0.equals(abstractBlock1);
      assertFalse(boolean0);
      assertFalse(abstractBlock1.equals((Object)abstractBlock0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      boolean boolean0 = abstractBlock0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      boolean boolean0 = abstractBlock0.equals(abstractBlock0);
      assertTrue(boolean0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      DateTitle dateTitle0 = new DateTitle();
      boolean boolean0 = abstractBlock0.equals(dateTitle0);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      // Undeclared exception!
      try { 
        dateTitle0.arrange((Graphics2D) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.toContentConstraint((RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setBounds((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bounds' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Color color0 = Color.cyan;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-807.3632810310263), 2208.21004);
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)colorBlock0.getBounds();
      colorBlock0.setBounds(rectangle2D_Float0);
      assertEquals(2208.21004, colorBlock0.getHeight(), 0.01);
      assertEquals((-807.3632810310263), colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((double) 0.4477F, 2119.1621250616904);
      // Undeclared exception!
      try { 
        emptyBlock0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setFrame((BlockFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'frame' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setMargin((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'margin' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, (VerticalAlignment) null, 5.0, 5.0);
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) flowArrangement0);
      double double0 = blockContainer0.getContentYOffset();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(Double.POSITIVE_INFINITY, (double) 0.0F);
      Size2D size2D0 = emptyBlock0.arrange((Graphics2D) null, (RectangleConstraint) null);
      assertEquals(Double.POSITIVE_INFINITY, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, (VerticalAlignment) null, (-3423.8583296669), (-3423.8583296669));
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) flowArrangement0);
      double double0 = blockContainer0.getContentXOffset();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, (VerticalAlignment) null, 5.0, 5.0);
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) flowArrangement0);
      blockContainer0.setMargin(1000000.0, 1862.0, 568.11722857, (-1038.645947626301));
      blockContainer0.getMargin();
      assertEquals(1862.0, blockContainer0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getID();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, (VerticalAlignment) null, 5.0, 5.0);
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) flowArrangement0);
      blockContainer0.getMargin();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getFrame();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setPadding(0.6428571428571429, (-1.0), 103.8929895656089, Double.POSITIVE_INFINITY);
      double double0 = abstractBlock0.getContentXOffset();
      assertEquals(0.6428571428571429, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setID("");
      EmptyBlock emptyBlock0 = new EmptyBlock(Double.POSITIVE_INFINITY, (double) 0.0F);
      boolean boolean0 = abstractBlock0.equals(emptyBlock0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, emptyBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getPadding();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 2.5E9, (double) 10, chartRenderingInfo0);
      assertEquals(0, bufferedImage0.getMinTileX());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Size2D size2D0 = abstractBlock0.arrange((Graphics2D) null);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }
}
