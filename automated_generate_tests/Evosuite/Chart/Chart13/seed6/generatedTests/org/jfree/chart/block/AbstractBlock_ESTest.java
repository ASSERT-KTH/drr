/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 22:54:45 GMT 2017
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.DocListener;
import com.lowagie.text.Document;
import com.lowagie.text.pdf.AsianFontMapper;
import com.lowagie.text.pdf.FontMapper;
import com.lowagie.text.pdf.PdfGraphics2D;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.pdf.Type3Font;
import com.lowagie.text.pdf.Type3Glyph;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.OutputStream;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.AbstractBlock;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.GridArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.VerticalAlignment;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBlock_ESTest extends AbstractBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      colorBlock0.setMargin((-1.0), 48.04656188, (-1346.8384608118317), 2372.39856112);
      double double0 = colorBlock0.trimToContentWidth(1.2F);
      assertEquals((-1.0), colorBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Gkks", (Plot) combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend(0);
      double double0 = legendTitle0.getContentXOffset();
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedDomainXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.setPadding(0.0, (double) 15, (double) (-672.0F), 0.0);
      assertEquals(2.0, legendTitle0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin(0.0, 0.0, 1632.7526779982632, 0.0);
      assertEquals(0.0, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Document document0 = new Document();
      MockFile mockFile0 = new MockFile((File) null, "org.jfree.chart.text.TextAnchor");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream((File) mockFile0);
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) mockFileOutputStream0, (DocListener) document0);
      Type3Font type3Font0 = new Type3Font(pdfWriter0, true);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('7', 2106.0F, (-1419.1669F), 1024, (-2292.2043F), 409.7506F);
      AsianFontMapper asianFontMapper0 = new AsianFontMapper("Symbol", "com/lowagie/text/pdf/fonts/");
      PdfGraphics2D pdfGraphics2D0 = (PdfGraphics2D)type3Glyph0.createGraphics(1.0F, (float) 3, (FontMapper) asianFontMapper0);
      abstractBlock0.drawBorder(pdfGraphics2D0, rectangle2D_Float0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.setPadding((-1240.057), (-1240.057), (-1240.057), (-1240.057));
      double double0 = blockContainer0.trimToContentWidth((-1240.057));
      assertEquals((-1240.057), blockContainer0.getContentYOffset(), 0.01);
      assertEquals(1240.057, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      RectangleInsets rectangleInsets0 = new RectangleInsets((-5253.0), (-2692.6769216236635), (-1346.8384608118317), (-1346.8384608118317));
      colorBlock0.setMargin(rectangleInsets0);
      double double0 = colorBlock0.trimToContentHeight((-1346.8384608118317));
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
      assertEquals(5253.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.setFrameFromCenter(0.0, (-1346.8384608118317), (-1346.8384608118317), (-1.0));
      colorBlock0.trimPadding(rectangle2D_Double0);
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(".Py@J");
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = (Rectangle)polygon0.getBounds2D();
      labelBlock0.trimPadding(rectangle0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.setRect((double) 8.8669F, (double) 8.8669F, 1276.67353, 119.0);
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.trimPadding(rectangle2D_Double0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.width = (-5253.0);
      colorBlock0.trimPadding(rectangle2D_Double0);
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, (double) 1706.371F);
      emptyBlock0.trimMargin(rectangle2D_Double0);
      assertEquals(1706.3709716796875, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      rectangle2D_Float0.setRect(0.0F, 1.0F, 1.2F, 0.0F);
      colorBlock0.trimMargin(rectangle2D_Float0);
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      RectangleInsets rectangleInsets0 = new RectangleInsets((-5253.0), (-2692.6769216236635), (-1346.8384608118317), (-1346.8384608118317));
      colorBlock0.setMargin(rectangleInsets0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      colorBlock0.trimMargin(rectangle2D_Float0);
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, 1888.4773522338, (-1.0));
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) flowArrangement0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(4313.139F, 4313.139F, 4313.139F, 4313.139F);
      blockContainer0.trimBorder(rectangle2D_Float0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      colorBlock0.trimBorder(rectangle2D_Float0);
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1.0), (-1.0), 0.0, (-1.0));
      LabelBlock labelBlock0 = new LabelBlock("-Z5<g4{4N4*V");
      labelBlock0.trimBorder(rectangle2D_Double0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.infoText;
      ColorBlock colorBlock0 = new ColorBlock((Paint) systemColor0, (-5.0), (-2933.59));
      double double0 = colorBlock0.getWidth();
      assertEquals((-5.0), double0, 0.01);
      assertEquals((-2933.59), colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("");
      textTitle0.getPadding();
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_AXIS_LABEL_INSETS;
      colorBlock0.setMargin(rectangleInsets0);
      colorBlock0.getMargin();
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      RectangleInsets rectangleInsets0 = new RectangleInsets((-5253.0), (-2692.6769216236635), (-1346.8384608118317), (-1346.8384608118317));
      colorBlock0.setMargin(rectangleInsets0);
      colorBlock0.getMargin();
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 0.0, 0.0);
      double double0 = colorBlock0.getHeight();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 0.3044006247912052, 0.3044006247912052);
      double double0 = colorBlock0.getHeight();
      assertEquals(0.3044006247912052, colorBlock0.getWidth(), 0.01);
      assertEquals(0.3044006247912052, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedDomainXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      double double0 = legendTitle0.getContentYOffset();
      assertEquals(3.0, double0, 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) centerArrangement0);
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      compositeTitle0.setPadding((-3350.731060219009), (double) (-132.5476F), (double) (-132.5476F), (-132.54761));
      double double0 = compositeTitle0.getContentYOffset();
      assertEquals((-132.547607421875), compositeTitle0.getContentXOffset(), 0.01);
      assertEquals((-3350.731060219009), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getContentXOffset();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      RectangleInsets rectangleInsets0 = new RectangleInsets((-5253.0), (-2692.6769216236635), (-1346.8384608118317), (-1346.8384608118317));
      colorBlock0.setMargin(rectangleInsets0);
      double double0 = colorBlock0.getContentXOffset();
      assertEquals((-2692.6769216236635), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, (double) 1706.371F);
      double double0 = emptyBlock0.calculateTotalWidth(1706.3709716796875);
      assertEquals(1706.3709716796875, double0, 0.01);
      assertEquals(1706.3709716796875, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      double double0 = labelBlock0.calculateTotalWidth((-1509.441F));
      assertEquals((-1509.4410400390625), double0, 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 0.0, 0.0);
      double double0 = colorBlock0.calculateTotalHeight(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.calculateTotalHeight(1632.7526779982632);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(1632.7526779982632, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-1.0), (-1.0));
      // Undeclared exception!
      try { 
        emptyBlock0.trimPadding((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      // Undeclared exception!
      try { 
        labelBlock0.trimMargin((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      LabelBlock labelBlock0 = new LabelBlock("N%c", meterPlot0.DEFAULT_LABEL_FONT);
      // Undeclared exception!
      try { 
        labelBlock0.trimBorder((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) centerArrangement0);
      // Undeclared exception!
      try { 
        blockContainer0.toContentConstraint((RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      // Undeclared exception!
      try { 
        colorBlock0.drawBorder((Graphics2D) null, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      Document document0 = new Document();
      MockFile mockFile0 = new MockFile((File) null, "org.jfreechart.text.TextAnchor");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream((File) mockFile0);
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) mockFileOutputStream0, (DocListener) document0);
      Type3Font type3Font0 = new Type3Font(pdfWriter0, true);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('7', 2106.0F, (-1419.1669F), 1024, (-2292.2043F), 409.7506F);
      AsianFontMapper asianFontMapper0 = new AsianFontMapper("Symbol", "com/lowagie/text/pdf/fonts/");
      PdfGraphics2D pdfGraphics2D0 = (PdfGraphics2D)type3Glyph0.createGraphics(1.0F, (float) 3, (FontMapper) asianFontMapper0);
      // Undeclared exception!
      try { 
        dateTitle0.arrange((Graphics2D) pdfGraphics2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) centerArrangement0);
      // Undeclared exception!
      try { 
        blockContainer0.arrange((Graphics2D) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Font font0 = PiePlot.DEFAULT_LABEL_FONT;
      Color color0 = (Color)SymbolAxis.DEFAULT_GRID_BAND_PAINT;
      DateTitle dateTitle0 = new DateTitle(0, locale0, font0, (Paint) color0);
      dateTitle0.setPadding(dateTitle0.DEFAULT_PADDING);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      RectangleInsets rectangleInsets0 = Plot.DEFAULT_INSETS;
      colorBlock0.setMargin(rectangleInsets0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      colorBlock0.trimMargin(rectangle2D_Float0);
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      BlockBorder blockBorder0 = (BlockBorder)colorBlock0.getFrame();
      colorBlock0.setFrame(blockBorder0);
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("Bg)YbVECvVyI-mf}");
      double double0 = labelBlock0.getWidth();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("Bg)YbVECvVyI-mf}");
      labelBlock0.setWidth(275.279538868);
      double double0 = labelBlock0.getWidth();
      assertEquals(275.279538868, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      double double0 = colorBlock0.getHeight();
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) centerArrangement0);
      blockContainer0.setHeight(1412.0);
      assertEquals(1412.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      ColorBlock colorBlock1 = (ColorBlock)colorBlock0.clone();
      assertEquals((-1.0), colorBlock1.getWidth(), 0.01);
      assertEquals((-1.0), colorBlock1.getHeight(), 0.01);
      assertNotSame(colorBlock1, colorBlock0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, (double) 1706.371F);
      boolean boolean0 = emptyBlock0.equals("Null 'bounds' argument.");
      assertEquals(1706.3709716796875, emptyBlock0.getHeight(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 966, 10645, 966, 10645, 966, (-1809), false, true, false, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(653, 10, 5.0E9, (double) 1706.371F, chartRenderingInfo0);
      assertEquals(0, bufferedImage0.getMinY());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      // Undeclared exception!
      try { 
        textTitle0.setBounds((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bounds' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) centerArrangement0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 0.0, 0.0, 0.0);
      blockContainer0.setBounds(rectangle2D_Double0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      // Undeclared exception!
      try { 
        emptyBlock0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        colorBlock0.setFrame((BlockFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'frame' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock(":->:A<.@W1&IPWs~");
      // Undeclared exception!
      try { 
        labelBlock0.setMargin((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'margin' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, 1888.4773522338, (-1.0));
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) flowArrangement0);
      double double0 = blockContainer0.getContentYOffset();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-1016.71), 861.425382980282);
      LogAxis logAxis0 = new LogAxis();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) grayPaintScale0, (ValueAxis) logAxis0);
      PiePlot3D piePlot3D0 = new PiePlot3D();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, logAxis0.DEFAULT_TICK_LABEL_FONT, (Plot) piePlot3D0, true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1997, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Size2D size2D0 = paintScaleLegend0.arrange((Graphics2D) sunGraphics2D0);
      assertEquals(2.0, size2D0.width, 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(2.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.getBounds();
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      double double0 = colorBlock0.trimToContentHeight((-1346.8384608118317));
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale((-1016.71), 861.425382980282);
      LogAxis logAxis0 = new LogAxis();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) grayPaintScale0, (ValueAxis) logAxis0);
      paintScaleLegend0.getID();
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      colorBlock0.getMargin();
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.setPadding((-1240.057), (-1240.057), (-1240.057), (-1240.057));
      blockContainer0.getPadding();
      assertEquals((-1240.057), blockContainer0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setID("\u0002q/;&nt.");
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-1.0), (-1.0));
      double double0 = colorBlock0.calculateTotalHeight((-1.0));
      assertEquals((-1.0), colorBlock0.getWidth(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.getPadding();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Document document0 = new Document();
      MockFile mockFile0 = new MockFile((File) null, "org.jfree.chart.text.TextAnchor");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream((File) mockFile0);
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) mockFileOutputStream0, (DocListener) document0);
      Type3Font type3Font0 = new Type3Font(pdfWriter0, true);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('7', 2106.0F, (-1419.1669F), 1024, (-2292.2043F), 409.7506F);
      AsianFontMapper asianFontMapper0 = new AsianFontMapper("Symbol", "com/lowagie/text/pdf/fonts/");
      PdfGraphics2D pdfGraphics2D0 = (PdfGraphics2D)type3Glyph0.createGraphics(1.0F, (float) 3, (FontMapper) asianFontMapper0);
      Size2D size2D0 = abstractBlock0.arrange((Graphics2D) pdfGraphics2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(0, 0);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null, (Arrangement) gridArrangement0, (Arrangement) gridArrangement0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      blockContainer0.calculateTotalWidth(0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }
}
