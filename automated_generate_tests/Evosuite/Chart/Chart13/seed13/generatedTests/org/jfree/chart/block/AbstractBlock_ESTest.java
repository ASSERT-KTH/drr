/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 11:20:17 GMT 2017
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGraphics2D;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.pdf.Type3Font;
import com.lowagie.text.pdf.Type3Glyph;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.JInternalFrame;
import javax.swing.border.BevelBorder;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.AbstractBlock;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.GridArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.ImageTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.general.ValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBlock_ESTest extends AbstractBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 0.0193F, 666.0F);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      Font font0 = thermometerPlot0.getValueFont();
      JFreeChart jFreeChart0 = new JFreeChart("java.awt.geom.Rectangle2D$Float[x=229.9542,y=0.0,w=666.0,h=2337.94]", font0, (Plot) thermometerPlot0, true);
      char[] charArray0 = new char[7];
      Type3Font type3Font0 = new Type3Font((PdfWriter) null, charArray0, true);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('1', 0.0F, 1, 229.9542F, 2337.94F, (-1.0F));
      PdfGraphics2D pdfGraphics2D0 = (PdfGraphics2D)type3Glyph0.createGraphicsShapes(720.0F, 2458.14F, false, (float) 10);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, (-1832), (-2219), 2072, 0, 3440, 0, true, true, false, true, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      // Undeclared exception!
      jFreeChart0.draw((Graphics2D) pdfGraphics2D0, (Rectangle2D) rectangle2D_Float0, chartRenderingInfo0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.setMargin((-1219.491), (-1.0), (-1.0), 0.0);
      assertEquals((-1218.491), compositeTitle0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextBlock textBlock0 = new TextBlock();
      HorizontalAlignment horizontalAlignment0 = textBlock0.getLineAlignment();
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, 1277.40861, (double) (byte)106);
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) flowArrangement0);
      double double0 = blockContainer0.trimToContentWidth(0.0F);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      dateTitle0.setPadding((-1725.5206), 2000000.0, 5455.976489339641, 1491.2374439632158);
      dateTitle0.trimPadding(rectangle2D_Double0);
      assertEquals(2000000.0, rectangle2D_Double0.x, 0.01);
      assertEquals((-3590.748544669821), rectangle2D_Double0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(3819.16630321, 200000.0, 0.0, 0.0);
      abstractBlock0.trimPadding(rectangle2D_Double0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("", (Font) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      labelBlock0.trimPadding(defaultCaret0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.setFrame((-1725.5206), (-1.0), 5455.976489339641, (-1725.5206));
      dateTitle0.trimPadding(rectangle2D_Double0);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      rectangle2D_Float0.setFrame(1892.83, 1892.83, 945.701133, 0.0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.createUnion(rectangle2D_Float0);
      BlockContainer blockContainer0 = new BlockContainer();
      rectangle2D_Double0.add((Rectangle2D) rectangle2D_Double1);
      blockContainer0.trimMargin(rectangle2D_Double0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement(1234, 1234);
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) gridArrangement0);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTableHeader jTableHeader0 = new JTableHeader((TableColumnModel) defaultTableColumnModel0);
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(1234);
      blockContainer0.trimMargin(rectangle0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 2324.67F, 259.248F, 0.0F);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Double0.createIntersection(rectangle2D_Float0);
      EmptyBlock emptyBlock0 = new EmptyBlock((-1083.8241733387256), (double) 259.248F);
      emptyBlock0.trimMargin(rectangle2D_Double1);
      assertEquals(259.24798583984375, emptyBlock0.getHeight(), 0.01);
      assertEquals((-1083.8241733387256), emptyBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.setRect(2176.123, 0.0, (-1108.791599043), 0.0);
      EmptyBlock emptyBlock0 = new EmptyBlock((-1083.8241733387256), (double) 259.248F);
      emptyBlock0.trimMargin(rectangle2D_Double0);
      assertEquals((-1083.8241733387256), emptyBlock0.getWidth(), 0.01);
      assertEquals(259.24798583984375, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.setFrame((-2799.1), (-2799.1), 1892.83, 4.07496758);
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.trimMargin(rectangle2D_Double0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-0.30109054F), 0.9F, 0.9F, 2998.019F);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)categoryAxis3D0.DEFAULT_AXIS_LABEL_INSETS.createInsetRectangle((Rectangle2D) rectangle2D_Float0);
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)rectangle2D_Float0.createUnion(rectangle2D_Double0);
      textTitle0.trimBorder(rectangle2D_Double1);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-82.0), (-82.0));
      JInternalFrame jInternalFrame0 = new JInternalFrame("p]W7PUgd>^MCAl>", true, true, false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      emptyBlock0.trimBorder(rectangle0);
      assertEquals((-82.0), emptyBlock0.getWidth(), 0.01);
      assertEquals((-82.0), emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-0.30109054F), 0.9F, 0.9F, 2998.019F);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)textTitle0.DEFAULT_PADDING.createInsetRectangle((Rectangle2D) rectangle2D_Float0);
      textTitle0.trimBorder(rectangle2D_Double0);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1270.1669F), (-1270.1669F), (-1270.1669F), (-1270.1669F));
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.trimBorder(rectangle2D_Float0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-82.0), (-82.0));
      double double0 = emptyBlock0.getWidth();
      assertEquals((-82.0), double0, 0.01);
      assertEquals((-82.0), emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("|g", (Plot) piePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge((-1));
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ImageTitle imageTitle0 = new ImageTitle((Image) bufferedImage0, rectangleEdge0, horizontalAlignment0, verticalAlignment0);
      imageTitle0.getPadding();
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin((-1635.21728515625), (double) (-1635.2173F), 0.0, (double) 0.0F);
      abstractBlock0.getMargin();
      assertEquals((-1635.21728515625), abstractBlock0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      LookupPaintScale lookupPaintScale0 = (LookupPaintScale)xYBlockRenderer0.getPaintScale();
      LogAxis logAxis0 = new LogAxis("DG2$>[o2K$sd");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) lookupPaintScale0, (ValueAxis) logAxis0);
      paintScaleLegend0.setMargin(logAxis0.DEFAULT_TICK_LABEL_INSETS);
      paintScaleLegend0.getMargin();
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      LookupPaintScale lookupPaintScale0 = (LookupPaintScale)xYBlockRenderer0.getPaintScale();
      LogAxis logAxis0 = new LogAxis("DG2$>[o2K$sd");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) lookupPaintScale0, (ValueAxis) logAxis0);
      paintScaleLegend0.setID("DG2$>[o2K$sd");
      paintScaleLegend0.getID();
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("|g", (Plot) piePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge((-1));
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ImageTitle imageTitle0 = new ImageTitle((Image) bufferedImage0, rectangleEdge0, horizontalAlignment0, verticalAlignment0);
      double double0 = imageTitle0.getHeight();
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("2aY&Ls1W?s3,/");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) null, (ValueAxis) logAxis0);
      double double0 = paintScaleLegend0.getContentYOffset();
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getContentXOffset();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FlowArrangement flowArrangement0 = new FlowArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) flowArrangement0);
      double double0 = blockContainer0.calculateTotalWidth(2.5E7);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(2.5E7, double0, 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.calculateTotalWidth((-847.5221));
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals((-847.5221), double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-1083.8241733387256), (double) 259.248F);
      emptyBlock0.calculateTotalHeight(0.0);
      assertEquals((-1083.8241733387256), emptyBlock0.getWidth(), 0.01);
      assertEquals(259.24798583984375, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Font font0 = CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
      LabelBlock labelBlock0 = new LabelBlock("/NtXsZn", font0);
      double double0 = labelBlock0.calculateTotalHeight(3122.56F);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(3122.56005859375, double0, 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Size2D size2D0 = abstractBlock0.arrange((Graphics2D) null);
      assertEquals(0.0, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      NumberAxis numberAxis0 = new NumberAxis();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) grayPaintScale0, (ValueAxis) numberAxis0);
      Size2D size2D0 = paintScaleLegend0.arrange((Graphics2D) null);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(2.0, size2D0.width, 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(2.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextBlock textBlock0 = new TextBlock();
      HorizontalAlignment horizontalAlignment0 = textBlock0.getLineAlignment();
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, 1277.40861, 0.0);
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) flowArrangement0);
      // Undeclared exception!
      try { 
        blockContainer0.trimPadding((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Font font0 = CategoryPlot.DEFAULT_VALUE_LABEL_FONT;
      LabelBlock labelBlock0 = new LabelBlock("/NtXsZn", font0);
      // Undeclared exception!
      try { 
        labelBlock0.arrange((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.LabelBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("*del");
      CategoryAxis categoryAxis0 = new CategoryAxis();
      labelBlock0.setPadding(categoryAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.0, (-3819.16630321), (-3819.16630321), (-3819.16630321));
      abstractBlock0.setMargin(rectangleInsets0);
      double double0 = abstractBlock0.trimToContentHeight(0.0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(3819.16630321, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      double double0 = dateTitle0.getWidth();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.setWidth(5455.976489339641);
      double double0 = dateTitle0.getWidth();
      assertEquals(5455.976489339641, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getHeight();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      NumberAxis numberAxis0 = new NumberAxis();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) grayPaintScale0, (ValueAxis) numberAxis0);
      paintScaleLegend0.setHeight((-4.0));
      paintScaleLegend0.arrange((Graphics2D) null);
      assertEquals((-4.0), paintScaleLegend0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      assertEquals(0.0, abstractBlock1.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock1.getHeight(), 0.01);
      assertNotSame(abstractBlock1, abstractBlock0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      AbstractBlock abstractBlock0 = new AbstractBlock();
      boolean boolean0 = abstractBlock0.equals(rectangle2D_Float0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      LabelBlock labelBlock0 = new LabelBlock("2nAG7P>2iI=|9", candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT);
      // Undeclared exception!
      try { 
        labelBlock0.toContentConstraint((RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("|g", (Plot) piePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge(8203);
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ImageTitle imageTitle0 = new ImageTitle((Image) bufferedImage0, rectangleEdge0, horizontalAlignment0, verticalAlignment0);
      // Undeclared exception!
      try { 
        imageTitle0.setBounds((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bounds' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("|g", (Plot) piePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge((-1));
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.RIGHT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.BOTTOM;
      ImageTitle imageTitle0 = new ImageTitle((Image) bufferedImage0, rectangleEdge0, horizontalAlignment0, verticalAlignment0);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      imageTitle0.setBounds(rectangle0);
      imageTitle0.getBounds();
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      NumberAxis numberAxis0 = new NumberAxis();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) grayPaintScale0, (ValueAxis) numberAxis0);
      // Undeclared exception!
      try { 
        paintScaleLegend0.setFrame((BlockFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'frame' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("2aY&Ls1W?s3,/");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) null, (ValueAxis) logAxis0);
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      Color color0 = (Color)stackedAreaRenderer0.lookupSeriesPaint(500);
      BlockBorder blockBorder0 = new BlockBorder((Paint) color0);
      paintScaleLegend0.setFrame(blockBorder0);
      double double0 = paintScaleLegend0.getContentYOffset();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setMargin((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'margin' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getContentYOffset();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      LookupPaintScale lookupPaintScale0 = (LookupPaintScale)xYBlockRenderer0.getPaintScale();
      LogAxis logAxis0 = new LogAxis("DG2$>[o2K$sd");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) lookupPaintScale0, (ValueAxis) logAxis0);
      double double0 = paintScaleLegend0.getContentXOffset();
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin((-1635.21728515625), (double) (-1635.2173F), 0.0, (double) 0.0F);
      double double0 = abstractBlock0.getContentYOffset();
      assertEquals((-1635.21728515625), abstractBlock0.getContentXOffset(), 0.01);
      assertEquals((-1635.21728515625), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SymbolAxis symbolAxis0 = new SymbolAxis("c'", stringArray0);
      Color color0 = (Color)symbolAxis0.getGridBandPaint();
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (double) 0.0F, (-25.35755));
      colorBlock0.calculateTotalWidth(0.0F);
      assertEquals((-25.35755), colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.trimToContentHeight(0.0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      LookupPaintScale lookupPaintScale0 = (LookupPaintScale)xYBlockRenderer0.getPaintScale();
      LogAxis logAxis0 = new LogAxis("DG2$>[o2K$sd");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) lookupPaintScale0, (ValueAxis) logAxis0);
      paintScaleLegend0.getID();
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Font font0 = XYTextAnnotation.DEFAULT_FONT;
      LabelBlock labelBlock0 = new LabelBlock("b3;d{A", font0);
      labelBlock0.trimToContentWidth(Double.NaN);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getMargin();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      LookupPaintScale lookupPaintScale0 = (LookupPaintScale)xYBlockRenderer0.getPaintScale();
      LogAxis logAxis0 = new LogAxis("DG2$>[o2K$sd");
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) lookupPaintScale0, (ValueAxis) logAxis0);
      paintScaleLegend0.getFrame();
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      // Undeclared exception!
      try { 
        dateTitle0.arrange((Graphics2D) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      LabelBlock labelBlock0 = new LabelBlock("2nAG7P>2iI=|9", candlestickRenderer0.DEFAULT_VALUE_LABEL_FONT);
      double double0 = labelBlock0.calculateTotalHeight((-3295.38905));
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals((-3295.38905), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Color color0 = Color.blue;
      BevelBorder bevelBorder0 = new BevelBorder(1, color0, color0);
      Rectangle rectangle0 = bevelBorder0.getInteriorRectangle((Component) null, (-631), 0, 1, 1);
      abstractBlock0.trimPadding(rectangle0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getPadding();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.drawBorder((Graphics2D) null, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.arrange((Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }
}
