/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 17 20:53:16 GMT 2017
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.Document;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfGraphics2D;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.OutputStream;
import javax.swing.JLayeredPane;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.AbstractBlock;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.GridArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.urls.StandardXYURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.UnitType;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBlock_ESTest extends AbstractBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      
      legendTitle0.setWidth((-1.0));
      JFreeChart jFreeChart1 = new JFreeChart((Plot) combinedRangeCategoryPlot0);
      legendTitle0.removeChangeListener(jFreeChart1);
      assertFalse(jFreeChart0.equals((Object)jFreeChart1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 15);
      assertEquals(0, bufferedImage0.getMinX());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      TextTitle textTitle0 = jFreeChart0.getTitle();
      textTitle0.setMargin(multiplePiePlot0.DEFAULT_INSETS);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Font font0 = MeterPlot.DEFAULT_LABEL_FONT;
      LabelBlock labelBlock0 = new LabelBlock("", font0);
      labelBlock0.setMargin(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 3753.77);
      double double0 = labelBlock0.trimToContentWidth(152.7288667349);
      assertEquals(Double.POSITIVE_INFINITY, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("]5=ZA7?!");
      double double0 = labelBlock0.trimToContentWidth(1.0E7);
      assertEquals(1.0E7, double0, 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("!Ay");
      double double0 = labelBlock0.trimToContentHeight((-1390));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-21.22278760751), (-21.22278760751));
      double double0 = emptyBlock0.trimToContentHeight(0.4);
      assertEquals(0.4, double0, 0.01);
      assertEquals((-21.22278760751), emptyBlock0.getWidth(), 0.01);
      assertEquals((-21.22278760751), emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 1666.2985F, (-3090.827F), 0.0F);
      JScrollPane jScrollPane0 = new JScrollPane();
      JViewport jViewport0 = jScrollPane0.getViewport();
      Rectangle rectangle0 = jViewport0.getVisibleRect();
      rectangle0.add((Rectangle2D) rectangle2D_Float0);
      EmptyBlock emptyBlock0 = new EmptyBlock((double) 0, 0.0);
      Rectangle rectangle1 = (Rectangle)emptyBlock0.trimPadding(rectangle0);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JScrollPane jScrollPane0 = new JScrollPane();
      JViewport jViewport0 = jScrollPane0.getViewport();
      Rectangle rectangle0 = jViewport0.getVisibleRect();
      EmptyBlock emptyBlock0 = new EmptyBlock((double) 0, 0.0);
      Rectangle rectangle1 = (Rectangle)emptyBlock0.trimPadding(rectangle0);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(3744.5522, 3744.5522, 1861.0, 3744.5522);
      EmptyBlock emptyBlock0 = new EmptyBlock(2.5E-7, 1861.0);
      emptyBlock0.trimPadding(rectangle2D_Double0);
      assertEquals(1861.0, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("]5=ZA7?!");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-5073.975396), (-5073.975396), 3274.62031, (-1.0));
      labelBlock0.trimPadding(rectangle2D_Double0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-21.22278760751), (-21.22278760751));
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(1499.059998921, 5.0E-4, (-1212.359736943), (-21.22278760751));
      emptyBlock0.trimMargin(rectangle2D_Double0);
      assertEquals((-21.22278760751), emptyBlock0.getHeight(), 0.01);
      assertEquals((-21.22278760751), emptyBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      abstractBlock0.trimMargin(rectangle0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) centerArrangement0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-453.0F), 10.0F, 10.0F, (-453.0F));
      rectangle2D_Float0.setRect(271.53784F, 1.0F, (-453.0F), 10.0F);
      blockContainer0.trimMargin(rectangle2D_Float0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("^BSCbv[2BFpx\"g");
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock0.getBounds();
      rectangle2D_Float0.setFrameFromCenter((-1998.168975436), (-1.0), (-1998.168975436), (-1998.168975436));
      labelBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1933.1F), 0.0F, 1702.3F, (-1933.1F));
      rectangle2D_Float0.setFrameFromCenter(0.0, 32767.0, 32767.0, (double) 1702.3F);
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.trimBorder(rectangle2D_Float0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      abstractBlock0.trimBorder(rectangle0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.0F);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("Pf}LpH", (Font) null, (Plot) thermometerPlot0, true);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      rectangle2D_Float0.x = 841.91F;
      blockContainer0.trimBorder(rectangle2D_Float0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1.0), (-1.0), (-1.0), 1.0E-6);
      LabelBlock labelBlock0 = new LabelBlock("nYa5n&)");
      labelBlock0.trimBorder(rectangle2D_Double0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.setWidth(0.08);
      double double0 = legendTitle0.getWidth();
      assertEquals(0.08, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.setWidth((-132.5542));
      double double0 = legendTitle0.getWidth();
      assertEquals((-132.5542), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) xYPlot0);
      legendTitle0.getPadding();
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-21.22278760751), (-21.22278760751));
      emptyBlock0.setMargin(5.0E-6, (-4112.0), 44.83487587606, (-21.22278760751));
      emptyBlock0.getMargin();
      assertEquals(5.0E-6, emptyBlock0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-21.22278760751), (-21.22278760751));
      emptyBlock0.getMargin();
      assertEquals((-21.22278760751), emptyBlock0.getWidth(), 0.01);
      assertEquals((-21.22278760751), emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-21.22278760751), (-21.22278760751));
      double double0 = emptyBlock0.getHeight();
      assertEquals((-21.22278760751), double0, 0.01);
      assertEquals((-21.22278760751), emptyBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((double) 0, 0.0);
      double double0 = emptyBlock0.getContentYOffset();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      double double0 = blockContainer0.getContentXOffset();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.setMargin(0.2, (-1807.03), 50.0, 0.0);
      double double0 = legendTitle0.getContentXOffset();
      assertEquals(2.2, legendTitle0.getContentYOffset(), 0.01);
      assertEquals((-1805.03), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(619.06679809081, 619.06679809081);
      emptyBlock0.calculateTotalWidth(0.0);
      assertEquals(619.06679809081, emptyBlock0.getHeight(), 0.01);
      assertEquals(619.06679809081, emptyBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Color color0 = (Color)defaultPolarItemRenderer0.getBaseFillPaint();
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-4036.01774), 0.0);
      double double0 = colorBlock0.calculateTotalWidth(714.58);
      assertEquals((-4036.01774), colorBlock0.getWidth(), 0.01);
      assertEquals(714.58, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.calculateTotalWidth((-2770.53));
      assertEquals((-2770.53), double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("", (Font) null);
      labelBlock0.calculateTotalHeight(0.0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-21.22278760751), (-21.22278760751));
      double double0 = emptyBlock0.calculateTotalHeight(1029.363032);
      assertEquals((-21.22278760751), emptyBlock0.getWidth(), 0.01);
      assertEquals(1029.363032, double0, 0.01);
      assertEquals((-21.22278760751), emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-21.22278760751), (-21.22278760751));
      double double0 = emptyBlock0.calculateTotalHeight((-21.22278760751));
      assertEquals((-21.22278760751), double0, 0.01);
      assertEquals((-21.22278760751), emptyBlock0.getWidth(), 0.01);
      assertEquals((-21.22278760751), emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      Size2D size2D0 = compositeTitle0.arrange((Graphics2D) null);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(2.0, size2D0.height, 0.01);
      assertEquals(2.0, size2D0.width, 0.01);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((double) 0, 0.0);
      emptyBlock0.setPadding(0.0, (double) (-3090.827F), (double) (-3090.827F), 774.43026596);
      emptyBlock0.arrange((Graphics2D) null);
      assertEquals((-3090.826904296875), emptyBlock0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        blockContainer0.trimPadding((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        blockContainer0.trimMargin((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("Null 'c' argument.");
      // Undeclared exception!
      try { 
        labelBlock0.trimBorder((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        blockContainer0.drawBorder((Graphics2D) null, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      assertNotSame(abstractBlock1, abstractBlock0);
      assertEquals(0.0, abstractBlock1.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock1.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("", (Font) null);
      StandardXYURLGenerator standardXYURLGenerator0 = new StandardXYURLGenerator("aZBm50A8My(R ^GNb4");
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(0, (XYToolTipGenerator) null, (XYURLGenerator) standardXYURLGenerator0);
      UnitType unitType0 = cyclicXYItemRenderer0.getGapThresholdType();
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (double) 0, (-3498.4), 0.0, (double) 0);
      labelBlock0.setPadding(rectangleInsets0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      BlockBorder blockBorder0 = BlockBorder.NONE;
      legendTitle0.setFrame(blockBorder0);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      double double0 = blockContainer0.getWidth();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) xYPlot0);
      double double0 = legendTitle0.getHeight();
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-21.22278760751), (-21.22278760751));
      emptyBlock0.setHeight(14.0);
      assertEquals(14.0, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.setWidth(0.05);
      JFreeChart jFreeChart1 = new JFreeChart((Plot) combinedRangeCategoryPlot0);
      legendTitle0.removeChangeListener(jFreeChart1);
      assertEquals(0.05, legendTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("XVtqI7z>Oa;Js[r");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logarithmicAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("XVtqI7z>Oa;Js[r", (Plot) combinedDomainXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      LegendTitle legendTitle1 = (LegendTitle)legendTitle0.clone();
      legendTitle0.setMargin(0.0, (double) 10, 2.302585092994046, 0.0);
      jFreeChart0.removeSubtitle(legendTitle1);
      assertEquals(12.0, legendTitle0.getContentXOffset(), 0.01);
      assertFalse(legendTitle0.equals((Object)legendTitle1));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      boolean boolean0 = abstractBlock0.equals(integer0);
      assertFalse(boolean0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      JFreeChart jFreeChart1 = new JFreeChart((Plot) combinedRangeCategoryPlot0);
      legendTitle0.removeChangeListener(jFreeChart1);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertTrue(jFreeChart1.equals((Object)jFreeChart0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      Document document0 = new Document((com.lowagie.text.Rectangle) null);
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) null);
      PdfContentByte pdfContentByte0 = new PdfContentByte(pdfWriter0);
      PdfGraphics2D pdfGraphics2D0 = (PdfGraphics2D)pdfContentByte0.createGraphicsShapes((float) 2, (-853.0F));
      // Undeclared exception!
      try { 
        dateTitle0.arrange((Graphics2D) pdfGraphics2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        blockContainer0.toContentConstraint((RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null, (Arrangement) borderArrangement0, (Arrangement) borderArrangement0);
      // Undeclared exception!
      try { 
        legendTitle0.setBounds((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bounds' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((double) 0, 0.0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      emptyBlock0.setBounds(rectangle2D_Double0);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("^BSCbv[2BFpx\"g");
      // Undeclared exception!
      try { 
        labelBlock0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation("a~*,Es{", Double.POSITIVE_INFINITY, 1470.55016915039, 26.6687378);
      LabelBlock labelBlock0 = new LabelBlock("k'd\";5v_K>WDX4OzQL", xYPointerAnnotation0.DEFAULT_FONT, xYPointerAnnotation0.DEFAULT_PAINT);
      // Undeclared exception!
      try { 
        labelBlock0.setFrame((BlockFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'frame' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GridArrangement gridArrangement0 = new GridArrangement((-1), (-1));
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) gridArrangement0);
      // Undeclared exception!
      try { 
        blockContainer0.setMargin((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'margin' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      double double0 = legendTitle0.getContentYOffset();
      assertEquals(3.0, double0, 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      double double0 = legendTitle0.getContentXOffset();
      assertEquals(3.0, double0, 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.getID();
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((String) null, (Plot) combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.getMargin();
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-21.22278760751), (-21.22278760751));
      emptyBlock0.getFrame();
      assertEquals((-21.22278760751), emptyBlock0.getWidth(), 0.01);
      assertEquals((-21.22278760751), emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("XVtqI7z>Oa;Js[r");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logarithmicAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("XVtqI7z>Oa;Js[r", (Plot) combinedDomainXYPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.setID("XVtqI7z>Oa;Js[r");
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("]5=ZA7?!");
      labelBlock0.getPadding();
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Document document0 = new Document((com.lowagie.text.Rectangle) null);
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) null);
      PdfContentByte pdfContentByte0 = new PdfContentByte(pdfWriter0);
      PdfGraphics2D pdfGraphics2D0 = (PdfGraphics2D)pdfContentByte0.createGraphicsShapes((float) 2, (-853.0F));
      Size2D size2D0 = abstractBlock0.arrange((Graphics2D) pdfGraphics2D0);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((double) 0, 0.0);
      emptyBlock0.setPadding((-582.0), (double) (-3090.827F), (-2439.1294), (double) (-3090.827F));
      double double0 = emptyBlock0.getContentYOffset();
      assertEquals((-3090.826904296875), emptyBlock0.getContentXOffset(), 0.01);
      assertEquals((-582.0), double0, 0.01);
  }
}
