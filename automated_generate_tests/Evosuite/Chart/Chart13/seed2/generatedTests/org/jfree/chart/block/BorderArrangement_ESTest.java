/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 17 20:44:55 GMT 2017
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.Document;
import com.lowagie.text.Rectangle;
import com.lowagie.text.SimpleTable;
import com.lowagie.text.pdf.PdfGraphics2D;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.pdf.Type3Font;
import com.lowagie.text.pdf.Type3Glyph;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.SystemColor;
import java.awt.image.BufferedImage;
import java.io.OutputStream;
import java.text.AttributedCharacterIterator;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.Range;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BorderArrangement_ESTest extends BorderArrangement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      PeriodAxis periodAxis0 = new PeriodAxis("VaN5[Uwq}K ");
      Range range0 = periodAxis0.getRange();
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, periodAxis0.DEFAULT_RANGE, (Graphics2D) null);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      BorderArrangement borderArrangement0 = new BorderArrangement();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      BlockBorder blockBorder0 = new BlockBorder(0.0, (-3476.656263381527), 0.65, (-1013.91964224));
      blockContainer0.setFrame(blockBorder0);
      borderArrangement0.add(blockContainer0, rectangleEdge0);
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      assertEquals(0.65, size2D0.height, 0.01);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      blockContainer0.setPadding(2181.3352074379677, (-3130.1882), 2181.3352074379677, 2181.3352074379677);
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.86F);
      assertEquals((-947.9929925477272), size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      blockContainer0.setMargin((-4.0), 155.5932558598, 0.0, 0.0);
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.86F);
      assertEquals(156.4532558741051, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) meterPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFR(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN((BlockContainer) null, (Graphics2D) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer0, sunGraphics2D0, (-1217.559004149329));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1217.559004149329).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFF(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) areaRenderer0, (Arrangement) borderArrangement0, (Arrangement) borderArrangement0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      // Undeclared exception!
      try { 
        borderArrangement0.arrange(blockContainer0, (Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      LabelBlock labelBlock0 = new LabelBlock(")}W!U:\"QPQ~/Jc=TB");
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.READING;
      // Undeclared exception!
      try { 
        borderArrangement0.add(labelBlock0, attributedCharacterIterator_Attribute0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.text.AttributedCharacterIterator$Attribute cannot be cast to org.jfree.chart.util.RectangleEdge
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      SimpleTable simpleTable0 = new SimpleTable();
      Document document0 = new Document((Rectangle) simpleTable0, (float) 2, (float) 2, 720.0F, 0.0F);
      MockPrintStream mockPrintStream0 = new MockPrintStream("h/kUD`yRRE!z");
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) mockPrintStream0);
      Type3Font type3Font0 = new Type3Font(pdfWriter0, false);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('2', (-795.57935F), (byte)32, 0.0F, (byte)47, 314.0F);
      PdfGraphics2D pdfGraphics2D0 = (PdfGraphics2D)type3Glyph0.createGraphicsShapes(0.0F, (float) 3, true, (float) 2);
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, pdfGraphics2D0, 0.0);
      assertEquals(0.0, size2D0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, (Graphics2D) null);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.add((Block) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      BorderArrangement borderArrangement0 = new BorderArrangement();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      borderArrangement0.add(blockContainer0, rectangleEdge0);
      BorderArrangement borderArrangement1 = new BorderArrangement();
      boolean boolean0 = borderArrangement0.equals(borderArrangement1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BorderArrangement borderArrangement1 = new BorderArrangement();
      boolean boolean0 = borderArrangement0.equals(borderArrangement1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      boolean boolean0 = borderArrangement0.equals(borderArrangement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      boolean boolean0 = borderArrangement0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      PeriodAxis periodAxis0 = new PeriodAxis("VaN5[Uw}K ");
      CompassPlot compassPlot0 = new CompassPlot();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) compassPlot0, (Arrangement) borderArrangement0, (Arrangement) borderArrangement0);
      blockContainer0.add((Block) legendTitle0);
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, periodAxis0.DEFAULT_RANGE, periodAxis0.DEFAULT_RANGE, (Graphics2D) null);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      BorderArrangement borderArrangement0 = new BorderArrangement();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      borderArrangement0.add(blockContainer0, rectangleEdge0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeRR(blockContainer0, (Range) null, (Range) null, (Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.CENTER;
      VerticalAlignment verticalAlignment0 = Title.DEFAULT_VERTICAL_ALIGNMENT;
      ColumnArrangement columnArrangement0 = new ColumnArrangement(horizontalAlignment0, verticalAlignment0, 0.0, 4219.4886365);
      BlockContainer blockContainer1 = new BlockContainer((Arrangement) columnArrangement0);
      blockContainer0.add((Block) blockContainer1);
      Size2D size2D0 = blockContainer0.arrange((Graphics2D) null);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      borderArrangement0.add(blockContainer0, rectangleEdge0);
      SimpleTable simpleTable0 = new SimpleTable();
      Document document0 = new Document((Rectangle) simpleTable0, (float) 2, (float) 2, 720.0F, 0.0F);
      MockPrintStream mockPrintStream0 = new MockPrintStream("h/kUD`yRRE!z");
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) mockPrintStream0);
      Type3Font type3Font0 = new Type3Font(pdfWriter0, true);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('2', (-795.57935F), (byte)32, 0.0F, (byte)47, 314.0F);
      PdfGraphics2D pdfGraphics2D0 = (PdfGraphics2D)type3Glyph0.createGraphicsShapes(0.0F, (float) 3, true, 3692.746F);
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, pdfGraphics2D0);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) areaRenderer0, (Arrangement) borderArrangement0, (Arrangement) borderArrangement0);
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement0.add(blockContainer0, legendTitle0.DEFAULT_POSITION);
      SimpleTable simpleTable0 = new SimpleTable();
      Document document0 = new Document((Rectangle) simpleTable0, (float) 2, (float) 2, 720.0F, 0.0F);
      MockPrintStream mockPrintStream0 = new MockPrintStream("h/kUD`yRRE!z");
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) mockPrintStream0);
      Type3Font type3Font0 = new Type3Font(pdfWriter0, false);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('2', (-795.57935F), (byte)32, 0.0F, (byte)47, 314.0F);
      PdfGraphics2D pdfGraphics2D0 = (PdfGraphics2D)type3Glyph0.createGraphicsShapes(0.0F, (float) 3, true, (float) 2);
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, pdfGraphics2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) areaRenderer0, (Arrangement) borderArrangement0, (Arrangement) borderArrangement0);
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement0.add(blockContainer0, legendTitle0.DEFAULT_POSITION);
      SimpleTable simpleTable0 = new SimpleTable();
      Document document0 = new Document((Rectangle) simpleTable0, (float) 2, (float) 2, 720.0F, 0.0F);
      MockPrintStream mockPrintStream0 = new MockPrintStream("h/kUD`yRRE!z");
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) mockPrintStream0);
      Type3Font type3Font0 = new Type3Font(pdfWriter0, false);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('2', (-795.57935F), (byte)32, 0.0F, (byte)47, 314.0F);
      PdfGraphics2D pdfGraphics2D0 = (PdfGraphics2D)type3Glyph0.createGraphicsShapes(0.0F, (float) 3, true, (float) 2);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeRR(blockContainer0, (Range) null, (Range) null, pdfGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) areaRenderer0, (Arrangement) borderArrangement0, (Arrangement) borderArrangement0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      borderArrangement0.add(blockContainer0, rectangleEdge0);
      // Undeclared exception!
      try { 
        borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.block.BorderArrangement", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer();
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      borderArrangement0.add(blockContainer0, rectangleEdge0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      SystemColor systemColor0 = SystemColor.controlHighlight;
      ColorBlock colorBlock0 = new ColorBlock((Paint) systemColor0, 0.0, 0.0);
      blockContainer0.add((Block) colorBlock0);
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, (Graphics2D) null, 0.86F);
      assertEquals(0.8600000143051147, size2D0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) areaRenderer0, (Arrangement) borderArrangement0, (Arrangement) borderArrangement0);
      BlockContainer blockContainer0 = new BlockContainer();
      borderArrangement0.add(blockContainer0, legendTitle0.DEFAULT_POSITION);
      SimpleTable simpleTable0 = new SimpleTable();
      Document document0 = new Document((Rectangle) simpleTable0, (float) 2, (float) 2, 720.0F, 0.0F);
      MockPrintStream mockPrintStream0 = new MockPrintStream("h/kUD`yRRE!z");
      PdfWriter pdfWriter0 = PdfWriter.getInstance(document0, (OutputStream) mockPrintStream0);
      Type3Font type3Font0 = new Type3Font(pdfWriter0, false);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('2', (-795.57935F), (byte)32, 0.0F, (byte)47, 314.0F);
      PdfGraphics2D pdfGraphics2D0 = (PdfGraphics2D)type3Glyph0.createGraphicsShapes(0.0F, (float) 3, true, (float) 2);
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, pdfGraphics2D0, 0.0);
      assertEquals(0.0, size2D0.width, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      borderArrangement0.clear();
  }
}
