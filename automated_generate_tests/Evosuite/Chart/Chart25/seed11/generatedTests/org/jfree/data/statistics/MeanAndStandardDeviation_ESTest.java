/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 23:10:21 GMT 2017
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.statistics.MeanAndStandardDeviation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MeanAndStandardDeviation_ESTest extends MeanAndStandardDeviation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((double) 16, (double) 64);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) null, (Number) null);
      Number number0 = meanAndStandardDeviation0.getStandardDeviation();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) integer0, (Number) integer0);
      Integer integer1 = (Integer)meanAndStandardDeviation0.getStandardDeviation();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(2538.667927, 1520.76448859);
      Double double0 = (Double)meanAndStandardDeviation0.getStandardDeviation();
      assertEquals(1520.76448859, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) null, (Number) null);
      Number number0 = meanAndStandardDeviation0.getMean();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Short short0 = new Short((short) (-1581));
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) short0, (Number) null);
      Short short1 = (Short)meanAndStandardDeviation0.getMean();
      assertEquals((short) (-1581), (short)short1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(2538.667927, 1520.76448859);
      Double double0 = (Double)meanAndStandardDeviation0.getMean();
      assertEquals(2538.667927, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) 16, (Number) 64);
      Integer integer0 = (Integer)meanAndStandardDeviation0.getMean();
      MeanAndStandardDeviation meanAndStandardDeviation1 = new MeanAndStandardDeviation((Number) integer0, (Number) integer0);
      boolean boolean0 = meanAndStandardDeviation0.equals(meanAndStandardDeviation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((Number) null, (Number) null);
      MeanAndStandardDeviation meanAndStandardDeviation1 = new MeanAndStandardDeviation((Number) null, (Number) null);
      boolean boolean0 = meanAndStandardDeviation0.equals(meanAndStandardDeviation1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(1042.91, 0.0);
      MeanAndStandardDeviation meanAndStandardDeviation1 = new MeanAndStandardDeviation(4514.656, (-1016.496102214));
      boolean boolean0 = meanAndStandardDeviation1.equals(meanAndStandardDeviation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(1042.91, 0.0);
      boolean boolean0 = meanAndStandardDeviation0.equals(meanAndStandardDeviation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(1042.91, 0.0);
      boolean boolean0 = meanAndStandardDeviation0.equals("o>%QyeSK%7F[15{/gN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation(0.0, 0.0);
      Double double0 = (Double)meanAndStandardDeviation0.getMean();
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MeanAndStandardDeviation meanAndStandardDeviation0 = new MeanAndStandardDeviation((-244.612123104442), (-244.612123104442));
      Double double0 = (Double)meanAndStandardDeviation0.getStandardDeviation();
      assertEquals((-244.612123104442), (double)double0, 0.01);
  }
}
