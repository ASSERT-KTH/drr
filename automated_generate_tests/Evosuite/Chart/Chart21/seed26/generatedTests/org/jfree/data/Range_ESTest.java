/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 23 13:08:12 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-2748.36), (-2748.36));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-680.197668), (-680.197668));
      Range range1 = Range.shift(range0, (-680.197668));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals((-1360.395336), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expandToInclude(range0, 2903.71092);
      Range range2 = Range.shift(range1, 1.0);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1452.35546, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-191.3632579));
      Range range2 = Range.expandToInclude(range1, (-191.3632579));
      assertSame(range2, range1);
      assertEquals(191.3632579, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-191.3632579));
      boolean boolean0 = range1.intersects((-1.0), 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-2720.01504898));
      boolean boolean0 = range1.intersects(0.0, (-2720.01504898));
      assertEquals((-2720.01504898), range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      boolean boolean0 = range0.intersects((-2835.0), (-1023.9346406));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-4398.039078992085), (-1627.0));
      Range range1 = Range.shift(range0, 2091.598491351891, true);
      assertEquals(2771.039078992085, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0), true);
      Range range2 = Range.expandToInclude(range1, (-1.0));
      Range range3 = Range.shift(range2, 1.0);
      assertEquals((-0.5), range3.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-365.2888806251416), (-365.2888806251416));
      Range range1 = Range.shift(range0, 1161.712392164515, false);
      double double0 = range1.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-5943.0), (-5943.0));
      double double0 = range0.getUpperBound();
      assertEquals((-5943.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-2748.36), (-2748.36));
      double double0 = range0.getLowerBound();
      assertEquals((-2748.36), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range((-2748.36), (-2748.36));
      double double0 = range0.getCentralValue();
      assertEquals((-2748.36), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.shift(range0, 2.0);
      Range range2 = Range.expandToInclude(range1, 2.0);
      Range range3 = Range.expand(range2, 2484.0, 2.0);
      assertEquals((-2479.0), range3.getCentralValue(), 0.01);
      assertEquals(2.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, 2097.1156958597244);
      Range range2 = Range.expand(range1, (-1268.020209782), 0.028980481451549966);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expand(range0, (-141.920413967867), 4946.120734717163);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.constrain(0.8257136492597268);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range((-2748.36), (-2748.36));
      Range range1 = Range.shift(range0, (-1220.79866), false);
      Range range2 = Range.combine(range0, range1);
      assertEquals((-3358.75933), range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0), false);
      Range range2 = Range.expandToInclude(range1, (-1.0));
      double double0 = range2.getLength();
      assertEquals((-1.5), range2.getCentralValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range((-680.197668), (-680.197668));
      boolean boolean0 = range0.contains((-680.197668));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.getUpperBound();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.getLowerBound();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range((-3921.72), (-3921.72));
      Range range1 = Range.expandToInclude(range0, (-2.702212165826305));
      boolean boolean0 = range1.equals(range0);
      assertEquals((-3921.72), range1.getLowerBound(), 0.01);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.shift(range0, (-141.920413967867), true);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range(1746.49127156, 1746.49127156);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.shift(range0, 3639.1, true);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2950.6344977267613);
      assertEquals(2950.6344977267613, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range((-5943.0), (-5943.0));
      Range range1 = Range.combine(range0, (Range) null);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range((-5943.0), (-5943.0));
      Range range1 = Range.combine((Range) null, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain((-2675.961477319));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.constrain(0.028980481451549966);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(326.20735821, 326.20735821);
      Range range1 = Range.expandToInclude(range0, 2685.006);
      boolean boolean0 = range1.intersects(1704.92853859456, 0.0);
      assertFalse(boolean0);
      assertEquals(1505.606679105, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-191.3632579));
      boolean boolean0 = range1.intersects(0.0, (-191.3632579));
      assertFalse(boolean0);
      assertEquals((-95.68162895), range1.getCentralValue(), 0.01);
      assertEquals((-191.3632579), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(1.0, 1452.35546);
      boolean boolean0 = range0.intersects((-3834.97829685702), 1452.35546);
      assertTrue(boolean0);
      assertEquals(726.67773, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-2866.393856510181), 3639.1);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains(2144.10344490249);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(486.5006521287506, 486.5006521287506);
      Range range1 = Range.expandToInclude(range0, (-2860.337621362772));
      double double0 = range1.constrain((-2860.337621362772));
      assertEquals((-2860.337621362772), double0, 0.01);
      assertEquals(486.5006521287506, range1.getUpperBound(), 0.01);
      assertEquals((-2860.337621362772), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      boolean boolean0 = range0.contains((-572.020338384095));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(2523.6087, (-3747.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (2523.6087) <= upper (-3747.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      String string0 = range0.toString();
      assertEquals("Range[1.0,1.0]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.shift(range0, 1.0);
      Range range2 = Range.combine(range0, range1);
      boolean boolean0 = range0.equals(range2);
      assertFalse(range2.equals((Object)range0));
      assertEquals(1.5, range2.getCentralValue(), 0.01);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      range0.hashCode();
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.getCentralValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expand(range0, (-572.020338384095), 1.0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }
}
