/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 23 19:07:38 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-1487.953283926), (-1487.953283926));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 1.0, true);
      Range range2 = Range.combine(range1, range0);
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-2359.329433281685), (-2359.329433281685));
      Range range1 = Range.shift(range0, 1.0, true);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-18.0178), false);
      assertEquals((-18.0178), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-1487.953283926), (-1487.953283926));
      Range range1 = Range.shift(range0, 564.9, true);
      Range range2 = Range.combine(range0, range1);
      Range range3 = Range.expandToInclude(range2, (-1064.02365));
      assertEquals((-1205.503283926), range3.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-2359.329433281685), (-2359.329433281685));
      Range range1 = Range.expandToInclude(range0, 1.0);
      Range range2 = Range.shift(range1, 1.0, true);
      boolean boolean0 = range2.intersects(1.0, 1.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range((-2359.329433281685), (-2359.329433281685));
      Range range1 = Range.shift(range0, (-2359.329433281685), true);
      boolean boolean0 = range1.intersects((-2359.329433281685), (-2359.329433281685));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      boolean boolean0 = range1.intersects(0.0, 0.0);
      assertFalse(boolean0);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-1487.953283926), (-1487.953283926));
      boolean boolean0 = range0.intersects((-1487.953283926), 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-2242.7308013418155), 0.0);
      Range range1 = Range.expand(range0, 622.405829377876, (-1.0));
      Range range2 = Range.combine(range1, range1);
      double double0 = range2.getUpperBound();
      assertEquals(2242.7308013418155, range0.getLength(), 0.01);
      assertEquals(1395888.724480461, range2.getLength(), 0.01);
      assertEquals((-2242.7308013418155), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-1487.953283926), (-1487.953283926));
      double double0 = range0.getLowerBound();
      assertEquals((-1487.953283926), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range((-1697.8518168698313), 0.0);
      double double0 = range0.getLength();
      assertEquals(1697.8518168698313, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(2538.6, 2538.6);
      double double0 = range0.getCentralValue();
      assertEquals(2538.6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range((-1487.953283926), (-1487.953283926));
      Range range1 = Range.expand(range0, (-1487.953283926), (-1487.953283926));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 1.0, true);
      Range range2 = Range.combine(range1, range0);
      double double0 = range2.constrain(49.787494);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 972.0587099353, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range((-1697.8518168698313), 0.0);
      boolean boolean0 = range0.contains((-1697.8518168698313));
      assertTrue(boolean0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 1.0, true);
      boolean boolean0 = range1.contains(0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(0.0, (-1907.2184187707312));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1907.2184187707312).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      double double0 = range0.getUpperBound();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      double double0 = range0.getLowerBound();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.shift(range0, 2.0, false);
      Range range2 = Range.combine(range1, range0);
      Range range3 = Range.shift(range2, 0.0);
      boolean boolean0 = range0.equals(range3);
      assertFalse(boolean0);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertEquals(3.0, range3.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range3));
      assertTrue(range3.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range((-2359.329433281685), (-2359.329433281685));
      Range range1 = Range.shift(range0, (-2359.329433281685), true);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-1697.8518168698313), 0.0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertEquals((-848.9259084349156), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.shift(range0, (-1466.8616057), false);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-2094.40038), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.expandToInclude(range0, 159.70792504634);
      assertEquals(80.85396252317, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, (Range) null);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-2094.40038));
      Range range1 = Range.combine((Range) null, range0);
      assertEquals((-2094.40038), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain(49.787494);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range((-1697.8518168698313), 0.0);
      Range range1 = Range.shift(range0, (-209.3666019009), true);
      boolean boolean0 = range1.intersects((-1697.8518168698313), (-1770.5061899874233));
      assertFalse(boolean0);
      assertEquals((-1058.2925103358157), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-1149.4), 811.041803);
      boolean boolean0 = range0.intersects(811.041803, 0.0);
      assertFalse(boolean0);
      assertEquals((-169.17909850000007), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      boolean boolean0 = range1.intersects((-694.8961359993623), 1.0);
      assertTrue(boolean0);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      boolean boolean0 = range0.intersects((-694.8961359993623), 1.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.expand(range1, 2.0, 0.0);
      boolean boolean0 = range2.intersects(0.0, 2996.99463756529);
      assertTrue(boolean0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(6.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range((-1697.8518168698313), 0.0);
      double double0 = range0.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1697.8518168698313), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1139.0));
      boolean boolean0 = range0.contains(2011.9615263499);
      assertFalse(boolean0);
      assertEquals((-1139.0), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.constrain((-1.019));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-2094.40038));
      String string0 = range0.toString();
      assertEquals("Range[-2094.40038,-2094.40038]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-2094.40038));
      assertEquals((-2094.40038), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.shift(range0, (-3096.53));
      assertEquals((-5190.93038), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range((-1149.4), 811.041803);
      double double0 = range0.getCentralValue();
      assertEquals((-169.17909850000007), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.expand(range0, 2.0, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }
}
