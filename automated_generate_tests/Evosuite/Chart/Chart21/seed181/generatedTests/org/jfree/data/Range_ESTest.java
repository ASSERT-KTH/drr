/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 18:13:32 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range(0.9950429564893425, 0.9950429564893425);
      Range range1 = Range.shift(range0, (-1.0), true);
      range1.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-645.72), (-645.72));
      Range range1 = Range.expandToInclude(range0, 2.0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals(647.72, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-3036.1889), (-3036.1889));
      Range range1 = Range.shift(range0, (-3036.1889), false);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals((-6072.3778), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, 0.0);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-444.00546300749494), 795.615);
      Range range1 = Range.shift(range0, 795.615, true);
      Range range2 = Range.expandToInclude(range1, 795.615);
      assertEquals(971.4197684962526, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-2461.4587657), 0.0);
      Range range1 = Range.expand(range0, 1466.9809145492, 1.0);
      Range range2 = Range.combine(range1, range1);
      boolean boolean0 = range2.intersects(1.0, 1616.2482299177);
      assertTrue(boolean0);
      assertEquals(2461.4587657, range0.getLength(), 0.01);
      assertEquals((-1805456.5156158656), range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range((-645.72), (-645.72));
      boolean boolean0 = range0.intersects(0.0, (-2796.54175337867));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(0.9950429564893425, 0.9950429564893425);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, true);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.getUpperBound();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-2461.4587657), 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(2461.4587657, range0.getLength(), 0.01);
      assertEquals((-2461.4587657), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range((-2461.4587657), 0.0);
      double double0 = range0.getLength();
      assertEquals(2461.4587657, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-1477.172), 1326.9964646673961);
      double double0 = range0.getCentralValue();
      assertEquals((-75.08776766630194), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expandToInclude(range0, (-1.0));
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range((-2461.4587657), 0.0);
      Range range1 = Range.expand(range0, 0.0, (-1.0));
      assertEquals((-2461.4587657), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.9030769816161445);
      Range range1 = Range.expand(range0, 0.9030769816161445, 0.9030769816161445);
      Range range2 = Range.combine(range1, range0);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 69.3, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-4431.516));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range((-645.72), (-645.72));
      boolean boolean0 = range0.contains((-2796.54175337867));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(1466.9809145492, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1466.9809145492) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.getUpperBound();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.getLowerBound();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expandToInclude(range0, 1787.7503);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
      assertEquals(1.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range((-448.97), (-448.97));
      Range range1 = Range.shift(range0, (-71.7767702743), true);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 331.2361654798223, 2.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.shift(range1, 3587.594118);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.9030769816161445);
      Range range1 = Range.combine(range0, (Range) null);
      assertNotNull(range1);
      assertEquals(0.9030769816161445, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range((-2772.912957157), (-2772.912957157));
      Range range1 = Range.combine((Range) null, range0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(0.9950429564893425, 0.9950429564893425);
      Range range1 = Range.shift(range0, (-1.0), true);
      range1.constrain(0.0);
      assertEquals((-0.004957043510657511), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range(0.0, 494.0);
      double double0 = range0.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(494.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range((-645.72), (-645.72));
      assertEquals((-645.72), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.shift(range0, (-645.72));
      Range range2 = Range.expandToInclude(range1, 2.0);
      boolean boolean0 = range2.intersects((-645.72), (-2796.54175337867));
      assertFalse(boolean0);
      assertEquals(1293.44, range2.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(0.0, 2.639816551566425);
      boolean boolean0 = range0.intersects(0.0, 2.639816551566425);
      assertTrue(boolean0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2.639816551566425, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      boolean boolean0 = range0.intersects(0.0, 1.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range((-444.00546300749494), 795.615);
      boolean boolean0 = range0.intersects(795.615, 795.615);
      assertFalse(boolean0);
      assertEquals(1239.620463007495, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      boolean boolean0 = range0.contains(3587.594118);
      assertFalse(boolean0);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(0.9950429564893425, 0.9950429564893425);
      double double0 = range0.constrain(0.0);
      assertEquals(0.9950429564893425, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-444.00546300749494), 795.615);
      String string0 = range0.toString();
      assertEquals("Range[-444.00546300749494,795.615]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.shift(range0, (-513.7225816332593));
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range((-444.00546300749494), 795.615);
      Range range1 = Range.shift(range0, 795.615, true);
      boolean boolean0 = range1.intersects(795.615, 795.615);
      assertTrue(boolean0);
      assertEquals(795.615, range0.getUpperBound(), 0.01);
      assertEquals(971.4197684962526, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.getCentralValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }
}
