/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 23 22:35:38 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-2833.9), (-2833.9));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(1.0517977764143507, 1.0517977764143507);
      Range range1 = Range.shift(range0, 1.0, false);
      Range range2 = Range.expandToInclude(range1, 1.0517977764143507);
      boolean boolean0 = range0.equals(range2);
      assertEquals(1.5517977764143507, range2.getCentralValue(), 0.01);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(boolean0);
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(0.0, 3301.43332976285);
      Range range1 = Range.expand(range0, 3301.43332976285, 0.0);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertEquals((-5448080.298769628), range1.getCentralValue(), 0.01);
      assertFalse(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-2781.9), 1471.5563357261892);
      Range range1 = Range.expandToInclude(range0, (-1.0));
      assertEquals((-655.1718321369054), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-2781.9), 1471.5563357261892);
      boolean boolean0 = range0.intersects((-1.0), 1471.5563357261892);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      boolean boolean0 = range0.intersects(455.17145, 2510.39449257);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(2686.957248960035, 2686.957248960035);
      boolean boolean0 = range0.intersects(0.0, (-3060.7502271));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(0.0, 3301.43332976285);
      double double0 = range0.constrain(0.0);
      assertEquals(3301.43332976285, range0.getUpperBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-2781.9), 1471.5563357261892);
      Range range1 = Range.shift(range0, 1471.5563357261892, false);
      assertEquals(816.3845035892838, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-2833.9), (-2833.9));
      Range range1 = Range.shift(range0, 2722.4499506639877, true);
      assertEquals((-111.4500493360124), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-2833.9), (-2833.9));
      Range range1 = Range.shift(range0, 0.0);
      assertEquals((-2833.9), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-1238.897), 0.0);
      double double0 = range0.getUpperBound();
      assertEquals((-619.4485), range0.getCentralValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range((-376.847833288168), (-1.0));
      double double0 = range0.getUpperBound();
      assertEquals((-188.923916644084), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-5862.586137), (-5862.586137));
      double double0 = range0.getLowerBound();
      assertEquals((-5862.586137), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(0.0, 369.9);
      double double0 = range0.getLength();
      assertEquals(369.9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range((-376.847833288168), (-1.0));
      double double0 = range0.getCentralValue();
      assertEquals((-188.923916644084), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range((-1050.5), (-1050.5));
      Range range1 = Range.expandToInclude(range0, (-1050.5));
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range((-376.847833288168), (-1.0));
      Range range1 = Range.expand(range0, 1704.007834512597, 546.50732);
      assertEquals((-217710.95412139362), range1.getCentralValue(), 0.01);
      assertEquals(375.847833288168, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-2833.9), (-2833.9));
      Range range1 = Range.expand(range0, 2722.4499506639877, (-2833.9));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range((-2781.9), 1471.5563357261892);
      Range range1 = Range.shift(range0, 1.401641091927228E7);
      double double0 = range1.constrain((-450.7137239022215));
      assertEquals(1.4017882475608006E7, range1.getUpperBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range((-2833.9), (-2833.9));
      Range range1 = Range.combine(range0, range0);
      assertEquals((-2833.9), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range((-2781.9), 1471.5563357261892);
      Range range1 = Range.combine(range0, range0);
      assertEquals((-655.1718321369054), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 838.18, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(1.0517977764143507, 1.0517977764143507);
      boolean boolean0 = range0.contains(1.0517977764143507);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(2686.957248960035, 2686.957248960035);
      boolean boolean0 = range0.contains(1.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(706.7315, 706.7315);
      double double0 = range0.getUpperBound();
      assertEquals(706.7315, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-2833.9), (-2833.9));
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(213.94213637308, 213.94213637308);
      double double0 = range0.getLowerBound();
      assertEquals(213.94213637308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range(213.94213637308, 213.94213637308);
      Range range1 = Range.shift(range0, 1286.0663);
      Range range2 = Range.combine(range0, range1);
      boolean boolean0 = range2.equals(range0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(boolean0);
      assertFalse(range2.equals((Object)range1));
      assertEquals(1286.0663, range2.getLength(), 0.01);
      assertFalse(range1.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(213.94213637308, 213.94213637308);
      Range range1 = Range.expandToInclude(range0, (-2031.0));
      boolean boolean0 = range0.equals(range1);
      assertEquals(213.94213637308, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range(382.5856824310086, 382.5856824310086);
      boolean boolean0 = range0.equals("Range[382.5856824310086,382.5856824310086]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range(213.94213637308, 213.94213637308);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(213.94213637308, 213.94213637308);
      Range range1 = Range.shift(range0, (-819.2353), false);
      Range range2 = Range.shift(range1, 1286.0663);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(1286.0663, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-1568.4949771), (-1568.4949771));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(895.645572184, 895.645572184);
      Range range1 = Range.expandToInclude(range0, 2690.768809741);
      assertEquals(1795.123237557, range1.getLength(), 0.01);
      assertEquals(895.645572184, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.combine(range0, (Range) null);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.combine((Range) null, range0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range((-2833.9), (-2833.9));
      double double0 = range0.constrain(2.0);
      assertEquals((-2833.9), range0.getLowerBound(), 0.01);
      assertEquals((-2833.9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-2781.9), 1471.5563357261892);
      boolean boolean0 = range0.intersects((-1222.6204334128695), (-1222.6204334128695));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(706.7315, 706.7315);
      Range range1 = Range.shift(range0, 706.7315, true);
      Range range2 = Range.expandToInclude(range1, 0.0);
      boolean boolean0 = range2.intersects(706.7315, (-1257.82169675));
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1413.463, range2.getLength(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(382.5856824310086, 382.5856824310086);
      boolean boolean0 = range0.intersects(382.5856824310086, 2247.699657);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range(706.7315, 706.7315);
      Range range1 = Range.expandToInclude(range0, 0.0);
      boolean boolean0 = range1.intersects(706.7315, (-1257.82169675));
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(706.7315, range1.getLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range((-2833.9), (-2833.9));
      boolean boolean0 = range0.contains(0.0);
      assertFalse(boolean0);
      assertEquals((-2833.9), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range(706.7315, 706.7315);
      double double0 = range0.constrain(706.7315);
      assertEquals(706.7315, double0, 0.01);
      assertEquals(706.7315, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(794.1, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (794.1) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range((-1238.897), 0.0);
      String string0 = range0.toString();
      assertEquals("Range[-1238.897,0.0]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = new Range(213.94213637308, 213.94213637308);
      double double0 = range0.getCentralValue();
      assertEquals(213.94213637308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = new Range(213.94213637308, 213.94213637308);
      assertEquals(213.94213637308, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.expand(range0, 1676.0, 1.0);
      assertEquals(213.94213637308, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }
}
