/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 09:43:23 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-4145.22412316819), (-4145.22412316819));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-532.833), (-532.833));
      Range range1 = Range.expandToInclude(range0, 1413.815116944);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      assertEquals((-532.833), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expandToInclude((Range) null, (-214.82829));
      boolean boolean0 = range1.equals(range0);
      assertEquals((-214.82829), range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-1187.03), 0.0);
      Range range1 = Range.expandToInclude(range0, 1533.97723096263);
      Range range2 = Range.shift(range1, 0.0, true);
      Range range3 = Range.shift(range2, 1.0);
      assertEquals(174.47361548131505, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-1419.37509), 0.0);
      Range range1 = Range.expandToInclude(range0, (-1419.37509));
      assertSame(range1, range0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-1419.37509), 0.0);
      boolean boolean0 = range0.intersects((-1.0), 1.0);
      assertTrue(boolean0);
      assertEquals(1419.37509, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-1419.37509), 0.0);
      boolean boolean0 = range0.contains((-1.0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, true);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-1419.37509), 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1419.37509), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(679.0, 679.0);
      double double0 = range0.getUpperBound();
      assertEquals(679.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(0.5475244176919343, 0.5475244176919343);
      double double0 = range0.getLowerBound();
      assertEquals(0.5475244176919343, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.getLowerBound();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(216.1190648634, 2455.32212);
      double double0 = range0.getLength();
      assertEquals(2239.2030551365997, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 871.911984);
      double double0 = range1.getCentralValue();
      assertEquals(871.911984, double0, 0.01);
      assertEquals(871.911984, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range((-532.833), (-532.833));
      double double0 = range0.getCentralValue();
      assertEquals((-532.833), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 1.000612503487318, true);
      Range range2 = Range.expandToInclude(range1, 302.094);
      assertEquals(1.000612503487318, range1.getUpperBound(), 0.01);
      assertEquals(301.09338749651266, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range((-532.833), (-532.833));
      Range range1 = Range.expandToInclude(range0, 1413.815116944);
      Range range2 = Range.expand(range1, (-487.2231404869), 1413.815116944);
      assertEquals(1946.6481169439999, range1.getLength(), 0.01);
      assertEquals(1850766.763091654, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expand(range0, 3933.2, (-1.0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range((-1419.37509), 0.0);
      Range range1 = Range.shift(range0, 1.0);
      double double0 = range1.constrain(278.160852256606);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-708.687545), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0), false);
      Range range2 = Range.combine(range0, range1);
      assertEquals((-1.5), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-1735.98450720013), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 1755.275389445);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      boolean boolean0 = range0.contains(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range((-532.833), (-532.833));
      boolean boolean0 = range0.contains((-879.122757));
      assertFalse(boolean0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.getUpperBound();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range((-1187.03), 0.0);
      Range range1 = Range.expandToInclude(range0, 1533.97723096263);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
      assertEquals(2721.0072309626303, range1.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-20.81097068041794), (-20.81097068041794));
      Range range1 = Range.shift(range0, (-20.81097068041794));
      boolean boolean0 = range0.equals(range1);
      assertEquals((-41.62194136083588), range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range((-4145.22412316819), (-4145.22412316819));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-1187.03), 0.0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-1187.03), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-1983.8976170364), (-18.939767227484747));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-1418.2), false);
      Range range2 = Range.expandToInclude(range1, 0.0);
      boolean boolean0 = range2.intersects(0.0, (-4433.0));
      assertEquals((-709.1), range2.getCentralValue(), 0.01);
      assertEquals((-1418.2), range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-330.3276));
      assertEquals((-330.3276), range1.getLowerBound(), 0.01);
      assertEquals((-165.1638), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.combine(range0, (Range) null);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(4854.5519616, 4854.5519616);
      Range range1 = Range.combine((Range) null, range0);
      assertEquals(4854.5519616, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.constrain(3933.2);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range((-1419.37509), 0.0);
      boolean boolean0 = range0.intersects((-1.0), (-13.546258757998693));
      assertEquals((-709.687545), range0.getCentralValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-1.0), 569.0);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(0.5475244176919343, 0.5475244176919343);
      boolean boolean0 = range0.intersects(0.11231215002760947, 1476.51992);
      assertTrue(boolean0);
      assertEquals(0.5475244176919343, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(249.8, 249.8);
      boolean boolean0 = range0.intersects(249.8, 0.0);
      assertFalse(boolean0);
      assertEquals(249.8, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-1418.2), false);
      boolean boolean0 = range1.intersects(0.0, (-4433.0));
      assertEquals((-1418.2), range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1418.2), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains(2423.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range((-1419.37509), 0.0);
      double double0 = range0.constrain((-2561.6336858463324));
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-1419.37509), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(0.0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range((-1187.03), 0.0);
      String string0 = range0.toString();
      assertEquals("Range[-1187.03,0.0]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }
}
