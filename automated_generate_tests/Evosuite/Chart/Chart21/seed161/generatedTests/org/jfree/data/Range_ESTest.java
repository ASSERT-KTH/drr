/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 13:21:47 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-1079.6822), (-1079.6822));
      Range range1 = Range.expandToInclude(range0, 0.0);
      boolean boolean0 = range0.equals(range1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(1079.6822, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-2676.90882370692), false);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertEquals((-2676.90882370692), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-0.301), 0.0);
      boolean boolean0 = range0.intersects((-0.1505), 1368.7084);
      assertEquals((-0.301), range0.getLowerBound(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-454.3891), (-454.3891));
      Range range1 = Range.expandToInclude(range0, 0.0);
      boolean boolean0 = range1.intersects(0.0, (-2883.27));
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals((-227.19455), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      boolean boolean0 = range0.intersects((-256.5908916), (-2415.9046));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.shift(range0, 3466.1930766303, true);
      Range range2 = Range.expandToInclude(range1, 2.0);
      Range range3 = Range.expand(range2, 3466.1930766303, 3466.1930766303);
      double double0 = range3.constrain(3466.1930766303);
      assertEquals(2.403245508203628E7, range3.getLength(), 0.01);
      assertEquals(3466.1930766303, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-1.0), 1599.205617228);
      Range range1 = Range.shift(range0, (-1.0), false);
      assertEquals(798.102808614, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, 1664.9446943059147, false);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-1079.6822), (-1079.6822));
      Range range1 = Range.shift(range0, 0.0);
      assertEquals((-1079.6822), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(1173.920442913, 1173.920442913);
      double double0 = range0.getUpperBound();
      assertEquals(1173.920442913, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(1924.996, 1924.996);
      double double0 = range0.getLowerBound();
      assertEquals(1924.996, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(1000.2639342329991, 1732.10872);
      double double0 = range0.getLength();
      assertEquals(731.8447857670009, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(1173.920442913, 1173.920442913);
      double double0 = range0.getCentralValue();
      assertEquals(1173.920442913, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expandToInclude(range0, (-2415.9046));
      assertEquals(2414.9046, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1.0);
      Range range1 = Range.expand(range0, 1.0, 0.0);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range((-38.7261854), (-38.7261854));
      Range range1 = Range.shift(range0, 555.90279938);
      Range range2 = Range.expand(range1, 2.0, 0.0);
      double double0 = range2.getLowerBound();
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range((-0.301), (-0.301));
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      double double0 = range0.constrain(3466.1930766303);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-179.64), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(1.0, (-1001.4892097477));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.0) <= upper (-1001.4892097477).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      range0.getUpperBound();
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range((-1079.6822), (-1079.6822));
      double double0 = range0.getLowerBound();
      assertEquals((-1079.6822), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-817.15), true);
      Range range2 = Range.combine(range0, range1);
      boolean boolean0 = range2.equals(range1);
      assertFalse(range2.equals((Object)range0));
      assertFalse(boolean0);
      assertEquals((-408.575), range2.getCentralValue(), 0.01);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range1.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 1.0);
      boolean boolean0 = range1.equals(range0);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(0.0, 1449.9978419430595);
      boolean boolean0 = range0.equals((Object) null);
      assertEquals(1449.9978419430595, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range(0.0, 1449.9978419430595);
      Range range1 = Range.expand(range0, 1449.9978419430595, 1449.9978419430595);
      Range range2 = Range.shift(range1, 0.0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(4206437.481121003, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 0.0, 1364.25123242659);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range(0.0, 1449.9978419430595);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1449.9978419430595, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.combine(range0, (Range) null);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1.0);
      Range range1 = Range.combine((Range) null, range0);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range((-1079.6822), (-1079.6822));
      double double0 = range0.constrain((-1403.73));
      assertEquals((-1079.6822), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      double double0 = range0.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.shift(range0, 3466.1930766303, true);
      Range range2 = Range.expandToInclude(range1, 2.0);
      Range range3 = Range.expand(range2, 3466.1930766303, 3466.1930766303);
      Range range4 = Range.combine(range3, range0);
      boolean boolean0 = range4.intersects(2.0, 0.0);
      assertFalse(boolean0);
      assertEquals(2.403245508203628E7, range4.getLength(), 0.01);
      assertNotSame(range4, range3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-454.3891), (-454.3891));
      boolean boolean0 = range0.intersects(0.0, (-2883.27));
      assertFalse(boolean0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(0.0, 409.309405530139);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-454.3891), (-454.3891));
      boolean boolean0 = range0.intersects((-454.3891), (-454.3891));
      assertFalse(boolean0);
      assertEquals((-454.3891), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(859.1429, 859.1429);
      boolean boolean0 = range0.contains(859.1429);
      assertTrue(boolean0);
      assertEquals(859.1429, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range((-1.0), 1599.205617228);
      boolean boolean0 = range0.contains(2750.2);
      assertFalse(boolean0);
      assertEquals(1600.205617228, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains((-1.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-0.301), (-0.301));
      Range range1 = Range.expandToInclude(range0, 0.0);
      // Undeclared exception!
      try { 
        Range.expand(range1, (-472.9635116618535), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (142.0610170102179) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(0.0, 1449.9978419430595);
      String string0 = range0.toString();
      assertEquals("Range[0.0,1449.9978419430595]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range((-454.3891), (-454.3891));
      range0.hashCode();
      assertEquals((-454.3891), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range((-0.301), (-0.301));
      double double0 = range0.getCentralValue();
      assertEquals((-0.301), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range(0.0, 1449.9978419430595);
      Range range1 = Range.expand(range0, 1449.9978419430595, 1449.9978419430595);
      boolean boolean0 = range1.intersects(0.0, 0.0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(4206437.481121003, range1.getLength(), 0.01);
      assertTrue(boolean0);
      assertEquals(1449.9978419430595, range0.getLength(), 0.01);
  }
}
