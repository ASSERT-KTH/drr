/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 23 11:55:15 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-1.0), 3654.575703854);
      range0.hashCode();
      assertEquals(1826.787851927, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-1.1173572411680661), (-1.1173572411680661));
      Range range1 = Range.expandToInclude(range0, 4748.46);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
      assertEquals((-1.1173572411680661), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = new Range((-2440.33), (-2440.33));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-1.1173572411680661), (-1.1173572411680661));
      Range range1 = Range.expandToInclude(range0, 4748.46);
      Range range2 = Range.expandToInclude(range1, (-1.1173572411680661));
      assertSame(range2, range1);
      assertEquals(2373.671321379416, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-1.1173572411680661), (-1.1173572411680661));
      Range range1 = Range.expandToInclude(range0, (-1.1173572411680661));
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-781.05513489253), (-220.7800676327592));
      Range range1 = Range.shift(range0, (-220.7800676327592));
      boolean boolean0 = range1.intersects((-781.05513489253), (-781.05513489253));
      assertTrue(boolean0);
      assertEquals(560.2750672597707, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range((-781.05513489253), (-781.05513489253));
      Range range1 = Range.shift(range0, (-781.05513489253));
      Range range2 = Range.expandToInclude(range1, (-781.05513489253));
      boolean boolean0 = range2.intersects((-781.05513489253), (-781.05513489253));
      assertFalse(boolean0);
      assertEquals((-1171.582702338795), range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(518.03297615, 518.03297615);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(2634.7240476, 2634.7240476);
      double double0 = range0.getUpperBound();
      assertEquals(2634.7240476, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(518.03297615, 518.03297615);
      double double0 = range0.getLowerBound();
      assertEquals(518.03297615, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      double double0 = range1.getLength();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-1.1173572411680661), (-1.1173572411680661));
      Range range1 = Range.expandToInclude(range0, 4748.46);
      double double0 = range1.getCentralValue();
      assertEquals(2373.671321379416, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range((-837.70429), (-837.70429));
      Range range1 = Range.expandToInclude(range0, (-398.14438032));
      Range range2 = Range.shift(range1, (-837.70429));
      Range range3 = Range.expand(range2, 0.0, 0.0);
      assertEquals(439.5599096799999, range3.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 4157.6412484, true);
      Range range2 = Range.expand(range1, (-1.0), 4157.6412484);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range((-2336.5213374315417), (-1.0));
      Range range1 = Range.expand(range0, (-1.0), 0.0);
      assertEquals(2335.5213374315417, range0.getLength(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-630.0749), (-630.0749));
      Range range1 = Range.shift(range0, 2696.6, false);
      Range range2 = Range.combine(range1, range0);
      Range range3 = Range.shift(range2, 2696.6);
      boolean boolean0 = range3.contains(0.0);
      assertEquals(1348.3, range3.getCentralValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-1.0), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range((-2012.0), (-2012.0));
      boolean boolean0 = range0.contains((-3839.81597));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range((-478.71772199779), (-3523.42177));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-478.71772199779) <= upper (-3523.42177).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range((-2336.5213374315417), (-1.0));
      double double0 = range0.getUpperBound();
      assertEquals(2335.5213374315417, range0.getLength(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range((-2012.0), (-2012.0));
      double double0 = range0.getLowerBound();
      assertEquals((-2012.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(2408.962275, 2408.962275);
      Range range1 = Range.expandToInclude(range0, 528.42);
      Range range2 = Range.shift(range0, 528.42);
      Range range3 = Range.shift(range1, 2408.962275, true);
      boolean boolean0 = range2.equals(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertEquals(3877.6534125, range3.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2937.382275, range2.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(2408.962275, 2408.962275);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(2408.962275, 2408.962275);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(2408.962275, 2408.962275);
      Range range1 = Range.shift(range0, 824.0, true);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals(3232.962275, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 0.0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range((-735.1579213172793), (-735.1579213172793));
      Range range1 = Range.combine(range0, (Range) null);
      assertSame(range0, range1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range((-735.1579213172793), (-735.1579213172793));
      Range range1 = Range.combine((Range) null, range0);
      assertEquals((-735.1579213172793), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(2408.962275, 2408.962275);
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
      assertEquals(2408.962275, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range((-1490.082944), (-1490.082944));
      assertEquals((-1490.082944), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.shift(range0, (-1490.082944), false);
      double double0 = range1.constrain((-1490.082944));
      assertEquals((-2980.165888), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(2634.7240476, 2634.7240476);
      assertEquals(2634.7240476, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.expandToInclude(range0, (-607.49156));
      boolean boolean0 = range1.intersects(1.0, 0.0);
      assertFalse(boolean0);
      assertEquals(3242.2156076, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range((-2336.5213374315417), (-1.0));
      boolean boolean0 = range0.intersects(0.0, (-1.0));
      assertFalse(boolean0);
      assertEquals((-1168.7606687157709), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-1932.4502902983054), (-1932.4502902983054));
      boolean boolean0 = range0.intersects((-1932.4502902983054), (-10.3));
      assertEquals((-1932.4502902983054), range0.getUpperBound(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects((-1161.978869), 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-2336.5213374315417), (-1.0));
      boolean boolean0 = range0.intersects((-294.2), 360.7788473);
      assertTrue(boolean0);
      assertEquals(2335.5213374315417, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains(1255.593741574762);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(2408.962275, 2408.962275);
      double double0 = range0.constrain(2408.962275);
      assertEquals(2408.962275, range0.getLowerBound(), 0.01);
      assertEquals(2408.962275, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range(2408.962275, 2408.962275);
      double double0 = range0.constrain((-2.570024352467317E7));
      assertEquals(2408.962275, double0, 0.01);
      assertEquals(2408.962275, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-2336.5213374315417), (-1.0));
      // Undeclared exception!
      try { 
        Range.expand(range0, (-1.0), (-2336.5213374315417));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-1.0) <= upper (-5456996.438935449).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(2408.962275, 2408.962275);
      String string0 = range0.toString();
      assertEquals("Range[2408.962275,2408.962275]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range((-837.70429), (-837.70429));
      range0.hashCode();
      assertEquals((-837.70429), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range((-2012.0), (-2012.0));
      double double0 = range0.getCentralValue();
      assertEquals((-2012.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range(2408.962275, 2408.962275);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }
}
