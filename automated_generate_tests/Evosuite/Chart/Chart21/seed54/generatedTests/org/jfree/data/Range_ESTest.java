/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 23 17:57:50 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-3430.319188343578), (-3430.319188343578));
      Range range1 = Range.expandToInclude(range0, 4999.7);
      boolean boolean0 = range1.equals(range0);
      assertEquals((-3430.319188343578), range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-2584.703));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-406.18762271474776), (-406.18762271474776));
      Range range1 = Range.expandToInclude(range0, (-1.0));
      Range range2 = Range.expand(range1, 1837.308379, 1837.308379);
      boolean boolean0 = range2.intersects(1837.308379, 1837.308379);
      assertTrue(boolean0);
      assertEquals((-203.59381135739386), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-1063.58258116), 877.968508584);
      boolean boolean0 = range0.intersects(877.968508584, 0.0);
      assertFalse(boolean0);
      assertEquals(1941.551089744, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(1223.24, 1223.24);
      boolean boolean0 = range0.intersects(1223.24, 1223.24);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 742.3);
      Range range2 = Range.combine(range1, range0);
      Range range3 = Range.shift(range2, 0.0, false);
      assertEquals(371.15, range3.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-406.18762271474776), (-406.18762271474776));
      Range range1 = Range.expandToInclude(range0, (-1.0));
      Range range2 = Range.shift(range1, (-1.0));
      assertEquals((-204.59381135737388), range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expandToInclude(range0, 159.67738432);
      Range range2 = Range.expandToInclude(range1, (-1.0));
      double double0 = range2.getUpperBound();
      assertEquals(79.33869216, range2.getCentralValue(), 0.01);
      assertSame(range2, range1);
      assertEquals(159.67738432, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(378.47, 378.47);
      double double0 = range0.getLowerBound();
      assertEquals(378.47, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-1.0));
      double double0 = range1.getLength();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0.1553162514136734, 0.1553162514136734);
      double double0 = range0.getCentralValue();
      assertEquals(0.1553162514136734, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range((-1063.58258116), 877.968508584);
      Range range1 = Range.expand(range0, 1.0, 0.0);
      assertEquals(1941.551089744, range0.getLength(), 0.01);
      assertEquals(3883.102179488, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(1223.24, 1223.24);
      Range range1 = Range.expand(range0, 1223.24, 2665.4974141665);
      assertEquals(1223.24, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expand(range0, 159.67738432, 159.67738432);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0.1553162514136734, 0.1553162514136734);
      double double0 = range0.constrain(0.11802468593662162);
      assertEquals(0.1553162514136734, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0));
      Range range2 = Range.combine(range0, range1);
      assertEquals((-1.5), range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-722.0), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-2036.742));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, false);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains((-1.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(1.0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.0) <= upper (-1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.getUpperBound();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range((-1542.057883382365), (-1542.057883382365));
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range((-3430.319188343578), (-3430.319188343578));
      double double0 = range0.getLowerBound();
      assertEquals((-3430.319188343578), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range((-3430.319188343578), (-3430.319188343578));
      Range range1 = Range.shift(range0, (-3430.319188343578), true);
      Range range2 = Range.expandToInclude(range1, 0.0);
      Range range3 = Range.shift(range0, (-3430.319188343578));
      boolean boolean0 = range3.equals(range2);
      assertFalse(boolean0);
      assertTrue(range3.equals((Object)range1));
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.equals((Object)range3));
      assertEquals((-6860.638376687156), range2.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-1542.057883382365), (-1542.057883382365));
      Range range1 = Range.shift(range0, (-1542.057883382365));
      Range range2 = Range.shift(range0, 0.0);
      boolean boolean0 = range1.equals(range2);
      assertEquals((-3084.11576676473), range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(1223.24, 1223.24);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-3430.319188343578), (-3430.319188343578));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-1.0), (-137.07));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1.0);
      Range range1 = Range.combine(range0, (Range) null);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine((Range) null, range0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range((-3430.319188343578), (-3430.319188343578));
      double double0 = range0.constrain(0.0);
      assertEquals((-3430.319188343578), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range((-1063.58258116), 877.968508584);
      double double0 = range0.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(1223.24, 1223.24);
      Range range1 = Range.shift(range0, 2665.4974141665, true);
      Range range2 = Range.expandToInclude(range1, 1223.24);
      boolean boolean0 = range2.intersects(2694.0, 1223.24);
      assertFalse(boolean0);
      assertEquals(2665.4974141665007, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-1063.58258116), 877.968508584);
      boolean boolean0 = range0.intersects(0.0, 1.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.shift(range0, 1554.62501422);
      boolean boolean0 = range1.intersects(1554.62501422, 1.0);
      assertFalse(boolean0);
      assertEquals(1555.62501422, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(0.0, 1713.7001315);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range((-3430.319188343578), (-3430.319188343578));
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range((-3430.319188343578), (-3430.319188343578));
      assertEquals((-3430.319188343578), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.shift(range0, (-3430.319188343578), true);
      boolean boolean0 = range1.contains((-3430.319188343578));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-3430.319188343578), (-3430.319188343578));
      boolean boolean0 = range0.contains((-3430.319188343578));
      assertTrue(boolean0);
      assertEquals((-3430.319188343578), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-3430.319188343578), (-3430.319188343578));
      String string0 = range0.toString();
      assertEquals("Range[-3430.319188343578,-3430.319188343578]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range((-1063.58258116), 877.968508584);
      range0.hashCode();
      assertEquals((-92.807036288), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range((-1063.58258116), 877.968508584);
      double double0 = range0.getCentralValue();
      assertEquals((-92.807036288), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, (-4656.5798308641), 0.0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }
}
