/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 01:04:02 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range(2661.0547971550386, 2661.0547971550386);
      Range range1 = Range.shift(range0, (-998.13482));
      Range range2 = Range.expandToInclude(range1, 2661.0547971550386);
      Range range3 = Range.expand(range2, 2661.0547971550386, (-998.13482));
      range3.hashCode();
      assertEquals(1660816.4668920487, range3.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(168.313456, 168.313456);
      Range range1 = Range.shift(range0, 168.313456, false);
      Range range2 = Range.combine(range1, range0);
      boolean boolean0 = range0.equals(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(boolean0);
      assertEquals(252.47018400000002, range2.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(168.313456, 168.313456);
      Range range1 = Range.shift(range0, 168.313456, false);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals(336.626912, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-1.0), 2.0);
      Range range1 = Range.expandToInclude(range0, (-1.0));
      assertSame(range1, range0);
      assertEquals(3.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-4034.6), 1897.8);
      boolean boolean0 = range0.intersects((-3508.300279274), 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-4034.6), 1897.8);
      boolean boolean0 = range0.intersects(1897.8, 0.0);
      assertFalse(boolean0);
      assertEquals((-1068.4), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1780.8));
      boolean boolean0 = range0.intersects((-1780.8), (-1780.8));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1560.376), false);
      assertEquals((-1561.376), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, false);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1560.376));
      assertEquals((-1561.376), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.shift(range0, 0.0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(168.313456, 168.313456);
      double double0 = range0.getUpperBound();
      assertEquals(168.313456, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(168.313456, 168.313456);
      double double0 = range0.getLowerBound();
      assertEquals(168.313456, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.getLowerBound();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(168.313456, 168.313456);
      double double0 = range0.getCentralValue();
      assertEquals(168.313456, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, (-1.0), (-1.0));
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range((-4034.6), 1897.8);
      Range range1 = Range.shift(range0, (-1918.192597), false);
      double double0 = range1.constrain(1.0);
      assertEquals(5952.792597, range1.getLength(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range((-1.0), 2.0);
      double double0 = range0.constrain((-1.0));
      assertEquals((-1.0), double0, 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-487.5344260492), (-487.5344260492));
      Range range1 = Range.combine(range0, range0);
      assertEquals((-487.5344260492), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range((-1.0), 2.0);
      Range range1 = Range.shift(range0, (-1.0));
      Range range2 = Range.combine(range1, range0);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 191.31827269);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1780.8));
      double double0 = range0.getUpperBound();
      assertEquals((-1780.8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(75.807, 75.807);
      Range range1 = new Range(75.807, 838.3275775724536);
      boolean boolean0 = range1.equals(range0);
      assertEquals(75.807, range1.getLowerBound(), 0.01);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(75.06413775579897, 75.06413775579897);
      Range range1 = Range.shift(range0, 75.06413775579897);
      boolean boolean0 = range1.equals(range0);
      assertEquals(150.12827551159793, range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(168.313456, 168.313456);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(0.0, 322.427514082666);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertEquals(322.427514082666, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-2565.44411053), 989.04996117098);
      Range range1 = Range.shift(range0, 2.0, true);
      assertEquals((-2565.44411053), range0.getLowerBound(), 0.01);
      assertEquals((-786.19707467951), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-2358.0), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expand(range0, 1.0, 1.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range((-2565.44411053), 989.04996117098);
      Range range1 = Range.expandToInclude(range0, 989.04996117098);
      assertSame(range1, range0);
      assertEquals(3554.4940717009804, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 191.31827269);
      Range range1 = Range.combine(range0, (Range) null);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range(1774.3, 1774.3);
      Range range1 = Range.combine((Range) null, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range((-1.0), 2.0);
      double double0 = range0.constrain(157.0);
      assertEquals(3.0, range0.getLength(), 0.01);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(168.313456, 168.313456);
      double double0 = range0.constrain((-74.2677834));
      assertEquals(168.313456, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(1774.3, 1774.3);
      assertEquals(1774.3, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.expandToInclude(range0, (-1.0));
      boolean boolean0 = range1.intersects(1161.4752, 1.0);
      assertFalse(boolean0);
      assertEquals(1775.3, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range((-2565.44411053), 989.04996117098);
      boolean boolean0 = range0.intersects(3554.4940717009804, (-4630.175828002107));
      assertFalse(boolean0);
      assertEquals((-788.19707467951), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range(168.313456, 168.313456);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertEquals(168.313456, range0.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(0.0, 322.427514082666);
      boolean boolean0 = range0.intersects(0.0, 322.427514082666);
      assertTrue(boolean0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(322.427514082666, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range((-2565.44411053), 989.04996117098);
      boolean boolean0 = range0.intersects(2.0, 2.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range(168.313456, 168.313456);
      boolean boolean0 = range0.contains(168.313456);
      assertTrue(boolean0);
      assertEquals(168.313456, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      boolean boolean0 = range0.contains(174.9785);
      assertFalse(boolean0);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      boolean boolean0 = range0.contains((-2697.454));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(75.06413775579897, (-505.2384536));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (75.06413775579897) <= upper (-505.2384536).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range((-2565.44411053), 989.04996117098);
      String string0 = range0.toString();
      assertEquals("Range[-2565.44411053,989.04996117098]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range((-2565.44411053), 989.04996117098);
      Range range1 = Range.shift(range0, (-3508.300279274));
      Range range2 = Range.shift(range1, 2.0);
      assertEquals(6073.744389804, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = new Range((-4034.6), 1897.8);
      double double0 = range0.getCentralValue();
      assertEquals((-1068.4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = new Range((-2565.44411053), 989.04996117098);
      double double0 = range0.getLength();
      assertEquals(3554.4940717009804, double0, 0.01);
  }
}
