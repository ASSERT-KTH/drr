/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 06:04:23 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-1607.6231836097745), (-1607.6231836097745));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(507.85733, 2948.257);
      Range range1 = Range.shift(range0, 507.85733, false);
      Range range2 = Range.combine(range0, range1);
      boolean boolean0 = range0.equals(range2);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertEquals(1981.9858299999999, range2.getCentralValue(), 0.01);
      assertFalse(range2.equals((Object)range1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(86.29, 86.29);
      Range range1 = Range.shift(range0, 1.0);
      boolean boolean0 = range0.equals(range1);
      assertEquals(87.29, range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-2416.3575853), (-24.918976398510427));
      Range range1 = Range.expandToInclude(range0, (-466.0));
      assertEquals((-1220.6382808492554), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range(507.85733, 2948.257);
      Range range1 = Range.expand(range0, 1419.727, 2948.257);
      boolean boolean0 = range1.intersects((-2454.162703441018), (-271.73075114316));
      assertTrue(boolean0);
      assertEquals(1866840.1109575504, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-2416.3575853), (-24.918976398510427));
      Range range1 = Range.shift(range0, (-2416.3575853), false);
      boolean boolean0 = range1.intersects((-2262.2116223618), (-2416.3575853));
      assertEquals(2391.4386089014897, range1.getLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(507.85733, 507.85733);
      boolean boolean0 = range0.intersects((-2454.162703441018), (-271.73075114316));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 1109.5395515373339, false);
      assertEquals(1109.5395515373339, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, false);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0));
      assertEquals((-2.0), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-1.0), 1103.709305);
      double double0 = range0.getUpperBound();
      assertEquals(1104.709305, range0.getLength(), 0.01);
      assertEquals(1103.709305, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(2645.7097954581736, 2645.7097954581736);
      double double0 = range0.getLowerBound();
      assertEquals(2645.7097954581736, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-1162.902266590147), 1873.0);
      double double0 = range0.getLength();
      assertEquals(3035.902266590147, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range((-2416.3575853), (-24.918976398510427));
      Range range1 = Range.expand(range0, (-2416.3575853), 2454.074602585348);
      double double0 = range1.getCentralValue();
      assertEquals(5822449.149791939, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range((-1637.0382775076087), (-1637.0382775076087));
      double double0 = range0.getCentralValue();
      assertEquals((-1637.0382775076087), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expand(range0, 4510.0, (-491.6517483866));
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-1607.6231836097745), (-1607.6231836097745));
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 1627.85, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 663.351728);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.getUpperBound();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range((-2416.3575853), (-24.918976398510427));
      double double0 = range0.getLowerBound();
      assertEquals((-2416.3575853), double0, 0.01);
      assertEquals((-24.918976398510427), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(2645.7097954581736, 2645.7097954581736);
      Range range1 = Range.shift(range0, 2645.7097954581736);
      Range range2 = Range.combine(range1, range0);
      boolean boolean0 = range2.equals(range0);
      assertEquals(3968.5646931872607, range2.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range2));
      assertFalse(boolean0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(507.85733, 2948.257);
      Range range1 = Range.expand(range0, 507.85733, 2948.257);
      Range range2 = Range.shift(range1, 0.0, false);
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      assertTrue(range2.equals((Object)range1));
      assertEquals(2979503.331833055, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range((-2416.3575853), (-24.918976398510427));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((-1220.6382808492554), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(2645.7097954581736, 2645.7097954581736);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-1.0), 1103.709305);
      Range range1 = Range.shift(range0, (-1.0), true);
      assertEquals(550.3546525, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-149.17280011508), (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expandToInclude(range0, 1.0);
      assertSame(range1, range0);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 1137.41337);
      assertEquals(568.706685, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range(1055.44377643452, 1055.44377643452);
      Range range1 = Range.expandToInclude(range0, (-1034.59223928977));
      assertEquals(10.425768572374977, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range((-1.0), 1103.709305);
      Range range1 = Range.combine(range0, (Range) null);
      assertEquals(551.3546525, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 14.479036184152118);
      Range range1 = Range.combine((Range) null, range0);
      assertNotNull(range1);
      assertEquals(14.479036184152118, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain(2466.637967);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range((-2416.3575853), (-24.918976398510427));
      Range range1 = Range.expand(range0, (-2416.3575853), 2454.074602585348);
      Range range2 = Range.shift(range1, (-24.918976398510427));
      double double0 = range2.constrain((-554.0));
      assertEquals(5776129.545836697, double0, 0.01);
      assertEquals(2391.4386089014897, range0.getLength(), 0.01);
      assertEquals(5868718.915794385, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-2416.3575853), (-24.918976398510427));
      double double0 = range0.constrain((-2416.3575853));
      assertEquals((-2416.3575853), double0, 0.01);
      assertEquals((-24.918976398510427), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(507.85733, 2948.257);
      boolean boolean0 = range0.intersects(617.10074669493, 0.0);
      assertFalse(boolean0);
      assertEquals(1728.057165, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range(507.85733, 2948.257);
      Range range1 = Range.expand(range0, 1419.727, 2948.257);
      Range range2 = Range.shift(range1, 0.0, false);
      boolean boolean0 = range2.intersects(0.0, 0.0);
      assertEquals(7197873.666875191, range1.getUpperBound(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.0662067111835282E7, range2.getLength(), 0.01);
      assertEquals(2440.3996700000002, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(0.0, 1772.1875);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range(532.0702169035695, 816.0);
      boolean boolean0 = range0.intersects(816.0, 1138.617);
      assertEquals(283.92978309643047, range0.getLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range(0.0, 1.0);
      boolean boolean0 = range0.contains(1.0);
      assertTrue(boolean0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(1055.44377643452, 1055.44377643452);
      boolean boolean0 = range0.contains(1068.5764996956);
      assertEquals(1055.44377643452, range0.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      boolean boolean0 = range0.contains((-3132.0));
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(4205.3232587307, 2645.7097954581736);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (4205.3232587307) <= upper (2645.7097954581736).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range(532.0702169035695, 816.0);
      String string0 = range0.toString();
      assertEquals("Range[532.0702169035695,816.0]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = new Range(1055.44377643452, 1055.44377643452);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }
}
