/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 20:33:12 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-1318.7752472017173), (-1318.7752472017173));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-1758.8890918597), (-1758.8890918597));
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.shift(range0, 0.0);
      boolean boolean0 = range1.equals(range2);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(boolean0);
      assertEquals((-1758.8890918597), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 5410.437082);
      Range range1 = Range.shift(range0, (-1.0));
      boolean boolean0 = range0.equals(range1);
      assertEquals(5409.437082, range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-2844.5854022), 706.44);
      Range range1 = Range.expandToInclude(range0, 1.0);
      assertEquals(3551.0254022, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-3882.460128238206));
      boolean boolean0 = range1.intersects((-3020.76443164), 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-1318.7752472017173), (-1318.7752472017173));
      boolean boolean0 = range0.intersects(1.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(1742.4073904393306, 1742.4073904393306);
      boolean boolean0 = range0.intersects((-2455.92019859), (-2455.92019859));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, 2.0, true);
      Range range2 = Range.shift(range1, (-1.0), false);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 830.180416);
      Range range1 = Range.shift(range0, (-4060.84347173632), true);
      assertEquals((-3230.66305573632), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 5410.317000749143);
      range0.getUpperBound();
      assertEquals(5410.317000749143, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-1318.7752472017173), (-1318.7752472017173));
      double double0 = range0.getUpperBound();
      assertEquals((-1318.7752472017173), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1093.5);
      double double0 = range0.getLowerBound();
      assertEquals(1093.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(1512.14, 1512.14);
      Range range1 = Range.expandToInclude(range0, (-1.0));
      double double0 = range1.getLowerBound();
      assertEquals(1513.14, range1.getLength(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-3882.460128238206));
      double double0 = range1.getLength();
      assertEquals(3882.460128238206, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 830.180416);
      double double0 = range0.getCentralValue();
      assertEquals(830.180416, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-1758.8890918597), (-1758.8890918597));
      double double0 = range0.getCentralValue();
      assertEquals((-1758.8890918597), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expand(range0, 0.0, (-1.0));
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = Range.expand(range0, (-54.79), 1.0);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 5410.437082);
      Range range1 = Range.shift(range0, 5410.437082);
      Range range2 = Range.combine(range0, range1);
      Range range3 = Range.shift(range2, (-1.0), true);
      Range range4 = Range.expand(range3, 5410.437082, (-1.0));
      assertEquals((-1.463100527205834E7), range4.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range((-13.82321364696), (-13.82321364696));
      double double0 = range0.constrain(0.0);
      assertEquals((-13.82321364696), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-4087.2), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-1380.99));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      boolean boolean0 = range0.contains(2319.45950191);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      boolean boolean0 = range0.contains((-1.0));
      assertTrue(boolean0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range((-1318.7752472017173), (-1318.7752472017173));
      boolean boolean0 = range0.contains((-2000.5552514));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 844.27);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-2.325590910149787), (-2.325590910149787));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-3882.460128238206));
      Range range2 = Range.shift(range1, (-3725.66635126096));
      assertEquals((-5666.8964153800625), range2.getCentralValue(), 0.01);
      assertEquals((-3882.460128238206), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 5410.437082);
      Range range1 = Range.shift(range0, 5410.437082);
      boolean boolean0 = range0.equals(range1);
      assertEquals(10820.874164, range1.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 3493.0, 3493.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range((-13.82321364696), (-13.82321364696));
      Range range1 = Range.combine(range0, (Range) null);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 5410.317000749143);
      Range range1 = Range.combine((Range) null, range0);
      assertNotNull(range1);
      assertEquals(5410.317000749143, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(822.5198, 822.5198);
      Range range1 = Range.expandToInclude(range0, 759.0919022682943);
      Range range2 = Range.expand(range1, 854.1985603, 854.1985603);
      boolean boolean0 = range2.intersects(854.1985603, 822.5198);
      assertEquals(108423.46574828899, range2.getLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(822.5198, 822.5198);
      assertEquals(822.5198, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.expandToInclude(range0, 759.0919022682943);
      Range range2 = Range.expand(range1, 822.5198, 822.5198);
      Range range3 = Range.combine(range2, range1);
      Range range4 = Range.shift(range3, 822.5198, true);
      boolean boolean0 = range4.intersects(822.5198, 822.5198);
      assertTrue(boolean0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(range3, range2);
      assertEquals(104404.83141113774, range4.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expandToInclude(range0, (-423.3216743553));
      boolean boolean0 = range1.intersects((-423.3216743553), (-1.0));
      assertTrue(boolean0);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects((-1.0), 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-3882.460128238206));
      boolean boolean0 = range1.intersects(0.0, 0.0);
      assertFalse(boolean0);
      assertEquals((-3882.460128238206), range1.getLowerBound(), 0.01);
      assertEquals((-1941.230064119103), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain(2.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 830.180416);
      double double0 = range0.constrain((-1.0));
      assertEquals(830.180416, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(0.0, (-3333.9121438236302));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-3333.9121438236302).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      String string0 = range0.toString();
      assertEquals("Range[0.0,0.0]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }
}
