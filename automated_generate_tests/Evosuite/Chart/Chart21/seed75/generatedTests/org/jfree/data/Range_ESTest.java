/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 23 21:25:37 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-795.727090378678), (-795.727090378678));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-907.95), 2272.41278734613);
      Range range1 = new Range((-907.95), (-1.0));
      boolean boolean0 = range1.equals(range0);
      assertEquals((-907.95), range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-1957.2), 1216.972);
      Range range1 = Range.shift(range0, (-1.0));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals((-371.11400000000003), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-1958.4406411117402), 1216.972);
      boolean boolean0 = range0.intersects((-1.0), 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(1843.9805278903668, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects((-1437.86484), (-1437.86484));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, true);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      Range range1 = Range.shift(range0, 2.0, false);
      assertEquals(4.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0));
      assertEquals((-2.0), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-907.95), 2272.41278734613);
      double double0 = range0.getUpperBound();
      assertEquals(3180.36278734613, range0.getLength(), 0.01);
      assertEquals(2272.41278734613, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(1540.2, 1540.2);
      double double0 = range0.getLowerBound();
      assertEquals(1540.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-1052.034), (-1052.034));
      double double0 = range0.getLowerBound();
      assertEquals((-1052.034), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-4761.32), true);
      double double0 = range1.getCentralValue();
      assertEquals((-4761.32), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range((-1957.2), 1216.972);
      Range range1 = Range.expand(range0, (-352.03180563244), 884.51);
      assertEquals(1693351.5471720665, range1.getLength(), 0.01);
      assertEquals(3174.172, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      Range range1 = Range.shift(range0, 2337.24693);
      Range range2 = Range.expand(range1, (-1.0), (-1.0));
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 6.025046437119522);
      Range range2 = Range.expand(range1, 1843.9805278903668, 0.0);
      assertEquals(6.025046437119522, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      Range range1 = Range.expand(range0, (-1.0), (-352.03180563244));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range((-1957.2), 1216.972);
      double double0 = range0.constrain((-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      Range range1 = Range.combine((Range) null, range0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.shift(range0, 2337.24693);
      Range range2 = Range.combine(range1, (Range) null);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-1191.43014130303), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains(3911.342595724);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(0.0, (-2973.843421830701));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-2973.843421830701).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range((-1052.034), (-1052.034));
      range0.getUpperBound();
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.shift(range0, 1593.6238435754);
      Range range2 = Range.combine(range1, range0);
      boolean boolean0 = range2.equals(range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range2));
      assertFalse(boolean0);
      assertEquals(1593.6238435754, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range((-1957.2), 1216.972);
      Range range1 = Range.shift(range0, (-1957.2), false);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertEquals((-1957.2), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-1957.2), 1216.972);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertEquals(3174.172, range0.getLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range((-1957.2), 1216.972);
      boolean boolean0 = range0.equals(range0);
      assertEquals(3174.172, range0.getLength(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-1.0), (-352.03180563244));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range((-1957.2), 1216.972);
      Range range1 = Range.shift(range0, (-1957.2), false);
      Range range2 = Range.expandToInclude(range1, 2.0);
      assertEquals(2.0, range2.getUpperBound(), 0.01);
      assertEquals(3914.4, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expandToInclude(range0, (-388.9898649695297));
      assertEquals((-388.9898649695297), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-193.99493248476486), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range((-1957.2), 1216.972);
      Range range1 = Range.expandToInclude(range0, (-1957.2));
      assertEquals((-370.11400000000003), range1.getCentralValue(), 0.01);
      assertSame(range1, range0);
      assertEquals(1216.972, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 6.025046437119522);
      double double0 = range1.constrain(0.0);
      assertEquals(6.025046437119522, range1.getUpperBound(), 0.01);
      assertEquals(6.025046437119522, range1.getLowerBound(), 0.01);
      assertEquals(6.025046437119522, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-1957.2), 1216.972);
      boolean boolean0 = range0.intersects((-1.0), (-1528.123946591789));
      assertFalse(boolean0);
      assertEquals((-370.11400000000003), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range((-2120.80281134), 0.0);
      boolean boolean0 = range0.intersects(0.0, (-2120.80281134));
      assertFalse(boolean0);
      assertEquals((-1060.40140567), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-907.95), 2272.41278734613);
      boolean boolean0 = range0.intersects((-907.95), 0.0);
      assertTrue(boolean0);
      assertEquals(682.2313936730649, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range((-1957.2), 1216.972);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      boolean boolean0 = range0.contains((-1667.2819080194622));
      assertFalse(boolean0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-1957.2), 1216.972);
      String string0 = range0.toString();
      assertEquals("Range[-1957.2,1216.972]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range((-1957.2), 1216.972);
      Range range1 = Range.shift(range0, (-1957.2), false);
      double double0 = range1.constrain(1216.972);
      assertEquals(3914.4, range1.getLength(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      double double0 = range0.getCentralValue();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range((-1957.2), 1216.972);
      double double0 = range0.getLength();
      assertEquals(3174.172, double0, 0.01);
  }
}
