/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 23 14:24:37 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-1156.72), (-1156.72));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.shift(range0, 1.0);
      Range range2 = Range.expandToInclude(range1, 1.0);
      Range range3 = new Range(1.0, 1.0);
      boolean boolean0 = range3.equals(range2);
      assertTrue(range3.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertEquals(1.5, range2.getCentralValue(), 0.01);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-1156.72), (-1156.72));
      Range range1 = Range.shift(range0, 1354.5423694547644);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-1245.325068717), 0.0);
      Range range1 = Range.shift(range0, 1527.220787589, false);
      assertEquals(1527.220787589, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expandToInclude(range0, (-1.0));
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-6788.584), 2767.4110212501773);
      boolean boolean0 = range0.intersects(1432.45, 2767.4110212501773);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.shift(range0, 1.0);
      boolean boolean0 = range1.intersects(1.0, 1.0);
      assertFalse(boolean0);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      boolean boolean0 = range0.contains(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 1.0, true);
      Range range2 = Range.expandToInclude(range1, (-766.8221));
      boolean boolean0 = range2.intersects(1.0, (-4253.503461));
      assertEquals((-382.91105), range2.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, false);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-404.6326032116), 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(404.6326032116, range0.getLength(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range((-3394.292), (-3394.292));
      double double0 = range0.getUpperBound();
      assertEquals((-3394.292), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-1.0));
      double double0 = range1.getLength();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.shift(range0, (-2877.7731528365));
      double double0 = range1.getCentralValue();
      assertEquals(2.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.getCentralValue();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range((-1.0), 1246.96064033);
      Range range1 = Range.expand(range0, (-1.0), 2244.421919047);
      double double0 = range1.getLowerBound();
      assertEquals(1401722.0682726204, range1.getCentralValue(), 0.01);
      assertEquals(1246.96064033, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.shift(range0, (-2877.7731528365));
      Range range2 = Range.expand(range1, 1.0, (-2877.7731528365));
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range((-1156.72), (-1156.72));
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = Range.expand(range0, 1.0, (-1156.72));
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-3716.8378));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-3394.292), (-3394.292));
      boolean boolean0 = range0.contains(4544.146077359796);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range(2.0, 2135.00651);
      boolean boolean0 = range0.contains((-70.8134981014203));
      assertFalse(boolean0);
      assertEquals(2133.00651, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(1680.1176813207, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1680.1176813207) <= upper (1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range(3979.2424, 3979.2424);
      double double0 = range0.getUpperBound();
      assertEquals(3979.2424, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range((-2059.11635864326), (-2059.11635864326));
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range((-1.0), 1246.96064033);
      double double0 = range0.getLowerBound();
      assertEquals(622.980320165, range0.getCentralValue(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range((-1.0), 1246.96064033);
      Range range1 = Range.shift(range0, (-1.0), true);
      Range range2 = Range.combine(range1, range0);
      boolean boolean0 = range2.equals(range1);
      assertFalse(range1.equals((Object)range2));
      assertEquals(1246.96064033, range0.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertEquals(622.480320165, range2.getCentralValue(), 0.01);
      assertEquals(1245.96064033, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range((-404.6326032116), 0.0);
      Range range1 = Range.shift(range0, (-404.6326032116), true);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertEquals((-404.6326032116), range1.getUpperBound(), 0.01);
      assertEquals((-809.2652064232), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-1.0), 1246.96064033);
      boolean boolean0 = range0.equals(range0);
      assertEquals(1247.96064033, range0.getLength(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 3979.2424, 3979.2424);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-2059.11635864326), (-2059.11635864326));
      Range range1 = Range.shift(range0, (-2059.11635864326), true);
      Range range2 = Range.expandToInclude(range1, (-2059.11635864326));
      assertEquals(2059.11635864326, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range((-658.3901504329845), 2919.72237777);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertEquals(3578.1125282029843, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.combine(range0, (Range) null);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range(3979.2424, 3979.2424);
      Range range1 = Range.combine((Range) null, range0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range((-326.68), (-1.0));
      Range range1 = Range.expand(range0, (-1.0), 2.0);
      double double0 = range1.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(324.68, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range((-326.68), (-1.0));
      Range range1 = Range.expand(range0, (-1.0), 2.0);
      Range range2 = Range.combine(range1, range0);
      boolean boolean0 = range2.intersects(2.0, (-1.0));
      assertFalse(boolean0);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(325.68, range0.getLength(), 0.01);
      assertEquals(161.84, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(1.0, (-4253.503461));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range((-3394.292), (-3394.292));
      assertEquals((-3394.292), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.shift(range0, (-3394.292), false);
      boolean boolean0 = range1.intersects((-6788.584), (-3394.292));
      assertTrue(boolean0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-5370.1389844), (-5370.1389844));
      boolean boolean0 = range0.intersects((-5370.1389844), (-5370.1389844));
      assertEquals((-5370.1389844), range0.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range((-658.3901504329845), 2919.72237777);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-1156.72), (-1156.72));
      double double0 = range0.constrain(1.0);
      assertEquals((-1156.72), double0, 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(3979.2424, 3979.2424);
      double double0 = range0.constrain(0.0);
      assertEquals(3979.2424, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range((-2059.11635864326), (-2059.11635864326));
      Range range1 = Range.shift(range0, (-2059.11635864326));
      Range range2 = Range.combine(range1, range0);
      // Undeclared exception!
      try { 
        Range.expand(range2, (-2059.11635864326), (-2059.11635864326));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (4235841.945714992) <= upper (-4242019.294790922).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range(3979.2424, 3979.2424);
      String string0 = range0.toString();
      assertEquals("Range[3979.2424,3979.2424]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-1.0), 1246.96064033);
      Range range1 = Range.shift(range0, 2244.421919047);
      assertEquals(3491.382559377, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range((-1.0), 1246.96064033);
      double double0 = range0.getCentralValue();
      assertEquals(622.980320165, double0, 0.01);
  }
}
