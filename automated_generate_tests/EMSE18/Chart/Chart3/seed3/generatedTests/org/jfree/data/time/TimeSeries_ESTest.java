/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 17 20:43:33 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Button;
import java.awt.TextField;
import java.sql.Connection;
import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(90L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      Minute minute0 = new Minute();
      Minute minute1 = (Minute)minute0.previous();
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute1, (RegularTimePeriod) minute0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4297L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) (-4297L));
      Vector<Second> vector0 = new Vector<Second>();
      timeSeries0.data = (List) vector0;
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) 910380114);
      assertEquals(9.10380114E8, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      Float float0 = new Float((float) 0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond1, (Number) float0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) float0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      timeSeries0.add((RegularTimePeriod) fixedMillisecond1, (Number) null, false);
      timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond1);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Minute minute0 = new Minute();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) millisecond0);
      Vector<Button> vector0 = new Vector<Button>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) vector0, 588);
      Vector vector1 = defaultTableModel0.getDataVector();
      timeSeries1.data = (List) vector1;
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      
      timeSeries1.setMaximumItemCount(0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, "igfdN", "igfdN");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(53, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Minute minute0 = new Minute();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, 2490.39941322549);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Millisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.add((RegularTimePeriod) day0, 1702.4658, true);
      timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(1702.4658, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) (-4314L));
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals((-4314.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Day day0 = new Day((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "\"DL{+|wps=V`hTM{Fm", "");
      timeSeries0.add((RegularTimePeriod) day0, (double) 0);
      timeSeries0.getValue(0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 40);
      timeSeries0.getTimePeriodClass();
      assertEquals(40.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Day day0 = new Day((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "\"DL{+|wps=V`hTM{Fm", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("\"DL{+|wps=V`hTM{Fm", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 40);
      timeSeries0.getNextTimePeriod();
      assertEquals(40.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) (-4314L));
      double double0 = timeSeries0.getMinY();
      assertEquals((-4314.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) (-4314L));
      double double0 = timeSeries0.getMaxY();
      assertEquals((-4314.0), timeSeries0.getMinY(), 0.01);
      assertEquals((-4314.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 24);
      timeSeries0.getItemCount();
      assertEquals(24.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      timeSeries0.getIndex(millisecond0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.setDomainDescription("");
      timeSeries0.getDomainDescription();
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      timeSeries0.getDataItem(0);
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("SeriesChangeType.UPDATE", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("SeriesChangeType.UPDATE", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Minute minute0 = new Minute();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4325L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) (-4325L));
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals((-4325.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(0, 0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.createCopy(0, 0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 0);
      timeSeries0.addAndOrUpdate(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeresChangTypeUPDATE", "SeresChangTypeUPDATE");
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-2349.98970896));
      timeSeries0.addAndOrUpdate(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Week week0 = new Week((-5102), (-5102));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        timeSeries0.update(0, (Number) 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(2628, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-1), (Number) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      List list0 = timeSeriesCollection0.getSeries();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeries cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      Vector<Second> vector0 = new Vector<Second>();
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        timeSeries0.getValue(910380114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 910380114
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, "Cannot add null series.", "@D~bU1^6>wi@`8'=?6");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-1502));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(90L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(2734);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2734, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(90L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-555));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeresChangTypeUPDATE", "SeresChangTypeUPDATE");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(388);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 388, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(90L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, ")m`0n&4pFL2J?qL)|3", ")m`0n&4pFL2J?qL)|3");
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 59, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-2328), 1255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) (-4314L), true);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(2002, 2184);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2002, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(39, hour0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "Invalid 'day' argument.");
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      List list0 = xYSeries0.getItems();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0.0F);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      Vector<Second> vector0 = new Vector<Second>();
      timeSeries0.data = (List) vector0;
      vector0.add((Second) null);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 910380114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Minute minute0 = new Minute();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.add((RegularTimePeriod) minute0, (double) 999);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) (-4314L));
      Vector<Second> vector0 = new Vector<Second>();
      timeSeries0.data = (List) vector0;
      vector0.setSize(24);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 2110L);
      // Undeclared exception!
      try { 
        timeSeries1.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Thu Jan 01 00:00:02 GMT 1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) (byte)117, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Thu Jan 01 00:00:02 GMT 1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultMultiValueCategoryDataset0, 0, 50);
      List list0 = slidingCategoryDataset0.getColumnKeys();
      timeSeries1.data = list0;
      // Undeclared exception!
      try { 
        timeSeries1.add((RegularTimePeriod) fixedMillisecond0, (Number) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) 0.857);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Thu Jan 01 00:00:02 GMT 1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Day day0 = new Day((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "\"DL{+|wps=V`hTM{Fm", "");
      timeSeries0.add((RegularTimePeriod) day0, (double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (double) 0L, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 1-January-1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Minute minute0 = new Minute();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      List list0 = xYSeriesCollection0.getSeries();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (double) 999);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Day day0 = new Day((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "\"DL{+|wps=V`hTM{Fm", "");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "=|l{7", "=|l{7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) (-4314L));
      Vector<Second> vector0 = new Vector<Second>();
      timeSeries0.data = (List) vector0;
      timeSeries0.add(timeSeriesDataItem0, true);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(60, 2002);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 60
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      Comparable comparable0 = jDBCXYDataset0.getSeriesKey(50);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) comparable0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-2073), (-2073), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      // Undeclared exception!
      try { 
        timeSeries0.delete(2628, 3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.removeAgedItems(false);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 2110L);
      timeSeries2.addOrUpdate(timeSeriesDataItem0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(2110.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 2110L);
      Class<Quarter> class0 = Quarter.class;
      timeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Quarter.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeresChangTypeUPDATE", "SeresChangTypeUPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 2110L);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
      
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeresChangTypeUPDATE", "SeresChangTypeUPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-2349.98970896));
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 2110L);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals((-2349.98970896), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      timeSeries1.add((RegularTimePeriod) fixedMillisecond0, (Number) 32770);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 24);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(24.0, timeSeries1.getMaxY(), 0.01);
      assertEquals(32770.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(90L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      timeSeries0.getIndex(fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(90L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(2189);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2189, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(2628, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-3291));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      // Undeclared exception!
      try { 
        timeSeries0.getValue(910380114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 910380114, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.getItemCount();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      timeSeries0.hashCode();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(90L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription((String) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Minute minute0 = new Minute();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) millisecond0);
      timeSeries1.add((RegularTimePeriod) millisecond0, (Number) 59);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(59.0, timeSeries1.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Minute minute0 = new Minute();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) millisecond0);
      timeSeries1.setRangeDescription("0");
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals("0", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Minute minute0 = new Minute();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) millisecond0);
      Object[] objectArray0 = new Object[8];
      objectArray0[7] = (Object) timeSeries0;
      timeSeries1.setDomainDescription("J6");
      boolean boolean0 = timeSeries1.equals(objectArray0[7]);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Minute minute0 = new Minute();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) millisecond0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertTrue(boolean0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(90L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      boolean boolean0 = timeSeries0.equals(instant0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4325L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 1.0);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond1, (RegularTimePeriod) fixedMillisecond1);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Minute minute0 = new Minute();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 602, 1, 602, 360, 1);
      minute0.peg(mockGregorianCalendar0);
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) millisecond0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(90L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond1, (RegularTimePeriod) fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-9999), (-9999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 40);
      timeSeries0.delete((-2147483638), 571);
      assertEquals(40.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      // Undeclared exception!
      try { 
        timeSeries0.delete(Integer.MAX_VALUE, 571);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4297L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.clear();
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.removeAgedItems(1561L, false);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getDomainDescription());
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(53L, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Minute minute0 = new Minute();
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) (-4314L));
      Vector<Second> vector0 = new Vector<Second>();
      timeSeries0.data = (List) vector0;
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 910380114);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(5L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      Class<TextField> class0 = TextField.class;
      timeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of java.awt.TextField.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "");
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      timeSeries0.addAndOrUpdate(timeSeries1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(5L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) 18);
      assertEquals(18.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) null);
      Double double0 = (Double)timeSeries0.getValue(0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(double0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      Long long0 = (Long)timeSeries0.getValue((RegularTimePeriod) day0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) day0, (Number) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      
      timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) null);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add((RegularTimePeriod) hour0, 3953.4143558, true);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      Float float0 = new Float((float) 0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond1, (Number) float0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(2628, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null, false);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeresChangTypeUPDATE", "SeresChangTypeUPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 40);
      timeSeries0.getRawDataItem(fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(2628, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.getRawDataItem(hour0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3, 3, 95, 0, 193, 193);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "There is no existing value for the specified 'period'.", "YItx\"Zk>P<Ie");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-2733L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(90L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      timeSeries0.setMaximumItemAge(90L);
      assertEquals(90L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(90L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-932));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.setMaximumItemCount((byte)16);
      assertEquals(16, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeresChangTypeUPDATE", "SeresChangTypeUPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      // Undeclared exception!
      try { 
        timeSeries0.delete(2002, 2002);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2002, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4297L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("SeriesChangeType.UPDATE", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      double double0 = timeSeries0.getMinY();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("Value", string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeresChangTypeUPDATE", "SeresChangTypeUPDATE");
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals("SeresChangTypeUPDATE", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("SeresChangTypeUPDATE", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4297L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.setRangeDescription("SeriesChangeType.UPDATE");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getDomainDescription());
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      double double0 = timeSeries0.getMaxY();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeresChangTypeUPDATE", "SeresChangTypeUPDATE");
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 0);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4297L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) (-4297L));
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Wed Dec 31 23:59:55 GMT 1969 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      timeSeries0.getTimePeriodClass();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(90L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      timeSeries0.getItems();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-4314L));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "SeriesChangeType.UPDATE", "SeriesChangeType.UPDATE");
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getDomainDescription());
      assertEquals("SeriesChangeType.UPDATE", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2110L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "");
      timeSeries0.setDomainDescription("");
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }
}
