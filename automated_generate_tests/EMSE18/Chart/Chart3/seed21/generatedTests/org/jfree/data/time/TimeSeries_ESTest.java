/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 22 16:57:56 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.hashCode();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) quarter0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 7, 1112, 7, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 1);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(478, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 478, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(329.811, 329.811, "2BT?dPN5(jS30|F*");
      Comparable comparable0 = categoryTableXYDataset0.getSeriesKey(0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) comparable0, "org.jfree.data.general.DefaultHeatMapDataset", "org.jfree.data.general.DefaultHeatMapDataset");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      assertEquals("org.jfree.data.general.DefaultHeatMapDataset", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.setMaximumItemCount(4);
      assertEquals(4, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      assertEquals("", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription((String) null);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertTrue(boolean0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1392409281320L);
      timeSeries0.getValue((RegularTimePeriod) quarter0);
      assertEquals(1.39240928132E12, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 4);
      timeSeries0.getTimePeriodClass();
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 4);
      timeSeries0.getRawDataItem(0);
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", "");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", string0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      timeSeries0.add((RegularTimePeriod) month0, (Number) 4, true);
      timeSeries0.getNextTimePeriod();
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.add((RegularTimePeriod) day0, (-1901.40818), false);
      double double0 = timeSeries0.getMaxY();
      assertEquals((-1901.40818), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 4);
      timeSeries0.getItemCount();
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockDate mockDate0 = new MockDate(106, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 2, true);
      timeSeries0.getIndex(quarter0);
      assertEquals(2.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "8n/7-z", "8n/7-z");
      timeSeries0.add((RegularTimePeriod) month0, 1.0);
      timeSeries0.getDataItem(0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (-484.28835654795));
      timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(0, Integer.MAX_VALUE);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 7, 1112, 7, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 1.7976931348623157E308);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 1);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) (byte)6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(329.811, 329.811, "2BT?dPN5(jS30|F*");
      Comparable comparable0 = categoryTableXYDataset0.getSeriesKey(0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) comparable0, "org.jfree.data.general.DefaultHeatMapDataset", "org.jfree.data.general.DefaultHeatMapDataset");
      // Undeclared exception!
      try { 
        timeSeries0.update(0, (Number) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-9999), (Number) 9999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3, (-1313), 3);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, 3505.39, (double) 3, 0.0, (double) (-1313), 0.0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) oHLCDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-12));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "HI", "HI");
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-1164));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Year year0 = new Year((-1643));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "java.lang.Double", "");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-1643));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-3904), (-1331), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Year year0 = new Year(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 9999);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockDate mockDate0 = new MockDate(106, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 1157);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, Integer.MAX_VALUE, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.delete(4, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) 1212961568);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      Class<Day> class0 = Day.class;
      timeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second((-1465), minute0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockDate mockDate0 = new MockDate(106, 0, 0, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", (String) null);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 2, true);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) 4, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Q4/2005 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, (double) 3, Double.NaN, 1.5, 0.0, (double) 3);
      Double double0 = (Double)oHLCDataItem0.getLow();
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) double0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) 1212961568);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      Class<Day> class0 = Day.class;
      timeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (-2513.16499703557), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 0.0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "0D:'|&d3xq]", "0D:'|&d3xq]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockDate mockDate0 = new MockDate(106, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      timeSeries0.add((RegularTimePeriod) quarter0, (double) 0, true);
      timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, Integer.MAX_VALUE, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 4);
      timeSeries0.delete(0, 0, true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(1436, 1436, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1436, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.removeAgedItems(false);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 7, 1112, 7, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 1.7976931348623157E308);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(fixedMillisecond0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1.7976931348623157E308, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      timeSeries0.update(0, (Number) 4);
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, Integer.MAX_VALUE, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 4);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, Double.NaN);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Wed Jul 10 00:00:00 GMT 5881613 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockDate mockDate0 = new MockDate(106, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      timeSeries0.getIndex(quarter0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, long0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("Time", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "8n/7-z", "8n/7-z");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "VERTICAL_SCROLLBAR_POLICY");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "8n/7-z", "8n/7-z");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("8n/7-z", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("8n/7-z", string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      timeSeries0.getItemCount();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) 2, false);
      timeSeries0.hashCode();
      assertEquals(2.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockDate mockDate0 = new MockDate(106, 0, 0, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", (String) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.setMaximumItemAge(2635L);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) day0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(2635L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      boolean boolean0 = timeSeries0.equals(day0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) day0);
      timeSeries0.setDomainDescription("BjAL0S=,");
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals("BjAL0S=,", timeSeries0.getDomainDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      timeSeries1.timePeriodClass = class0;
      timeSeries1.getTimePeriodClass();
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Quarter quarter1 = (Quarter)quarter0.next();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter1);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) quarter1, (RegularTimePeriod) quarter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 1157, 0, (-9));
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) quarter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, Integer.MAX_VALUE);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(92, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "java.langjClaRs", "java.langjClaRs");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-1107), (-2146327843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-4049), 0, (-3626), 0, 60);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.delete(898, 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 3);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.clear();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "8n/7-z", "8n/7-z");
      timeSeries0.add((RegularTimePeriod) month0, 1.0);
      timeSeries0.removeAgedItems((-863L), false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.removeAgedItems((long) (-2516), true);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 4);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(9223372036854775807L, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 4);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 7, 1112, 7, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, Integer.MAX_VALUE, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 4);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      timeSeries1.delete((RegularTimePeriod) fixedMillisecond0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 4);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) day0, (Number) 1.0F);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 4);
      timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) 4);
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, Integer.MAX_VALUE, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 4);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (double) 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, Integer.MAX_VALUE, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 4);
      timeSeries0.getValue((RegularTimePeriod) quarter0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second((-1465), minute0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      timeSeries0.getValue((RegularTimePeriod) second0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) day0);
      timeSeries1.addOrUpdate((RegularTimePeriod) day0, (Number) 3);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(3.0, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) 1392409281320L);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(quarter0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
      
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 0, 1157, 0, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      timeSeries0.getRawDataItem(fixedMillisecond0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.getDataItem((RegularTimePeriod) day0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-1857L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-2250));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, 1.7976931348623157E308);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, 4.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.add((RegularTimePeriod) day0, (-1901.40818), false);
      timeSeries0.getDataItem((RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 3);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-2516), (-2516));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      double double0 = timeSeries0.getMinY();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockDate mockDate0 = new MockDate(103, 103, 1157, 103, 0);
      Quarter quarter0 = new Quarter((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "", "");
      timeSeries0.setRangeDescription("");
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-633));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.add((RegularTimePeriod) day0, (-1901.40818), false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) 1212961568);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.getTimePeriodClass();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "8n/7-z", "8n/7-z");
      timeSeries0.getItems();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("8n/7-z", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("8n/7-z", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) day0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) 1212961568);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }
}
