/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 19 21:16:30 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Container;
import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JComponent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      Minute minute1 = (Minute)minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute1, " but the series already contains an observation", " but the series already contains an observation");
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute1, (RegularTimePeriod) minute0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(" but the series already contains an observation", timeSeries1.getRangeDescription());
      assertEquals(" but the series already contains an observation", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      Minute minute1 = (Minute)minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute1, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.add((RegularTimePeriod) minute1, (-0.36217915691431024));
      timeSeries0.getValue((RegularTimePeriod) minute0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      Minute minute1 = (Minute)minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute1, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.add((RegularTimePeriod) minute1, 0.0);
      timeSeries0.getDataItem((RegularTimePeriod) minute0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "org.jfree.data.statistics.SimpleHistogramBin", "org.jfree.data.statistics.SimpleHistogramBin");
      timeSeries0.add((RegularTimePeriod) hour0, (double) 23);
      timeSeries0.delete(0, 0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (-0.36217915691431024));
      timeSeries0.getValue((RegularTimePeriod) minute0);
      assertEquals((-0.36217915691431024), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, "Null 'type' argument", "Time");
      timeSeries0.add((RegularTimePeriod) week0, (double) 1, false);
      timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate(994, 994, 519, 519, (-1164), 994);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0);
      timeSeries0.update((RegularTimePeriod) millisecond0, (Number) 999);
      timeSeries0.getValue((RegularTimePeriod) millisecond0);
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockDate mockDate0 = new MockDate(987, 987, 523, 523, (-1164), 987);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0);
      timeSeries0.getTimePeriodClass();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.getTimePeriod(0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.getRawDataItem(0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.setRangeDescription("");
      timeSeries0.getRangeDescription();
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate(987, 987, 523, 523, (-1164), 987);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0);
      timeSeries0.getNextTimePeriod();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      double double0 = timeSeries0.getMinY();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2084L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0);
      double double0 = timeSeries0.getMaxY();
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (-0.36217915691431024));
      double double0 = timeSeries0.getMaxY();
      assertEquals((-0.36217915691431024), timeSeries0.getMinY(), 0.01);
      assertEquals((-0.36217915691431024), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 999);
      timeSeries0.getItemCount();
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockDate mockDate0 = new MockDate(987, 987, 523, 523, (-1164), 987);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0);
      timeSeries0.getIndex(millisecond0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      Minute minute1 = (Minute)minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute1, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.add((RegularTimePeriod) minute1, (-0.36217915691431024));
      int int0 = timeSeries0.getIndex(minute0);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2332, "");
      Locale locale0 = Locale.CHINESE;
      Month month0 = new Month((Date) mockDate0, (TimeZone) simpleTimeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", "");
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.getDataItem(0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.setNotify(false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2084L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2084L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(0, 59);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2084L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (-0.36217915691431024));
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals((-0.36217915691431024), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2332, "");
      Locale locale0 = JComponent.getDefaultLocale();
      Month month0 = new Month((Date) mockDate0, (TimeZone) simpleTimeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "S)A}V_Uv[Z4#]", "S)A}V_Uv[Z4#]");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) month0, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 1016L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries0.update(193, (Number) 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 193, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.update((-1), (Number) minute0.FIRST_MINUTE_IN_HOUR);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 999);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems((-2210593619794989709L), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate(44, 44, 1367);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(1367);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1367, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "TimePeriodAnchor.START", "TaskSeriesCollection.remove(): index outside valid range.", "?l,qf5");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockDate mockDate0 = new MockDate(987, 987, 523, 523, (-1164), 987);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getRawDataItem((-1164));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2332, "");
      Locale locale0 = Locale.CHINESE;
      Month month0 = new Month((Date) mockDate0, (TimeZone) simpleTimeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", "");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockDate mockDate0 = new MockDate(994, 994, 519, 519, (-1206), 994);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 994, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "org.jfree.data.statistics.SimpleHistogramBin", "org.jfree.data.statistics.SimpleHistogramBin");
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, "Null 'type' argument", "Time");
      // Undeclared exception!
      try { 
        timeSeries0.delete(53, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(0, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Year year0 = quarter0.getYear();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      timeSeries0.add((RegularTimePeriod) quarter0, (Number) (byte)8);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Quarter.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-35L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 59);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      timeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "r", "N~pO>Q");
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Thu Jan 01 00:00:00 GMT 1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockDate mockDate0 = new MockDate(994, 994, 519, 519, (-1164), 994);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, 0.0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Thu Apr 23 19:52:34 GMT 2978 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "O", "O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-35L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.createCopy(0, 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.delete((-2147483636), 702, true);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.delete((-2147483636), 702, false);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1060), 572, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.removeAgedItems(false);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(" but the series already contains an observation", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(" but the series already contains an observation", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockDate mockDate0 = new MockDate(987, 987, 523, 523, (-1164), 987);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 999);
      timeSeries0.clear();
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockDate mockDate0 = new MockDate(987, 987, 523, 523, (-1164), 987);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockDate mockDate0 = new MockDate(987, 987, 523, 523, (-1164), 987);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 999);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Tue Sep 25 23:52:27 GMT 2970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.getIndex(minute0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(" but the series already contains an observation", timeSeries0.getDomainDescription());
      assertEquals(" but the series already contains an observation", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, "Q<t*;oZ/kjFoT&33", "Q<t*;oZ/kjFoT&33");
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "AkzxAZDr}aO{", "Period:");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1), 2873);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "org.jfree.data.statistics.SimpleHistogramBin", "org.jfree.data.statistics.SimpleHistogramBin");
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(400);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 400, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-2702));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.getItemCount();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      Minute minute1 = (Minute)minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute1, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.add((RegularTimePeriod) minute1, (-0.36217915691431024));
      timeSeries0.hashCode();
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2084L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.hashCode();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2084L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.hashCode();
      assertEquals(" but the series already contains an observation", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(" but the series already contains an observation", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockDate mockDate0 = new MockDate(987, 987, 523, 523, (-1164), 987);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      boolean boolean0 = timeSeries0.equals(mockDate0);
      assertFalse(boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      Minute minute1 = (Minute)minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute1, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute1, (-0.36217915691431024));
      timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
      assertEquals((-0.36217915691431024), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Minute minute0 = new Minute();
      Minute minute1 = (Minute)minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute1, " but the series already contains an observation", " but the series already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) millisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "Null 'end' argument.", "tf]");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(604, (-1060));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-543), (int) (byte)8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockDate mockDate0 = new MockDate(987, 987, 523, 523, (-1164), 987);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0);
      timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 999);
      timeSeries0.delete((-2147483636), 702, false);
      assertEquals(999.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockDate mockDate0 = new MockDate(994, 994, 523, 523, (-1164), 994);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(994, 53, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      Minute minute1 = (Minute)minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute1, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.add((RegularTimePeriod) minute1, (-0.36217915691431024));
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.delete((RegularTimePeriod) minute0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.delete((RegularTimePeriod) millisecond0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "org.jfree.data.statistics.SimpleHistogramBin", "org.jfree.data.statistics.SimpleHistogramBin");
      timeSeries0.clear();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.data.statistics.SimpleHistogramBin", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("org.jfree.data.statistics.SimpleHistogramBin", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 999);
      timeSeries0.removeAgedItems((-807L), false);
      timeSeries0.removeAgedItems(14300707514000L, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.removeAgedItems((-807L), false);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      Minute minute1 = (Minute)minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute1, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.add((RegularTimePeriod) minute1, (-0.36217915691431024));
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2084L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 1988.2848464381323);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Minute.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "org.jfree.data.statistics.SimpleHistogramBin", "org.jfree.data.statistics.SimpleHistogramBin");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2332, "j4Q");
      Locale locale0 = JComponent.getDefaultLocale();
      Month month0 = new Month((Date) mockDate0, (TimeZone) simpleTimeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "S)A}V_Uv[Z4#]", "S)A}V_Uv[Z4#]");
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) month0, (Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2084L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) null);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      Minute minute1 = (Minute)minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute1, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.add((RegularTimePeriod) minute1, (-0.36217915691431024));
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      Class<Container> class0 = Container.class;
      timeSeries0.timePeriodClass = class0;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (Number) (byte)8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of java.awt.Container.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (-0.36217915691431024));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Thu Jan 01 00:00:00 GMT 1970 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.getValue((RegularTimePeriod) minute0);
      assertEquals(" but the series already contains an observation", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(" but the series already contains an observation", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2084L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      Minute minute1 = (Minute)minute0.previous();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute1, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute1, (RegularTimePeriod) minute1);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2084L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.getTimePeriods();
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 999);
      timeSeries0.getRawDataItem(millisecond0);
      assertEquals(999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.getRawDataItem(minute0);
      assertEquals(" but the series already contains an observation", timeSeries0.getRangeDescription());
      assertEquals(" but the series already contains an observation", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) minute0);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.getDataItem((RegularTimePeriod) minute0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(" but the series already contains an observation", timeSeries0.getRangeDescription());
      assertEquals(" but the series already contains an observation", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-2084L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.setMaximumItemAge(60L);
      assertEquals(60L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.setMaximumItemCount(59);
      assertEquals(59, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.addOrUpdate((RegularTimePeriod) millisecond0, (double) 999);
      timeSeries0.addAndOrUpdate(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (-0.36217915691431024));
      double double0 = timeSeries0.getMinY();
      assertEquals((-0.36217915691431024), timeSeries0.getMaxY(), 0.01);
      assertEquals((-0.36217915691431024), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockDate mockDate0 = new MockDate(987, 987, 523, 523, (-1164), 987);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-1851));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2084L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockDate mockDate0 = new MockDate(987, 987, 523, 523, (-1164), 987);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      double double0 = timeSeries0.getMinY();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(" but the series already contains an observation", timeSeries0.getRangeDescription());
      assertEquals(" but the series already contains an observation", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(" but the series already contains an observation", string0);
      assertEquals(" but the series already contains an observation", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockDate mockDate0 = new MockDate(987, 987, 523, 523, (-1164), 987);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, long0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "org.jfree.data.statistics.SimpleHistogramBin", "org.jfree.data.statistics.SimpleHistogramBin");
      double double0 = timeSeries0.getMaxY();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.statistics.SimpleHistogramBin", timeSeries0.getRangeDescription());
      assertEquals("org.jfree.data.statistics.SimpleHistogramBin", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate(987, 987, 523, 523, (-1164), 987);
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      timeSeries0.getTimePeriodClass();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute((Date) mockDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.getItems();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(" but the series already contains an observation", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(" but the series already contains an observation", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2084L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(" but the series already contains an observation", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(" but the series already contains an observation", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2084L));
      Date date0 = Date.from(instant0);
      Minute minute0 = new Minute(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, " but the series already contains an observation", " but the series already contains an observation");
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, false);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "org.jfree.data.statistics.SimpleHistogramBin", "org.jfree.data.statistics.SimpleHistogramBin");
      timeSeries0.setDomainDescription("=");
      assertEquals("=", timeSeries0.getDomainDescription());
  }
}
