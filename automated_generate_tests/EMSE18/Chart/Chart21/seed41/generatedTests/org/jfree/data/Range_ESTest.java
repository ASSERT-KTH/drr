/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 23 16:44:38 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range(5650.71554574408, 5650.71554574408);
      Range range1 = Range.shift(range0, 5650.71554574408);
      Range range2 = Range.combine(range0, range1);
      boolean boolean0 = range2.equals(range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range2));
      assertEquals(8476.07331861612, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(3896.3, 3896.3);
      Range range1 = Range.expandToInclude(range0, (-1.0));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      assertEquals(3897.3, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(456.2, 456.2);
      Range range1 = Range.expandToInclude(range0, (-1.0));
      Range range2 = Range.expand(range1, 24.90009483596475, 0.0);
      Range range3 = Range.expandToInclude(range2, (-5182.053942689206));
      assertEquals(457.2, range1.getLength(), 0.01);
      assertEquals(11841.523359003084, range3.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-3071.800015796286), 0.3826534780005836);
      Range range1 = Range.combine(range0, range0);
      assertEquals(3072.1826692742866, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-1489.1), (-1489.1));
      Range range1 = Range.shift(range0, 0.0, true);
      Range range2 = Range.combine(range1, range0);
      assertEquals((-1489.1), range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-3057.1398128), 0.0);
      Range range1 = Range.combine((Range) null, range0);
      assertEquals((-1528.5699064), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(456.2, 456.2);
      Range range1 = Range.expandToInclude(range0, (-1.0));
      boolean boolean0 = range1.intersects(24.90009483596475, 1272.49449);
      assertTrue(boolean0);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(456.2, 456.2);
      boolean boolean0 = range0.intersects(24.90009483596475, 24.90009483596475);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-2963.89844), (-2963.89844));
      Range range1 = Range.expandToInclude(range0, 0.0);
      double double0 = range1.constrain((-2963.89844));
      assertEquals((-2963.89844), double0, 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-3071.800015796286), 0.3826534780005836);
      Range range1 = Range.shift(range0, 0.3826534780005836);
      assertEquals((-1535.3260276811423), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0));
      assertEquals((-2.0), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range((-1211.487730019639), 0.0);
      Range range1 = Range.expandToInclude(range0, 433.3846805139773);
      double double0 = range1.getUpperBound();
      assertEquals((-389.05152475283086), range1.getCentralValue(), 0.01);
      assertEquals(433.3846805139773, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-1489.1), (-1489.1));
      double double0 = range0.getUpperBound();
      assertEquals((-1489.1), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range((-3057.1398128), 0.0);
      double double0 = range0.getLowerBound();
      assertEquals((-1528.5699064), range0.getCentralValue(), 0.01);
      assertEquals((-3057.1398128), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-5804.4659625786), 0.0);
      double double0 = range0.getLength();
      assertEquals(5804.4659625786, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-1.0), false);
      double double0 = range1.getCentralValue();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expandToInclude(range0, (-1.0));
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range((-1489.1), (-1489.1));
      Range range1 = Range.expand(range0, 0.0, 979.718823158156);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, 1.0);
      Range range2 = Range.expand(range1, (-1.0), 1.0);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, 1.0, false);
      double double0 = range1.constrain((-0.1565));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.combine(range0, (Range) null);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 2.0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 654.15989, false);
      boolean boolean0 = range1.contains(0.0);
      assertEquals(654.15989, range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range((-2.4348778941816462), (-867.9086474));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-2.4348778941816462) <= upper (-867.9086474).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range((-1211.487730019639), 0.0);
      double double0 = range0.getUpperBound();
      assertEquals((-605.7438650098195), range0.getCentralValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(456.2, 456.2);
      double double0 = range0.getLowerBound();
      assertEquals(456.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 3397.62, true);
      Range range2 = Range.expandToInclude(range1, 0.0);
      boolean boolean0 = range0.equals(range2);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range2));
      assertFalse(boolean0);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-1607.3311337948), false);
      boolean boolean0 = range1.equals(range0);
      assertEquals((-1607.3311337948), range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(456.2, 456.2);
      Range range1 = Range.expandToInclude(range0, (-1.0));
      Range range2 = Range.shift(range1, 0.011171344699981147, false);
      assertEquals(227.61117134469995, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 1.0, (-300777.68));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range((-1798.82508070018), (-1798.82508070018));
      assertEquals((-1798.82508070018), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.expandToInclude(range0, 1.0);
      boolean boolean0 = range1.intersects(1.0, 2773.2585224051);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(456.2, 456.2);
      Range range1 = Range.expandToInclude(range0, 456.2);
      assertEquals(456.2, range1.getLowerBound(), 0.01);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      double double0 = range0.constrain(1488.641553131);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range((-2963.89844), (-2963.89844));
      double double0 = range0.constrain((-2963.89844));
      assertEquals((-2963.89844), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-3071.800015796286), 0.3826534780005836);
      Range range1 = Range.expand(range0, 1704.6078, 859.7);
      boolean boolean0 = range1.intersects(1704.6078, 0.0);
      assertEquals(3072.1826692742866, range0.getLength(), 0.01);
      assertEquals((-1299391.2588284914), range1.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range((-1798.82508070018), (-1798.82508070018));
      boolean boolean0 = range0.intersects(1.0, 2773.2585224051);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      boolean boolean0 = range0.intersects((-1.0), (-1.0));
      assertFalse(boolean0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(456.2, 456.2);
      boolean boolean0 = range0.intersects(0.0, 1272.49449);
      assertTrue(boolean0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(456.2, 456.2);
      Range range1 = Range.expandToInclude(range0, (-1.0));
      boolean boolean0 = range1.intersects(0.0, 0.0);
      assertTrue(boolean0);
      assertEquals(456.2, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      boolean boolean0 = range0.contains(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-1798.82508070018), (-1798.82508070018));
      boolean boolean0 = range0.contains(846.0);
      assertFalse(boolean0);
      assertEquals((-1798.82508070018), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(456.2, 456.2);
      String string0 = range0.toString();
      assertEquals("Range[456.2,456.2]", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range((-769.2568408728), (-769.2568408728));
      range0.hashCode();
      assertEquals((-769.2568408728), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range(456.2, 456.2);
      double double0 = range0.getCentralValue();
      assertEquals(456.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range(456.2, 456.2);
      assertEquals(456.2, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.expand(range0, 0.0, 0.011171344699981147);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(456.2, range1.getCentralValue(), 0.01);
  }
}
