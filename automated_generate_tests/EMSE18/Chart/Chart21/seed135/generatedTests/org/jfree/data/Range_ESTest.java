/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 08:31:48 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range(246.710511422, 246.710511422);
      Range range1 = Range.expandToInclude(range0, 1723.16954978);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(246.710511422, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(210.712123256, 210.712123256);
      Range range1 = Range.shift(range0, (-2781.028361209149));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-1563.780365349), 0.0);
      Range range1 = Range.expandToInclude(range0, (-1526.0));
      assertEquals((-781.8901826745), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 1385.536658912819);
      Range range2 = Range.expand(range1, 0.0, 1385.536658912819);
      Range range3 = Range.combine(range1, range2);
      boolean boolean0 = range3.intersects(960223.1173982611, 1921097.36985021);
      assertTrue(boolean0);
      assertEquals(960548.684925105, range3.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-3163.3954), (-3163.3954));
      boolean boolean0 = range0.intersects((-773.147090629), (-773.147090629));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(210.712123256, 210.712123256);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 253.0);
      boolean boolean0 = range1.contains(0.0);
      assertEquals(253.0, range1.getUpperBound(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(2530.7062325, 2530.7062325);
      Range range1 = Range.shift(range0, 2530.7062325, true);
      assertEquals(5061.412465, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(210.712123256, 210.712123256);
      double double0 = range0.getUpperBound();
      assertEquals(210.712123256, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.getUpperBound();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 2972.80291965);
      double double0 = range1.getLowerBound();
      assertEquals(2972.80291965, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 1385.536658912819);
      Range range2 = Range.expand(range1, 0.0, 1385.536658912819);
      double double0 = range2.getLength();
      assertEquals(1921097.36985021, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 1385.536658912819);
      double double0 = range1.getCentralValue();
      assertEquals(692.7683294564094, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-3540.2758185872835), (-3540.2758185872835));
      Range range1 = Range.expandToInclude(range0, (-3540.2758185872835));
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(210.712123256, 210.712123256);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = Range.expand(range0, (-998.023), (-2781.028361209149));
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(210.712123256, 210.712123256);
      Range range1 = Range.shift(range0, (-2781.028361209149));
      Range range2 = Range.expand(range1, (-2781.028361209149), 0.0);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range((-2764.829830924275), (-2764.829830924275));
      Range range1 = Range.expand(range0, (-2764.829830924275), (-2764.829830924275));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain((-47.65552336));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-1361.1), (-1361.1));
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 1708.19465, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.shift(range0, 0.0, false);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains(253.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range((-1.0), (-2142.263783135519));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-1.0) <= upper (-2142.263783135519).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-2764.829830924275), (-2764.829830924275));
      double double0 = range0.getLowerBound();
      assertEquals((-2764.829830924275), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range((-3543.4023057700438), (-3543.4023057700438));
      Range range1 = Range.expandToInclude(range0, 922.9165529594942);
      boolean boolean0 = range1.equals(range0);
      assertEquals((-3543.4023057700438), range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-3543.0317479426735), (-3543.0317479426735));
      Range range1 = Range.shift(range0, (-3543.0317479426735));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertEquals((-7086.063495885347), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.equals("pThLm;#1yL-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range((-3543.4023057700438), (-3543.4023057700438));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-1809.3846434637), true);
      assertEquals((-1809.3846434637), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 2607.0, 2607.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, 1135.5521877550802);
      Range range2 = Range.expandToInclude(range1, (-1.0));
      assertEquals((-0.5), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.43312747740204516);
      Range range1 = Range.combine(range0, (Range) null);
      assertEquals(0.43312747740204516, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.combine((Range) null, range0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.43312747740204516);
      double double0 = range0.constrain(0.0);
      assertEquals(0.43312747740204516, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(210.712123256, 210.712123256);
      Range range1 = Range.expandToInclude(range0, 2490.692816223193);
      boolean boolean0 = range1.intersects(2074.3246, 210.712123256);
      assertEquals(210.712123256, range0.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(1350.7024697395964, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-2217.441476940978), 2489.811883827129);
      Range range1 = Range.shift(range0, 2489.811883827129, false);
      Range range2 = Range.shift(range1, (-2217.441476940978));
      Range range3 = Range.combine(range2, range2);
      boolean boolean0 = range3.intersects(2489.811883827129, 2489.811883827129);
      assertTrue(boolean0);
      assertNotSame(range3, range2);
      assertEquals(272.3704068861507, range3.getCentralValue(), 0.01);
      assertEquals((-2217.441476940978), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(0.0, 1.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects((-404.65195), 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-2217.441476940978), 2489.811883827129);
      boolean boolean0 = range0.intersects(2489.811883827129, 2489.811883827129);
      assertEquals(136.18520344307535, range0.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-3543.0317479426735), (-3543.0317479426735));
      double double0 = range0.constrain(922.9165529594942);
      assertEquals((-3543.0317479426735), range0.getLowerBound(), 0.01);
      assertEquals((-3543.0317479426735), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range((-3540.2758185872835), (-3540.2758185872835));
      double double0 = range0.constrain((-3540.2758185872835));
      assertEquals((-3540.2758185872835), range0.getUpperBound(), 0.01);
      assertEquals((-3540.2758185872835), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      boolean boolean0 = range0.contains((-2184.10945168927));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range((-1563.780365349), 0.0);
      // Undeclared exception!
      try { 
        Range.expand(range0, (-1526.0), (-1563.780365349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (2384765.0571572254) <= upper (-2445409.031051052).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range(0.0, 2.0);
      String string0 = range0.toString();
      assertEquals("Range[0.0,2.0]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = new Range((-1361.1), (-1361.1));
      range0.hashCode();
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.getCentralValue();
      assertEquals((-1.0), double0, 0.01);
  }
}
