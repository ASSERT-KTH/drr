/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 19:22:21 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-1778.16), (-1778.16));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-5446.0632));
      Range range1 = Range.expandToInclude(range0, 0.0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      assertEquals((-5446.0632), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(155.73599856575316, 155.73599856575316);
      Range range1 = Range.shift(range0, 155.73599856575316, false);
      boolean boolean0 = range1.equals(range0);
      assertEquals(311.4719971315063, range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-393.409), 1388.894682489389);
      Range range1 = Range.expand(range0, 0.0, 2862.59353336519);
      assertEquals(2551503.2408347894, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-3361.785463821), 0.0);
      Range range1 = Range.expandToInclude(range0, (-3361.785463821));
      assertSame(range1, range0);
      assertEquals((-1680.8927319105), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(1.5720068402977532E7, 1.5720068402977532E7);
      Range range1 = Range.expandToInclude(range0, (-4111.943706333597));
      boolean boolean0 = range1.intersects((-19.2565557), 1.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range((-2740.9418419345143), 3836.066784789);
      boolean boolean0 = range0.intersects(3836.066784789, (-3291.4483342549725));
      assertFalse(boolean0);
      assertEquals(6577.008626723515, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-2740.9418419345143), (-2740.9418419345143));
      boolean boolean0 = range0.intersects((-2740.9418419345143), (-2740.9418419345143));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-393.409), 1388.894682489389);
      double double0 = range0.constrain((-393.409));
      assertEquals(1782.3036824893888, range0.getLength(), 0.01);
      assertEquals((-393.409), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-753.6342033972641), (-1.0));
      Range range1 = Range.shift(range0, (-753.6342033972641), true);
      assertEquals(752.6342033972641, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(2163.91596, 2163.91596);
      double double0 = range0.getUpperBound();
      assertEquals(2163.91596, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.shift(range0, (-1068.4814829798324), true);
      double double0 = range1.getUpperBound();
      assertEquals((-1068.4814829798324), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-486.0));
      range0.getLowerBound();
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-3845.1855613674716), (-3845.1855613674716));
      Range range1 = Range.shift(range0, (-3845.1855613674716), true);
      Range range2 = Range.expand(range1, (-3845.1855613674716), (-417.1377395));
      Range range3 = Range.combine(range2, range0);
      double double0 = range3.getLength();
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3845.1855613674716, double0, 0.01);
      assertEquals((-7690.371122734943), range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(2424.00505632723, 2424.00505632723);
      double double0 = range0.getCentralValue();
      assertEquals(2424.00505632723, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      double double0 = range0.getCentralValue();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(0.0, 2.0);
      Range range1 = Range.expand(range0, (-1.0), 0.0);
      Range range2 = Range.expandToInclude(range1, 5107.6205);
      assertEquals(5105.6205, range2.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.expand(range0, 0.0, 0.0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range((-0.17638470293589736), 1092.55944809197);
      Range range1 = Range.shift(range0, 1092.55944809197);
      double double0 = range1.constrain((-0.17638470293589736));
      assertEquals(0.0, double0, 0.01);
      assertEquals(2185.11889618394, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(155.73599856575316, 155.73599856575316);
      double double0 = range0.constrain(0.0);
      assertEquals(155.73599856575316, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range(2163.91596, 2163.91596);
      Range range1 = Range.combine(range0, range0);
      assertEquals(2163.91596, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 155.73599856575316);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range((-1778.16), (-1778.16));
      boolean boolean0 = range0.contains(0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 3277.3809, false);
      boolean boolean0 = range1.contains(3277.3809);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(191.76, 191.76);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(191.76, 191.76);
      double double0 = range0.getLowerBound();
      assertEquals(191.76, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(2003.5855, 2003.5855);
      Range range1 = Range.shift(range0, (-1388.41106));
      boolean boolean0 = range1.equals(range0);
      assertEquals(615.17444, range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-5446.0632));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-5446.0632));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-1615.7914));
      assertEquals((-1615.7914), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, true);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 2481.02311389, (-486.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-5446.0632));
      assertEquals((-5446.0632), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.expandToInclude(range0, 0.0);
      boolean boolean0 = range1.equals(range0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-5446.0632), range1.getLowerBound(), 0.01);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-5446.0632));
      Range range1 = Range.combine(range0, (Range) null);
      assertNotNull(range1);
      assertEquals((-5446.0632), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range((-1778.16), (-1778.16));
      Range range1 = Range.combine((Range) null, range0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(1.5720068402977532E7, 1.5720068402977532E7);
      assertEquals(1.5720068402977532E7, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.expandToInclude(range0, (-4111.943706333597));
      boolean boolean0 = range1.intersects((-2380.52), (-4111.943706333597));
      assertFalse(boolean0);
      assertEquals(7857978.229635599, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-1778.16), (-1778.16));
      boolean boolean0 = range0.intersects((-1.0), 0.0);
      assertFalse(boolean0);
      assertEquals((-1778.16), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(0.0, 925.83028882);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(191.76, 191.76);
      boolean boolean0 = range0.intersects((-1239.90682105), (-858.35969083334));
      assertFalse(boolean0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-3361.785463821), 0.0);
      boolean boolean0 = range0.intersects((-747.20301), (-747.20301));
      assertTrue(boolean0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-5446.0632));
      double double0 = range0.constrain(0.0);
      assertEquals((-5446.0632), double0, 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains((-4029.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(183.24562, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (183.24562) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      String string0 = range0.toString();
      assertEquals("Range[0.0,0.0]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }
}
