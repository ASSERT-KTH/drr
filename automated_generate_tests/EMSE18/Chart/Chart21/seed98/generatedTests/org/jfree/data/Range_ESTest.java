/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 23 23:50:09 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expandToInclude(range0, 8095653.441);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(2535.2595377566, 2535.2595377566);
      Range range1 = Range.shift(range0, 237.9415322174253, true);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 833.8354221316415);
      Range range1 = Range.expandToInclude(range0, 833.8354221316415);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-1289.247473754705), (-1289.247473754705));
      Range range1 = Range.shift(range0, (-1289.247473754705), false);
      boolean boolean0 = range1.intersects((-1289.247473754705), 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 833.8354221316415);
      Range range1 = Range.shift(range0, 833.8354221316415, false);
      boolean boolean0 = range1.intersects(0.0, 833.8354221316415);
      assertFalse(boolean0);
      assertEquals(1667.670844263283, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 833.8354221316415);
      boolean boolean0 = range0.intersects(0.0, 833.8354221316415);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-1289.247473754705), (-1289.247473754705));
      Range range1 = Range.shift(range0, (-1289.247473754705), true);
      Range range2 = Range.expandToInclude(range1, 1.0);
      boolean boolean0 = range2.intersects((-1289.247473754705), 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, 465.8);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(1678.8182921182874, 1678.8182921182874);
      double double0 = range0.getUpperBound();
      assertEquals(1678.8182921182874, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 833.8354221316415);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(4606.1125189664, 4606.1125189664);
      double double0 = range0.getCentralValue();
      assertEquals(4606.1125189664, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-2251.1));
      double double0 = range1.getCentralValue();
      assertEquals((-1125.55), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.shift(range0, 2853.381945933793, true);
      double double0 = range1.getLowerBound();
      assertEquals(2853.381945933793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(0.8377090635921455, 2.0);
      Range range1 = Range.shift(range0, 1807.96074);
      Range range2 = Range.expand(range1, 1.0, 2.0);
      assertEquals(4.6491637456310855, range2.getLength(), 0.01);
      assertEquals(1.1622909364078544, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range((-13.80578938), (-13.80578938));
      Range range1 = Range.shift(range0, 2647.0, false);
      Range range2 = Range.expand(range1, (-13.80578938), 0.0);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = Range.expand(range0, (-1.0), (-1.0));
      Range range2 = Range.combine(range0, range1);
      assertEquals(0.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0.8377090635921455, 2.0);
      double double0 = range0.constrain(1807.96074);
      assertEquals(2.0, double0, 0.01);
      assertEquals(0.8377090635921455, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-1261.487894757973), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 3117.01);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range(4606.1125189664, 4606.1125189664);
      boolean boolean0 = range0.contains(9357.56794511138);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      boolean boolean0 = range0.contains((-142.755728326));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(1899.543467383, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1899.543467383) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range((-2403.7557023442637), (-2403.7557023442637));
      double double0 = range0.getUpperBound();
      assertEquals((-2403.7557023442637), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range((-13.80578938), (-13.80578938));
      double double0 = range0.getLowerBound();
      assertEquals((-13.80578938), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 1688.03);
      boolean boolean0 = range1.equals(range0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(1678.8182921182874, 1678.8182921182874);
      assertEquals(1678.8182921182874, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.shift(range0, 1678.8182921182874);
      boolean boolean0 = range0.equals(range1);
      assertEquals(3357.636584236575, range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-2403.7557023442637), (-2403.7557023442637));
      boolean boolean0 = range0.equals("&'K");
      assertFalse(boolean0);
      assertEquals((-2403.7557023442637), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-2251.1));
      Range range2 = Range.shift(range1, (-2251.1));
      assertEquals((-3376.6499999999996), range2.getCentralValue(), 0.01);
      assertEquals((-2251.1), range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range((-2219.1), 880.6649);
      Range range1 = Range.shift(range0, 1.0, true);
      assertEquals((-668.21755), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 1372.722768, 1372.722768);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range((-2219.1), 880.6649);
      Range range1 = Range.expandToInclude(range0, 794.213684864);
      assertEquals((-669.21755), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      Range range1 = Range.combine(range0, (Range) null);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 833.8354221316415);
      Range range1 = Range.combine((Range) null, range0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range((-2219.1), 880.6649);
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
      assertEquals((-2219.1), range0.getLowerBound(), 0.01);
      assertEquals(880.6649, range0.getUpperBound(), 0.01);
      assertEquals(3099.7649, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-131.08530664162785), 0.0);
      Range range1 = Range.expand(range0, 0.0, 2718.65812995);
      boolean boolean0 = range1.intersects(2718.65812995, 0.0);
      assertEquals(356507.21992489195, range1.getLength(), 0.01);
      assertEquals(131.08530664162785, range0.getLength(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(4606.1125189664, 4606.1125189664);
      boolean boolean0 = range0.intersects(4606.1125189664, 9357.56794511138);
      assertEquals(4606.1125189664, range0.getUpperBound(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-2219.1), 880.6649);
      boolean boolean0 = range0.intersects(794.213684864, 794.213684864);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      double double0 = range0.constrain(465.8);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range((-2219.1), 880.6649);
      boolean boolean0 = range0.contains((-1.0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-579.7128533377), (-579.7128533377));
      double double0 = range0.constrain((-2779.1504673));
      assertEquals((-579.7128533377), double0, 0.01);
      assertEquals((-579.7128533377), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-2219.1), 880.6649);
      String string0 = range0.toString();
      assertEquals("Range[-2219.1,880.6649]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-2251.1));
      boolean boolean0 = range1.intersects(0.0, 0.0);
      assertEquals((-2251.1), range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(2251.1, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range((-2219.1), 880.6649);
      range0.hashCode();
      assertEquals((-669.21755), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range((-2219.1), 880.6649);
      double double0 = range0.getLength();
      assertEquals(3099.7649, double0, 0.01);
  }
}
