/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 23 20:17:53 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-331.19), (-331.19));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      Range range1 = Range.expandToInclude(range0, 1.0);
      boolean boolean0 = range0.equals(range1);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-276.7369), (-276.7369));
      Range range1 = Range.shift(range0, 2799.8091290078582);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-1076.6935838662), (-1076.6935838662));
      Range range1 = Range.expandToInclude(range0, (-1076.6935838662));
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      Range range1 = Range.expandToInclude(range0, (-1.0));
      assertSame(range1, range0);
      assertEquals((-0.5), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.expand(range0, 0.0, 0.0);
      Range range2 = Range.combine(range0, range1);
      assertEquals(0.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-207.1747480636294));
      Range range1 = Range.combine((Range) null, range0);
      assertNotNull(range1);
      assertEquals((-207.1747480636294), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(2.0, 4739.927635489617);
      Range range1 = Range.shift(range0, (-208.00310718879277));
      boolean boolean0 = range1.intersects(2.0, 4739.927635489617);
      assertEquals(4531.924528300825, range1.getLength(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(1553.298135457, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(1539.1627595069426, 1539.1627595069426);
      boolean boolean0 = range0.intersects(1539.1627595069426, 1539.1627595069426);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(2.0, 4739.927635489617);
      Range range1 = Range.shift(range0, (-208.00310718879277));
      double double0 = range1.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2265.9622641504125, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 565.56061, false);
      Range range2 = Range.shift(range1, 0.0);
      assertEquals(565.56061, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(1907.448582406568, 1907.448582406568);
      double double0 = range0.getUpperBound();
      assertEquals(1907.448582406568, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range((-1076.6935838662), (-1076.6935838662));
      double double0 = range0.getUpperBound();
      assertEquals((-1076.6935838662), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(2969.14181035172, 2969.14181035172);
      double double0 = range0.getLowerBound();
      assertEquals(2969.14181035172, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      range0.getLowerBound();
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(721.705007, 721.705007);
      double double0 = range0.getCentralValue();
      assertEquals(721.705007, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range((-1794.028), 2238.8959836571244);
      Range range1 = Range.expand(range0, (-1794.028), 2238.8959836571244);
      Range range2 = Range.expandToInclude(range1, 378.88228);
      assertEquals(4032.923983657124, range0.getLength(), 0.01);
      assertEquals(4515957.543834041, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      Range range1 = Range.expand(range0, 0.0, 1.0746154229098697);
      assertEquals(2.0746154229098694, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range((-1076.6935838662), (-1076.6935838662));
      Range range1 = Range.expand(range0, (-1076.6935838662), 1660.94);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.constrain((-633.886323));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range(2.0, 1767.0);
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
      assertEquals(1765.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-963.9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 817.8655179471797, 817.8655179471797);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range((-331.19), (-331.19));
      Range range1 = Range.shift(range0, (-2335.587));
      boolean boolean0 = range1.contains((-331.19));
      assertEquals((-2666.777), range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range((-359.597794), (-872.1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-359.597794) <= upper (-872.1).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range((-1794.028), 2238.8959836571244);
      double double0 = range0.getLength();
      assertEquals(4032.923983657124, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range((-1036.29345), (-304.4518916265));
      Range range1 = Range.shift(range0, (-1036.29345));
      Range range2 = Range.combine(range1, range1);
      Range range3 = Range.expandToInclude(range2, (-622.0));
      boolean boolean0 = range3.equals(range2);
      assertTrue(range2.equals((Object)range1));
      assertEquals((-1706.6661208132498), range2.getCentralValue(), 0.01);
      assertFalse(range2.equals((Object)range3));
      assertFalse(boolean0);
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-276.7369), (-276.7369));
      Range range1 = Range.shift(range0, (-276.7369));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals((-553.4738), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range((-1036.29345), (-304.4518916265));
      boolean boolean0 = range0.equals("");
      assertEquals((-670.3726708132499), range0.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range((-1036.29345), (-304.4518916265));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertEquals((-670.3726708132499), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, false);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.shift(range0, 1.0, true);
      assertEquals(3.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      Range range1 = Range.combine(range0, (Range) null);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range((-4815729.492266055), (-4815729.492266055));
      double double0 = range0.constrain((-4815729.492266055));
      assertEquals((-4815729.492266055), double0, 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.expandToInclude(range0, (-1096.36444));
      Range range2 = Range.expandToInclude(range1, 3160.4);
      boolean boolean0 = range2.intersects(2.0, (-319.356));
      assertEquals(1032.0177800000001, range2.getCentralValue(), 0.01);
      assertFalse(boolean0);
      assertEquals((-547.18222), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-1365.39839016));
      boolean boolean0 = range1.intersects(0.0, 0.0);
      assertFalse(boolean0);
      assertEquals((-682.69919508), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-276.7369), (-276.7369));
      boolean boolean0 = range0.intersects((-276.7369), 2799.8091290078582);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(3209.7699852495707, 3209.7699852495707);
      boolean boolean0 = range0.intersects(1539.1627595069426, 1539.1627595069426);
      assertFalse(boolean0);
      assertEquals(3209.7699852495707, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      Range range1 = Range.expandToInclude(range0, (-1096.36444));
      boolean boolean0 = range1.intersects((-17.492226423550562), (-17.492226423550562));
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-1036.29345), (-304.4518916265));
      Range range1 = Range.shift(range0, (-1036.29345));
      Range range2 = Range.combine(range1, range1);
      Range range3 = Range.shift(range2, 0.0, false);
      double double0 = range3.constrain((-304.4518916265));
      assertEquals((-1036.29345), range0.getLowerBound(), 0.01);
      assertTrue(range2.equals((Object)range1));
      assertEquals((-1340.7453416264998), double0, 0.01);
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(3109.4280954279, 3109.4280954279);
      boolean boolean0 = range0.contains(1.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      String string0 = range0.toString();
      assertEquals("Range[2.0,2.0]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range((-331.19), (-331.19));
      double double0 = range0.getCentralValue();
      assertEquals((-331.19), double0, 0.01);
  }
}
