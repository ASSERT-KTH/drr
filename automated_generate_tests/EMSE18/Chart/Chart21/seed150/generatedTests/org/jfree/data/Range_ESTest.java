/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 10:56:19 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-4640.68868), (-4640.68868));
      Range range1 = Range.expandToInclude(range0, (-348.747679548));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertEquals((-2494.718179774), range1.getCentralValue(), 0.01);
      assertFalse(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.expandToInclude(range0, (-993.7843997));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
      assertEquals(994.7843997, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range((-1672.9), 0.0);
      Range range1 = Range.expandToInclude(range0, (-1672.9));
      assertSame(range1, range0);
      assertEquals(1672.9, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.combine((Range) null, range0);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(1284.3517873182527, 1667840.6079866248);
      boolean boolean0 = range0.intersects(1504.0, 2795.7);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(1284.3517873182527, 1667840.6079866248);
      boolean boolean0 = range0.intersects(1667840.6079866248, 1667840.6079866248);
      assertFalse(boolean0);
      assertEquals(834562.4798869715, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(1284.3517873182527, 1667840.6079866248);
      double double0 = range0.constrain(2795.7);
      assertEquals(2795.7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-3309.0), (-784.4627367303221));
      Range range1 = Range.shift(range0, (-3309.0), false);
      assertEquals(2524.537263269678, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.shift(range0, 0.0, true);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1.0);
      Range range1 = Range.shift(range0, (-1015.5090636830508));
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      double double0 = range0.getUpperBound();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-3780.9), true);
      double double0 = range1.getUpperBound();
      assertEquals((-3780.9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range((-346.0), (-58.0));
      Range range1 = Range.shift(range0, 4576.4430518, false);
      double double0 = range1.getLowerBound();
      assertEquals((-202.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(0.0, 1932.57802);
      Range range1 = Range.shift(range0, 2039.776);
      double double0 = range1.getLowerBound();
      assertEquals(3006.06501, range1.getCentralValue(), 0.01);
      assertEquals(2039.776, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range((-3166.56619), 0.0);
      Range range1 = Range.expand(range0, (-3166.56619), 3634.905593206662);
      double double0 = range1.getCentralValue();
      assertEquals(1.0767072012375612E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range((-155.942987418), (-155.942987418));
      double double0 = range0.getCentralValue();
      assertEquals((-155.942987418), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.expand(range0, 0.0, 2.0);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range((-3166.56619), 0.0);
      Range range1 = Range.expand(range0, (-3166.56619), 3634.905593206662);
      Range range2 = Range.shift(range1, 0.0);
      Range range3 = Range.combine(range2, range1);
      assertEquals(1.0767072012375612E7, range3.getCentralValue(), 0.01);
      assertNotSame(range3, range1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-3166.56619), 0.0);
      Range range1 = Range.expand(range0, (-3166.56619), 3634.905593206662);
      Range range2 = Range.combine(range0, range1);
      assertEquals(1.151333572148011E7, range2.getLength(), 0.01);
      assertEquals(3166.56619, range0.getLength(), 0.01);
      assertEquals(1.0023974869461115E7, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 1.0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 640.459660281772);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range((-3140.8704), (-3140.8704));
      boolean boolean0 = range0.contains(0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(1.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (1.0) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range((-346.0), (-58.0));
      double double0 = range0.getLength();
      assertEquals(288.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range((-346.0), (-58.0));
      double double0 = range0.getLowerBound();
      assertEquals(288.0, range0.getLength(), 0.01);
      assertEquals((-346.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-2391.8290829302127));
      Range range1 = Range.shift(range0, (-2391.8290829302127), true);
      Range range2 = Range.expandToInclude(range1, (-2391.8290829302127));
      boolean boolean0 = range1.equals(range2);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(boolean0);
      assertEquals((-3587.743624395319), range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = new Range((-1.0), 0.0);
      boolean boolean0 = range0.equals(range1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-3166.56619), 0.0);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
      assertEquals(3166.56619, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-2391.8290829302127));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 0.0, (-342.3320596548178));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range((-4640.68868), (-4640.68868));
      Range range1 = Range.combine(range0, (Range) null);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(1.4899222198991136, 1.4899222198991136);
      double double0 = range0.constrain(1.0);
      assertEquals(1.4899222198991136, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(1284.3517873182527, 1667840.6079866248);
      Range range1 = Range.shift(range0, 1667840.6079866248);
      Range range2 = Range.expandToInclude(range1, 1284.3517873182527);
      boolean boolean0 = range2.intersects(1667840.6079866248, 1065.427635);
      assertFalse(boolean0);
      assertEquals(1667840.6079866248, range0.getUpperBound(), 0.01);
      assertEquals(2502403.087873596, range1.getCentralValue(), 0.01);
      assertEquals(3334396.864185931, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-671.3481811866469), (-671.3481811866469));
      Range range1 = Range.shift(range0, (-1.0));
      Range range2 = Range.expandToInclude(range1, (-1.0));
      boolean boolean0 = range2.intersects((-671.3481811866469), (-671.3481811866469));
      assertTrue(boolean0);
      assertEquals((-672.3481811866469), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(0.0, 1.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1.0);
      boolean boolean0 = range0.intersects((-1.0), (-1.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range((-671.3481811866469), (-671.3481811866469));
      double double0 = range0.constrain((-1.0));
      assertEquals((-671.3481811866469), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-3592.124824276159), (-3592.124824276159));
      Range range1 = Range.shift(range0, 1828.53560102, true);
      boolean boolean0 = range1.contains((-3592.124824276159));
      assertFalse(boolean0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-671.3481811866469), (-671.3481811866469));
      String string0 = range0.toString();
      assertEquals("Range[-671.3481811866469,-671.3481811866469]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range((-671.3481811866469), (-671.3481811866469));
      assertEquals((-671.3481811866469), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.shift(range0, (-1.0));
      boolean boolean0 = range1.intersects((-671.3481811866469), (-671.3481811866469));
      assertFalse(boolean0);
      assertEquals((-672.3481811866469), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-2391.8290829302127));
      range0.hashCode();
      assertEquals((-2391.8290829302127), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range((-671.3481811866469), (-671.3481811866469));
      Range range1 = Range.expand(range0, (-671.3481811866469), (-671.3481811866469));
      assertEquals((-671.3481811866469), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-671.3481811866469), range0.getLowerBound(), 0.01);
  }
}
