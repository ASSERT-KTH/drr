/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 14:30:13 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range(1497.539, 1497.539);
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(282.94, 282.94);
      Range range1 = new Range(282.94, 1260.2456137219);
      Range range2 = Range.expand(range0, 1260.2456137219, 282.94);
      boolean boolean0 = range2.equals(range1);
      assertEquals(977.3056137219, range1.getLength(), 0.01);
      assertFalse(boolean0);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-269.9), true);
      assertEquals((-269.9), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 3797.20139188559);
      Range range2 = Range.expand(range1, (-1.0), 376.9762846942595);
      assertEquals(1431454.8729489006, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range((-2913.217), 352.420247);
      Range range1 = Range.expandToInclude(range0, (-2913.217));
      assertSame(range1, range0);
      assertEquals((-1280.3983765), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-269.9));
      Range range2 = Range.combine(range1, range0);
      Range range3 = Range.expand(range2, 2543.0763279, 2543.0763279);
      boolean boolean0 = range3.intersects(0.0, 0.0);
      assertTrue(boolean0);
      assertEquals((-134.95000000001164), range3.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      boolean boolean0 = range0.intersects(1.0, 2736.6757162118756);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects(0.0, (-269.9));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-3143.260219356), (-3143.260219356));
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.combine(range0, range1);
      double double0 = range2.constrain((-3143.260219356));
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals((-1571.630109678), range2.getCentralValue(), 0.01);
      assertEquals((-3143.260219356), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(1.0, 1384.05494948752);
      Range range1 = Range.shift(range0, 1.0, false);
      assertEquals(693.52747474376, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, false);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, 1.0);
      boolean boolean0 = range1.intersects((-1.0), 1.0);
      assertTrue(boolean0);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(1497.539, 1497.539);
      double double0 = range0.getUpperBound();
      assertEquals(1497.539, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(1083.4994682531997, 1083.4994682531997);
      Range range1 = Range.expandToInclude(range0, 0.0);
      double double0 = range1.getLowerBound();
      assertEquals(1083.4994682531997, range1.getUpperBound(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(985.3756312498, 985.3756312498);
      double double0 = range0.getLowerBound();
      assertEquals(985.3756312498, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range((-2737.6757162118756), (-1.0));
      double double0 = range0.getLength();
      assertEquals(2736.6757162118756, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(384.99, 384.99);
      double double0 = range0.getCentralValue();
      assertEquals(384.99, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, (-269.9));
      Range range2 = Range.combine(range1, range0);
      double double0 = range2.getCentralValue();
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals((-269.9), range1.getCentralValue(), 0.01);
      assertEquals((-134.95), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range(1083.4994682531997, 1083.4994682531997);
      Range range1 = Range.expandToInclude(range0, 1083.4994682531997);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 1899.78, 1899.78);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-3311.874666969));
      Range range1 = Range.expand(range0, (-892.027774491), (-3311.874666969));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-1.0), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-3311.874666969));
      Range range1 = Range.shift(range0, (-892.027774491), false);
      boolean boolean0 = range1.equals(range0);
      assertEquals((-4203.90244146), range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      boolean boolean0 = range0.contains(1.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range((-488.3191261), (-488.3191261));
      double double0 = range0.getUpperBound();
      assertEquals((-488.3191261), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(985.3756312498, 985.3756312498);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range((-488.3191261), (-488.3191261));
      double double0 = range0.getLowerBound();
      assertEquals((-488.3191261), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range(1497.539, 1497.539);
      Range range1 = Range.shift(range0, (-288.578231723));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals(1208.960768277, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(985.3756312498, 985.3756312498);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range((-488.3191261), (-488.3191261));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range((-3143.260219356), (-3143.260219356));
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.shift(range1, 1.0);
      assertEquals((-1570.630109678), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 1143.4121013, 2.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range((-488.3191261), (-488.3191261));
      assertEquals((-488.3191261), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.expandToInclude(range0, (-98.323916903847));
      boolean boolean0 = range1.equals(range0);
      assertEquals((-293.3215215019235), range1.getCentralValue(), 0.01);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-3311.874666969));
      Range range1 = Range.combine(range0, (Range) null);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(455.2225813, 455.2225813);
      Range range1 = Range.combine((Range) null, range0);
      assertEquals(455.2225813, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain((-1.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range((-3143.260219356), (-3143.260219356));
      double double0 = range0.constrain((-3143.260219356));
      assertEquals((-3143.260219356), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range(1083.4994682531997, 1083.4994682531997);
      assertEquals(1083.4994682531997, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.expandToInclude(range0, 0.0);
      boolean boolean0 = range1.intersects(2.0, 0.0);
      assertFalse(boolean0);
      assertEquals(1083.4994682531997, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range((-2913.217), 352.420247);
      boolean boolean0 = range0.intersects(0.0, 2.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(985.3756312498, 985.3756312498);
      boolean boolean0 = range0.intersects(985.3756312498, 985.3756312498);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range(0.0, 1240.71);
      boolean boolean0 = range0.intersects(1240.71, 0.0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(620.355, range0.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range(1497.539, 1497.539);
      double double0 = range0.constrain(2005.370432);
      assertEquals(1497.539, double0, 0.01);
      assertEquals(1497.539, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(985.3756312498, 985.3756312498);
      boolean boolean0 = range0.contains(985.3756312498);
      assertEquals(985.3756312498, range0.getLowerBound(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range(426.0, 1610.945457016);
      boolean boolean0 = range0.contains((-1655.0));
      assertFalse(boolean0);
      assertEquals(1184.945457016, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range((-98.323916903847), (-1378.5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-98.323916903847) <= upper (-1378.5).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range((-488.3191261), (-488.3191261));
      String string0 = range0.toString();
      assertEquals("Range[-488.3191261,-488.3191261]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }
}
