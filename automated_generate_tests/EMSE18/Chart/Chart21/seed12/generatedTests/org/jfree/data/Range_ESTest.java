/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 23 10:39:05 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-672.27866835), (-672.27866835));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 2583.4917);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0), true);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertEquals((-2.0), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1692.883767));
      Range range1 = Range.combine((Range) null, range0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-1757.11));
      boolean boolean0 = range1.intersects((-1380.123803), 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(0.0, 1.0);
      boolean boolean0 = range0.intersects(1.0, (-2068.0));
      assertFalse(boolean0);
      assertEquals(1.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.intersects((-1380.123803), (-1757.11));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0));
      Range range2 = Range.combine(range1, range0);
      Range range3 = Range.shift(range2, 0.0, true);
      assertEquals((-1.5), range3.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, true);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-1375.1145186643673), (-1375.1145186643673));
      Range range1 = Range.shift(range0, 2134.8800088615);
      Range range2 = Range.shift(range1, 2.0, false);
      assertEquals(2.0, range2.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = new Range(12.7294, 12.7294);
      Range range1 = Range.shift(range0, 12.7294);
      assertEquals(25.4588, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range((-714.3), (-714.3));
      Range range1 = Range.expandToInclude(range0, 0.0);
      double double0 = range1.getUpperBound();
      assertEquals(714.3, range1.getLength(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-1612.589), (-1612.589));
      double double0 = range0.getUpperBound();
      assertEquals((-1612.589), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(2017.4264966, 2017.4264966);
      double double0 = range0.getLowerBound();
      assertEquals(2017.4264966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range((-672.27866835), (-672.27866835));
      double double0 = range0.getLowerBound();
      assertEquals((-672.27866835), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-1337.0544538308243));
      double double0 = range1.getLength();
      assertEquals(1337.0544538308243, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(2017.4264966, 2017.4264966);
      double double0 = range0.getCentralValue();
      assertEquals(2017.4264966, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range(12.7294, 12.7294);
      Range range1 = Range.expandToInclude(range0, 12.7294);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expandToInclude(range0, 2680.5);
      Range range2 = Range.expand(range1, (-1.0), 2680.5);
      assertEquals(7187760.75, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, (-1757.11), (-1757.11));
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0));
      Range range2 = Range.combine(range1, range0);
      Range range3 = Range.expand(range2, (-1.0), 2680.5);
      assertEquals(1339.25, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range(2293.3336273029645, 2293.3336273029645);
      double double0 = range0.constrain((-438.31357576236195));
      assertEquals(2293.3336273029645, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = new Range(2017.4264966, 2017.4264966);
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-246.2), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-1350.51816375));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      boolean boolean0 = range0.contains(4706.3997946525);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range(2.0, 2.0);
      boolean boolean0 = range0.contains(2.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains((-4732.65617994));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range((-1692.883767), (-2057.181176024));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-1692.883767) <= upper (-2057.181176024).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range(0.0, 1342.4);
      double double0 = range0.getUpperBound();
      assertEquals(1342.4, range0.getLength(), 0.01);
      assertEquals(1342.4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-1375.1145186643673), (-1375.1145186643673));
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = new Range(0.0, 1342.4);
      double double0 = range0.getLowerBound();
      assertEquals(671.2, range0.getCentralValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range((-714.3), (-714.3));
      Range range1 = Range.expandToInclude(range0, 0.0);
      boolean boolean0 = range0.equals(range1);
      assertEquals((-714.3), range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0));
      boolean boolean0 = range0.equals(range1);
      assertEquals((-2.0), range1.getUpperBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range(0.0, 1.0);
      Range range1 = Range.shift(range0, 0.0);
      assertEquals(1.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 1101.1937627, 1101.1937627);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(0.0, 1.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1692.883767));
      Range range1 = Range.combine(range0, (Range) null);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range(2017.4264966, 2017.4264966);
      assertEquals(2017.4264966, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.expandToInclude(range0, 0.0);
      boolean boolean0 = range1.intersects(2.0, 0.0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1008.7132483, range1.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range((-1375.1145186643673), (-1375.1145186643673));
      Range range1 = Range.shift(range0, (-1375.1145186643673));
      Range range2 = Range.combine(range0, range1);
      boolean boolean0 = range2.intersects((-1415.040199432), (-1415.040199432));
      assertTrue(boolean0);
      assertEquals(1375.1145186643673, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-3415.82408118945), (-3415.82408118945));
      boolean boolean0 = range0.intersects((-3415.82408118945), 2241.95);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range(350.098091, 350.098091);
      boolean boolean0 = range0.intersects((-318.33132), 350.098091);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-1.0));
      double double0 = range1.constrain((-1.0));
      assertEquals((-2.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range(0.0, 1342.4);
      double double0 = range0.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1342.4, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range((-2857.01), (-2857.01));
      Range range1 = Range.expandToInclude(range0, 1741.9868526);
      // Undeclared exception!
      try { 
        Range.expand(range1, 1741.9868526, (-2857.01));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-8014249.06237798) <= upper (-1.3137638010994129E7).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range((-1375.1145186643673), (-1375.1145186643673));
      String string0 = range0.toString();
      assertEquals("Range[-1375.1145186643673,-1375.1145186643673]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = new Range((-1375.1145186643673), (-1375.1145186643673));
      assertEquals((-1375.1145186643673), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.shift(range0, (-1375.1145186643673));
      boolean boolean0 = range1.intersects((-1415.040199432), (-1415.040199432));
      assertFalse(boolean0);
      assertEquals((-2750.2290373287346), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = new Range((-1.0), 0.0);
      double double0 = range0.getCentralValue();
      assertEquals((-0.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = new Range((-1375.1145186643673), (-1375.1145186643673));
      Range range1 = Range.expand(range0, (-1375.1145186643673), 2.0);
      assertEquals((-1375.1145186643673), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }
}
