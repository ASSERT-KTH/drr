/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 03:35:00 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-2811.53151), (-2811.53151));
      Range range1 = Range.shift(range0, (-1635.618147761529), true);
      Range range2 = Range.expand(range1, (-2811.53151), (-1635.618147761529));
      Range range3 = Range.combine(range0, range2);
      boolean boolean0 = range2.equals(range3);
      assertFalse(range0.equals((Object)range3));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(boolean0);
      assertFalse(range3.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range((-2811.53151), (-2811.53151));
      Range range1 = Range.shift(range0, (-1635.618147761529));
      assertEquals((-4447.149657761529), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range((-2811.53151), (-2811.53151));
      Range range1 = Range.shift(range0, (-1635.618147761529), true);
      Range range2 = Range.expand(range1, (-2811.53151), (-1635.618147761529));
      Range range3 = Range.combine(range0, range2);
      Range range4 = Range.expand(range3, 28.6059936, 0.0);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-27023.581717335845), range4.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(0.0, 3928.8);
      Range range1 = Range.expandToInclude(range0, 302.839);
      assertEquals(3928.8, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.combine((Range) null, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = new Range(2.0, 1408.54);
      boolean boolean0 = range0.intersects(28.6059936, 28.6059936);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range((-251.918445048), 0.0);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertFalse(boolean0);
      assertEquals((-125.959222524), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      boolean boolean0 = range0.intersects(0.0, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range((-4583.6589259879), 664.9);
      boolean boolean0 = range0.contains((-4583.6589259879));
      assertTrue(boolean0);
      assertEquals(664.9, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 0.0, false);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1403.0);
      Range range1 = Range.shift(range0, (-2568.0));
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range((-1976.89), (-1976.89));
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.combine(range0, range1);
      double double0 = range2.getUpperBound();
      assertNotSame(range2, range1);
      assertEquals((-988.445), range2.getCentralValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = new Range((-1976.89), (-1976.89));
      double double0 = range0.getUpperBound();
      assertEquals((-1976.89), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.getLowerBound();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1403.0);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = new Range(638.1489975438935, 638.1489975438935);
      double double0 = range0.getCentralValue();
      assertEquals(638.1489975438935, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range((-2263.5), (-2263.5));
      double double0 = range0.getCentralValue();
      assertEquals((-2263.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, (-1.0));
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expand(range0, 1767.127602878602, 1767.127602878602);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1403.0);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = Range.expand(range0, 1403.0, (-2568.0));
      assertEquals(1403.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = new Range(0.0, 3928.8);
      Range range1 = Range.shift(range0, 3928.8, true);
      double double0 = range1.constrain(0.0);
      assertEquals(3928.8, double0, 0.01);
      assertEquals(7857.6, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1403.0);
      Range range1 = Range.combine(range0, range0);
      assertEquals(1403.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 906.5779922886841, false);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertEquals(906.5779922886841, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(2830.0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (2830.0) <= upper (1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 1403.0);
      range0.getUpperBound();
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range((-4583.6589259879), 664.9);
      double double0 = range0.getLength();
      assertEquals(5248.5589259879, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range((-3529.472), (-3529.472));
      double double0 = range0.getLowerBound();
      assertEquals((-3529.472), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.expandToInclude(range0, 468.715);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertFalse(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range((-2811.53151), (-2811.53151));
      Range range1 = Range.shift(range0, (-1635.618147761529), true);
      Range range2 = Range.expand(range1, (-2811.53151), (-1635.618147761529));
      boolean boolean0 = range2.equals(range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(boolean0);
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range((-2811.53151), (-2811.53151));
      boolean boolean0 = range0.equals("Range[-2811.53151,-2811.53151]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, (-1.0), (-3898.384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range(0.0, 3928.8);
      Range range1 = Range.shift(range0, 3928.8);
      Range range2 = Range.expandToInclude(range1, 0.0);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(5893.200000000001, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 0.0);
      Range range1 = Range.combine(range0, (Range) null);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = new Range((-3273.18), (-3273.18));
      double double0 = range0.constrain((-3274.493862364197));
      assertEquals((-3273.18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range((-2811.53151), (-2811.53151));
      double double0 = range0.constrain(28.6059936);
      assertEquals((-2811.53151), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.constrain(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range(2.0, 1408.54);
      Range range1 = Range.shift(range0, 2.0);
      boolean boolean0 = range1.intersects(1408.54, 773.23);
      assertFalse(boolean0);
      assertEquals(1408.54, range0.getUpperBound(), 0.01);
      assertEquals(707.27, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-3529.472), (-3529.472));
      assertEquals((-3529.472), range0.getLowerBound(), 0.01);
      
      Range range1 = Range.expandToInclude(range0, 635.2435579);
      boolean boolean0 = range1.intersects((-349.3785), 635.2435579);
      assertTrue(boolean0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range((-1976.89), (-1976.89));
      boolean boolean0 = range0.intersects((-1976.89), 0.0);
      assertTrue(boolean0);
      assertEquals((-1976.89), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = new Range(1301.26, 1301.26);
      boolean boolean0 = range0.intersects(1226.2463911, 1226.2463911);
      assertFalse(boolean0);
      assertEquals(1301.26, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-3529.472), (-3529.472));
      boolean boolean0 = range0.intersects((-349.3785), 635.2435579);
      assertEquals((-3529.472), range0.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains(2794.1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains((-1.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range(1301.26, 1301.26);
      String string0 = range0.toString();
      assertEquals("Range[1301.26,1301.26]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range((-2811.53151), (-2811.53151));
      range0.hashCode();
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getCentralValue();
      assertEquals(0.0, double0, 0.01);
  }
}
