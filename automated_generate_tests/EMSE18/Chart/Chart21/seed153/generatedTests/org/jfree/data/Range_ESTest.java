/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 12:11:07 GMT 2017
 */

package org.jfree.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.data.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = new Range((-1883.20603794), (-1883.20603794));
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = new Range(710.1615087551091, 710.1615087551091);
      Range range1 = Range.expandToInclude(range0, 721.8854534148718);
      Range range2 = Range.shift(range1, 721.8854534148718, false);
      Range range3 = Range.shift(range0, 721.8854534148718, false);
      boolean boolean0 = range3.equals(range2);
      assertFalse(range2.equals((Object)range3));
      assertFalse(boolean0);
      assertEquals(1437.9089344998622, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = new Range(1110.6667618977094, 1188.921936);
      Range range1 = Range.shift(range0, 1110.6667618977094, true);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertEquals(78.25517410229077, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      Range range1 = Range.shift(range0, (-4655.371));
      assertEquals(0.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = new Range((-1.0), 2036.9);
      Range range1 = Range.expandToInclude(range0, (-1.0));
      assertSame(range1, range0);
      assertEquals(2037.9, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      Range range1 = Range.combine((Range) null, range0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = new Range((-0.24171717143112048), 1800.06738188139);
      Range range1 = Range.shift(range0, 1800.06738188139);
      boolean boolean0 = range1.intersects(1800.06738188139, 1800.06738188139);
      assertEquals(1800.06738188139, range1.getCentralValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      boolean boolean0 = range0.intersects(560.13, 205.739);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = new Range(560.1345970757, 560.1345970757);
      Range range1 = Range.shift(range0, 560.1345970757);
      boolean boolean0 = range1.intersects(560.1345970757, 560.1345970757);
      assertEquals(1120.2691941514, range1.getLowerBound(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = new Range((-1043.41680425), (-605.031492156418));
      Range range1 = Range.shift(range0, 3936.4, false);
      assertEquals(438.385312093582, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      range0.getUpperBound();
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = new Range((-654.0), (-654.0));
      double double0 = range0.getUpperBound();
      assertEquals((-654.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      double double0 = range0.getLowerBound();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = new Range((-2062.244820386151), (-2062.244820386151));
      double double0 = range0.getLowerBound();
      assertEquals((-2062.244820386151), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      double double0 = range1.getLength();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = new Range((-1043.41680425), (-605.031492156418));
      Range range1 = Range.shift(range0, 3936.4);
      double double0 = range1.getCentralValue();
      assertEquals((-824.2241482032091), range0.getCentralValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      double double0 = range0.getCentralValue();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = new Range((-1043.41680425), (-605.031492156418));
      Range range1 = Range.shift(range0, 3936.4);
      Range range2 = Range.expand(range1, 0.0, 0.0);
      assertEquals(438.385312093582, range0.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-2610.06), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      boolean boolean0 = range0.contains(0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getUpperBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      double double0 = range0.getLength();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      double double0 = range0.getLowerBound();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = new Range((-1173.67899975), (-991.0));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertEquals((-1082.339499875), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.shift(range0, 282.6278294324404, false);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = Range.expand(range1, (-914.9949035157383), (-316.773549435));
      assertEquals(282.6278294324404, range2.getCentralValue(), 0.01);
      assertEquals(282.6278294324404, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = new Range((-1173.67899975), (-991.0));
      Range range1 = Range.shift(range0, (-2651.5501515383776), true);
      assertEquals(182.67899975, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.expand((Range) null, 0.0, 1234.5580889);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      Range range1 = Range.expandToInclude(range0, (-1426.8));
      assertEquals((-713.4), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = new Range((-1173.67899975), (-991.0));
      Range range1 = Range.expandToInclude(range0, (-991.0));
      assertEquals((-991.0), range1.getUpperBound(), 0.01);
      assertEquals((-1082.339499875), range1.getCentralValue(), 0.01);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      Range range1 = Range.combine(range0, (Range) null);
      assertNotNull(range1);
      assertEquals(2.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.combine((Range) null, (Range) null);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = new Range(1.0, 1.0);
      double double0 = range0.constrain(2.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = new Range((-0.24171717143112048), 1800.06738188139);
      Range range1 = Range.shift(range0, 1800.06738188139);
      double double0 = range1.constrain((-0.24171717143112048));
      assertEquals(0.0, double0, 0.01);
      assertEquals(3600.13476376278, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = new Range(1110.6667618977094, 1188.921936);
      Range range1 = Range.expand(range0, 1188.921936, 1188.921936);
      boolean boolean0 = range1.intersects(2336.41355, 1110.6667618977094);
      assertEquals(1149.7943489488534, range1.getCentralValue(), 0.01);
      assertFalse(boolean0);
      assertEquals(78.25517410229054, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = new Range(0.0, 1.0);
      boolean boolean0 = range0.intersects(1.0, 0.0);
      assertFalse(boolean0);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.expandToInclude((Range) null, 2.0);
      boolean boolean0 = range0.intersects(2.0, 3732.7);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = new Range(560.1345970757, 560.1345970757);
      boolean boolean0 = range0.intersects(560.1345970757, 560.1345970757);
      assertFalse(boolean0);
      assertEquals(560.1345970757, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = new Range((-1043.41680425), (-605.031492156418));
      boolean boolean0 = range0.intersects((-1006.1815171), 3936.4);
      assertTrue(boolean0);
      assertEquals((-824.2241482032091), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, (-35.545375314728));
      Range range2 = Range.combine(range1, range0);
      double double0 = range2.constrain((-19.772687657364));
      assertEquals((-18.772687657364), range2.getCentralValue(), 0.01);
      assertEquals((-19.772687657364), double0, 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = new Range((-1043.41680425), (-605.031492156418));
      boolean boolean0 = range0.contains(0.0);
      assertFalse(boolean0);
      assertEquals(438.385312093582, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = new Range((-1.0), (-1.0));
      Range range1 = Range.shift(range0, 1234.5580889);
      boolean boolean0 = range1.contains((-1.0));
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = null;
      try {
        range0 = new Range(0.0, (-1541.7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-1541.7).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = new Range((-1173.67899975), (-991.0));
      String string0 = range0.toString();
      assertEquals("Range[-1173.67899975,-991.0]", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = new Range((-1173.67899975), (-991.0));
      Range range1 = Range.shift(range0, 447.3);
      boolean boolean0 = range1.equals(range0);
      assertEquals((-635.039499875), range1.getCentralValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = new Range(0.0, 0.0);
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = new Range((-1043.41680425), (-605.031492156418));
      double double0 = range0.getCentralValue();
      assertEquals((-824.2241482032091), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = new Range((-1173.67899975), (-991.0));
      Range range1 = Range.expand(range0, 3319.523343527353, (-1048.512389905024));
      Range range2 = Range.expandToInclude(range1, (-991.0));
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
      assertEquals(182.67899975, range0.getLength(), 0.01);
      assertFalse(range2.equals((Object)range0));
      assertEquals(415048.68842877063, range1.getLength(), 0.01);
      assertFalse(range0.equals((Object)range2));
      assertEquals((-304285.9415210512), range2.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range2));
  }
}
