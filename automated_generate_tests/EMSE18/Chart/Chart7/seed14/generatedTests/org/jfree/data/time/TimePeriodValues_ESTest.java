/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 01:44:19 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "#}f#JDN5");
      MockDate mockDate0 = new MockDate(0, (-197), 0, 0, (-197), (-1035));
      Year year0 = new Year((Date) mockDate0);
      timePeriodValues0.add((TimePeriod) year0, (double) (-1035));
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(0, 87);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0, "V,~=sA+RO}:(;FVON", "V,~=sA+RO}:(;FVON");
      timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("V,~=sA+RO}:(;FVON", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("V,~=sA+RO}:(;FVON", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 890, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) hour0, (Number) 23);
      timePeriodValues1.add(timePeriodValue0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(0, timePeriodValues1.getMinStartIndex());
      assertEquals(0, timePeriodValues1.getMinMiddleIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "Value", "");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Quarter quarter0 = new Quarter(date0);
      timePeriodValues0.add((TimePeriod) quarter0, (Number) 1);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(0, 305);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Hour hour1 = (Hour)hour0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour1);
      timePeriodValues0.add((TimePeriod) hour0, (double) 0);
      timePeriodValues0.add((TimePeriod) hour1, (double) 858);
      timePeriodValues0.add((TimePeriod) hour1, (double) 0);
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(858, 858, 858, 858, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Hour hour1 = (Hour)hour0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour1);
      timePeriodValues0.add((TimePeriod) hour0, 5624.91410931562);
      timePeriodValues0.add((TimePeriod) hour1, (double) 0);
      timePeriodValues0.add((TimePeriod) hour0, (double) 23);
      assertEquals(1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "", "");
      timePeriodValues0.setRangeDescription("");
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0, (String) null, (String) null);
      timePeriodValues0.setDomainDescription((String) null);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate(858, 858, 858, 0, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertTrue(boolean0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      timePeriodValues0.add((TimePeriod) hour0, (double) 0);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) second0, 0.0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.update(0, 59);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "#}f#JDN5");
      MockDate mockDate0 = new MockDate(3466, (-197), 3466, 3466, (-197), (-1035));
      Year year0 = new Year((Date) mockDate0);
      timePeriodValues0.add((TimePeriod) year0, (-1.0));
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) second0, 0.0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "2J7ZC,d:1<y26Q<", (String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("2J7ZC,d:1<y26Q<", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertNull(string0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "", "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("", string0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0);
      Millisecond millisecond0 = new Millisecond();
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "Null 'series' argument.", "Null 'series' argument.");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      timePeriodValues0.add((TimePeriod) second0, 1162.85133);
      Minute minute0 = new Minute();
      timePeriodValues0.add((TimePeriod) minute0, (double) 2);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(1, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "#}f#JDN5");
      MockDate mockDate0 = new MockDate(3466, (-197), 3466, 3466, (-197), (-1035));
      Year year0 = new Year((Date) mockDate0);
      timePeriodValues0.add((TimePeriod) year0, (-1.0));
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0);
      Millisecond millisecond0 = new Millisecond();
      timePeriodValues0.add((TimePeriod) millisecond0, (Number) 0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Hour hour1 = (Hour)hour0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour1);
      timePeriodValues0.add((TimePeriod) hour0, (double) 0);
      timePeriodValues0.add((TimePeriod) hour1, (double) 0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "#}f#JDN5");
      MockDate mockDate0 = new MockDate(3466, (-197), 3466, 3466, (-197), (-1035));
      Year year0 = new Year((Date) mockDate0);
      timePeriodValues0.add((TimePeriod) year0, (-1.0));
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Hour hour1 = (Hour)hour0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour1);
      timePeriodValues0.add((TimePeriod) hour0, (double) 0);
      timePeriodValues0.add((TimePeriod) hour1, (double) 0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "#}f#JDN5");
      MockDate mockDate0 = new MockDate(3466, (-197), 3466, 3466, (-197), (-1035));
      Year year0 = new Year((Date) mockDate0);
      timePeriodValues0.add((TimePeriod) year0, (-1.0));
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Hour hour1 = (Hour)hour0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour1);
      timePeriodValues0.add((TimePeriod) hour0, (double) 0);
      timePeriodValues0.add((TimePeriod) hour1, (double) 0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(1, timePeriodValues0.getMaxStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      timePeriodValues0.add((TimePeriod) hour0, (double) 0);
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", string0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Year year0 = new Year();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, "", "");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      timePeriodValues0.add((TimePeriod) hour0, (double) 0);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0, "V,~=sA+RO}:(;FVON", "V,~=sA+RO}:(;FVON");
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(4890, 23);
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals("V,~=sA+RO}:(;FVON", timePeriodValues1.getRangeDescription());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals("V,~=sA+RO}:(;FVON", timePeriodValues1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(858, 0, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Hour hour1 = (Hour)hour0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour1);
      timePeriodValues0.add((TimePeriod) hour0, (double) 0);
      timePeriodValues0.add((TimePeriod) hour1, (double) 0);
      timePeriodValues0.createCopy(858, 0);
      assertEquals(2, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "java.awt.SystemColor[i=21]");
      // Undeclared exception!
      try { 
        timePeriodValues0.update((-3407), 262);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "", "");
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod((-2213));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem((-2063));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "z", "z", "z");
      // Undeclared exception!
      try { 
        timePeriodValues0.delete((-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      timePeriodValues0.add((TimePeriod) hour0, (double) 0);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      timePeriodValues0.add((TimePeriod) hour0, (double) 0);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy((-1848), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      timePeriodValues0.add((TimePeriod) second0, 1162.85133);
      Minute minute0 = new Minute();
      timePeriodValues0.add((TimePeriod) minute0, (double) 2);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (double) (-938));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, "org.jfree.data.time.TimePeriodValues", "@xWtfZ15I{9J#%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) quarter0, (String) null, "C'keVCg~");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertNull(string0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("C'keVCg~", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals("Value", string0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      timePeriodValues0.getItemCount();
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4149L);
      Year year0 = new Year((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, (String) null, (String) null);
      timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Hour hour1 = (Hour)hour0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour1);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 0);
      timePeriodValues1.add((TimePeriod) hour0, (double) 0);
      timePeriodValues0.add((TimePeriod) hour1, (double) 0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(1, timePeriodValues1.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 0);
      timePeriodValues1.add((TimePeriod) hour0, (double) 0);
      timePeriodValues0.add((TimePeriod) hour0, (double) 0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(1, timePeriodValues1.getItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 0);
      timePeriodValues1.setRangeDescription("");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("", timePeriodValues1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 839, 839, 839, 0, 839);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 0);
      timePeriodValues1.setDomainDescription("");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("", timePeriodValues1.getDomainDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 0);
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      timePeriodValues1.setKey(mockDate0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4149L);
      Year year0 = new Year((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) year0, (String) null, (String) null);
      boolean boolean0 = timePeriodValues0.equals((Object) null);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertFalse(boolean0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate(858, 858, 858, 858, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      timePeriodValues0.add((TimePeriod) hour0, 5624.91410931562);
      timePeriodValues0.add((TimePeriod) hour0, (double) 0);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(0, 0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(2, timePeriodValues0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1591L));
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, (String) null, "");
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(1498, 1498);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1498, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 0);
      timePeriodValues0.delete(999, (-520));
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Hour hour1 = (Hour)hour0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour1);
      timePeriodValues0.add((TimePeriod) hour0, (double) 0);
      timePeriodValues0.add((TimePeriod) hour1, (double) 0);
      timePeriodValues0.createCopy(858, 0);
      assertEquals(2, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate(858, 858, 858, 0, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Hour hour1 = (Hour)hour0.next();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour1);
      timePeriodValues0.add((TimePeriod) hour0, (double) 23);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      
      timePeriodValues0.add((TimePeriod) hour1, (double) 0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriodValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
         verifyException("org.jfree.data.time.TimePeriodValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), int0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      // Undeclared exception!
      try { 
        timePeriodValues0.update(0, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "#}f#JDN5");
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0, "V,~=sA+RO}:(;FVON", "V,~=sA+RO}:(;FVON");
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("V,~=sA+RO}:(;FVON", timePeriodValues0.getRangeDescription());
      assertEquals((-1), int0);
      assertEquals("V,~=sA+RO}:(;FVON", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 858, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockDate mockDate0 = new MockDate(858, 858, 858, 0, 0);
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "", "");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) 1649957210);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "#}f#JDN5");
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "#}f#JDN5");
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "#}f#JDN5");
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }
}
