/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 13 22:37:05 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import javax.swing.plaf.synth.SynthSpinnerUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 121, 0, 0, 453);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8&AN");
      timePeriodValues0.add((TimePeriod) week0, (Number) 1886610801);
      TimePeriodValue timePeriodValue0 = timePeriodValues0.getDataItem(0);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.clone();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 124, 0, 0, 453);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8&AN");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(453, 90);
      timePeriodValues1.add((TimePeriod) week0, (Number) 1886610801);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues1.getMinEndIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 1.5);
      timePeriodValues0.add(timePeriodValue0);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      timePeriodValues0.add((TimePeriod) fixedMillisecond1, (Number) (byte)113);
      timePeriodValues0.add((TimePeriod) fixedMillisecond1, (Number) 0);
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(92, minute0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, ";IS3", ";IS3");
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) second0, (double) 59);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      assertEquals(";IS3", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 121, 0, 0, 453);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8&AN");
      timePeriodValues0.add((TimePeriod) week0, (Number) 1886610801);
      timePeriodValues0.update(0, 1);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 1.5);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 1.5);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getTimePeriod(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) 3, (String) null, (String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertNull(string0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "n", "QU.fTs", "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("QU.fTs", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", string0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      timePeriodValues0.add((TimePeriod) fixedMillisecond1, (Number) (byte)113);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) (byte)113);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(1, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 121, 0, 0, 453);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8&AN");
      timePeriodValues0.add((TimePeriod) week0, (Number) 1886610801);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 1.5);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      timePeriodValues0.add((TimePeriod) fixedMillisecond1, (Number) (byte)113);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) (byte)113);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0);
      timePeriodValues0.add((TimePeriod) millisecond0, (double) 999);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(92, minute0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, ";IS3", ";IS3");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) second0, (double) 59);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Week week0 = new Week(29, 91);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) week0, 1025.5786367352);
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Week week0 = new Week(29, 91);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) week0, 1025.5786367352);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) ";IS3", (String) null, "ew#D|0;PsJoje8");
      String string0 = timePeriodValues0.getDomainDescription();
      assertNull(string0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("ew#D|0;PsJoje8", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(1735);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) integer0, "", (String) null);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNotNull(string0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", string0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 121, 0, 0, 453);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8&AN");
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(90, (-1690));
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals("ob:rvs7k/8&AN", timePeriodValues1.getRangeDescription());
      assertEquals("B$*Y8TQ@sM_", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.update((-5), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      timePeriodValues0.addPropertyChangeListener(synthSpinnerUI0);
      // Undeclared exception!
      try { 
        timePeriodValues0.setRangeDescription("Ir]f>");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimePeriodValues cannot be cast to javax.swing.JSpinner
         //
         verifyException("javax.swing.plaf.synth.SynthSpinnerUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "doEmain", "[", "doEmain");
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue((-1526));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second((Date) mockDate0);
      String string0 = "_m!=sy\\u#P\\";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "av", string0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod((-1320));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem((-745));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "AccessibleValue");
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(754L);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete((-1), 1027);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 124, 0, 0, 453);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8&AN");
      timePeriodValues0.add((TimePeriod) week0, (Number) 1886610801);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(1, 840);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 121, 0, 0, 453);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8&AN");
      timePeriodValues0.add((TimePeriod) week0, (Number) 1886610801);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy((-2760), (-2054));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 90, 0, 0, 453);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8&AN");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1966);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "", "");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (double) 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, "p=6I?@a!", "p=6I?@a!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 1.5);
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.createCopy(0, 0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "TextBackground");
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem(37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 37, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Week week0 = new Week(29, 91);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      timePeriodValues0.getItemCount();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "@", "Y", "@");
      assertEquals("@", timePeriodValues0.getRangeDescription());
      
      timePeriodValues0.setRangeDescription((String) null);
      timePeriodValues0.hashCode();
      assertEquals("Y", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "@", "Y", "@");
      timePeriodValues0.hashCode();
      assertEquals("@", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Y", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "@", (String) null, "@");
      timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 90, 90, 90, 90, 90);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "B$*Y8TQ@sM_");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(90, 90);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) week0, (double) 90);
      timePeriodValues0.add(timePeriodValue0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8J&AN");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(121, 90);
      timePeriodValues1.setRangeDescription("B$*Y8TQ@sM_");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("B$*Y8TQ@sM_", timePeriodValues1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "@", (String) null, "@");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) "@", "L?vJK!<#", "@");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("@", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertFalse(boolean0);
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Week week0 = new Week(24, 24);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "FQ%a^", "Null 'locale' argument.");
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) "FQ%a^", "Q", "FQ%a^");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("FQ%a^", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertFalse(boolean0);
      assertEquals("Q", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 90, 90, 90, 90, 90);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "B$*Y8TQ@sM_");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(90, 90);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("B$*Y8TQ@sM_", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertTrue(boolean0);
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals("B$*Y8TQ@sM_", timePeriodValues1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 121, 0, 0, 453);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8&AN");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertTrue(boolean0);
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("ob:rvs7k/8&AN", timePeriodValues0.getRangeDescription());
      assertEquals("B$*Y8TQ@sM_", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      boolean boolean0 = timePeriodValues0.equals("Ir]f>");
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertFalse(boolean0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 124, 0, 0, 453);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8&AN");
      timePeriodValues0.add((TimePeriod) week0, (Number) 1886610801);
      timePeriodValues0.delete(840, 453);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "TextBackground");
      Month month0 = new Month();
      timePeriodValues0.add((TimePeriod) month0, (Number) 12);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      
      timePeriodValues0.delete(0, 0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) fixedMillisecond0, 1.5);
      timePeriodValues0.add(timePeriodValue0);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      timePeriodValues0.add((TimePeriod) fixedMillisecond1, (Number) (byte)113);
      timePeriodValues0.createCopy(999, (byte)113);
      assertEquals(2, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      timePeriodValues0.add((TimePeriod) fixedMillisecond1, (Number) (byte)113);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) (byte)113);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "Vj??U[iW9['+*Xtp", "");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriodValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
         verifyException("org.jfree.data.time.TimePeriodValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 121, 0, 0, 453);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8&AN");
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals("B$*Y8TQ@sM_", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("ob:rvs7k/8&AN", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 121, 0, 0, 453);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8&AN");
      // Undeclared exception!
      try { 
        timePeriodValues0.update(0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Week week0 = new Week(29, 91);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Time", string0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue(90);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate(90, 0, 121, 0, 0, 453);
      Week week0 = new Week((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8&AN");
      timePeriodValues0.setDomainDescription("B$*Y8TQ@sM_");
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("B$*Y8TQ@sM_", timePeriodValues0.getDomainDescription());
      assertEquals("ob:rvs7k/8&AN", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "B$*Y8TQ@sM_", "ob:rvs7k/8J&AN");
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("B$*Y8TQ@sM_", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals((-1), int0);
      assertEquals("ob:rvs7k/8J&AN", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", string0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }
}
