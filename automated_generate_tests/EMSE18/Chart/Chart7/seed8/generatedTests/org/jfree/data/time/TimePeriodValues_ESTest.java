/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 13 23:05:14 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.time.Instant;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.Week;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimePeriodValues_ESTest extends TimePeriodValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", (String) null);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) 0);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (-5850.55829394));
      timePeriodValues0.clone();
      assertEquals(2, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate((long) 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(0, hour0);
      Day day0 = minute0.getDay();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0, "(", "(");
      timePeriodValues0.hashCode();
      assertEquals("(", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) (byte) (-1), (Number) null);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      Day day0 = new Day();
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, 3367.478);
      timePeriodValues1.add(timePeriodValue0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(0, timePeriodValues1.getMaxStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", (String) null);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (-5851.378048013398));
      timePeriodValues0.delete(0, 0);
      assertEquals(0, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate((long) 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(0, hour0);
      Day day0 = minute0.getDay();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0, "(", "(");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (-258.5502953034));
      timePeriodValues0.add(timePeriodValue0);
      Second second0 = new Second((Date) mockDate0);
      timePeriodValues0.add((TimePeriod) second0, (Number) 23);
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "Couldn't clone XYDataItem!", "Couldn't clone XYDataItem!");
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(9223372036854775807L, 9223372036854775807L);
      MockDate mockDate0 = new MockDate(2, (-1), 9999);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (double) 152);
      Hour hour0 = new Hour((Date) mockDate0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 4);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (Number) (-1));
      assertEquals(1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "Couldn't clone XYDataItem!", "Couldn't clone XYDataItem!");
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(9223372036854775807L, 9223372036854775807L);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, 2521.670636773662);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (Number) (-1));
      timePeriodValues0.update(1, 0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) (byte) (-1), (Number) null);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertTrue(boolean0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0, "", "Failed to add cloned item.");
      timePeriodValues0.add((TimePeriod) minute0, (Number) 59);
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "Couldn't clone XYDataItem!", "Couldn't clone XYDataItem!");
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(9223372036854775807L, 9223372036854775807L);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (Number) (-1));
      timePeriodValues0.getValue(0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "Couldn't clone XYDataItem!", "Couldn't clone XYDataItem!");
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(9223372036854775807L, 9223372036854775807L);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (double) 4);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (double) 152);
      timePeriodValues0.getTimePeriod(1);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", string0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", "");
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals("", string0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", (String) null);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) 0);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "Couldn't clone XYDataItem!", "Couldn't clone XYDataItem!");
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(9223372036854775807L, 9223372036854775807L);
      MockDate mockDate0 = new MockDate(2, (-1), 9999);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (double) 152);
      Hour hour0 = new Hour((Date) mockDate0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 4);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals(1, timePeriodValues0.getMinEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "Couldn't clone XYDataItem!", "Couldn't clone XYDataItem!");
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(9223372036854775807L, 9223372036854775807L);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, 2521.670636773662);
      Instant instant0 = MockInstant.ofEpochSecond((long) 1);
      Date date0 = Date.from(instant0);
      Hour hour0 = new Hour(date0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 4);
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals(1, timePeriodValues0.getMinStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate((long) 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(0, hour0);
      Day day0 = minute0.getDay();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0, "(", "(");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (-258.5502953034));
      timePeriodValues0.add(timePeriodValue0);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "Couldn't clone XYDataItem!", "Couldn't clone XYDataItem!");
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(9223372036854775807L, 9223372036854775807L);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, 2521.670636773662);
      Instant instant0 = MockInstant.ofEpochSecond((long) 1);
      Date date0 = Date.from(instant0);
      Hour hour0 = new Hour(date0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 4);
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(1, timePeriodValues0.getMinStartIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0, "", "Failed to ad clned item.");
      timePeriodValues0.add((TimePeriod) minute0, (Number) 59);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate((long) 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(0, hour0);
      Day day0 = minute0.getDay();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0, "(", "(");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (-258.5502953034));
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 59);
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate((long) 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(0, hour0);
      Day day0 = minute0.getDay();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0, "(", "(");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (-258.5502953034));
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 59);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", "");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 4);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate((long) 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(0, hour0);
      Day day0 = minute0.getDay();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0, "(", "(");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (-258.5502953034));
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 59);
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0);
      timePeriodValues0.add((TimePeriod) second0, (double) 59);
      timePeriodValues0.getItemCount();
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0, "Negative 'periods' argument.", "Negative 'periods' argument.");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("Negative 'periods' argument.", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("Negative 'periods' argument.", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.ITALIAN;
      Week week0 = new Week(date0, (TimeZone) zoneInfo0, locale0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, "-s", "");
      assertEquals("-s", timePeriodValues0.getDomainDescription());
      
      timePeriodValues0.setDomainDescription("");
      timePeriodValues0.getDomainDescription();
      assertEquals("", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate((long) 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(0, hour0);
      Day day0 = minute0.getDay();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0, "(", "(");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (-258.5502953034));
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.getDataItem(0);
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "Couldn't clone XYDataItem!", "Couldn't clone XYDataItem!");
      timePeriodValues0.setNotify(false);
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(7, (-1));
      assertEquals("Couldn't clone XYDataItem!", timePeriodValues1.getRangeDescription());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals("Couldn't clone XYDataItem!", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "Couldn't clone XYDataItem!", "Couldn't clone XYDataItem!");
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(9223372036854775807L, 9223372036854775807L);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, 2521.670636773662);
      Instant instant0 = MockInstant.ofEpochSecond((long) 1);
      Date date0 = Date.from(instant0);
      Hour hour0 = new Hour(date0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 4);
      timePeriodValues0.createCopy((-1), (-1170));
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "Couldn't clone XYDataItem!", "Couldn't clone XYDataItem!");
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((long) 2, (long) 2);
      timePeriodValues0.add((TimePeriod) simpleTimePeriod0, (double) 7);
      Instant instant0 = MockInstant.ofEpochSecond((long) 1);
      Date date0 = Date.from(instant0);
      Hour hour0 = new Hour(date0);
      timePeriodValues0.add((TimePeriod) hour0, (Number) 4);
      timePeriodValues0.createCopy(1384, 0);
      assertEquals(1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockDate mockDate0 = new MockDate(330, 330, 330, 330, 330, 330);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(330, "Failed to add cloned item.");
      Locale locale0 = Locale.PRC;
      Week week0 = new Week((Date) mockDate0, (TimeZone) simpleTimeZone0, locale0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0);
      // Undeclared exception!
      try { 
        timePeriodValues0.update(53, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-1130.42071881488), 0.0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) simpleHistogramBin0, "$\"hX5", "org.jfree.data.time.TimePeriodValues");
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue((-1370));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "Couldn't clone XYDataItem!", "Couldn't clone XYDataItem!");
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem((-1910));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      Comparable comparable0 = jDBCXYDataset0.getSeriesKey(2166);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) comparable0, ">mA A", ">mA A");
      // Undeclared exception!
      try { 
        timePeriodValues0.delete((-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Minute minute0 = new Minute();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) minute0, "", "");
      timePeriodValues0.add((TimePeriod) minute0, (Number) 59);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy(59, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      Month month0 = new Month(date0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) month0);
      timePeriodValues0.add((TimePeriod) month0, (Number) 1111706706);
      // Undeclared exception!
      try { 
        timePeriodValues0.createCopy((-678), (-32));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "org.jfree.data.general.DefaultKeyedValueDataset", "3Yr\"fVv''LOM6{3uH:l");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, (Number) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) ";o%Elg1/:GHC$eH", (String) null, "Domain");
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriod) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimePeriodValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null, "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = null;
      try {
        timePeriodValues0 = new TimePeriodValues((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", "");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 4);
      timePeriodValues0.createCopy(0, 0);
      assertEquals(1, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Week week0 = new Week();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) week0, (String) null, "TT_pYUO2:mZuY9C6H");
      String string0 = timePeriodValues0.getDomainDescription();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("TT_pYUO2:mZuY9C6H", timePeriodValues0.getRangeDescription());
      assertNull(string0);
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", "");
      // Undeclared exception!
      try { 
        timePeriodValues0.getDataItem(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", (String) null);
      String string0 = timePeriodValues0.getRangeDescription();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertNull(string0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", "");
      timePeriodValues0.getItemCount();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", (String) null);
      timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) "", "org.jfree.data.general.DefaultKeyedialueDat>set", "");
      assertEquals("org.jfree.data.general.DefaultKeyedialueDat>set", timePeriodValues0.getDomainDescription());
      
      timePeriodValues0.setDomainDescription((String) null);
      timePeriodValues0.hashCode();
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", "");
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (Number) 4);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) (byte) (-1), (Number) null);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      timePeriodValues1.setRangeDescription("");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("", timePeriodValues1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) (byte) (-1), (Number) null);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0);
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      timePeriodValues1.setDomainDescription("RL#P%P1TG_65z");
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals("RL#P%P1TG_65z", timePeriodValues1.getDomainDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "Couldn't clone XYDataItem!", "Couldn't clone XYDataItem!");
      Instant instant0 = MockInstant.ofEpochMilli(4);
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((Comparable) instant0);
      boolean boolean0 = timePeriodValues0.equals(timePeriodValues1);
      assertEquals(-1, timePeriodValues1.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues1.getMinStartIndex());
      assertEquals("Couldn't clone XYDataItem!", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMaxEndIndex());
      assertEquals(-1, timePeriodValues1.getMaxStartIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals(-1, timePeriodValues1.getMinEndIndex());
      assertEquals("Couldn't clone XYDataItem!", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals(-1, timePeriodValues1.getMinMiddleIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", (String) null);
      boolean boolean0 = timePeriodValues0.equals(fixedMillisecond0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertFalse(boolean0);
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", "");
      TimePeriodValues timePeriodValues1 = (TimePeriodValues)timePeriodValues0.clone();
      timePeriodValues1.add((TimePeriod) fixedMillisecond0, (Number) 17);
      boolean boolean0 = timePeriodValues1.equals(timePeriodValues0);
      assertEquals(0, timePeriodValues1.getMinStartIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", (String) null);
      // Undeclared exception!
      try { 
        timePeriodValues0.delete(65536, 65536);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65536, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockDate mockDate0 = new MockDate((long) 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(0, hour0);
      Day day0 = minute0.getDay();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0, "(", "(");
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) day0, (-258.5502953034));
      timePeriodValues0.add(timePeriodValue0);
      timePeriodValues0.add((TimePeriod) minute0, (double) 59);
      // Undeclared exception!
      try { 
        timePeriodValues0.clone();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) (byte) (-1), (Number) null);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) xYDataItem0);
      // Undeclared exception!
      try { 
        timePeriodValues0.add((TimePeriodValue) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null item not allowed.
         //
         verifyException("org.jfree.data.time.TimePeriodValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "Couldn't clone XYDataItem!", "Couldn't clone XYDataItem!");
      int int0 = timePeriodValues0.getMinMiddleIndex();
      assertEquals("Couldn't clone XYDataItem!", timePeriodValues0.getRangeDescription());
      assertEquals("Couldn't clone XYDataItem!", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      Comparable comparable0 = jDBCXYDataset0.getSeriesKey(1643);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) comparable0, "Kc3", "Kc3");
      // Undeclared exception!
      try { 
        timePeriodValues0.update((-4), 1668051572);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", "");
      int int0 = timePeriodValues0.getMaxEndIndex();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockDate mockDate0 = new MockDate((long) 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(0, hour0);
      Day day0 = minute0.getDay();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0, "(", "(");
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", (String) null);
      int int0 = timePeriodValues0.getMinStartIndex();
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", (String) null);
      timePeriodValues0.add((TimePeriod) fixedMillisecond0, (double) 0);
      timePeriodValues0.delete(0, (-1113));
      assertEquals(1, timePeriodValues0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Hour hour0 = new Hour();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0, "Negative 'periods' argument.", "Negative 'periods' argument.");
      int int0 = timePeriodValues0.getMaxStartIndex();
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), int0);
      assertEquals("Negative 'periods' argument.", timePeriodValues0.getDomainDescription());
      assertEquals("Negative 'periods' argument.", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockDate mockDate0 = new MockDate((long) 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(0, hour0);
      Day day0 = minute0.getDay();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0, "(", "(");
      int int0 = timePeriodValues0.getMinEndIndex();
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), int0);
      assertEquals("(", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("(", timePeriodValues0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(152);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) spreadsheetDate0, "Couldn't clone XYDataItem!", "Couldn't clone XYDataItem!");
      // Undeclared exception!
      try { 
        timePeriodValues0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MockDate mockDate0 = new MockDate((long) 0);
      Hour hour0 = new Hour((Date) mockDate0);
      Minute minute0 = new Minute(0, hour0);
      Day day0 = minute0.getDay();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) day0, "(", "(");
      timePeriodValues0.setRangeDescription("(");
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
      assertEquals("(", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals(-1, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals("(", timePeriodValues0.getRangeDescription());
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) fixedMillisecond0, "", (String) null);
      int int0 = timePeriodValues0.getMaxMiddleIndex();
      assertEquals(-1, timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(-1, timePeriodValues0.getMinMiddleIndex());
      assertEquals(-1, timePeriodValues0.getMaxEndIndex());
      assertEquals(-1, timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), int0);
      assertEquals(-1, timePeriodValues0.getMinEndIndex());
  }
}
