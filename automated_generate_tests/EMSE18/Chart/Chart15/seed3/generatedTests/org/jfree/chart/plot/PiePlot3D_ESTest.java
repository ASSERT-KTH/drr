/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 17 22:43:41 GMT 2017
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.AsianFontMapper;
import com.lowagie.text.pdf.FontMapper;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfPrinterGraphics2D;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.pdf.Type3Font;
import com.lowagie.text.pdf.Type3Glyph;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Arc2D;
import java.awt.geom.Area;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.print.PrinterJob;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PiePlot3D_ESTest extends PiePlot3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      char[] charArray0 = new char[3];
      Type3Font type3Font0 = new Type3Font((PdfWriter) null, charArray0, true);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('O', 1.0F, (-447.06F), 10, 3, 1.0F);
      AsianFontMapper asianFontMapper0 = new AsianFontMapper("FoXEUES$YPa[]", "Times-BoldItalic");
      PdfPrinterGraphics2D pdfPrinterGraphics2D0 = new PdfPrinterGraphics2D((PdfContentByte) type3Glyph0, 0.0F, 1947.607F, (FontMapper) asianFontMapper0, false, false, (float) 14, (PrinterJob) null);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Point point0 = chartPanel0.getLocation();
      PlotState plotState0 = new PlotState();
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        piePlot3D0.draw(pdfPrinterGraphics2D0, (Rectangle2D) null, point0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      boolean boolean0 = piePlot3D0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      boolean boolean0 = piePlot3D0.getDarkerSides();
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(boolean0);
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      boolean boolean0 = defaultKeyedValuesDataset0.hasListener(piePlot3D0);
      assertTrue(boolean0);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      char[] charArray0 = new char[3];
      Type3Font type3Font0 = new Type3Font((PdfWriter) null, charArray0, true);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('>', 1.0F, (-447.06F), 10, 0.0F, 1.0F);
      AsianFontMapper asianFontMapper0 = new AsianFontMapper("FXEUES$YPnl]", "Cp1252");
      PdfPrinterGraphics2D pdfPrinterGraphics2D0 = new PdfPrinterGraphics2D((PdfContentByte) type3Glyph0, 0.0F, 1947.607F, (FontMapper) asianFontMapper0, false, true, (float) 14, (PrinterJob) null);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      Rectangle rectangle0 = arc2D_Double0.getBounds();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      arc2D_Double0.setAngles((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      Area area0 = new Area();
      Color color0 = (Color)LineRenderer3D.DEFAULT_WALL_PAINT;
      BasicStroke basicStroke0 = (BasicStroke)FastScatterPlot.DEFAULT_GRIDLINE_STROKE;
      piePlot3D0.drawSide(pdfPrinterGraphics2D0, rectangle0, arc2D_Double0, area0, area0, color0, color0, basicStroke0, false, true);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      char[] charArray0 = new char[3];
      Type3Font type3Font0 = new Type3Font((PdfWriter) null, charArray0, true);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('J', 1.0F, 18, 10, 0.0F, 1.0F);
      AsianFontMapper asianFontMapper0 = new AsianFontMapper("FXEUES$YPnl]", "Cp1252");
      PdfPrinterGraphics2D pdfPrinterGraphics2D0 = new PdfPrinterGraphics2D((PdfContentByte) type3Glyph0, 0.0F, (float) 'J', (FontMapper) asianFontMapper0, true, true, (float) 14, (PrinterJob) null);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((double) 2, (double) 14, (double) 'f', (double) 10, (double) 19, 0.4, 0);
      Rectangle rectangle0 = arc2D_Double0.getBounds();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      arc2D_Double0.setAngles((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      Area area0 = new Area();
      Color color0 = (Color)LineRenderer3D.DEFAULT_WALL_PAINT;
      BasicStroke basicStroke0 = new BasicStroke();
      piePlot3D0.drawSide(pdfPrinterGraphics2D0, rectangle0, arc2D_Double0, area0, area0, color0, color0, basicStroke0, false, false);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      char[] charArray0 = new char[3];
      Type3Font type3Font0 = new Type3Font((PdfWriter) null, charArray0, true);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('J', 1.0F, 18, 10, 0.0F, 1.0F);
      AsianFontMapper asianFontMapper0 = new AsianFontMapper("FXEUES$YPnl]", "Cp1252");
      PdfPrinterGraphics2D pdfPrinterGraphics2D0 = new PdfPrinterGraphics2D((PdfContentByte) type3Glyph0, 0.0F, (float) 'J', (FontMapper) asianFontMapper0, true, true, (float) 14, (PrinterJob) null);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((double) 2, (double) 14, (double) 'f', (double) 10, (double) 19, 0.4, 0);
      Rectangle rectangle0 = arc2D_Double0.getBounds();
      Area area0 = new Area();
      Color color0 = (Color)LineRenderer3D.DEFAULT_WALL_PAINT;
      BasicStroke basicStroke0 = new BasicStroke();
      piePlot3D0.drawSide(pdfPrinterGraphics2D0, rectangle0, arc2D_Double0, area0, area0, color0, color0, basicStroke0, false, false);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      char[] charArray0 = new char[3];
      Type3Font type3Font0 = new Type3Font((PdfWriter) null, charArray0, true);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('O', 1.0F, (-447.06F), 10, 0.0F, 1.0F);
      AsianFontMapper asianFontMapper0 = new AsianFontMapper("FXEUES$YPnl]", "Cp1252");
      PdfPrinterGraphics2D pdfPrinterGraphics2D0 = new PdfPrinterGraphics2D((PdfContentByte) type3Glyph0, 0.0F, 1947.607F, (FontMapper) asianFontMapper0, false, true, (float) 14, (PrinterJob) null);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      Rectangle rectangle0 = arc2D_Double0.getBounds();
      Point2D.Double point2D_Double0 = new Point2D.Double();
      arc2D_Double0.setAngles((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      Area area0 = new Area();
      Color color0 = (Color)LineRenderer3D.DEFAULT_WALL_PAINT;
      BasicStroke basicStroke0 = (BasicStroke)FastScatterPlot.DEFAULT_GRIDLINE_STROKE;
      piePlot3D0.drawSide(pdfPrinterGraphics2D0, rectangle0, arc2D_Double0, area0, area0, color0, color0, basicStroke0, true, false);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setCircular(true);
      JFreeChart jFreeChart0 = new JFreeChart("=Az1-^i*Qv~&]I!JE", piePlot3D0.DEFAULT_LABEL_FONT, (Plot) piePlot3D0, true);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage(10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      char[] charArray0 = new char[3];
      Type3Font type3Font0 = new Type3Font((PdfWriter) null, charArray0, true);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('O', 1.0F, (-447.06F), 10, 0.0F, 1.0F);
      AsianFontMapper asianFontMapper0 = new AsianFontMapper("FoXEUES$YPa[]", "Times-BoldItalic");
      PdfPrinterGraphics2D pdfPrinterGraphics2D0 = new PdfPrinterGraphics2D((PdfContentByte) type3Glyph0, 0.0F, 1947.607F, (FontMapper) asianFontMapper0, false, false, (float) 14, (PrinterJob) null);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      Rectangle rectangle0 = arc2D_Double0.getBounds();
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null);
      Point point0 = chartPanel0.getLocation();
      PlotState plotState0 = new PlotState();
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        piePlot3D0.draw(pdfPrinterGraphics2D0, rectangle0, point0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      char[] charArray0 = new char[3];
      Type3Font type3Font0 = new Type3Font((PdfWriter) null, charArray0, true);
      Type3Glyph type3Glyph0 = (Type3Glyph)type3Font0.defineGlyph('O', 1.0F, (-447.06F), 10, 0.0F, 1.0F);
      AsianFontMapper asianFontMapper0 = new AsianFontMapper("FXEUES$YPnl]", "Cp1252");
      PdfPrinterGraphics2D pdfPrinterGraphics2D0 = new PdfPrinterGraphics2D((PdfContentByte) type3Glyph0, 0.0F, 1947.607F, (FontMapper) asianFontMapper0, false, true, (float) 14, (PrinterJob) null);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      Rectangle rectangle0 = arc2D_Double0.getBounds();
      Area area0 = new Area();
      Color color0 = (Color)LineRenderer3D.DEFAULT_WALL_PAINT;
      BasicStroke basicStroke0 = (BasicStroke)FastScatterPlot.DEFAULT_GRIDLINE_STROKE;
      piePlot3D0.drawSide(pdfPrinterGraphics2D0, rectangle0, arc2D_Double0, area0, area0, color0, color0, basicStroke0, true, false);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultPieDataset0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      
      piePlot3D0.setDepthFactor(0.0);
      double double0 = piePlot3D0.getDepthFactor();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      piePlot3D0.getPlotType();
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertFalse(piePlot3D0.getDarkerSides());
      
      piePlot3D0.setDarkerSides(true);
      boolean boolean0 = piePlot3D0.getDarkerSides();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultPieDataset0);
      double double0 = piePlot3D0.getDepthFactor();
      assertEquals(0.12, double0, 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
  }
}
