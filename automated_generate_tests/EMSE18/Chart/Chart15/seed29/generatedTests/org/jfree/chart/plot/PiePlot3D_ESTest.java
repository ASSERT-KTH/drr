/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 29 21:13:49 GMT 2017
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Arc2D;
import java.awt.geom.Area;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PiePlot3D_ESTest extends PiePlot3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertFalse(piePlot3D0.getDarkerSides());
      
      piePlot3D0.setDarkerSides(true);
      boolean boolean0 = piePlot3D0.getDarkerSides();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(0.12, 0.0, 0.0, 0.12, 0.12, (-106.0), 1);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultPieDataset0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((float) 10, (-2905.282F), (float) 10, 1.0F);
      Area area0 = new Area(piePlot3D0.DEFAULT_LEGEND_ITEM_CIRCLE);
      PolarPlot polarPlot0 = new PolarPlot();
      BasicStroke basicStroke0 = (BasicStroke)polarPlot0.getRadiusGridlineStroke();
      // Undeclared exception!
      try { 
        piePlot3D0.drawSide((Graphics2D) null, rectangle2D_Float0, arc2D_Double0, area0, area0, (Paint) null, (Paint) null, basicStroke0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.PiePlot3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      PlotState plotState0 = new PlotState();
      // Undeclared exception!
      try { 
        piePlot3D0.draw((Graphics2D) null, (Rectangle2D) null, (Point2D) null, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      boolean boolean0 = piePlot3D0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, tableOrder0, 10);
      PiePlot3D piePlot3D1 = new PiePlot3D((PieDataset) categoryToPieDataset0);
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertTrue(boolean0);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01);
      assertFalse(piePlot3D1.getDarkerSides());
      assertFalse(piePlot3D1.isCircular());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultPieDataset0);
      boolean boolean0 = defaultPieDataset0.hasListener(piePlot3D0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, tableOrder0, 10);
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) categoryToPieDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("Yi0fdc0F'`C", (Plot) piePlot3D0);
      jFreeChart0.createBufferedImage((int) (byte)76, (int) (byte)76);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      piePlot3D0.setCircular(true);
      JFreeChart jFreeChart0 = new JFreeChart("Yi0fdc0F'`C", (Plot) piePlot3D0);
      // Undeclared exception!
      try { 
        jFreeChart0.createBufferedImage((int) (byte)76, (int) (byte)76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      boolean boolean0 = piePlot3D0.getDarkerSides();
      assertFalse(boolean0);
      assertFalse(piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      
      piePlot3D0.setDepthFactor(0.0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, tableOrder0, 10);
      PiePlot3D piePlot3D1 = new PiePlot3D((PieDataset) categoryToPieDataset0);
      boolean boolean0 = piePlot3D0.equals(piePlot3D1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultPieDataset0);
      piePlot3D0.getPlotType();
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01);
      assertFalse(piePlot3D0.getDarkerSides());
      assertFalse(piePlot3D0.isCircular());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) null);
      double double0 = piePlot3D0.getDepthFactor();
      assertFalse(piePlot3D0.isCircular());
      assertFalse(piePlot3D0.getDarkerSides());
      assertEquals(0.12, double0, 0.01);
  }
}
