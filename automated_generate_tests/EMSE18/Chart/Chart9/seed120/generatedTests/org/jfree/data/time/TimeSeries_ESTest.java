/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 17:05:34 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Canvas;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Label;
import java.awt.ScrollPane;
import java.awt.TextComponent;
import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.SpinnerNumberModel;
import javax.swing.plaf.synth.SynthSpinnerUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{Zz&", "", (Class) class0);
      timeSeries0.hashCode();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(")O.N$AM3{B2{Zz&", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.setDomainDescription("Fri Feb 14 20:21:21 GMT 2014");
      timeSeries0.hashCode();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hour hour0 = new Hour();
      Hour hour1 = (Hour)hour0.next();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour1);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour1);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Year year0 = new Year();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "A", "A", (Class) class0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals("A", timeSeries1.getDomainDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("A", timeSeries1.getRangeDescription());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2618L);
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (String) null, "", (Class) class0);
      timeSeries0.setDomainDescription((String) null);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Year year0 = new Year();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "", "", (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, Double.NEGATIVE_INFINITY);
      assertNull(timeSeriesDataItem0);
      
      Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) year0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{ZzP#&", ")O.N$AM3{B2{ZzP#&", (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      assertNull(timeSeriesDataItem0);
      
      timeSeries0.update((RegularTimePeriod) second0, (Number) 59);
      Integer integer0 = (Integer)timeSeries0.getValue((RegularTimePeriod) second0);
      assertEquals(")O.N$AM3{B2{ZzP#&", timeSeries0.getRangeDescription());
      assertEquals(")O.N$AM3{B2{ZzP#&", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(integer0);
      assertEquals(59, (int)integer0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{Zz&", "", (Class) class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(")O.N$AM3{B2{Zz&", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{Zz&", "iBgT@QD", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.getNextTimePeriod();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{ZzP#&", "", (Class) class0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Day day0 = new Day();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 5);
      int int0 = timeSeries0.getItemCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Day day0 = new Day();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 5);
      int int0 = timeSeries0.getIndex(day0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{Zz&", "", (Class) class0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      Week week0 = new Week();
      timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) week0);
      assertEquals(")O.N$AM3{B2{Zz&", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{ZzP#&", ")O.N$AM3{B2{ZzP#&", (Class) class0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(3561, 3561);
      assertEquals(")O.N$AM3{B2{ZzP#&", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{Zz&", "", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (double) 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{ZzP#&", ")O.N$AM3{B2{ZzP#&", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-351), (Number) 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      timeSeries0.addPropertyChangeListener(synthSpinnerUI0);
      // Undeclared exception!
      try { 
        timeSeries0.setDomainDescription("Fri Feb 14 20:21:21 GMT 2014");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeries cannot be cast to javax.swing.JSpinner
         //
         verifyException("javax.swing.plaf.synth.SynthSpinnerUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Dialog> class0 = Dialog.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(0L, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Year year0 = new Year();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week(0, 0);
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-2887));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(2, 2, 2, 2);
      Comparable comparable0 = spinnerNumberModel0.getMinimum();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) comparable0, "T'TB#j@KmMGJ/'AI", "T'TB#j@KmMGJ/'AI", (Class) class0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, fixedMillisecond0.DEFAULT_TIME_ZONE);
      List list0 = timeSeriesCollection0.getSeries();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.getIndex(fixedMillisecond0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1513L);
      Date date0 = Date.from(instant0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Millisecond millisecond0 = new Millisecond(date0, (TimeZone) zoneInfo0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "EHx>}}v\"+Ip:nSD", "TlJGokhk", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1593), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Month month0 = new Month((Date) mockDate0, (TimeZone) zoneInfo0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Year year0 = new Year();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "A", "A", (Class) class0);
      Second second0 = new Second();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, 0.0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.TimeSeries.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(2, 2, 2, 1);
      Comparable comparable0 = spinnerNumberModel0.getMinimum();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) comparable0, "T'TB#j@KmMGJ/'AI", "T'TB#j@KmMGJ/'AI", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 1886610483);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2452), (-2452), (-2452), 0, 2661, 0);
      Week week0 = new Week((Date) mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, 258.3);
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) timeSeriesDataItem0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (double) (-2452), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of java.awt.Canvas.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{Zz&", "X{*", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) second0, (-1690.588013242));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of java.awt.Label.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      timeSeries0.data = list0;
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, ", but the TimeSeries is expecting an instance of ", ", but the TimeSeries is expecting an instance of ", (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<TextComponent> class0 = TextComponent.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Frame> class0 = Frame.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.removeAgedItems(true);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{ZzP#&", "", (Class) class0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{Zz&", "", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 59);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Day day0 = new Day();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Year year0 = new Year();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "A", "A", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Year year0 = new Year();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "A", "A", (Class) class0);
      Second second0 = new Second();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Day day0 = new Day();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      timeSeries0.getIndex(day0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "127.0.0.1");
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (-2454.86187551779), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2618L);
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (String) null, "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(2763);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2763, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-281));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Day day0 = new Day();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      timeSeries0.getItemCount();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
      timeSeries0.hashCode();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription((String) null);
      timeSeries0.hashCode();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{Zz&", ")O.N$AM3{B2{Zz&", (Class) class0);
      Minute minute0 = new Minute();
      boolean boolean0 = timeSeries0.equals(minute0);
      assertFalse(boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(")O.N$AM3{B2{Zz&", timeSeries0.getRangeDescription());
      assertEquals(")O.N$AM3{B2{Zz&", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hour hour0 = new Hour();
      Hour hour1 = (Hour)hour0.next();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour1);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) hour1, (RegularTimePeriod) hour0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1513L);
      Date date0 = Date.from(instant0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Millisecond millisecond0 = new Millisecond(date0, (TimeZone) zoneInfo0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "EHx>}}v\"+Ip:nSD", "EHx>}}v\"+Ip:nSD", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1513L);
      Date date0 = Date.from(instant0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Millisecond millisecond0 = new Millisecond(date0, (TimeZone) zoneInfo0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "EHx>}}v\"+Ip:nSD", "EHx>}}v\"+Ip:nSD", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) millisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{ZzP#&", ")O.N$AM3{B2{ZzP#&", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{ZzP#&", ")O.N$AM3{B2{ZzP#&", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(3561, 3561);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3561, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1513L);
      Date date0 = Date.from(instant0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Millisecond millisecond0 = new Millisecond(date0, (TimeZone) zoneInfo0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "EHx>}}v\"+Ip:nSD", "EHx>}}v\"+Ip:nSD", (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 999);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("EHx>}}v\"+Ip:nSD", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("EHx>}}v\"+Ip:nSD", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1513L);
      Date date0 = Date.from(instant0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Millisecond millisecond0 = new Millisecond(date0, (TimeZone) zoneInfo0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "EHx>}}v\"+Ip:nSD", "EHx>}}v\"+Ip:nSD", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-1), (-650));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1513L);
      Date date0 = Date.from(instant0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Millisecond millisecond0 = new Millisecond(date0, (TimeZone) zoneInfo0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "EHx>}}v\"+Ip:nSD", "EHx>}}v\"+Ip:nSD", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(22, (-650));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, (-3605));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{Zz&", ")O.N$AM3{B2{Zz&", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.delete((RegularTimePeriod) second0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{Zz&", "", (Class) class0);
      timeSeries0.delete((RegularTimePeriod) second0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(")O.N$AM3{B2{Zz&", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) 0);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.clear();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Day day0 = new Day();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      timeSeries0.clear();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-1423.8252));
      timeSeries0.removeAgedItems((long) 0, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.removeAgedItems(1935897198L, false);
      timeSeries0.removeAgedItems((long) 0, false);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{ZzP#&", ")O.N$AM3{B2{ZzP#&", (Class) class0);
      Second second1 = (Second)second0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(87, (-2070), (-1740), 2, 0, (-1930));
      second0.peg(mockGregorianCalendar0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second1, (double) 3582);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{Zz&", "XX{5", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of java.awt.Label.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) hour0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{ZzP#&", ")O.N$AM3{B2{ZzP#&", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.getValue((RegularTimePeriod) second0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Year year0 = new Year();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "A", "A", (Class) class0);
      timeSeries0.getValue((RegularTimePeriod) year0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("A", timeSeries0.getRangeDescription());
      assertEquals("A", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Day day0 = new Day();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1513L);
      Date date0 = Date.from(instant0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Millisecond millisecond0 = new Millisecond(date0, (TimeZone) zoneInfo0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "EHx>}}v\"+Ip:nSD", "EHx>}}v\"+Ip:nSD", (Class) class0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("EHx>}}v\"+Ip:nSD", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("EHx>}}v\"+Ip:nSD", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Day day0 = new Day();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 5);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{Zz&", "XX{5", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      timeSeries0.getDataItem((RegularTimePeriod) second0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1513L);
      Date date0 = Date.from(instant0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Millisecond millisecond0 = new Millisecond(date0, (TimeZone) zoneInfo0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "EHx>}}v\"+Ip:nSD", "EHx>}}v\"+Ip:nSD", (Class) class0);
      timeSeries0.getDataItem((RegularTimePeriod) millisecond0);
      assertEquals("EHx>}}v\"+Ip:nSD", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("EHx>}}v\"+Ip:nSD", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 4, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-2052));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Frame> class0 = Frame.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.setMaximumItemAge(Integer.MAX_VALUE);
      assertEquals(2147483647L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{Zz&", "", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) 0);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Frame> class0 = Frame.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-2563));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.setMaximumItemCount(23);
      assertEquals(23, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) hour0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1513L);
      Date date0 = Date.from(instant0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Millisecond millisecond0 = new Millisecond(date0, (TimeZone) zoneInfo0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "EHx>}}v\"+Ip:nSD", "EHx>}}v\"+Ip:nSD", (Class) class0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, long0);
      assertEquals("EHx>}}v\"+Ip:nSD", timeSeries0.getRangeDescription());
      assertEquals("EHx>}}v\"+Ip:nSD", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(2, 2, 2, (-4));
      Comparable comparable0 = spinnerNumberModel0.getMinimum();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) comparable0, "T'TB#j@KmMGJ/'AI", "T'TB#j@KmMGJ/'AI", (Class) class0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) 1886610483);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1513L);
      Date date0 = Date.from(instant0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Millisecond millisecond0 = new Millisecond(date0, (TimeZone) zoneInfo0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "EHx>}}v\"+Ip:nSD", "EHx>}}v\"+Ip:nSD", (Class) class0);
      assertEquals("EHx>}}v\"+Ip:nSD", timeSeries0.getRangeDescription());
      
      timeSeries0.setRangeDescription((String) null);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("EHx>}}v\"+Ip:nSD", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Day day0 = new Day();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 8, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      timeSeries0.add((RegularTimePeriod) day0, 0.0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-3594L));
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "Null 'array' argument.", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{Zz&", ")O.N$AM3{B2{Zz&", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-3594L));
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "Null 'array' argument.", (Class) class0);
      Class class1 = timeSeries0.getTimePeriodClass();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Null 'array' argument.", timeSeries0.getRangeDescription());
      assertNotNull(class1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Day day0 = new Day();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      timeSeries0.getItems();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Second second0 = new Second();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, ")O.N$AM3{B2{ZzP#&", ")O.N$AM3{B2{ZzP#&", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Day day0 = new Day();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.update(23, (Number) 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.setDomainDescription("Fri Feb 14 20:21:21 GMT 2014");
      timeSeries0.getDomainDescription();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", timeSeries0.getDomainDescription());
  }
}
