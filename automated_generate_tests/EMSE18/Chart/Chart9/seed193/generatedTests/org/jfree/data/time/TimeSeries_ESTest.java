/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 01:51:08 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Canvas;
import java.awt.Choice;
import java.awt.Container;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.ScrollPane;
import java.awt.Scrollbar;
import java.awt.TextArea;
import java.awt.TextField;
import java.awt.Window;
import java.text.AttributedCharacterIterator;
import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) day0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 23);
      timeSeries0.add(timeSeriesDataItem0, false);
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 1952801640);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Scrollbar> class0 = Scrollbar.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "GMT+18:00", "Kosk;ni", "Kosk;ni", (Class) class0);
      assertEquals("Kosk;ni", timeSeries0.getRangeDescription());
      
      timeSeries0.setRangeDescription((String) null);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Kosk;ni", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Instant instant0 = mockDate0.toInstant();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) instant0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 23);
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      assertNull(timeSeriesDataItem0);
      
      timeSeries0.update(0, (Number) 999);
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getRangeDescription());
      assertTrue(boolean0);
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) null);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      assertNull(timeSeriesDataItem0);
      
      Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) millisecond0);
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(double0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.add((RegularTimePeriod) day0, 1172.740782963013);
      Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(double0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1172.740782963013, (double)double0, 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      assertNull(timeSeriesDataItem0);
      
      timeSeries0.getTimePeriod(0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      assertNull(timeSeriesDataItem0);
      
      timeSeries0.getNextTimePeriod();
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      assertNull(timeSeriesDataItem0);
      
      timeSeries0.getItemCount();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getRangeDescription());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      assertNull(timeSeriesDataItem0);
      
      timeSeries0.getIndex(millisecond0);
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "", "", (Class) class0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 91, 91, 2);
      Hour hour0 = new Hour((Date) mockDate0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (String) null, "org.jfree.data.KeyedObjects2D", (Class) class0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.add((RegularTimePeriod) day0, 1172.740782963013);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "TextHitInfo[304T]");
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Window> class0 = Window.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "2", "2", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.update(1403, (Number) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1403, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(1513L, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "TextHitInfo[304T]");
      timeSeries0.data = null;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1952801640);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "TextHitInfo[304T]");
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1952801640);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 4);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-586));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1886597747);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Instant instant0 = mockDate0.toInstant();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) instant0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1), 1630);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 91, 761, 2);
      Hour hour0 = new Hour((Date) mockDate0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (String) null, "org.jfree.data.KeyedObjects2D", (Class) class0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      List list0 = xYSeriesCollection0.getSeries();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-856L));
      Class<Container> class0 = Container.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1952801640);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 91, 761, 2);
      Hour hour0 = new Hour((Date) mockDate0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (String) null, "org.jfree.data.KeyedObjects2D", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of java.awt.ScrollPane.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 91, 761, 2);
      Hour hour0 = new Hour((Date) mockDate0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (String) null, "org.jfree.data.KeyedObjects2D", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockDate mockDate0 = new MockDate(91, 91, 91, 91, 2, 91);
      Hour hour0 = new Hour((Date) mockDate0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (String) null, "org.jfree.data.KeyedObjects2D", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of java.awt.ScrollPane.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1952801640);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (-2459.04162448242), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(5);
      Date date0 = spreadsheetDate0.toDate();
      Quarter quarter0 = new Quarter(date0);
      Class<Container> class0 = Container.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) quarter0, (double) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of java.awt.Container.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "SerialDate.monthCodeToString: month outside valid range.", "SerialDate.monthCodeToString: month outside valid range.", (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<FileDialog> class0 = FileDialog.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<TextField> class0 = TextField.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (Class) class0);
      timeSeries0.removeAgedItems(true);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1952801640);
      MockDate mockDate0 = new MockDate((long) 1952801640);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1952801640);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(29, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 23);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "TextHitInfo[304T]");
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      timeSeries0.getIndex(millisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getRangeDescription());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 91, 761, 2);
      Hour hour0 = new Hour((Date) mockDate0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (String) null, "org.jfree.data.KeyedObjects2D", (Class) class0);
      timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.KeyedObjects2D", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "selection-begin-paragraph", (Class) class0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1952801640);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, long0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 91, 761, 2);
      Hour hour0 = new Hour((Date) mockDate0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (String) null, "org.jfree.data.KeyedObjects2D", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, 0.0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of java.awt.ScrollPane.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("VEMxf_%ro!K1v>!f", string0);
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<AttributedCharacterIterator.Attribute> class0 = AttributedCharacterIterator.Attribute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "java.time.chrono.IsoChronology", "", "java.time.chrono.IsoChronology", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-1919));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) 0, true);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Class<Choice> class0 = Choice.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) integer0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 4);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(336);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 336, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<TextField> class0 = TextField.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 59);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of java.awt.TextField.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "TextHitInfo[304T]");
      timeSeries0.getItemCount();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 0);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      timeSeries0.hashCode();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getRangeDescription());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 0);
      assertNull(timeSeriesDataItem0);
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertTrue(boolean0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "", "", (Class) class0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      boolean boolean0 = timeSeries0.equals(day0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Year year0 = new Year(5188);
      Year year1 = (Year)year0.previous();
      Class<TextArea> class0 = TextArea.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year1, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 4);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 91, 761, 2);
      Hour hour0 = new Hour((Date) mockDate0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (String) null, "org.jfree.data.KeyedObjects2D", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
      timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(2145338309, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2145338309, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1952801640);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(1952801640, 92);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-1947), Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1952801640);
      TimeSeries timeSeries1 = timeSeries0.createCopy(1952801640, 1952801640);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Time", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1), (-213));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.add((RegularTimePeriod) day0, 1172.740782963013);
      timeSeries0.delete((RegularTimePeriod) day0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.delete((RegularTimePeriod) day0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1952801640);
      Minute minute0 = new Minute();
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (-1256.1));
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 91, 761, 2);
      Hour hour0 = new Hour((Date) mockDate0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (String) null, "org.jfree.data.KeyedObjects2D", (Class) class0);
      timeSeries0.clear();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.data.KeyedObjects2D", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1);
      timeSeries0.setMaximumItemAge(1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-3265L));
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 5);
      timeSeries0.removeAgedItems((long) 1, false);
      assertEquals(1L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 23);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.removeAgedItems(0L, true);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Instant instant0 = mockDate0.toInstant();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) instant0);
      timeSeries0.removeAgedItems(1374L, false);
      timeSeries0.removeAgedItems(0L, true);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 91, 91, 2);
      Hour hour0 = new Hour((Date) mockDate0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (String) null, "org.jfree.data.KeyedObjects2D", (Class) class0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) 23);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Frame> class0 = Frame.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 16, "sUvJLSWBC", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      Instant instant0 = mockDate0.toInstant();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) instant0);
      timeSeries1.add((RegularTimePeriod) day0, 1172.740782963013);
      timeSeries0.addAndOrUpdate(timeSeries1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultMultiValueCategoryDataset0, tableOrder0, 2147483629);
      List list0 = categoryToPieDataset0.getKeys();
      timeSeries1.data = list0;
      // Undeclared exception!
      try { 
        timeSeries1.delete(0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, 2853.2366019851147);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) millisecond0, (Number) 999);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "TextHitInfo[304T]");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.add((RegularTimePeriod) day0, 1172.740782963013);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 23);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "TextHitInfo[304T]");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "TextHitInfo[304T]");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 4);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 23);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.add((RegularTimePeriod) day0, 1172.740782963013);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "TextHitInfo[304T]");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 24);
      timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "TextHitInfo[304T]");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Window> class0 = Window.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-1096L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 91, 761, 2);
      Hour hour0 = new Hour((Date) mockDate0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (String) null, "org.jfree.data.KeyedObjects2D", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-1094));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 91, 761, 2);
      Hour hour0 = new Hour((Date) mockDate0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (String) null, "org.jfree.data.KeyedObjects2D", (Class) class0);
      timeSeries0.setMaximumItemCount(761);
      assertEquals(761, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      Instant instant0 = mockDate0.toInstant();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) instant0);
      timeSeries1.add((RegularTimePeriod) day0, 1172.740782963013);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 91, 761, 2);
      Hour hour0 = new Hour((Date) mockDate0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (String) null, "org.jfree.data.KeyedObjects2D", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1952801640);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0);
      Hour hour0 = new Hour(29, day0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 23);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 4);
      timeSeries0.getItems();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 91, 91, 2);
      Hour hour0 = new Hour((Date) mockDate0);
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (String) null, "org.jfree.data.KeyedObjects2D", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-135), (Number) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, 2853.2366019851147);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      timeSeries0.setDomainDescription("TimeSeries.update(TimePeriod, Number):  period does not exist.");
      assertEquals("TimeSeries.update(TimePeriod, Number):  period does not exist.", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, "VEMxf_%ro!K1v>!f", "VEMxf_%ro!K1v>!f", (Class) class0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("VEMxf_%ro!K1v>!f", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("VEMxf_%ro!K1v>!f", string0);
  }
}
