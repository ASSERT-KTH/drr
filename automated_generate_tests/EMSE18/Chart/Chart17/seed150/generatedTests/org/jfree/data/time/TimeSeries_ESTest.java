/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 23 17:12:29 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Checkbox;
import java.awt.Dialog;
import java.awt.FileDialog;
import java.awt.Panel;
import java.awt.ScrollPane;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month((Date) mockDate0);
      Class<Panel> class0 = Panel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", "", (Class) class0);
      timeSeries0.hashCode();
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 1);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 3);
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year1, (RegularTimePeriod) year0);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 5);
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 1);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(2, timeSeries0.getItemCount());
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 1);
      timeSeries0.update((RegularTimePeriod) year0, (Number) 1);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 1);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(timeSeriesDataItem0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(1);
      assertEquals(1L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "(yXPQ}NrS", "#_6ktADb-+d", (Class) class0);
      timeSeries0.setRangeDescription("");
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-1.2022282930047203));
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 1);
      assertEquals(2, timeSeries0.getItemCount());
      
      timeSeries0.update(1, (Number) 12);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month((Date) mockDate0, year0.DEFAULT_TIME_ZONE);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) 8);
      Integer integer0 = (Integer)timeSeries0.getValue((RegularTimePeriod) year0);
      assertNotNull(integer0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Second> class0 = Second.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "Null 'seriesKeys' argument.", "Requires start >= 0.", "", (Class) class1);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("", string0);
      assertEquals("Requires start >= 0.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month((Date) mockDate0, year0.DEFAULT_TIME_ZONE);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) 8);
      timeSeries0.getNextTimePeriod();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 1);
      timeSeries0.getItemCount();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 1);
      timeSeries0.getIndex(year0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 1);
      int int0 = timeSeries0.getIndex(year0);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription((String) null);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 1);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1, "", (String) null, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-1288), (Number) 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems((long) 4, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      timeSeries1.data = null;
      // Undeclared exception!
      try { 
        timeSeries1.getValue((RegularTimePeriod) year0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1, "", (String) null, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-235));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1971L));
      Year year0 = new Year((Date) mockDate0);
      Week week0 = new Week((-1565), year0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(619);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 619, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month((Date) mockDate0);
      Class<Panel> class0 = Panel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1), 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "(yXPQ}NrS", "#_6ktADb-+d", (Class) class0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, 2614);
      Vector vector0 = defaultTableModel0.getDataVector();
      timeSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9223372036854775807L);
      Week week0 = new Week((Date) mockDate0);
      Class<Dialog> class0 = Dialog.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, "the time period ", "the time period ", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Month month0 = new Month(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, (-6039.53643479837));
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) "Null 'seriesKeys' argument.", "Requires start >= 0.", "", (Class) null);
      // Undeclared exception!
      try { 
        timeSeries1.add(timeSeriesDataItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1, "", (String) null, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 1.0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1, "", (String) null, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month((Date) mockDate0);
      Class<Panel> class0 = Panel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) month0, (double) 28, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of java.awt.Panel.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Dialog> class0 = Dialog.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, (String) null, "", (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Checkbox> class0 = Checkbox.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1, "", (String) null, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "(yXPQ}NrS", "#_6ktADb-+d", (Class) class0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, 2614);
      Vector vector0 = defaultTableModel0.getDataVector();
      timeSeries0.data = (List) vector0;
      timeSeries0.delete(0, 0);
      assertEquals(2613, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "(yXPQ}NrS", "#_6ktADb-+d", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-1.2022282930047203));
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 1);
      timeSeries0.removeAgedItems(true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "(yXPQ}NrS", "#_6ktADb-+d", (Class) class0);
      timeSeries0.removeAgedItems(true);
      assertEquals("#_6ktADb-+d", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("(yXPQ}NrS", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) double0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (Number) 23);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      ParsePosition parsePosition0 = new ParsePosition((-46));
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      Hour hour0 = new Hour(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.getIndex(hour0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) 1093812786, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      ParsePosition parsePosition0 = new ParsePosition((-46));
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      Hour hour0 = new Hour(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "(yXPQ}NrS", "#_6ktADb-+d", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-5351));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.getItemCount();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-1.2022282930047203));
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 1);
      timeSeries0.hashCode();
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month((Date) mockDate0);
      Class<Panel> class0 = Panel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", "", (Class) class0);
      boolean boolean0 = timeSeries0.equals(class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertFalse(boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month((Date) mockDate0);
      Year year0 = month0.getYear();
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month((Date) mockDate0);
      Class<Panel> class0 = Panel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", "", (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(31, 2485);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("", timeSeries1.getDomainDescription());
      assertEquals("", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-554), 141);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "(yXPQ}NrS", "#_6ktADb-+d", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(3, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, "(yXPQ}NrS", "#_6ktADb-+d", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (-143.6017));
      timeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-1.2022282930047203));
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Month month0 = new Month(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      timeSeries0.clear();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.removeAgedItems((long) Integer.MAX_VALUE, true);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-1.2022282930047203));
      timeSeries0.removeAgedItems((long) 1, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.removeAgedItems((long) 1, false);
      timeSeries0.removeAgedItems((long) 0, false);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (Number) 14);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 3);
      timeSeries0.setMaximumItemAge(0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Year year1 = (Year)year0.previous();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year1, (double) 5);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1, "", (String) null, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals(0, timeSeries1.getItemCount());
      
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) year0, (Number) 5);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) year0, (Number) 1649957210);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.getValue((RegularTimePeriod) year0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<ScrollPane> class0 = ScrollPane.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1, "", (String) null, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, 0.0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-1.2022282930047203));
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-654L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, Double.POSITIVE_INFINITY);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-22));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(1);
      assertEquals(1, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) hour0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("Value", string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Week week0 = new Week(974, (-1200));
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, (Class) null);
      DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition(335);
      Date date0 = mockSimpleDateFormat0.parse("Q", parsePosition0);
      Hour hour0 = new Hour(date0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) hour0, (Number) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Day day0 = new Day();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) null);
      Class<FileDialog> class0 = FileDialog.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) timeSeriesDataItem0, "createInstance", "createInstance", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) (-2181), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (-34.15646621217716));
      timeSeries0.getValue((RegularTimePeriod) year0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      Class class0 = timeSeries0.getTimePeriodClass();
      assertNotNull(class0);
      
      TimeSeries timeSeries1 = new TimeSeries((Comparable) "Null 'seriesKeys' argument.", "Requires start >= 0.", (String) null, (Class) class0);
      String string0 = timeSeries1.getRangeDescription();
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Requires start >= 0.", timeSeries1.getDomainDescription());
      assertNull(string0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      ParsePosition parsePosition0 = new ParsePosition((-46));
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      Hour hour0 = new Hour(date0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
      timeSeries0.getItems();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      // Undeclared exception!
      try { 
        timeSeries0.update(1, (Number) 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month((Date) mockDate0);
      Class<Panel> class0 = Panel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", "", (Class) class0);
      timeSeries0.setDomainDescription("");
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", string0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }
}
