/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 17 06:54:59 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Canvas;
import java.awt.Label;
import java.awt.Scrollbar;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.DefaultWindDataset;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (String) null, (String) null, (Class) class0);
      Quarter quarter1 = (Quarter)quarter0.next();
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, (RegularTimePeriod) quarter1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week(2039, 2039);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.setMaximumItemCount(1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(9223372036854775807L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(859, (-1), 0, 0, (-502), (-502));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "g-$->1T_466G", "g-$->1T_466G", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 3);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(859, (-1), 0, 0, (-502), (-502));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, "g-$->1T_466G", "g-$->1T_466G", (Class) class0);
      timeSeries0.setDomainDescription("Sat Nov 29 15:29:38 GMT 2758");
      assertEquals("Sat Nov 29 15:29:38 GMT 2758", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day((Date) mockDate0, week0.DEFAULT_TIME_ZONE);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 1);
      timeSeries0.add(timeSeriesDataItem0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(167L, 167L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      timeSeries0.add((RegularTimePeriod) day0, 0.0, false);
      Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(double0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(167L, 167L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      timeSeries0.add((RegularTimePeriod) day0, 924.2985);
      Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(924.2985, (double)double0, 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1.0));
      Comparable comparable0 = spinnerNumberModel0.getMaximum();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) comparable0, "org.jfree.data.time.Day", "mBgZ7\"HI&ao?XsX,v(-", (Class) class0);
      timeSeries0.getTimePeriodClass();
      assertEquals("org.jfree.data.time.Day", timeSeries0.getDomainDescription());
      assertEquals("mBgZ7\"HI&ao?XsX,v(-", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 355);
      assertNull(timeSeriesDataItem0);
      
      timeSeries0.getNextTimePeriod();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Null 'start' argument.", timeSeries0.getRangeDescription());
      assertEquals("LepeH?ah1>+)8", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 366);
      assertNull(timeSeriesDataItem0);
      
      timeSeries0.getItemCount();
      assertEquals("Null 'start' argument.", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("LepeH?ah1>+)8", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(167L, 167L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      timeSeries0.add((RegularTimePeriod) day0, 0.0, false);
      timeSeries0.getIndex(day0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(167L, 167L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 1);
      timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.createCopy(0, 23);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 366);
      timeSeries0.clone();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-3326), (Number) 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<Scrollbar> class0 = Scrollbar.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(0L, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Year year0 = new Year();
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(24L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Year year0 = new Year();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 3300.0);
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) timeSeriesDataItem0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "accessibleTableModelChanged");
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Year year0 = new Year();
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, (Class) class0);
      timeSeries0.data = null;
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) year0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Year year0 = new Year();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, 3300.0);
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) timeSeriesDataItem0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-2563), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "LepeH?ah1>+)8", (Class) class0);
      Object[][] objectArray0 = new Object[4][1];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(728, second0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, ">Y[-_,", "org.jfree.data.time.RegularTimePeriod", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(167L, 167L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      timeSeries0.add((RegularTimePeriod) day0, 0.0, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) 3, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 1-January-1900 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(167L, 167L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(167L, 167L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 1);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, 0.0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 1-January-1900 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(167L, 167L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (-1516.852));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "D Jmk 6w[QpkLC", "D Jmk 6w[QpkLC", (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "org.jfree.data.time.RegularTimePeriod", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 366);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(366, 366);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 366, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(610, (-2563));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(728, second0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0, ">Y[-_,", "org.jfree.data.time.RegularTimePeriod", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(728, 728);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 728, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      timeSeries0.removeAgedItems(false);
      assertEquals("Null 'start' argument.", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("LepeH?ah1>+)8", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(167L, 167L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      timeSeries0.add((RegularTimePeriod) day0, 0.0, false);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 3);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(167L, 167L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 348.529836);
      timeSeries0.add(timeSeriesDataItem0, true);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(167L, 167L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) 2958465);
      timeSeries0.add(timeSeriesDataItem0, false);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) 1392409281320L);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (String) null, (String) null, (Class) class0);
      timeSeries0.getIndex(quarter0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("LepeH?ah1>+)8", timeSeries0.getDomainDescription());
      assertEquals("Null 'start' argument.", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(167L, 167L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      timeSeries0.add((RegularTimePeriod) day0, (Number) 3, false);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-2147090046));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) "previewPanel", "previewPanel", "previewPanel", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(28);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 28, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      Millisecond millisecond0 = new Millisecond();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, 0.0);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      timeSeries0.getItemCount();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Null 'start' argument.", timeSeries0.getRangeDescription());
      assertEquals("LepeH?ah1>+)8", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "org.jfree.data.time.RegularTimePeriod", (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 366);
      assertNull(timeSeriesDataItem0);
      
      timeSeries0.hashCode();
      assertEquals("LepeH?ah1>+)8", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.data.time.RegularTimePeriod", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "LepeH?ah1>+)8", (Class) class0);
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("LepeH?ah1>+)8", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("LepeH?ah1>+)8", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (String) null, "Null 'start' arguent.", (Class) class0);
      timeSeries0.hashCode();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Null 'start' arguent.", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Second second0 = new Second();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) second0, "mb_%L}UEl;j_", "SpreadsheetDate: Serial must be in range 2 to 2958465.");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      boolean boolean0 = timeSeries0.equals(timePeriodValuesCollection0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      Object[][] objectArray0 = new Object[2][6];
      Object[] objectArray1 = new Object[2];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      Vector vector0 = defaultTableModel0.getDataVector();
      timeSeries1.data = (List) vector0;
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector cannot be cast to org.jfree.data.time.TimeSeriesDataItem
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (String) null, (String) null, (Class) class0);
      Quarter quarter1 = (Quarter)quarter0.next();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) quarter1, (RegularTimePeriod) quarter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Year year0 = new Year();
      Class<Canvas> class0 = Canvas.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, (Class) class0);
      Day day0 = new Day();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) day0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 23);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-5545), 3222);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (String) null, "Null 'start' arguent.", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(Integer.MAX_VALUE, 549);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 366);
      timeSeries0.delete((RegularTimePeriod) day0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      timeSeries0.delete((RegularTimePeriod) hour0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) 2);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "LepeH?ah1>+)8", (Class) class0);
      timeSeries0.clear();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("LepeH?ah1>+)8", timeSeries0.getDomainDescription());
      assertEquals("LepeH?ah1>+)8", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 59);
      timeSeries0.removeAgedItems((-2850L), false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      timeSeries0.removeAgedItems((long) 11, false);
      timeSeries0.removeAgedItems((long) 11, true);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 366);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of java.awt.Label.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "org.jfree.data.time.RegularTimePeriod", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 366);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) day0, (Number) null);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(148L, 148L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 148L, false);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 1);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 1-January-1900 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(167L, 167L);
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      timeSeries0.add((RegularTimePeriod) day0, (double) 1);
      timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "LepeH?ah1>+)8", (Class) class0);
      timeSeries0.getValue((RegularTimePeriod) day0);
      assertEquals("LepeH?ah1>+)8", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("LepeH?ah1>+)8", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(167L, 167L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) simpleTimePeriod0);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) 366);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (double) 59);
      Quarter quarter0 = new Quarter();
      timeSeries0.getDataItem((RegularTimePeriod) quarter0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      timeSeries0.getDataItem((RegularTimePeriod) week0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-247));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      timeSeries0.setMaximumItemAge(366);
      assertEquals(366L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      Object[][] objectArray0 = new Object[4][1];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      timeSeries0.data = list0;
      timeSeries0.setMaximumItemCount(2);
      assertEquals(2, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-885));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) "SpreadsheetDate: Serial must be in range 2 to 2958465.");
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("Null 'start' argument.", string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("LepeH?ah1>+)8", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(9223372036854775807L, long0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      timeSeries0.setRangeDescription("vlaPe6Ar[ls7w0oMh}");
      assertEquals("vlaPe6Ar[ls7w0oMh}", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Integer integer0 = new Integer(4371);
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) integer0, (Class) class0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(4021L);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of java.awt.Label.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "LepeH?ah1>+)8", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (String) null, (String) null, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 2695.698151382);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-247));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("LepeH?ah1>+)8", timeSeries0.getDomainDescription());
      assertEquals("Null 'start' argument.", timeSeries0.getRangeDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "LepeH?ah1>+)8", (Class) class0);
      timeSeries0.getItems();
      assertEquals("LepeH?ah1>+)8", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("LepeH?ah1>+)8", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("LepeH?ah1>+)8", timeSeries0.getDomainDescription());
      assertEquals("Null 'start' argument.", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Day day0 = new Day();
      Class<Label> class0 = Label.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "LepeH?ah1>+)8", "Null 'start' argument.", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.update(274, (Number) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 274, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(9223372036854775807L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      timeSeries0.setDomainDescription("");
      timeSeries0.getDomainDescription();
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(9223372036854775807L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", string0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }
}
