/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 24 12:55:47 GMT 2017
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Choice;
import java.awt.FileDialog;
import java.awt.List;
import java.awt.TextComponent;
import java.time.Instant;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeSeries_ESTest extends TimeSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Day day0 = new Day();
      Class<FileDialog> class0 = FileDialog.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "x!Tsyzf3R~tCZKB", "x!Tsyzf3R~tCZKB", (Class) class0);
      timeSeries0.hashCode();
      assertEquals("x!Tsyzf3R~tCZKB", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("x!Tsyzf3R~tCZKB", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 0.0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) 53);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      timeSeries0.setMaximumItemAge(152);
      assertEquals(152L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "?k&D5#%Q_X^}]7]O>", "", (Class) class0);
      assertEquals("", timeSeries0.getRangeDescription());
      
      timeSeries0.setRangeDescription("?k&D5#%Q_X^}]7]O>");
      timeSeries0.getRangeDescription();
      assertEquals("?k&D5#%Q_X^}]7]O>", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", (String) null, (Class) class0);
      timeSeries0.setRangeDescription("");
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 53);
      timeSeries0.getNextTimePeriod();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Year year0 = new Year();
      Class<Choice> class0 = Choice.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "-r7K8so,", "Year outnide valid range.", (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.getMaximumItemAge();
      assertEquals("-r7K8so,", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 53);
      timeSeries0.getItemCount();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 53);
      timeSeries0.getIndex(fixedMillisecond0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Class<List> class0 = List.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) localDate0, "Q/&gz8+P%", "6v", (Class) class0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals("6v", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Q/&gz8+P%", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.setNotify(false);
      Week week0 = new Week(52, (-1040));
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) week0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Year year0 = new Year();
      Class<Choice> class0 = Choice.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "-r7K8so,", "Year outnide valid range.", (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Year year0 = new Year();
      Class<Choice> class0 = Choice.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "-r7K8so,", "-r7K8so,", (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setMaximumItemAge(0L);
      timeSeries0.createCopy(0, 0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 53);
      timeSeries0.clone();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 602.5659457321342);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 602.5659457321342);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) null, (Number) 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1392409281320L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.update((-5), (Number) (byte)6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "?k&D5#%Q_X^}]7]O>", (String) null, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.removeAgedItems(152L, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Year year0 = new Year();
      Class<Choice> class0 = Choice.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "-r7K8so,", "-r7K8so,", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Minute minute0 = new Minute();
      Class<TextComponent> class0 = TextComponent.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0, "", "", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriodsUniqueToOtherSeries((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute((Date) mockDate0);
      Second second0 = new Second(1680, minute0);
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, "org.jfree.data.gantt.TaskSeriesCollection", "org.jfree.data.gantt.TaskSeriesCollection", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod((-3175));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      Week week0 = new Week(52, (-1040));
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((RegularTimePeriod) week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year constructor: year (-1040) outside valid range.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "?k&D5#%Q_X^}]7]O>", (String) null, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem((-11));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      double[][] doubleArray0 = new double[5][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      java.util.List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.delete(53, 1489);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(53, 1489);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Day day0 = new Day();
      Class<FileDialog> class0 = FileDialog.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "x!Tsyzf3R~tCZKB", "x!Tsyzf3R~tCZKB", (Class) class0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      java.util.List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) (-2210593619794989709L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Hour hour0 = new Hour();
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate((TimeSeries) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Year year0 = new Year();
      Class<Choice> class0 = Choice.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "-r7K8so,", "Year outnide valid range.", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      Day day0 = new Day();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      java.util.List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      timeSeries1.data = list0;
      Year year0 = (Year)RegularTimePeriod.createInstance(class0, mockDate0, day0.DEFAULT_TIME_ZONE);
      // Undeclared exception!
      try { 
        timeSeries1.add((RegularTimePeriod) year0, (Number) 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (Number) 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) null, (double) Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeriesDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, "QN6n5z", "QN6n5z", (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null, (Class) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(3, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 602.5659457321342);
      timeSeries0.removeAgedItems(true);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Class<List> class0 = List.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) localDate0, "Q/&gz8+P%", "Q", (Class) class0);
      timeSeries0.removeAgedItems(true);
      assertEquals("Q/&gz8+P%", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Q", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      Week week0 = new Week(52, (-1040));
      timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 53);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Year year0 = new Year();
      Class<Choice> class0 = Choice.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "-r7K8so,", "-r7K8so,", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (Number) 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) 8);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1111706706);
      // Undeclared exception!
      try { 
        timeSeries0.getIndex((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Day day0 = new Day();
      Class<FileDialog> class0 = FileDialog.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "x!Tsyzf3R~tCZKB", "x!Tsyzf3R~tCZKB", (Class) class0);
      timeSeries0.getIndex(day0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("x!Tsyzf3R~tCZKB", timeSeries0.getRangeDescription());
      assertEquals("x!Tsyzf3R~tCZKB", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", (String) null, (Class) class0);
      timeSeries0.getTimePeriodClass();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      Week week0 = new Week(52, (-1038));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (double) 53, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Day day0 = new Day();
      Class<FileDialog> class0 = FileDialog.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "x!Tsyzf3R~tCZKB", "x!Tsyzf3R~tCZKB", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) day0, (Number) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of java.awt.FileDialog.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Class<List> class0 = List.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) localDate0, "Q/&gz8+P%", "6v", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getTimePeriod(274);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 274, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getDataItem(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Day day0 = new Day();
      Class<FileDialog> class0 = FileDialog.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "x!Tsyzf3R~tCZKB", "x!Tsyzf3R~tCZKB", (Class) class0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, 2086.518);
      // Undeclared exception!
      try { 
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of java.awt.FileDialog.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.getItemCount();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 53);
      timeSeries0.hashCode();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "?k&D5#%Q_X^}]7]O>", (String) null, (Class) class0);
      timeSeries0.hashCode();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("?k&D5#%Q_X^}]7]O>", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", (String) null, (Class) class0);
      boolean boolean0 = timeSeries0.equals(month0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond1, (RegularTimePeriod) fixedMillisecond1);
      Week week0 = new Week(52, (-1040));
      timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) 53);
      timeSeries0.addAndOrUpdate(timeSeries1);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) week0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond1, (RegularTimePeriod) fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Day day0 = new Day();
      Class<FileDialog> class0 = FileDialog.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "x!Tsyzf3R~tCZKB", "x!Tsyzf3R~tCZKB", (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(464, 1478);
      assertEquals("x!Tsyzf3R~tCZKB", timeSeries1.getRangeDescription());
      assertEquals("x!Tsyzf3R~tCZKB", timeSeries1.getDomainDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Year year0 = new Year();
      Class<Choice> class0 = Choice.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, "-7Kso,", "Year outnide valid range.", (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-2881), (-2881));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1);
      // Undeclared exception!
      try { 
        timeSeries0.delete(3332, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((-612), (-612));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "?k&D5#%Q_X^}]7]O>", (String) null, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (-2.147483648E9));
      timeSeries0.delete((RegularTimePeriod) month0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", (String) null, (Class) class0);
      timeSeries0.delete((RegularTimePeriod) month0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.clear();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 53);
      timeSeries0.removeAgedItems((long) 52, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(3);
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) spreadsheetDate0, "99q", "99q", (Class) class0);
      timeSeries0.removeAgedItems((long) 7, false);
      timeSeries0.removeAgedItems((long) 1, true);
      assertEquals("99q", timeSeries0.getDomainDescription());
      assertEquals("99q", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond1, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) 53);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 602.5659457321342);
      timeSeries0.hashCode();
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries((Comparable) 1);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) null, (double) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 53);
      timeSeries0.addAndOrUpdate(timeSeries1);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.clear();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 53);
      // Undeclared exception!
      try { 
        timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) 52);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) 6);
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      Day day0 = new Day();
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 53);
      Year year0 = (Year)RegularTimePeriod.createInstance(class0, mockDate0, day0.DEFAULT_TIME_ZONE);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) year0, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "?k&D5#%Q_X^}]7]O>", (String) null, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) 5);
      timeSeries0.getValue((RegularTimePeriod) month0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1392409281320L);
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 53);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 53);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "?k&D5#%Q_X^}]7]O>", (String) null, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (-2.147483648E9));
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      Week week0 = new Week(52, 52);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) 53);
      timeSeries0.getDataItem((RegularTimePeriod) week0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      Week week0 = new Week(52, (-1040));
      timeSeries0.getDataItem((RegularTimePeriod) week0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "?k&D5#%Q_X^}]7]O>", (String) null, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-1968526676));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", (String) null, (Class) class0);
      timeSeries0.setMaximumItemCount(1478);
      assertEquals(1478, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(7L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      TimeSeries timeSeries1 = new TimeSeries((Comparable) fixedMillisecond0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "", (String) null, (Class) class0);
      String string0 = timeSeries0.getRangeDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Class<List> class0 = List.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) localDate0, "Q/&gz8+P%", "Q", (Class) class0);
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(9223372036854775807L, long0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Q", timeSeries0.getRangeDescription());
      assertEquals("Q/&gz8+P%", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      Day day0 = new Day();
      Year year0 = (Year)RegularTimePeriod.createInstance(class0, mockDate0, day0.DEFAULT_TIME_ZONE);
      timeSeries0.add((RegularTimePeriod) year0, (Number) 1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-2.147483648E9));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("org.jfree.data.gantt.TaskSeries");
      Minute minute0 = new Minute(date0, (TimeZone) zoneInfo0);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        timeSeries0.getValue(1593);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1593, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "?k&D5#%Q_X^}]7]O>", (String) null, (Class) class0);
      java.util.List list0 = timeSeries0.getItems();
      timeSeries0.addOrUpdate((RegularTimePeriod) month0, (-2.147483648E9));
      timeSeries0.data = list0;
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) month0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Day day0 = new Day();
      Class<FileDialog> class0 = FileDialog.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "x!Tsyzf3R~tCZKB", "x!Tsyzf3R~tCZKB", (Class) class0);
      int int0 = timeSeries0.getMaximumItemCount();
      assertEquals("x!Tsyzf3R~tCZKB", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals("x!Tsyzf3R~tCZKB", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Month month0 = new Month();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, "?k&D5#%Q_X^}]7]O>", (String) null, (Class) class0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      // Undeclared exception!
      try { 
        timeSeries0.update(52, (Number) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, 0.0);
      Week week0 = new Week(52, 52);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) week0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Day day0 = new Day();
      Class<FileDialog> class0 = FileDialog.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, "x!Tsyzf3R~tCZKB", "x!Tsyzf3R~tCZKB", (Class) class0);
      timeSeries0.setDomainDescription("Cannot accept XYSeries that allow duplicate values. Use XYSeries(seriesName, <sort>, false) constructor.");
      assertEquals("Cannot accept XYSeries that allow duplicate values. Use XYSeries(seriesName, <sort>, false) constructor.", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, 810.268462);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) timeSeriesDataItem0, "", "", (Class) class0);
      String string0 = timeSeries0.getDomainDescription();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", string0);
  }
}
