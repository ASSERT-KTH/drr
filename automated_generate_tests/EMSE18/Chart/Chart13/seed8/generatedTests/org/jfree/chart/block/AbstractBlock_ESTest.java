/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 13 23:13:20 GMT 2017
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Choice;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.block.AbstractBlock;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.UnitType;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBlock_ESTest extends AbstractBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin(0.0, 7.2E7, 2288.250908076774, 1599.332024);
      double double0 = abstractBlock0.trimToContentHeight(1359.6605224609375);
      assertEquals(7.2E7, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin(0.0, 7.2E7, 2288.250908076774, 1599.332024);
      double double0 = abstractBlock0.trimToContentWidth(1355.7483F);
      assertEquals(7.2E7, abstractBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      BlockBorder blockBorder0 = new BlockBorder();
      compositeTitle0.setFrame(blockBorder0);
      double double0 = compositeTitle0.getContentYOffset();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.trimToContentWidth(Double.POSITIVE_INFINITY);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      LabelBlock labelBlock0 = new LabelBlock("<,s0k-Ry'Z3Sw6w3*}", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0.DEFAULT_OUTLINE_PAINT);
      double double0 = labelBlock0.trimToContentHeight(1.0F);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(Double.POSITIVE_INFINITY, 0.0, Double.POSITIVE_INFINITY, 0.0);
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, (-1.0));
      emptyBlock0.trimPadding(rectangle2D_Double0);
      assertEquals((-1.0), emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Color color0 = (Color)defaultPolarItemRenderer0.getBaseItemLabelPaint();
      LabelBlock labelBlock0 = new LabelBlock("", (Font) null, (Paint) color0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      labelBlock0.trimPadding(rectangle0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1.0E21F), (-1.0E21F), (-2363.604F), 1755.444F);
      MeterPlot meterPlot0 = new MeterPlot();
      LabelBlock labelBlock0 = new LabelBlock("<,s0k-Ry'Z3Sw6w3*}", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0.DEFAULT_OUTLINE_PAINT);
      labelBlock0.trimPadding(rectangle2D_Float0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(127.6529317884582, 3290.597057177806, 0.0, (-75.0));
      rectangle2D_Double0.x = 0.0;
      abstractBlock0.trimPadding(rectangle2D_Double0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Color color0 = (Color)defaultPolarItemRenderer0.getBaseItemLabelPaint();
      LabelBlock labelBlock0 = new LabelBlock("", (Font) null, (Paint) color0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      line2D_Double0.setLine(244.4, Double.POSITIVE_INFINITY, 5.0E-4, Double.POSITIVE_INFINITY);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      labelBlock0.trimPadding(rectangle0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Line2D.Double line2D_Double0 = new Line2D.Double((-3926.559193089275), 0.1, (-3926.559193089275), 113.441);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      abstractBlock0.trimPadding(rectangle0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      LabelBlock labelBlock0 = new LabelBlock("EHIrXdLS0QO1", spiderWebPlot0.DEFAULT_LABEL_FONT);
      labelBlock0.trimMargin(defaultCaret0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      rectangle2D_Float0.setRect(1998.6743F, 1.0F, (-1.0F), 0.0F);
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-2472.1F), (-2472.1F), (-2472.1F), 639.372F);
      rectangle2D_Float0.y = (-1.0F);
      LabelBlock labelBlock0 = new LabelBlock("");
      labelBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Color color0 = Color.magenta;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 2000.0, 2000.0);
      JTable jTable0 = new JTable(614125, 14);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(0);
      colorBlock0.trimMargin(rectangle0);
      assertEquals(2000.0, colorBlock0.getWidth(), 0.01);
      assertEquals(2000.0, colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-2472.1F), (-2472.1F), (-2472.1F), 639.372F);
      LabelBlock labelBlock0 = new LabelBlock("");
      labelBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-2948.36F), 1.0F, (float) 0, (float) 0);
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.trimBorder(rectangle2D_Float0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Vector<Choice> vector0 = new Vector<Choice>();
      JTable jTable0 = new JTable(vector0, vector0);
      Rectangle rectangle0 = jTable0.getCellRect((-1), 0, true);
      abstractBlock0.trimBorder(rectangle0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, (double) 0.0F, (double) 0.0F);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null, (Arrangement) flowArrangement0, (Arrangement) flowArrangement0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.005, (double) 0.0F, 239.233, 239.233);
      blockContainer0.trimBorder(rectangle2D_Double0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-0.9518166F), (-0.9518166F), (-0.9518166F), (-0.9518166F));
      EmptyBlock emptyBlock0 = new EmptyBlock(835.10568549972, (double) (-0.9518166F));
      emptyBlock0.trimBorder(rectangle2D_Float0);
      assertEquals(835.10568549972, emptyBlock0.getWidth(), 0.01);
      assertEquals((-0.9518166184425354), emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.setWidth(1.2526499606138484);
      double double0 = compositeTitle0.getWidth();
      assertEquals(1.2526499606138484, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.setWidth((-1207.1));
      double double0 = dateTitle0.getWidth();
      assertEquals((-1207.1), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("%]=v0oXp");
      labelBlock0.setPadding((-75.89), (-1.0), 1376.485325313518, Double.POSITIVE_INFINITY);
      labelBlock0.getPadding();
      assertEquals((-1.0), labelBlock0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      emptyBlock0.getPadding();
      assertEquals(Double.NEGATIVE_INFINITY, emptyBlock0.getHeight(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, emptyBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("%]=v0oXp");
      labelBlock0.setMargin((-1531.766), Double.POSITIVE_INFINITY, 2571.613184546603, 0.0);
      labelBlock0.getMargin();
      assertEquals(Double.POSITIVE_INFINITY, labelBlock0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("%]=v0oXp");
      labelBlock0.setMargin(1429.0, (-518.8111972077), 0.0, 1429.0);
      labelBlock0.getMargin();
      assertEquals((-518.8111972077), labelBlock0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("%]=v0oXp");
      labelBlock0.setMargin(0.0, 2.5E-4, 2.5E7, (-75.89));
      labelBlock0.getMargin();
      assertEquals(2.5E-4, labelBlock0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("%]=v0oXp");
      UnitType unitType0 = UnitType.RELATIVE;
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, 1.0E-4, 90.6787330402164, (-758.776119), 0.0);
      labelBlock0.setMargin(rectangleInsets0);
      labelBlock0.getMargin();
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getContentYOffset();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.setMargin((-186.2425), (-186.2425), (-186.2425), 0.0);
      double double0 = compositeTitle0.getContentYOffset();
      assertEquals((-185.2425), compositeTitle0.getContentXOffset(), 0.01);
      assertEquals((-185.2425), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      double double0 = blockContainer0.getContentXOffset();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.setMargin((-186.2425), (-186.2425), (-186.2425), 0.0);
      double double0 = compositeTitle0.getContentXOffset();
      assertEquals((-185.2425), compositeTitle0.getContentYOffset(), 0.01);
      assertEquals((-185.2425), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) 5753.118F, (double) 1.0F, 1356.748283802917, (-477.8037));
      rectangle2D_Double0.setFrameFromCenter(0.0, 2646.6, 1275.436, 1356.748283802917);
      abstractBlock0.setBounds(rectangle2D_Double0);
      abstractBlock0.getBounds();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      LabelBlock labelBlock0 = new LabelBlock("", defaultPolarItemRenderer0.DEFAULT_VALUE_LABEL_FONT, defaultPolarItemRenderer0.DEFAULT_OUTLINE_PAINT);
      labelBlock0.calculateTotalWidth((double) defaultPolarItemRenderer0.ZERO);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Color color0 = Color.magenta;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 2000.0, 2000.0);
      double double0 = colorBlock0.calculateTotalWidth(2000.0);
      assertEquals(2000.0, double0, 0.01);
      assertEquals(2000.0, colorBlock0.getHeight(), 0.01);
      assertEquals(2000.0, colorBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      double double0 = labelBlock0.calculateTotalWidth((-75.89));
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals((-75.89), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((double) 0, (double) 0);
      double double0 = emptyBlock0.calculateTotalHeight(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.calculateTotalHeight(5054.6);
      assertEquals(5054.6, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("%]=v0oXp");
      double double0 = labelBlock0.calculateTotalHeight((-2638.9136));
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals((-2638.9136), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) xYLineAndShapeRenderer0);
      legendTitle0.arrange((Graphics2D) null, (RectangleConstraint) null);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.setPadding((double) 1.0F, (double) 1997.6743F, (double) 1997.6743F, (double) (-258.24664F));
      blockContainer0.arrange((Graphics2D) null);
      assertEquals(1997.67431640625, blockContainer0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-3607.61), 0.0);
      // Undeclared exception!
      try { 
        emptyBlock0.trimPadding((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("%]=v0oXp");
      // Undeclared exception!
      try { 
        labelBlock0.trimMargin((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock((-3561.00936167357), (-3561.00936167357));
      // Undeclared exception!
      try { 
        emptyBlock0.trimBorder((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-0.9518166F), (-0.9518166F), (-0.9518166F), (-0.9518166F));
      EmptyBlock emptyBlock0 = new EmptyBlock(835.10568549972, (double) (-0.9518166F));
      // Undeclared exception!
      try { 
        emptyBlock0.drawBorder((Graphics2D) null, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      // Undeclared exception!
      try { 
        textTitle0.arrange((Graphics2D) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Color color0 = Color.magenta;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 2000.0, 2000.0);
      ColorBlock colorBlock1 = (ColorBlock)colorBlock0.clone();
      assertNotSame(colorBlock1, colorBlock0);
      assertEquals(2000.0, colorBlock1.getWidth(), 0.01);
      assertEquals(2000.0, colorBlock1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.arrange((Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      double double0 = dateTitle0.getWidth();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getHeight();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      LabelBlock labelBlock0 = new LabelBlock("<,s0k-Ry'Z3Sw6w3*}", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0.DEFAULT_OUTLINE_PAINT);
      LabelBlock labelBlock1 = (LabelBlock)labelBlock0.clone();
      boolean boolean0 = labelBlock1.equals(labelBlock0);
      assertEquals(0.0, labelBlock1.getWidth(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, labelBlock1.getHeight(), 0.01);
      assertNotSame(labelBlock1, labelBlock0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      AbstractBlock abstractBlock0 = new AbstractBlock();
      boolean boolean0 = abstractBlock0.equals(rectangle2D_Float0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      LabelBlock labelBlock0 = new LabelBlock("<,s0k-Ry'Z3Sw6w3*}", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0.DEFAULT_OUTLINE_PAINT);
      boolean boolean0 = labelBlock0.equals(labelBlock0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      LabelBlock labelBlock0 = new LabelBlock("<,s0k-Ry'Z3Sw6w3*}", meterPlot0.DEFAULT_LABEL_FONT, meterPlot0.DEFAULT_OUTLINE_PAINT);
      LabelBlock labelBlock1 = (LabelBlock)labelBlock0.clone();
      assertTrue(labelBlock1.equals((Object)labelBlock0));
      
      labelBlock1.setPadding(meterPlot0.DEFAULT_INSETS);
      boolean boolean0 = labelBlock1.equals(labelBlock0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10076, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, chartRenderingInfo0);
      assertEquals(0, bufferedImage0.getMinTileY());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.arrange((Graphics2D) null);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("%]=v0oXp");
      // Undeclared exception!
      try { 
        labelBlock0.toContentConstraint((RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      // Undeclared exception!
      try { 
        textTitle0.setBounds((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bounds' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      // Undeclared exception!
      try { 
        dateTitle0.setFrame((BlockFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'frame' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("%]=v0oXp");
      // Undeclared exception!
      try { 
        labelBlock0.setMargin((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'margin' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setHeight(117.62);
      double double0 = abstractBlock0.getHeight();
      assertEquals(117.62, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XYLineAndShapeRenderer xYLineAndShapeRenderer0 = new XYLineAndShapeRenderer();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) xYLineAndShapeRenderer0);
      double double0 = legendTitle0.getContentXOffset();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.getBounds();
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.getID();
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HorizontalAlignment horizontalAlignment0 = HorizontalAlignment.LEFT;
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, (double) 0.0F, (double) 0.0F);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null, (Arrangement) flowArrangement0, (Arrangement) flowArrangement0);
      BlockContainer blockContainer0 = legendTitle0.getItemContainer();
      blockContainer0.getMargin();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.getFrame();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setID("++uM");
      abstractBlock0.getID();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.getPadding();
      assertEquals(0.0, dateTitle0.getWidth(), 0.01);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("<,s0k-Ry'Z3Sw6w3*}", (Plot) meterPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1686, 511, 2322.6311769355, (double) 10.0F, (ChartRenderingInfo) null);
      assertEquals(1, bufferedImage0.getNumYTiles());
  }
}
