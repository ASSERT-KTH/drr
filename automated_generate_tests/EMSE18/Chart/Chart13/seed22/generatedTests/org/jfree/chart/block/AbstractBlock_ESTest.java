/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 21 19:26:04 GMT 2017
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.AttributedCharacterIterator;
import java.util.Vector;
import javax.swing.JTable;
import javax.swing.border.SoftBevelBorder;
import javax.swing.plaf.ColorUIResource;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.block.AbstractBlock;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.ImageTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBlock_ESTest extends AbstractBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      labelBlock0.setMargin(614.40170984, 614.40170984, 614.40170984, 0.0);
      double double0 = labelBlock0.trimToContentWidth((-2077.304888348));
      assertEquals(614.40170984, labelBlock0.getContentXOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) xYPlot0);
      BlockBorder blockBorder0 = new BlockBorder(xYPlot0.DEFAULT_INSETS, xYPlot0.DEFAULT_GRIDLINE_PAINT);
      legendTitle0.setFrame(blockBorder0);
      double double0 = legendTitle0.getContentYOffset();
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("GVvl{Nvm'", stackedAreaRenderer0.DEFAULT_VALUE_LABEL_FONT, (Plot) thermometerPlot0, true);
      LegendTitle legendTitle0 = (LegendTitle)jFreeChart0.getSubtitle(0);
      double double0 = legendTitle0.getContentXOffset();
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(3.0, double0, 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      LabelBlock labelBlock0 = new LabelBlock("com.lowagie.text.pdf.PdfTransition");
      PiePlot piePlot0 = new PiePlot();
      JFreeChart jFreeChart0 = new JFreeChart("q= fMVIv)B5", (Plot) piePlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 9679);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      labelBlock0.drawBorder(sunGraphics2D0, rectangle2D_Float0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.trimToContentWidth(2867.859687510587);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(2867.859687510587, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.trimToContentHeight(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Font font0 = Axis.DEFAULT_AXIS_LABEL_FONT;
      TextTitle textTitle0 = new TextTitle("a.pZ>MX&O", font0);
      double double0 = textTitle0.trimToContentHeight(1.0E9);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(9.99999998E8, double0, 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      abstractBlock0.trimPadding(defaultCaret0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double((double) 0.0F, 1256.0, (-2373.537), (-1568.9877256259167));
      Rectangle rectangle0 = line2D_Double0.getBounds();
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.trimPadding(rectangle0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(1.0F, 348.0F, 619.07F, 619.07F);
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.trimPadding(rectangle2D_Float0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Font font0 = Axis.DEFAULT_AXIS_LABEL_FONT;
      TextTitle textTitle0 = new TextTitle("a.pZ>MX&O", font0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1.0F), (-1.0F), (-1.0F), (-1.0F));
      textTitle0.trimPadding(rectangle2D_Float0);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(4294.8926F, 4294.8926F, 4294.8926F, 4294.8926F);
      LabelBlock labelBlock0 = new LabelBlock("GoTo");
      labelBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.setFrame((-1318.4366254), (-1318.4366254), 0.0, 0.0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("H9@*=9-mg;kgj!s`iX-");
      Color color0 = Color.BLACK;
      LabelBlock labelBlock0 = new LabelBlock("He.@9gr$Hn", subCategoryAxis0.DEFAULT_AXIS_LABEL_FONT, (Paint) color0);
      labelBlock0.trimMargin(rectangle2D_Double0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)emptyBlock0.trimMargin(rectangle2D_Double0);
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      labelBlock0.setMargin(614.40170984, 614.40170984, 614.40170984, 0.0);
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)labelBlock0.getBounds();
      labelBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(614.40173F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("com.lowagie.text.pdf.PdfTransition");
      JTable jTable0 = new JTable();
      ColorUIResource colorUIResource0 = (ColorUIResource)jTable0.getGridColor();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder((-1), (Color) colorUIResource0, (Color) colorUIResource0);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) jTable0, (-1), (-1), (-1), 2771);
      labelBlock0.trimMargin(rectangle0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-320.60691), (-320.60691), (-320.60691), (-320.60691));
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.trimBorder(rectangle2D_Double0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Vector<Frame> vector0 = new Vector<Frame>();
      JTable jTable0 = new JTable(vector0, vector0);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(1);
      abstractBlock0.trimBorder(rectangle0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(250000.0, 250000.0, 250000.0, (-7508.8));
      abstractBlock0.trimBorder(rectangle2D_Double0);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Font font0 = SpiderWebPlot.DEFAULT_LABEL_FONT;
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("java.awt.geom.Rectangle2D$Double[x=226.22,y=2753.4202565306,w=874.077566,h=2753.4202565306]", font0, (Plot) xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      ImageTitle imageTitle0 = new ImageTitle((Image) bufferedImage0);
      double double0 = imageTitle0.getWidth();
      assertEquals(10.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("com.lowagie.text.pdf.PdfTransition");
      labelBlock0.setPadding((-2024.593), 132.6888, (double) Float.POSITIVE_INFINITY, 0.0);
      labelBlock0.getPadding();
      assertEquals((-2024.593), labelBlock0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getPadding();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, (-2362.21087), false);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) stackedBarRenderer3D0);
      legendTitle0.setMargin(0.0, 0.0, 0.0, (-2362.21087));
      RectangleInsets rectangleInsets0 = legendTitle0.getMargin();
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals((-2362.21087), rectangleInsets0.getRight(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, (-2362.21087), false);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) stackedBarRenderer3D0);
      legendTitle0.setMargin((-133.74859324), (-1248.12), 0.0, Double.POSITIVE_INFINITY);
      legendTitle0.getMargin();
      assertEquals((-132.74859324), legendTitle0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(1.923168831023638, (-2362.21087), true);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) stackedBarRenderer3D0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      legendTitle0.setMargin(combinedRangeXYPlot0.DEFAULT_INSETS);
      legendTitle0.getMargin();
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Font font0 = SpiderWebPlot.DEFAULT_LABEL_FONT;
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("java.awt.geom.Rectangle2D$Double[x=226.22,y=2753.4202565306,w=874.077566,h=2753.4202565306]", font0, (Plot) xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      ImageTitle imageTitle0 = new ImageTitle((Image) bufferedImage0);
      double double0 = imageTitle0.getHeight();
      assertEquals(10.0, double0, 0.01);
      assertEquals(10.0, imageTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      emptyBlock0.setHeight((-2320.9340287848254));
      double double0 = emptyBlock0.getHeight();
      assertEquals((-2320.9340287848254), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("com.lowagie.text.pdf.PdfTransition");
      labelBlock0.setPadding((-2024.593), 132.6888, (double) Float.POSITIVE_INFINITY, 0.0);
      double double0 = labelBlock0.getContentYOffset();
      assertEquals((-2024.593), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getContentXOffset();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("v/mK\"g2");
      textTitle0.setMargin((-1906.3119705), (-1906.3119705), (-2897.73864953716), (double) (-618));
      double double0 = textTitle0.getContentXOffset();
      assertEquals((-1905.3119705), textTitle0.getContentYOffset(), 0.01);
      assertEquals((-1905.3119705), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      rectangle2D_Float0.setRect(0.0, 1326.456182608094, 2500.0, 1.0);
      LabelBlock labelBlock0 = new LabelBlock("com.lowagie.text.pdf.PdfTransition");
      labelBlock0.setBounds(rectangle2D_Float0);
      labelBlock0.getBounds();
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      rectangle2D_Float0.setFrameFromDiagonal((-0.4286119276531996), (-0.4286119276531996), (-0.4286119276531996), Double.POSITIVE_INFINITY);
      LabelBlock labelBlock0 = new LabelBlock("com.lowagie.text.pdf.PdfTransition");
      labelBlock0.setBounds(rectangle2D_Float0);
      labelBlock0.getBounds();
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 0.0, 4344.68);
      colorBlock0.calculateTotalWidth(0.0);
      assertEquals(4344.68, colorBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      double double0 = compositeTitle0.calculateTotalWidth(2279.966);
      assertEquals(2281.966, double0, 0.01);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Font font0 = Axis.DEFAULT_AXIS_LABEL_FONT;
      TextTitle textTitle0 = new TextTitle("a.pZ>MX&O", font0);
      double double0 = textTitle0.calculateTotalWidth((-839.9625387219605));
      assertEquals((-837.9625387219605), double0, 0.01);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.calculateTotalHeight(0.0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.calculateTotalHeight(225.0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(225.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Font font0 = Axis.DEFAULT_AXIS_LABEL_FONT;
      TextTitle textTitle0 = new TextTitle("a.pZ>MX&O", font0);
      double double0 = textTitle0.calculateTotalHeight((-1145.36729));
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals((-1143.36729), double0, 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        blockContainer0.trimPadding((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        blockContainer0.trimMargin((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) columnArrangement0);
      // Undeclared exception!
      try { 
        blockContainer0.trimBorder((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double((double) 0.0F, 1256.0, (-2373.537), (-1568.9877256259167));
      Rectangle rectangle0 = line2D_Double0.getBounds();
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        blockContainer0.drawBorder((Graphics2D) null, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      assertEquals(0.0, abstractBlock1.getWidth(), 0.01);
      assertNotSame(abstractBlock1, abstractBlock0);
      assertEquals(0.0, abstractBlock1.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(3141.95382221);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      emptyBlock0.setPadding(numberAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertTrue(numberAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Font font0 = Axis.DEFAULT_AXIS_LABEL_FONT;
      TextTitle textTitle0 = new TextTitle("a.pZ>MX&O", font0);
      textTitle0.setMargin(textTitle0.DEFAULT_PADDING);
      double double0 = textTitle0.trimToContentHeight(1.0E9);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
      assertEquals(9.99999996E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.getFrame();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getWidth();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setWidth((-1.5707963267948966));
      double double0 = abstractBlock0.getWidth();
      assertEquals((-1.5707963267948966), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.0, 0.0);
      double double0 = emptyBlock0.getHeight();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      boolean boolean0 = abstractBlock0.equals(attributedCharacterIterator_Attribute0);
      assertFalse(boolean0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, (-2362.21087), false);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) stackedBarRenderer3D0);
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) xYPlot0);
      jFreeChart0.removeSubtitle(legendTitle0);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, (-2362.21087), false);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) stackedBarRenderer3D0);
      // Undeclared exception!
      try { 
        legendTitle0.toContentConstraint((RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) columnArrangement0);
      // Undeclared exception!
      try { 
        blockContainer0.setBounds((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bounds' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      // Undeclared exception!
      try { 
        compositeTitle0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-1318.41), (-1318.41));
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) barRenderer3D0);
      // Undeclared exception!
      try { 
        legendTitle0.setFrame((BlockFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'frame' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle("+EG/<#vDR*i;L");
      // Undeclared exception!
      try { 
        textTitle0.setMargin((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'margin' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("com.lowagie.text.pdf.PdfTransition");
      double double0 = labelBlock0.getContentYOffset();
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.setMargin((-2779.0), (double) 0.0F, 0.0, 0.0);
      blockContainer0.arrange((Graphics2D) null);
      assertEquals((-2779.0), blockContainer0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("com.lowagie.text.pdf.PdfTransition");
      labelBlock0.getID();
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, (-2362.21087), false);
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) stackedBarRenderer3D0);
      legendTitle0.getMargin();
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setID("<dU+itF@K4*");
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Font font0 = SpiderWebPlot.DEFAULT_LABEL_FONT;
      XYPlot xYPlot0 = new XYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("java.awt.geom.Rectangle2D$Double[x=226.22,y=2753.4202565306,w=874.077566,h=2753.4202565306]", font0, (Plot) xYPlot0, true);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10);
      ImageTitle imageTitle0 = new ImageTitle((Image) bufferedImage0);
      imageTitle0.getPadding();
      assertEquals(10.0, imageTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.arrange((Graphics2D) null, (RectangleConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.arrange((Graphics2D) null);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
  }
}
