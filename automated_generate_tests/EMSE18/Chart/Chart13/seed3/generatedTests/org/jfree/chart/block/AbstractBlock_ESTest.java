/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 17 22:10:44 GMT 2017
 */

package org.jfree.chart.block;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import javax.swing.border.BevelBorder;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.AbstractBlock;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BlockFrame;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.CenterArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.ColumnArrangement;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.renderer.GrayPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Size2D;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBlock_ESTest extends AbstractBlock_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin((-748.8521247486195), 0.025, 1094.7341819813878, 0.025);
      double double0 = abstractBlock0.trimToContentWidth((-748.8521247486195));
      assertEquals((-748.8521247486195), abstractBlock0.getContentYOffset(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(0.01, 694.53);
      double double0 = emptyBlock0.trimToContentWidth(1789.15);
      assertEquals(0.01, emptyBlock0.getWidth(), 0.01);
      assertEquals(1789.15, double0, 0.01);
      assertEquals(694.53, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      double double0 = labelBlock0.trimToContentHeight(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.trimToContentHeight(1.0E-100);
      assertEquals(1.0E-100, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VerticalAlignment verticalAlignment0 = VerticalAlignment.CENTER;
      FlowArrangement flowArrangement0 = new FlowArrangement((HorizontalAlignment) null, verticalAlignment0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) flowArrangement0);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = (Rectangle)polygon0.getBounds2D();
      blockContainer0.trimPadding(rectangle0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1.7976931348623157E308), (-1.7976931348623157E308), (-555.483333465116), 565.43535);
      rectangle2D_Double0.y = 1860.0910843;
      EmptyBlock emptyBlock0 = new EmptyBlock((-555.483333465116), 3.141592653589793);
      emptyBlock0.trimPadding(rectangle2D_Double0);
      assertEquals((-555.483333465116), emptyBlock0.getWidth(), 0.01);
      assertEquals(3.141592653589793, emptyBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("d8|*%m?/?2");
      JTableHeader jTableHeader0 = new JTableHeader();
      Color color0 = Color.green;
      BevelBorder bevelBorder0 = new BevelBorder(2661, color0, color0, color0, color0);
      Rectangle rectangle0 = bevelBorder0.getInteriorRectangle((Component) jTableHeader0, 2274, 0, 0, (-1900));
      labelBlock0.trimPadding(rectangle0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-1.7976931348623157E308), (-1.7976931348623157E308), (-555.483333465116), 565.43535);
      EmptyBlock emptyBlock0 = new EmptyBlock((-555.483333465116), 3.141592653589793);
      emptyBlock0.trimPadding(rectangle2D_Double0);
      assertEquals(3.141592653589793, emptyBlock0.getHeight(), 0.01);
      assertEquals((-555.483333465116), emptyBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setMargin((-748.8521247486195), 0.025, 1094.7341819813878, 0.025);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      abstractBlock0.trimMargin(rectangle2D_Float0);
      assertEquals((-748.8521F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = (Rectangle)polygon0.getBounds2D();
      abstractBlock0.trimMargin(rectangle0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("d8|*%m?/?2");
      JTableHeader jTableHeader0 = new JTableHeader();
      Color color0 = Color.green;
      BevelBorder bevelBorder0 = new BevelBorder(2661, color0, color0, color0, color0);
      Rectangle rectangle0 = bevelBorder0.getInteriorRectangle((Component) jTableHeader0, 2274, 0, 0, (-1900));
      labelBlock0.trimMargin(rectangle0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1175.0F), (float) 2, (float) 1, (float) 2);
      abstractBlock0.trimMargin(rectangle2D_Float0);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2978.9582, (-1.0), (-1.0), 2978.9582);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      rectangle2D_Double0.setFrame((Rectangle2D) rectangle2D_Float0);
      LabelBlock labelBlock0 = new LabelBlock("");
      labelBlock0.trimBorder(rectangle2D_Double0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2978.9582, 267.1, 267.1, 2978.9582);
      LabelBlock labelBlock0 = new LabelBlock("");
      labelBlock0.trimBorder(rectangle2D_Double0);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(2978.9582, 267.1, 267.1, 2978.9582);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-4518.855F), (-4518.855F), (-4518.855F), (-4518.855F));
      rectangle2D_Double0.setFrame((Rectangle2D) rectangle2D_Float0);
      LabelBlock labelBlock0 = new LabelBlock("");
      labelBlock0.trimBorder(rectangle2D_Double0);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      blockContainer0.setWidth((-185.820665566));
      double double0 = blockContainer0.getWidth();
      assertEquals((-185.820665566), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(1860.9674864751307, 0.0);
      emptyBlock0.setPadding((-30.888877721628187), (-30.888877721628187), 0.0, 0.0);
      emptyBlock0.getPadding();
      assertEquals((-30.888877721628187), emptyBlock0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GrayPaintScale grayPaintScale0 = new GrayPaintScale();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) 0.0F);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) grayPaintScale0, (ValueAxis) cyclicNumberAxis0);
      paintScaleLegend0.getPadding();
      assertEquals(0.0, paintScaleLegend0.getWidth(), 0.01);
      assertEquals(0.0, paintScaleLegend0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(1860.9674864751307, (-1.3269682971747276));
      emptyBlock0.setPadding(0.0, 0.0, (-1.3269682971747276), 0.0);
      RectangleInsets rectangleInsets0 = emptyBlock0.getPadding();
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01);
      assertEquals((-1.3269682971747276), rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
      assertEquals((-1.3269682971747276), emptyBlock0.getHeight(), 0.01);
      assertEquals(1860.9674864751307, emptyBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      compositeTitle0.setMargin(417.709339594264, (-2530.9), 100000.0, 3114.9377);
      compositeTitle0.getMargin();
      assertEquals(418.709339594264, compositeTitle0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(false, false);
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) deviationRenderer0, (Arrangement) columnArrangement0, (Arrangement) columnArrangement0);
      legendTitle0.setMargin(0.0, 985.2627356, (-3134.4979127815673), (-3134.4979127815673));
      legendTitle0.getMargin();
      assertEquals(986.2627356, legendTitle0.getContentXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      Color color0 = (Color)textBox0.getShadowPaint();
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-123.63677319420553), 0.0);
      BlockBorder blockBorder0 = new BlockBorder();
      colorBlock0.setFrame(blockBorder0);
      double double0 = colorBlock0.getContentYOffset();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextTitle textTitle0 = new TextTitle();
      textTitle0.setMargin((-1015.8), 0.5235987755982988, 0.5235987755982988, (-995.67349));
      double double0 = textTitle0.getContentYOffset();
      assertEquals(1.5235987755982987, textTitle0.getContentXOffset(), 0.01);
      assertEquals((-1014.8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("d8|*%m?/?2");
      double double0 = labelBlock0.getContentXOffset();
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTitle dateTitle0 = new DateTitle();
      dateTitle0.setPadding(0.0, (-916.906906909143), 0.0, (-995.0));
      double double0 = dateTitle0.getContentXOffset();
      assertEquals(0.0, dateTitle0.getContentYOffset(), 0.01);
      assertEquals((-916.906906909143), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) centerArrangement0);
      blockContainer0.calculateTotalWidth(0.0F);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) centerArrangement0);
      double double0 = blockContainer0.calculateTotalWidth(40.86);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01);
      assertEquals(40.86, double0, 0.01);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.calculateTotalWidth((-289.493161));
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals((-289.493161), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(1988.0, 0.0);
      emptyBlock0.calculateTotalHeight(0.0);
      assertEquals(1988.0, emptyBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.calculateTotalHeight(2097.550048828125);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(2097.550048828125, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      double double0 = labelBlock0.calculateTotalHeight((-4518.855F));
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals((-4518.85498046875), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        blockContainer0.trimPadding((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      LabelBlock labelBlock0 = new LabelBlock("kFI4$r#2|GE&=%y|B", stackedAreaRenderer0.DEFAULT_VALUE_LABEL_FONT, stackedAreaRenderer0.DEFAULT_PAINT);
      // Undeclared exception!
      try { 
        labelBlock0.trimMargin((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      // Undeclared exception!
      try { 
        blockContainer0.trimBorder((Rectangle2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.RectangleInsets", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      TextTitle textTitle0 = jFreeChart0.getTitle();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      // Undeclared exception!
      try { 
        textTitle0.drawBorder((Graphics2D) null, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.BlockBorder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultStatisticalCategoryDataset0);
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      TextTitle textTitle0 = jFreeChart0.getTitle();
      // Undeclared exception!
      try { 
        textTitle0.arrange((Graphics2D) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.jfree.chart.title.TextTitle", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("mvjcv:5J-On[*geNXjD");
      // Undeclared exception!
      try { 
        labelBlock0.arrange((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.block.LabelBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      AbstractBlock abstractBlock1 = (AbstractBlock)abstractBlock0.clone();
      assertEquals(0.0, abstractBlock1.getWidth(), 0.01);
      assertEquals(0.0, abstractBlock1.getHeight(), 0.01);
      assertNotSame(abstractBlock1, abstractBlock0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("mvjcv:5J-On[*geNXjD");
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultPieDataset0);
      labelBlock0.setPadding(piePlot0.DEFAULT_INSETS);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.getFrame();
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getWidth();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, abstractBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      double double0 = abstractBlock0.getHeight();
      assertEquals(0.0, abstractBlock0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      abstractBlock0.setHeight(2);
      double double0 = abstractBlock0.getHeight();
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) xYStepAreaRenderer0);
      LegendTitle legendTitle1 = (LegendTitle)legendTitle0.clone();
      legendTitle0.setWidth(1094.41162314);
      boolean boolean0 = legendTitle0.equals(legendTitle1);
      assertEquals(1094.41162314, legendTitle0.getWidth(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) xYStepAreaRenderer0);
      LegendTitle legendTitle1 = (LegendTitle)legendTitle0.clone();
      boolean boolean0 = legendTitle0.equals(legendTitle1);
      assertTrue(boolean0);
      assertEquals(0.0, legendTitle1.getWidth(), 0.01);
      assertEquals(0.0, legendTitle1.getHeight(), 0.01);
      assertNotSame(legendTitle1, legendTitle0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) xYStepAreaRenderer0);
      LegendTitle legendTitle1 = (LegendTitle)legendTitle0.clone();
      assertTrue(legendTitle1.equals((Object)legendTitle0));
      
      legendTitle0.setMargin(legendTitle1.DEFAULT_PADDING);
      boolean boolean0 = legendTitle0.equals(legendTitle1);
      assertFalse(legendTitle1.equals((Object)legendTitle0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(1860.9674864751307, 0.0);
      boolean boolean0 = emptyBlock0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1860.9674864751307, emptyBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(1988.0, 0.0);
      boolean boolean0 = emptyBlock0.equals(emptyBlock0);
      assertTrue(boolean0);
      assertEquals(1988.0, emptyBlock0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) xYStepAreaRenderer0);
      LegendTitle legendTitle1 = (LegendTitle)legendTitle0.clone();
      legendTitle1.setPadding((double) 1, Double.POSITIVE_INFINITY, 363.254, (-1.0));
      boolean boolean0 = legendTitle0.equals(legendTitle1);
      assertEquals(Double.POSITIVE_INFINITY, legendTitle1.getContentXOffset(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompositeTitle compositeTitle0 = new CompositeTitle();
      Size2D size2D0 = compositeTitle0.arrange((Graphics2D) null);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01);
      assertEquals(2.0, size2D0.width, 0.01);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01);
      assertEquals(2.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Color color0 = Color.magenta;
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        colorBlock0.toContentConstraint((RectangleConstraint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'c' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CenterArrangement centerArrangement0 = new CenterArrangement();
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) centerArrangement0);
      CompositeTitle compositeTitle0 = new CompositeTitle(blockContainer0);
      // Undeclared exception!
      try { 
        compositeTitle0.setBounds((Rectangle2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'bounds' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 0.0F, 0.0F);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      TextTitle textTitle0 = jFreeChart0.getTitle();
      textTitle0.setBounds(rectangle2D_Float0);
      assertEquals(0.0, textTitle0.getHeight(), 0.01);
      assertEquals(0.0, textTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setPadding((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setFrame((BlockFrame) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'frame' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      // Undeclared exception!
      try { 
        abstractBlock0.setMargin((RectangleInsets) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'margin' argument.
         //
         verifyException("org.jfree.chart.block.AbstractBlock", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextBox textBox0 = new TextBox();
      Color color0 = (Color)textBox0.getShadowPaint();
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (-123.63677319420553), 0.0);
      double double0 = colorBlock0.getContentYOffset();
      assertEquals((-123.63677319420553), colorBlock0.getWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      double double0 = legendTitle0.getContentXOffset();
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(3.0, double0, 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) deviationRenderer0, (Arrangement) columnArrangement0, (Arrangement) columnArrangement0);
      legendTitle0.setMargin((-32.826856210766366), 985.2627356, (-3134.4979127815673), (-3134.4979127815673));
      legendTitle0.getMargin();
      assertEquals((-31.826856210766366), legendTitle0.getContentYOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LabelBlock labelBlock0 = new LabelBlock("");
      labelBlock0.getID();
      assertEquals(0.0, labelBlock0.getWidth(), 0.01);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      ColumnArrangement columnArrangement0 = new ColumnArrangement();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) deviationRenderer0, (Arrangement) columnArrangement0, (Arrangement) columnArrangement0);
      legendTitle0.getMargin();
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EmptyBlock emptyBlock0 = new EmptyBlock(1860.9674864751307, 0.0);
      emptyBlock0.setPadding(0.0, 0.0, 0.0, (-1477.0));
      RectangleInsets rectangleInsets0 = emptyBlock0.getPadding();
      assertEquals((-1477.0), rectangleInsets0.getRight(), 0.01);
      assertEquals(1860.9674864751307, emptyBlock0.getWidth(), 0.01);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) null, (Arrangement) borderArrangement0, (Arrangement) borderArrangement0);
      legendTitle0.setID("5m0u7]cyp o");
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) defaultValueDataset0);
      JFreeChart jFreeChart0 = new JFreeChart("", (Plot) meterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(2936, (int) (short)1307, chartRenderingInfo0);
      assertEquals(2936, bufferedImage0.getTileWidth());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      AbstractBlock abstractBlock0 = new AbstractBlock();
      Size2D size2D0 = abstractBlock0.arrange((Graphics2D) null);
      assertEquals(0.0, size2D0.width, 0.01);
      assertEquals(0.0, size2D0.height, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeCategoryPlot0);
      LegendTitle legendTitle0 = jFreeChart0.getLegend();
      legendTitle0.getBounds();
      assertEquals(0.0, legendTitle0.getHeight(), 0.01);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01);
  }
}
