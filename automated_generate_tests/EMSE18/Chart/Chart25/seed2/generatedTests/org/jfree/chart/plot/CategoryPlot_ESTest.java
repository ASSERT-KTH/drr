/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 17 21:54:05 GMT 2017
 */

package org.jfree.chart.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGState;
import com.lowagie.text.pdf.PdfName;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Area;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Collection;
import java.util.List;
import java.util.TimeZone;
import javax.swing.JViewport;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PlotState;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.PaintScale;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.Dataset;
import org.jfree.data.general.DatasetChangeEvent;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CategoryPlot_ESTest extends CategoryPlot_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1205.3116602), "Encrypt");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) cyclicNumberAxis0);
      combinedRangeCategoryPlot0.setRangeAxis(500, (ValueAxis) cyclicNumberAxis0);
      assertEquals(501, combinedRangeCategoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      combinedRangeCategoryPlot0.setDomainAxisLocation(axisLocation0, false);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.mapDatasetToDomainAxis(16, 16);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("t9RhHCjy&#>RktXJ=d");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) logAxis0);
      combinedRangeCategoryPlot0.setRangeAxisLocation(500, (AxisLocation) null);
      assertFalse(combinedRangeCategoryPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2668.0), "bZrI{kKSYp'i/vf");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) cyclicNumberAxis0);
      combinedRangeCategoryPlot0.setWeight((-2074));
      int int0 = combinedRangeCategoryPlot0.getWeight();
      assertEquals((-2074), int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-665));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateAxis dateAxis0 = new DateAxis((String) null, (TimeZone) zoneInfo0);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) taskSeriesCollection0, (CategoryAxis) extendedCategoryAxis0, (ValueAxis) dateAxis0, (CategoryItemRenderer) barRenderer3D0);
      BarRenderer3D barRenderer3D1 = (BarRenderer3D)categoryPlot0.getRendererForDataset(taskSeriesCollection0);
      assertNotNull(barRenderer3D1);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.05);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultKeyedValues2DDataset0, categoryAxis0, (ValueAxis) numberAxis0, (CategoryItemRenderer) stackedAreaRenderer0);
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)categoryPlot0.getRenderer();
      assertNotNull(stackedAreaRenderer1);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      combinedDomainCategoryPlot0.setRangeCrosshairValue(0.05, true);
      double double0 = combinedDomainCategoryPlot0.getRangeCrosshairValue();
      assertEquals(0.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 1.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      NumberAxis numberAxis1 = (NumberAxis)combinedRangeCategoryPlot0.getRangeAxisForDataset(20);
      assertEquals(0.0, numberAxis1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("4}9t)");
      DateAxis dateAxis0 = new DateAxis();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, (CategoryAxis) categoryAxis3D0, (ValueAxis) dateAxis0, (CategoryItemRenderer) stackedBarRenderer3D0);
      dateAxis0.setLowerBound(3.0);
      DateAxis dateAxis1 = (DateAxis)categoryPlot0.getRangeAxisForDataset(775);
      assertNull(dateAxis1.getLabel());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("4}9t)");
      DateAxis dateAxis0 = new DateAxis();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, (CategoryAxis) categoryAxis3D0, (ValueAxis) dateAxis0, (CategoryItemRenderer) stackedBarRenderer3D0);
      DateAxis dateAxis1 = (DateAxis)categoryPlot0.getRangeAxisForDataset(775);
      assertNotNull(dateAxis1);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.clearRangeAxes();
      int int0 = categoryPlot0.getRangeAxisCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getRangeAxis();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setVerticalTickLabels(true);
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, categoryAxis0, (ValueAxis) numberAxis3D0, (CategoryItemRenderer) groupedStackedBarRenderer0);
      categoryPlot0.getRangeAxis();
      assertEquals(5.0E-9, numberAxis3D0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, categoryAxis0, (ValueAxis) numberAxis3D0, (CategoryItemRenderer) stackedBarRenderer0);
      NumberAxis3D numberAxis3D1 = (NumberAxis3D)categoryPlot0.getRangeAxis();
      assertNull(numberAxis3D1.getLabelToolTip());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultStatisticalCategoryDataset0, categoryAxis0, (ValueAxis) cyclicNumberAxis0, (CategoryItemRenderer) waterfallBarRenderer0);
      categoryPlot0.getIndexOf(waterfallBarRenderer0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      int int0 = combinedDomainCategoryPlot0.getDomainAxisIndex(extendedCategoryAxis0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxisForDataset((-1));
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.clearDomainAxes();
      categoryPlot0.getDomainAxisCount();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoomRangeAxes((-2186.4506), plotRenderingInfo0, (Point2D) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'source' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.zoomRangeAxes((double) 88, (double) 88, (PlotRenderingInfo) null, (Point2D) point0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'info' argument.
         //
         verifyException("org.jfree.chart.plot.CombinedDomainCategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(" _sP|");
      combinedDomainCategoryPlot0.setDomainAxis(64257, (CategoryAxis) subCategoryAxis0);
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[1];
      // Undeclared exception!
      combinedDomainCategoryPlot0.setRenderers(categoryItemRendererArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setRenderers((CategoryItemRenderer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("t9RhHCjy&#>RktXJ=d");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) logAxis0);
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setRangeAxisLocation((AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("'=6V=\"O6C");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) periodAxis0);
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setRangeAxis((-2799), (ValueAxis) periodAxis0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis("underline", stringArray0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) symbolAxis0);
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setRangeAxis((-514), (ValueAxis) symbolAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setRangeAxes((ValueAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setDomainAxisLocation((-17), axisLocation0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setDomainAxis((-54), (CategoryAxis) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, (String) null);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) cyclicNumberAxis0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Category Plot");
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setDomainAxis((-3271), (CategoryAxis) subCategoryAxis0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setDomainAxes((CategoryAxis[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.handleClick((-54), (-54), (PlotRenderingInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      PlotState plotState0 = new PlotState();
      // Undeclared exception!
      try { 
        categoryPlot0.draw((Graphics2D) null, (Rectangle2D) null, point2D_Float0, plotState0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.addRangeMarker((Marker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("cBL");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis3D0);
      Layer layer0 = Layer.BACKGROUND;
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.addRangeMarker(2, (Marker) null, layer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        categoryPlot0.addDomainMarker((CategoryMarker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) 2.0F, 7.0);
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CategoryPlot categoryPlot0 = null;
      try {
        categoryPlot0 = new CategoryPlot((CategoryDataset) defaultIntervalCategoryDataset0, (CategoryAxis) categoryAxis3D0, (ValueAxis) cyclicNumberAxis0, (CategoryItemRenderer) stackedBarRenderer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      ModuloAxis moduloAxis0 = new ModuloAxis("Y@&C^|Q464Ar8ELm", (Range) null);
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      CategoryPlot categoryPlot0 = null;
      try {
        categoryPlot0 = new CategoryPlot((CategoryDataset) defaultIntervalCategoryDataset0, (CategoryAxis) subCategoryAxis0, (ValueAxis) moduloAxis0, (CategoryItemRenderer) categoryStepRenderer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'range' argument.
         //
         verifyException("org.jfree.chart.axis.ValueAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[8];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) 3);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryPlot categoryPlot0 = null;
      try {
        categoryPlot0 = new CategoryPlot((CategoryDataset) defaultIntervalCategoryDataset0, (CategoryAxis) categoryAxis3D0, (ValueAxis) cyclicNumberAxis0, (CategoryItemRenderer) stackedBarRenderer3D0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryPlot categoryPlot1 = (CategoryPlot)categoryPlot0.clone();
      assertTrue(categoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot1.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setAnchorValue((-515.0488807186764), true);
      assertEquals((-515.0488807186764), combinedDomainCategoryPlot0.getAnchorValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) taskSeriesCollection0, categoryAxis0, (ValueAxis) numberAxis3D0, (CategoryItemRenderer) minMaxCategoryRenderer0);
      categoryPlot0.getDataRange(numberAxis3D0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getDataRange((ValueAxis) null);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.clearRangeMarkers(0);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.clearRangeMarkers(203);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Layer layer0 = Layer.FOREGROUND;
      Collection collection0 = combinedDomainCategoryPlot0.getRangeMarkers((-1), layer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) true, combinedDomainCategoryPlot0.DEFAULT_GRIDLINE_PAINT, extendedCategoryAxis0.DEFAULT_TICK_MARK_STROKE);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainCategoryPlot0.addRangeMarker(343, (Marker) categoryMarker0, layer0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, categoryAxis0, (ValueAxis) numberAxis3D0, (CategoryItemRenderer) stackedBarRenderer0);
      Layer layer0 = Layer.BACKGROUND;
      Collection collection0 = categoryPlot0.getDomainMarkers(500, layer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      Layer layer0 = Layer.BACKGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) 10.0);
      combinedRangeCategoryPlot0.addDomainMarker(500, categoryMarker0, layer0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) false, categoryPlot0.DEFAULT_BACKGROUND_PAINT, categoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      categoryPlot0.addDomainMarker(0, categoryMarker0, layer0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(30, 0, (Number) 1.0F);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent((Object) waferMapDataset0, (Dataset) waferMapDataset0);
      combinedDomainCategoryPlot0.datasetChanged(datasetChangeEvent0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) false, oHLCDataItemArray0);
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent((Object) combinedRangeCategoryPlot0, (Dataset) defaultOHLCDataset0);
      combinedRangeCategoryPlot0.datasetChanged(datasetChangeEvent0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryItemRenderer categoryItemRenderer0 = combinedDomainCategoryPlot0.getRendererForDataset((CategoryDataset) null);
      assertNull(categoryItemRenderer0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setRenderer(2722, (CategoryItemRenderer) null, true);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      categoryPlot0.setRenderer(15, (CategoryItemRenderer) stackedBarRenderer3D0, false);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setRenderer((-1), (CategoryItemRenderer) stackedBarRenderer3D0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      combinedDomainCategoryPlot0.getRenderer((-1));
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getRenderer(88);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      combinedDomainCategoryPlot0.setDataset(428, (CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-2668.0), "bZrI{kKSYp'i/vf");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) cyclicNumberAxis0);
      combinedRangeCategoryPlot0.getDataset((-2074));
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1205.3116602), "Encrypt");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) cyclicNumberAxis0);
      combinedRangeCategoryPlot0.configureRangeAxes();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.configureRangeAxes();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(203);
      categoryPlot0.setRangeAxisLocation(203, axisLocation0, false);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      LookupPaintScale lookupPaintScale0 = (LookupPaintScale)xYBlockRenderer0.getPaintScale();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2752.923427);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) lookupPaintScale0, (ValueAxis) cyclicNumberAxis0);
      AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
      combinedRangeCategoryPlot0.setRangeAxisLocation(0, axisLocation0, true);
      assertFalse(combinedRangeCategoryPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation0 = categoryPlot0.getDomainAxisLocation();
      // Undeclared exception!
      try { 
        categoryPlot0.setRangeAxisLocation((-598), axisLocation0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation(0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getRangeAxisLocation(1);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("BB1w?\"H~5");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'annotation' argument.");
      combinedDomainCategoryPlot0.setRangeAxis(148, (ValueAxis) logarithmicAxis0, true);
      int int0 = combinedDomainCategoryPlot0.getRangeAxisIndex(logarithmicAxis0);
      assertEquals(149, combinedDomainCategoryPlot0.getRangeAxisCount());
      assertEquals(148, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setRangeAxis(433, (ValueAxis) null, false);
      assertEquals(434, categoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      PeriodAxis periodAxis0 = new PeriodAxis("dL");
      // Undeclared exception!
      categoryPlot0.setRangeAxis(10924, (ValueAxis) periodAxis0, true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getRangeAxis(2);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      combinedRangeCategoryPlot0.getRangeAxis((-1711));
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.05);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultKeyedValues2DDataset0, categoryAxis0, (ValueAxis) numberAxis0, (CategoryItemRenderer) stackedAreaRenderer0);
      categoryPlot0.configureDomainAxes();
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.configureDomainAxes();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("");
      NumberAxis numberAxis0 = new NumberAxis();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis0, (ValueAxis) numberAxis0, (CategoryItemRenderer) stackedBarRenderer3D0);
      RectangleEdge rectangleEdge0 = categoryPlot0.getDomainAxisEdge(1);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation();
      combinedDomainCategoryPlot0.setDomainAxisLocation(0, axisLocation0, true);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation0 = categoryPlot0.getDomainAxisLocation(0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setDomainAxis(238, (CategoryAxis) null, true);
      assertEquals(239, categoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      categoryPlot0.setDomainAxis(48, (CategoryAxis) extendedCategoryAxis0, true);
      assertEquals(49, categoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      combinedDomainCategoryPlot0.setDomainAxis(0, (CategoryAxis) categoryAxis3D0, false);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.getDomainAxis((-54));
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("f|l[");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis(500);
      assertNull(categoryAxis0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      categoryPlot0.setOrientation(plotOrientation0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, categoryAxis0, (ValueAxis) null, (CategoryItemRenderer) minMaxCategoryRenderer0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultIntervalCategoryDataset0, (CategoryAxis) null, (ValueAxis) numberAxis0, (CategoryItemRenderer) lineAndShapeRenderer0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("/F ");
      combinedDomainCategoryPlot0.setDomainAxis((CategoryAxis) extendedCategoryAxis0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getDataset();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1205.3116602), "Encrypt");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) cyclicNumberAxis0);
      boolean boolean0 = combinedRangeCategoryPlot0.isDomainZoomable();
      assertFalse(boolean0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.mapDatasetToDomainAxis((-2060), (-2060));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.mapDatasetToRangeAxis(2783, 97);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      boolean boolean0 = categoryPlot0.isRangeZoomable();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      combinedDomainCategoryPlot0.setRangeAxisLocation(axisLocation0, true);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) 1.0F);
      Layer layer0 = Layer.FOREGROUND;
      categoryPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.isRangeCrosshairVisible();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      LogAxis logAxis0 = new LogAxis();
      // Undeclared exception!
      combinedDomainCategoryPlot0.setRangeAxis(65536, (ValueAxis) logAxis0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, categoryAxis0, (ValueAxis) numberAxis3D0, (CategoryItemRenderer) stackedBarRenderer0);
      CategoryPlot categoryPlot1 = (CategoryPlot)categoryPlot0.clone();
      assertEquals(1, categoryPlot1.getRangeAxisCount());
      assertEquals(1, categoryPlot0.getRangeAxisCount());
      assertEquals(1, categoryPlot1.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) 1.0F);
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[1];
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      categoryItemRendererArray0[0] = (CategoryItemRenderer) stackedBarRenderer3D0;
      combinedDomainCategoryPlot0.setRenderers(categoryItemRendererArray0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      
      combinedDomainCategoryPlot1.setAxisOffset(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
      combinedDomainCategoryPlot1.setRenderer((CategoryItemRenderer) stackedBarRenderer3D0);
      assertFalse(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[1];
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      categoryItemRendererArray0[0] = (CategoryItemRenderer) stackedBarRenderer3D0;
      combinedDomainCategoryPlot0.setRenderers(categoryItemRendererArray0);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      combinedDomainCategoryPlot1.setRenderer((CategoryItemRenderer) stackedBarRenderer3D0);
      assertEquals(1, combinedDomainCategoryPlot0.getDomainAxisCount());
      assertTrue(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertEquals(1, combinedDomainCategoryPlot1.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (double) 1.0F);
      boolean boolean0 = categoryPlot0.equals(point2D_Double0);
      assertFalse(boolean0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setAnchorValue((-515.0488807186764), false);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      categoryPlot0.zoomRangeAxes((-787.980966641), 2890.5969937, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      JViewport jViewport0 = new JViewport();
      Point point0 = jViewport0.getViewPosition();
      combinedRangeCategoryPlot0.zoomRangeAxes(0.0, (double) 1.0F, plotRenderingInfo0, (Point2D) point0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double(0.65, (-1.0));
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      combinedRangeCategoryPlot0.zoomRangeAxes(3194.0861271737663, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      Point2D.Double point2D_Double0 = new Point2D.Double((double) 1.0F, (double) 1);
      categoryPlot0.zoomRangeAxes((double) stackedAreaRenderer0.ZERO, (PlotRenderingInfo) null, (Point2D) point2D_Double0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) taskSeriesCollection0, categoryAxis0, (ValueAxis) numberAxis3D0, (CategoryItemRenderer) minMaxCategoryRenderer0);
      List list0 = categoryPlot0.getCategories();
      assertNotNull(list0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-665));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateAxis dateAxis0 = new DateAxis((String) null, (TimeZone) zoneInfo0);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) taskSeriesCollection0, (CategoryAxis) extendedCategoryAxis0, (ValueAxis) dateAxis0, (CategoryItemRenderer) barRenderer3D0);
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      categoryPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(2, categoryPlot0.getRangeAxisCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      List list0 = categoryPlot0.getCategoriesForAxis((CategoryAxis) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis("Null 'paint' argument.");
      LogAxis logAxis0 = new LogAxis("Null 'paint' argument.");
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultCategoryDataset0, categoryAxis0, (ValueAxis) logAxis0, (CategoryItemRenderer) null);
      LogAxis logAxis1 = (LogAxis)categoryPlot0.getRangeAxis();
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertNotNull(logAxis1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      categoryPlot0.drawRangeCrosshair((Graphics2D) null, rectangle2D_Float0, (PlotOrientation) null, (-4827.3573617), numberAxis3D0, numberAxis3D0.DEFAULT_TICK_MARK_STROKE, numberAxis3D0.DEFAULT_AXIS_LABEL_PAINT);
      assertTrue(categoryPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("6rTsC");
      Color color0 = Color.BLUE;
      // Undeclared exception!
      try { 
        categoryPlot0.drawRangeCrosshair((Graphics2D) null, rectangle2D_Float0, plotOrientation0, 0.0F, logarithmicAxis0, logarithmicAxis0.DEFAULT_TICK_MARK_STROKE, color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) periodAxis0);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((float) (-2757), (-2473.84F), 1.0F, 4391.2944F);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)periodAxis0.DEFAULT_TICK_LABEL_INSETS.createOutsetRectangle((Rectangle2D) rectangle2D_Float0, true, false);
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.drawRangeLine((Graphics2D) null, rectangle2D_Double0, (-1.0), periodAxis0.DEFAULT_AXIS_LINE_STROKE, periodAxis0.DEFAULT_TICK_LABEL_PAINT);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      categoryPlot0.drawAnnotations((Graphics2D) null, rectangle2D_Float0, plotRenderingInfo0);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      categoryPlot0.drawDomainGridlines((Graphics2D) null, rectangle2D_Float0);
      assertFalse(categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      categoryPlot0.drawAxes((Graphics2D) null, rectangle2D_Float0, rectangle2D_Float0, plotRenderingInfo0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      PlotState plotState0 = new PlotState();
      categoryPlot0.draw((Graphics2D) null, rectangle2D_Float0, point2D_Float0, plotState0, plotRenderingInfo0);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Area area0 = new Area(categoryPlot0.DEFAULT_LEGEND_ITEM_BOX);
      Rectangle rectangle0 = area0.getBounds();
      AxisSpace axisSpace0 = categoryPlot0.calculateRangeAxisSpace((Graphics2D) null, rectangle0, (AxisSpace) null);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(axisSpace0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setDrawSharedDomainAxis(true);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      // Undeclared exception!
      try { 
        categoryPlot0.calculateAxisSpace((Graphics2D) null, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Martin Cordova");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) subCategoryAxis0);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Martin Cordova", (Comparable) 0.05, 7.0, 0.05);
      combinedDomainCategoryPlot0.addAnnotation(categoryPointerAnnotation0);
      boolean boolean0 = combinedDomainCategoryPlot0.removeAnnotation(categoryPointerAnnotation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.removeAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      PolarPlot polarPlot0 = new PolarPlot();
      BasicStroke basicStroke0 = (BasicStroke)polarPlot0.getRadiusGridlineStroke();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation((Comparable) 1.0F, (double) 1, (Comparable) 1.0F, 0.0, ganttRenderer0.DEFAULT_OUTLINE_PAINT, (Stroke) basicStroke0);
      categoryPlot0.removeAnnotation(categoryLineAnnotation0);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("F_q68{],M[sZ>", (Comparable) 1.0F, (double) 1.0F);
      categoryPlot0.addAnnotation(categoryTextAnnotation0);
      categoryPlot0.getAnnotations();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setRangeCrosshairPaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      PolarPlot polarPlot0 = new PolarPlot();
      categoryPlot0.setRangeCrosshairPaint(polarPlot0.DEFAULT_BACKGROUND_PAINT);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      
      combinedDomainCategoryPlot0.setRangeCrosshairLockedOnData(false);
      assertFalse(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setRangeCrosshairLockedOnData(true);
      assertEquals(10, Plot.MINIMUM_HEIGHT_TO_DRAW);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setRangeCrosshairVisible(true);
      assertTrue(categoryPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      combinedDomainCategoryPlot0.setRangeCrosshairVisible(false);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Layer layer0 = Layer.BACKGROUND;
      Collection collection0 = categoryPlot0.getRangeMarkers(layer0);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getRangeMarkers((-2143960149), (Layer) null);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Layer layer0 = Layer.BACKGROUND;
      Collection collection0 = categoryPlot0.getRangeMarkers(1, layer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      IntervalMarker intervalMarker0 = new IntervalMarker(0.05, 2386.4643);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainCategoryPlot0.addRangeMarker(500, (Marker) intervalMarker0, layer0);
      combinedDomainCategoryPlot0.clearRangeMarkers();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Layer layer0 = Layer.BACKGROUND;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) false);
      categoryPlot0.addRangeMarker(0, (Marker) categoryMarker0, layer0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) true);
      combinedDomainCategoryPlot0.addRangeMarker((-436), (Marker) categoryMarker0, (Layer) null);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) 10);
      Layer layer0 = Layer.FOREGROUND;
      combinedDomainCategoryPlot0.addDomainMarker(categoryMarker0, layer0);
      combinedDomainCategoryPlot0.clearDomainMarkers(0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) 10);
      Layer layer0 = Layer.BACKGROUND;
      combinedDomainCategoryPlot0.addDomainMarker(categoryMarker0, layer0);
      combinedDomainCategoryPlot0.clearDomainMarkers(0);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) 1.0F, categoryPlot0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_OUTLINE_STROKE);
      Layer layer0 = Layer.FOREGROUND;
      categoryPlot0.addDomainMarker(categoryMarker0, layer0);
      Collection collection0 = categoryPlot0.getDomainMarkers(layer0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Layer layer0 = Layer.BACKGROUND;
      Collection collection0 = combinedRangeCategoryPlot0.getDomainMarkers(layer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Layer layer0 = Layer.FOREGROUND;
      categoryPlot0.getDomainMarkers(10, layer0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.clearDomainMarkers();
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'order' argument.");
      PdfName pdfName0 = PdfGState.BM_COLORDODGE;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) pdfName0, combinedRangeCategoryPlot0.DEFAULT_OUTLINE_PAINT, logarithmicAxis0.DEFAULT_TICK_MARK_STROKE, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_PAINT, combinedRangeCategoryPlot0.DEFAULT_CROSSHAIR_STROKE, 1.0F);
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.addDomainMarker(500, categoryMarker0, (Layer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) null);
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.addDomainMarker(1577, (CategoryMarker) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent((Object) categoryPlot0);
      categoryPlot0.rendererChanged(rendererChangeEvent0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.zoom(10.0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.zoom((-608.474833));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) categoryPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, false, true, false, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      categoryPlot0.handleClick(0, (-2138), plotRenderingInfo0);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      LegendItemCollection legendItemCollection0 = categoryPlot0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setRangeGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      Color color0 = (Color)stackedAreaRenderer0.getItemOutlinePaint(238, 238);
      categoryPlot0.setRangeGridlinePaint(color0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setRangeGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      combinedDomainCategoryPlot0.setRangeGridlineStroke(categoryAxis3D0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setRangeGridlinesVisible(false);
      assertFalse(combinedDomainCategoryPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setRangeGridlinesVisible(true);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setDomainGridlinePaint((Paint) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setDomainGridlinePaint(categoryPlot0.DEFAULT_OUTLINE_PAINT);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setDomainGridlineStroke((Stroke) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_GRIDLINE_STROKE;
      categoryPlot0.setDomainGridlineStroke(basicStroke0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setDomainGridlinePosition((CategoryAnchor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'position' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAnchor categoryAnchor0 = categoryPlot0.getDomainGridlinePosition();
      categoryPlot0.setDomainGridlinePosition(categoryAnchor0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setDomainGridlinesVisible(true);
      assertTrue(combinedRangeCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setDomainGridlinesVisible(false);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setRowRenderingOrder((SortOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      categoryPlot0.setRowRenderingOrder(sortOrder0);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      SortOrder sortOrder0 = categoryPlot0.getColumnRenderingOrder();
      categoryPlot0.setColumnRenderingOrder(sortOrder0);
      assertNull(categoryPlot0.getNoDataMessage());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setDatasetRenderingOrder((DatasetRenderingOrder) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) null);
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      combinedDomainCategoryPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      double[][] doubleArray0 = new double[8][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      combinedDomainCategoryPlot0.getRendererForDataset(defaultIntervalCategoryDataset0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, categoryAxis0, (ValueAxis) numberAxis3D0, (CategoryItemRenderer) groupedStackedBarRenderer0);
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(true, false);
      categoryPlot0.setRenderer((CategoryItemRenderer) lineAndShapeRenderer0, false);
      assertEquals(5.0E-9, numberAxis3D0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getRangeAxisForDataset(0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      CategoryAxis categoryAxis0 = categoryPlot0.getDomainAxisForDataset(0);
      categoryPlot0.setRangeCrosshairStroke(categoryAxis0.DEFAULT_TICK_MARK_STROKE);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getDataset(899);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("'=6V=\"O6C");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) periodAxis0);
      combinedRangeCategoryPlot0.clearRangeAxes();
      assertTrue(combinedRangeCategoryPlot0.isRangeZoomable());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.setRangeAxisLocation(0, (AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      combinedDomainCategoryPlot0.getRangeAxisEdge(3);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      DateAxis dateAxis0 = new DateAxis("Null 'paint' argument.");
      int int0 = combinedDomainCategoryPlot0.getRangeAxisIndex(dateAxis0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      int int0 = combinedDomainCategoryPlot0.getRangeAxisIndex((ValueAxis) null);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, int0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.clearRangeAxes();
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      categoryPlot0.getDataRange(numberAxis3D0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("}cFRPVG%z");
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, (CategoryAxis) subCategoryAxis0, (ValueAxis) numberAxis0, (CategoryItemRenderer) lineRenderer3D0);
      categoryPlot0.clearDomainAxes();
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setDomainAxisLocation((AxisLocation) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation(9);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(axisLocation0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      CategoryAxis[] categoryAxisArray0 = new CategoryAxis[8];
      categoryAxisArray0[0] = (CategoryAxis) categoryAxis3D0;
      combinedDomainCategoryPlot0.setDomainAxes(categoryAxisArray0);
      assertEquals(8, combinedDomainCategoryPlot0.getDomainAxisCount());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxis();
      assertTrue(Axis.DEFAULT_TICK_LABELS_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.clearDomainAxes();
      categoryPlot0.getDomainAxis();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      // Undeclared exception!
      try { 
        categoryPlot0.setOrientation((PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      combinedRangeCategoryPlot0.getDomainGridlineStroke();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedRangeAxisSpace();
      assertNull(axisSpace0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      int int0 = combinedRangeCategoryPlot0.getDomainAxisIndex((CategoryAxis) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.clearAnnotations();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getFixedLegendItems();
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getCategories();
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      boolean boolean0 = categoryPlot0.isRangeCrosshairLockedOnData();
      assertTrue(boolean0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Point2D.Float point2D_Float0 = new Point2D.Float(1807.9F, 0.0F);
      combinedRangeCategoryPlot0.zoomDomainAxes(0.0, 0.0, plotRenderingInfo0, (Point2D) point2D_Float0);
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      Color color0 = (Color)combinedDomainCategoryPlot0.getDomainGridlinePaint();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(255, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getPlotType();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setRangeCrosshairValue(2271.697146095);
      assertEquals(2271.697146095, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Color color0 = (Color)categoryPlot0.getRangeCrosshairPaint();
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertEquals(-16776961, color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      Number[][] numberArray0 = new Number[4][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      combinedDomainCategoryPlot0.setDataset((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AreaRenderer areaRenderer0 = new AreaRenderer();
      LegendItemCollection legendItemCollection0 = areaRenderer0.getLegendItems();
      categoryPlot0.setFixedLegendItems(legendItemCollection0);
      assertTrue(CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      boolean boolean0 = categoryPlot0.isDomainGridlinesVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainCategoryPlot0.getRangeGridlineStroke();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(2, basicStroke0.getLineJoin());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getRangeCrosshairValue();
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      boolean boolean0 = combinedDomainCategoryPlot0.isRangeGridlinesVisible();
      assertTrue(boolean0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getDomainAxisEdge();
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      SortOrder sortOrder0 = combinedDomainCategoryPlot0.getRowRenderingOrder();
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("9d]82`A=dJ");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      combinedDomainCategoryPlot0.setRenderer(425, (CategoryItemRenderer) ganttRenderer0);
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      int int0 = combinedDomainCategoryPlot0.getWeight();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      combinedDomainCategoryPlot0.getFixedDomainAxisSpace();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      int int0 = categoryPlot0.getDomainAxisCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'order' argument.");
      combinedRangeCategoryPlot0.setRangeAxis((ValueAxis) logarithmicAxis0);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      Layer layer0 = Layer.FOREGROUND;
      Collection collection0 = combinedRangeCategoryPlot0.getRangeMarkers(layer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DatasetRenderingOrder datasetRenderingOrder0 = categoryPlot0.getDatasetRenderingOrder();
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) true, categoryAxis3D0.DEFAULT_AXIS_LINE_PAINT, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedDomainCategoryPlot0.addDomainMarker(categoryMarker0);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      combinedRangeCategoryPlot0.setAnchorValue(1590.0);
      assertEquals(1590.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation((-54));
      combinedDomainCategoryPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.setFixedRangeAxisSpace((AxisSpace) null);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.setFixedDomainAxisSpace((AxisSpace) null);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getDrawSharedDomainAxis();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      combinedDomainCategoryPlot0.getDomainMarkers((Layer) null);
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      RectangleInsets rectangleInsets0 = categoryPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01);
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation0 = categoryPlot0.getDomainAxisLocation();
      categoryPlot0.setRangeAxisLocation(axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      combinedDomainCategoryPlot0.getAnchorValue();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      categoryPlot0.getRangeAxisCount();
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      AxisLocation axisLocation0 = categoryPlot0.getRangeAxisLocation();
      categoryPlot0.setDomainAxisLocation(5, axisLocation0, false);
      assertEquals(1, categoryPlot0.getDatasetCount());
      assertTrue(categoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) true, categoryAxis3D0.DEFAULT_AXIS_LINE_PAINT, combinedDomainCategoryPlot0.DEFAULT_CROSSHAIR_STROKE);
      combinedDomainCategoryPlot0.addRangeMarker((Marker) categoryMarker0);
      assertEquals(1.0F, Plot.DEFAULT_FOREGROUND_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("f|l[");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      combinedRangeCategoryPlot0.getRangeCrosshairStroke();
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      combinedDomainCategoryPlot0.getAnnotations();
      assertEquals(1, combinedDomainCategoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis((String) null);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) 0.05);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultKeyedValues2DDataset0, categoryAxis0, (ValueAxis) numberAxis0, (CategoryItemRenderer) stackedAreaRenderer0);
      Color color0 = (Color)categoryPlot0.getRangeGridlinePaint();
      assertEquals(255, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      combinedDomainCategoryPlot0.getRenderer();
      assertTrue(combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SymbolAxis symbolAxis0 = new SymbolAxis("underline", stringArray0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) symbolAxis0);
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale();
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend((PaintScale) lookupPaintScale0, (ValueAxis) symbolAxis0);
      AxisLocation axisLocation0 = paintScaleLegend0.getAxisLocation();
      combinedRangeCategoryPlot0.setDomainAxisLocation(500, axisLocation0);
      assertEquals(1, combinedRangeCategoryPlot0.getDatasetCount());
      assertTrue(combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("Point2D.Double[0.0, 0.0]", categoryPlot0.DEFAULT_VALUE_LABEL_FONT, (Plot) categoryPlot0, false);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      categoryPlot0.zoomDomainAxes(0.0, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      categoryPlot0.calculateAxisSpace((Graphics2D) null, rectangle2D_Float0);
      assertEquals(1, categoryPlot0.getDatasetCount());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      int int0 = combinedDomainCategoryPlot0.getDatasetCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      // Undeclared exception!
      try { 
        combinedDomainCategoryPlot0.drawBackground((Graphics2D) null, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.plot.Plot", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      int int0 = combinedDomainCategoryPlot0.getIndexOf(stackedBarRenderer3D0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      // Undeclared exception!
      try { 
        combinedRangeCategoryPlot0.setRangeAxisLocation((-5), axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }
}
