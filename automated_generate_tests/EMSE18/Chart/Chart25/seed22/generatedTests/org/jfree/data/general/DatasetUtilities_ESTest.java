/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 21 20:04:06 GMT 2017
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Container;
import java.lang.reflect.Array;
import java.sql.Connection;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.SeriesDataset;
import org.jfree.data.general.SubSeriesDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1086);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      Comparable<Container>[] comparableArray0 = (Comparable<Container>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][0];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      defaultCategoryDataset0.setValue((-1923.690659174), (Comparable) day0, (Comparable) spreadsheetDate0);
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4332L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Null 'seriesKey' argument.");
      Day day0 = new Day((Date) mockDate0, (TimeZone) simpleTimeZone0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1.7976931348623157E308, (double) 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-206.912371734), (-206.912371734), 0, day0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Comparable<Container>[] comparableArray0 = (Comparable<Container>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[0][0];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1846.845617);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals((-923.4228085), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) (byte)126;
      numberArray1[1] = (Number) (byte)19;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(107.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-4238.188391372181));
      assertNotNull(range0);
      assertEquals((-4238.188391372181), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "Requires 'start' < 'end'.", numberArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) (byte)24);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1771, 1771);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1289.6921373720074, 1289.6921373720074, "");
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1289.6921373720074, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 5;
      numberArray1[1] = (Number) 3;
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "Requires 'start' < 'end'.", numberArray0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(2.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3434.457652073), 1.0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.addValue((-1605.3), (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 5;
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "Requires 'start' < 'end'.", numberArray0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("?A,O~*<={59%$o*+", "?A,O~*<={59%$o*+", doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3434.457652073), 1.0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.addValue((-1605.3), (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertEquals((-1605.3), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[4];
      numberArray1[1] = (Number) (byte)11;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(11.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][8];
      Number[] numberArray1 = new Number[2];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      numberArray2[0] = (Number) (-1);
      numberArray0[2] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][9];
      Number[] numberArray1 = new Number[8];
      numberArray1[2] = (Number) 1684890724;
      numberArray0[0] = numberArray1;
      numberArray0[1] = numberArray0[0];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("-X_]9s_lY", "PV<V/-KH&*)xgn", numberArray0);
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(3.369781448E9, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("l_Q=!c7cp_:$r", "l_Q=!c7cp_:$r", doubleArray0);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1757L));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add((-2009.00449818785), (-240.5376553901962), (Comparable) quarter0, (Comparable) quarter0);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals((-2009.00449818785), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[11];
      doubleArray1[1] = 1702.275;
      doubleArray0[1] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(1702.275, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-1810.2196048), (double) (byte)126);
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-710.6170350165784), 1919.0, 374, "BCXgiHqFZ<WEH*");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(2630.6170350165785, range0.getLength(), 0.01);
      assertEquals((-711.1170350165784), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4332L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Null 'seriesKey' argument.");
      Day day0 = new Day((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(day0.DEFAULT_TIME_ZONE);
      timeTableXYDataset0.add((TimePeriod) day0, (Number) (byte)8, "yb]0+.8B$18s", true);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertEquals(4332.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((Number) (byte)1, (Number) 3);
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      Float float0 = new Float(54.97F);
      xYSeries0.add((Number) 1110589746, (Number) float0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-1810.2196048), (double) (byte)126);
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-710.6170350165784), 1919.0, 374, "BCXgiHqFZ<WEH*");
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(604.1914824917108, range0.getCentralValue(), 0.01);
      assertEquals(1919.5, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[4];
      numberArray1[1] = (Number) (byte)11;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(5.5, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "ULPs/", doubleArray0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 2005);
      assertEquals(0, defaultPieDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1757L));
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 1);
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) mockDate0, 345.9, 46);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Number[] numberArray0 = new Number[5];
      numberArray0[4] = (Number) (byte)126;
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) "BCXgiHqFZ<WEH*", numberArray0[4]);
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "BCXgiHqFZ<WEH*", 1399.07257329);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("", 44, 44);
      matrixSeriesCollection0.addSeries(matrixSeries0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      int[] intArray0 = new int[2];
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset((SeriesDataset) xYSeriesCollection0, intArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) subSeriesDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Number[][] numberArray0 = new Number[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 3596.3141);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Number[][] numberArray0 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][5];
      Number[] numberArray1 = new Number[3];
      numberArray0[4] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Number[][] numberArray0 = new Number[9][7];
      Number[] numberArray1 = new Number[6];
      numberArray0[2] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[4] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[5];
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset((SeriesDataset) null, intArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) subSeriesDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.SubSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[5];
      doubleArray0[3] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset((SeriesDataset) null, 2);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(subSeriesDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.SubSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Number[][] numberArray0 = new Number[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("", 57, 57);
      matrixSeriesCollection0.addSeries(matrixSeries0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      // Undeclared exception!
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3527, 3527);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(212, second0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3177, 3177, (RegularTimePeriod) millisecond0, millisecond0.DEFAULT_TIME_ZONE);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("", 62, 62);
      matrixSeriesCollection0.addSeries(matrixSeries0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      // Undeclared exception!
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SubSeriesDataset subSeriesDataset0 = new SubSeriesDataset((SeriesDataset) null, 1249);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) subSeriesDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.SubSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Number[][] numberArray0 = new Number[4][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[4];
      numberArray0[1] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Number[][] numberArray0 = new Number[9][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Default Group", "Default Group", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) "Default Group");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-1470));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("<Lr3x-(K-.j'", "@d+UihBB<w[67u(Mf", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (-1169));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Number[][] numberArray0 = new Number[7][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) millisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.DefaultKeyedValues2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("?A,O~*<={59%$o*+", "?A,O~*<={59%$o*+", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) 2.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[][] doubleArray0 = new double[0][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-881));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][8];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Series", "Requires 'start' < 'end'.", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (-56));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultCategoryDataset0, tableOrder0, (-1));
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (-2.147483648E9), (-3631.234061297227), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Week week0 = new Week();
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) week0, (double) 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "FREQUENCY", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("accessibleTableRowDescriptionChanged", "nCT{ 2Q.P", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-3434.457652073), 1.0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.addValue((-1605.3), (Comparable) simpleHistogramBin0, (Comparable) simpleHistogramBin0);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultKeyedValues2DDataset0, tableOrder0, 941);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 941, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultCategoryDataset0, tableOrder0, (-1));
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (-1691.094508);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, Double.NaN);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, Double.NaN);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 1667785060;
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "Requires 'start' < 'end'.", numberArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[5];
      numberArray1[2] = (Number) (byte)19;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[22];
      numberArray1[0] = (Number) (byte)126;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("", 44, 44);
      matrixSeriesCollection0.addSeries(matrixSeries0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4332L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Null 'seriesKey' argument.");
      Day day0 = new Day((Date) mockDate0, (TimeZone) simpleTimeZone0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(day0.DEFAULT_TIME_ZONE);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "Requires 'start' < 'end'.", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 1667785060);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1667785060, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1086);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) day0, 0.0, 0);
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-1.7976931348623157E308), (-1.7976931348623157E308), "");
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 1921);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NaN);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][5];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) (byte)14;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(14.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1086);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      Comparable<Container>[] comparableArray0 = (Comparable<Container>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][0];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      defaultCategoryDataset0.addValue(1.7976931348623157E308, (Comparable) spreadsheetDate0, (Comparable) day0);
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Null 'range' argument.", "Null 'range' argument.", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1086);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      Comparable<Container>[] comparableArray0 = (Comparable<Container>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][0];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      defaultCategoryDataset0.setValue((-1923.690659174), (Comparable) day0, (Comparable) spreadsheetDate0);
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertEquals((-1923.690659174), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[11];
      doubleArray1[0] = (-2.147483648E9);
      doubleArray0[1] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((Comparable) 0.0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertEquals((-2.147483648E9), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[11];
      doubleArray1[1] = 1702.275;
      doubleArray0[1] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((Comparable) 0.0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertEquals(1702.275, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[11];
      doubleArray0[1] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((Comparable) 0.0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[11];
      doubleArray1[0] = (-2.147483648E9);
      doubleArray0[1] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.073741824E9), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[11];
      doubleArray1[1] = 1702.275;
      doubleArray0[1] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(1702.275, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[11];
      doubleArray0[1] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1757L));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) zoneInfo0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) quarter0, oHLCDataItemArray0);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) fixedMillisecond0);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "Requires 'start' < 'end'.", numberArray0);
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-1810.2196048), (double) (byte)126);
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-710.6170350165784), 1919.0, 374, "BCXgiHqFZ<WEH*");
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotNull(double0);
      assertEquals(1.9214125763663023E-193, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 817, (TimeZone) zoneInfo0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("[q.r'z*z6_9p", 5, 8);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("BuF", "BuF", doubleArray0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("", 44, 44);
      matrixSeriesCollection0.addSeries(matrixSeries0);
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) double0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(histogramDataset0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("", 44, 44);
      matrixSeriesCollection0.addSeries(matrixSeries0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(21.5, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-1.7976931348623157E308), (-1.7976931348623157E308), "");
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals((-1.7976931348623157E308), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Number[][] numberArray0 = new Number[9][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 1);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Day day0 = new Day();
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) day0, (KeyedValues) defaultPieDataset0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("", 44, 44);
      matrixSeriesCollection0.addSeries(matrixSeries0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-1810.2196048), (double) (byte)126);
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-710.6170350165784), 1919.0, 374, "BCXgiHqFZ<WEH*");
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1919.5, range0.getUpperBound(), 0.01);
      assertEquals(2630.6170350165785, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-732L));
      Hour hour0 = new Hour((Date) mockDate0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((Comparable) hour0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, (TimeZone) null);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-1810.2196048), (double) (byte)126);
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-710.6170350165784), 1919.0, 374, "BCXgiHqFZ<WEH*");
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockDate mockDate0 = new MockDate((long) (-1563));
      Year year0 = new Year((Date) mockDate0);
      Week week0 = new Week((-1563), year0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((Comparable) week0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 1667785060;
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "Requires 'start' < 'end'.", numberArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "Requires 'start' < 'end'.", numberArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals(3, defaultPieDataset0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1086);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) day0, 0.0, 0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-3910.5857), 1289.75142);
      Day day0 = new Day();
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1.7976931348623157E308), Double.POSITIVE_INFINITY, 2, day0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, Double.NEGATIVE_INFINITY, (byte)24, (-1), "Requires 'start' < 'end'.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(3950.1869464146475, (-465.2614080999));
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 6128.163171855501, (-465.2614080999), (-2839), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-486.4913435), (-486.4913435));
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-486.4913435), Double.NEGATIVE_INFINITY, 0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 3.0, 3872.76123468241, 0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.0, (-3248.8630219));
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, (-4485.4357429), 6.283185307179586, 2400, (-3248.8630219));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 17, 17, 0, 0);
      Minute minute0 = new Minute((Date) mockDate0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) minute0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][0];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Comparable<ChronoLocalDate>[] comparableArray0 = (Comparable<ChronoLocalDate>[]) Array.newInstance(Comparable.class, 3);
      double[][] doubleArray0 = new double[5][7];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1086);
      Comparable<ChronoLocalDate>[] comparableArray0 = (Comparable<ChronoLocalDate>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[1] = (Comparable<ChronoLocalDate>) spreadsheetDate0;
      comparableArray0[2] = (Comparable<ChronoLocalDate>) spreadsheetDate0;
      double[][] doubleArray0 = new double[5][7];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Comparable<ChronoLocalDate>[] comparableArray0 = (Comparable<ChronoLocalDate>[]) Array.newInstance(Comparable.class, 8);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1086);
      Day day0 = new Day((SerialDate) spreadsheetDate0);
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) day0, 0.0, 0);
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) spreadsheetDate0, (KeyedValues) defaultPieDataset1);
      assertNotNull(defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[11];
      doubleArray1[0] = (-2.147483648E9);
      doubleArray0[1] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 0);
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", 0.0, 31);
      assertEquals(3, defaultPieDataset1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[][] doubleArray0 = new double[9][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) 23.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 0);
      defaultPieDataset0.setValue((Comparable) (-2.147483648E9), 325.9368753533118);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", 0.0, 31);
      assertEquals(4, defaultPieDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) null, 2120.497241344179, 224);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "BCXgiHqFZ<WEH*", 1399.07257329);
      assertEquals(0, defaultPieDataset1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(2071.656584296433, Double.POSITIVE_INFINITY, true, true);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) simpleHistogramBin0);
      assertEquals(0, defaultPieDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) "v0");
      assertEquals(0, defaultPieDataset0.getItemCount());
  }
}
