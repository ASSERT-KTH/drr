/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 22:02:30 GMT 2017
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.addOrUpdate(1348.7672906, 1348.7672906);
      xYSeries0.add((Number) 59, (Number) 12, false);
      xYSeries0.add((Number) 59, (Number) (byte)5);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.addOrUpdate((double) 12, (double) 0);
      xYSeries0.hashCode();
      assertEquals(5, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.add((Number) 59, (Number) 12, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 59, (Number) (byte)5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.add((Number) 1094929490, (Number) 0);
      xYSeries0.add((Number) 59, (Number) 12, false);
      xYSeries0.add((Number) 59, (Number) (byte)3);
      assertEquals(3, xYSeries0.getItemCount());
      
      xYSeries0.update(59, 59);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2247, 2848, (-1978), 12, 1051);
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.add((Number) 59, (Number) 12, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 578);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.add((Number) 59, (Number) 12, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.add((double) 59, (Number) 0);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.setMaximumItemCount(1064);
      assertEquals(1064, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.add((Number) 23, (Number) 23);
      xYSeries0.remove((Number) 23);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 23, (Number) 0);
      xYSeries0.add(xYDataItem0, true);
      xYDataItem0.setY((-1154.84776224));
      xYSeries0.remove((Number) 23);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.add((double) 0, (double) 0, false);
      xYSeries0.remove((Number) 0);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 23, (Number) 0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.remove((Number) 23);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.add((Number) 0, (Number) 0);
      xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-585L));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.add((Number) 59, (Number) 12, false);
      xYSeries0.add((Number) 59, (Number) (byte)3);
      xYSeries0.addOrUpdate((double) 1294, (-1.0));
      int int0 = xYSeries0.indexOf(59);
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-585L));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.add((Number) 59, (Number) 12, false);
      xYSeries0.updateByIndex(0, 0);
      xYSeries0.getY(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.add((Number) 23, (Number) 23);
      xYSeries0.getY(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 2247, 2848, (-1978), 12, 1051);
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, false);
      xYSeries0.add((double) 2848, (-2585.5), false);
      Double double0 = (Double)xYSeries0.getX(0);
      assertEquals(2848.0, (double)double0, 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 23, (Number) 0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.add((Number) 23, (Number) 23);
      xYSeries0.getDataItem(0);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, false);
      xYSeries0.add((double) 40, 0.0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(40.0, xYDataItem0.getXValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, false, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertFalse(boolean0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertFalse(boolean0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(12, 0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(587.51528638, 980.12755);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, true);
      xYSeries0.add(980.12755, (Number) 1, true);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 2);
      assertTrue(xYSeries1.getAutoSort());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3317, 3317, 3317, 3317, 3317, 3317);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("First");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false, false);
      xYSeries0.addOrUpdate(0.0, (double) 59);
      xYSeries0.addOrUpdate(0.0, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3317, 3317, 3317, 3317, 3317, 3317);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("First");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false, false);
      xYSeries0.addOrUpdate((double) 59, (double) 59);
      xYSeries0.addOrUpdate((double) 59, (double) 59);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(587.51528638, 980.12755);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, true);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-611), 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-585L));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-1105));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 53);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(587.51528638, 980.12755);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Year year0 = new Year(2002);
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "Null 'item' argument.");
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-585L));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        xYSeries0.getY(1294);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1294, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) (-2117));
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-2117));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(587.51528638, 980.12755);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, true);
      xYSeries0.add(980.12755, (Number) 1, true);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-585L));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 12, (double) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.add((Number) 23, (Number) 23);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 23, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.add((Number) 23, (Number) 23);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries((Comparable) year0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-585L));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 59, (Number) 12, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-585L));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "Null 'item' argument.");
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "Null 'item' argument.");
      Object[] objectArray0 = new Object[3];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 334);
      java.util.Vector vector0 = defaultTableModel0.getDataVector();
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (Number) null, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.add((Number) 23, (Number) 23);
      int int0 = xYSeries0.indexOf(1684370275);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false, false);
      xYSeries0.add((double) 0, (double) 0);
      Double double0 = (Double)xYSeries0.getX(0);
      int int0 = xYSeries0.indexOf(double0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, int0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(587.51528638, 980.12755);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, true);
      xYSeries0.add(980.12755, (Number) 1, true);
      xYSeries0.add((Number) 2, (Number) 1482250784);
      xYSeries0.setMaximumItemCount(2);
      xYSeries0.addOrUpdate((Number) 24, (Number) 4);
      assertEquals(2, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries((Comparable) week0, false);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 23, (Number) 0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 23, (double) 0);
      xYSeries0.add(xYDataItem0, false);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      xYSeries0.add((Number) 23, (Number) 23);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      xYSeries0.add(xYDataItem0, false);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 23, (Number) 0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false, false);
      xYSeries0.add((double) 0, (-21.56988467976246));
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-566));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries((Comparable) fixedMillisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-847));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false, false);
      xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.add((Number) 23, (Number) 23);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      XYSeries xYSeries1 = new XYSeries((Comparable) xYDataItem0);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertFalse(boolean0);
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(587.51528638, 980.12755);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, false);
      boolean boolean0 = xYSeries0.equals(simpleHistogramBin0);
      assertFalse(boolean0);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.add((Number) 23, (Number) 23);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries0.remove(0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false, false);
      xYSeries0.add((double) 0, (double) 0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-322), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 17, true, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(17, 2);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.updateByIndex(2, 1918392666);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "}3c=6Jf4$(3h-");
      xYSeries0.add(0.0, (Number) null, true);
      xYSeries0.toArray();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) "}3c=6Jf4$(3h-");
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-585L));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        xYSeries0.update(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 0
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.add((Number) 59, (Number) 12, false);
      xYSeries0.update(59, 59);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      xYSeries0.add((Number) 23, (Number) 23);
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 17, true, true);
      xYSeries0.clear();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3314L));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
      Minute minute0 = new Minute((-2155), hour0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, true, false);
      xYSeries0.delete(40, 0);
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-585L));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.addOrUpdate((Number) 59, (Number) 59);
      xYSeries0.add((Number) 1094929490, (Number) 0);
      xYSeries0.add((Number) 59, (Number) (byte)3);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-585L));
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      xYSeries0.add((Number) 59, (Number) 12, false);
      xYSeries0.add((Number) 59, (Number) (byte)3);
      xYSeries0.hashCode();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Minute minute0 = new Minute((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 23, (Number) 0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(587.51528638, 980.12755);
      XYSeries xYSeries0 = new XYSeries((Comparable) simpleHistogramBin0, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 1482250784, 0.40092616649785945);
      xYSeries0.add(xYDataItem0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3317, 3317, 3317, 3317, 3317, 3317);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("2ir>t");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false, false);
      xYSeries0.addOrUpdate((-26.7658284931137), (double) 59);
      xYSeries0.addOrUpdate((-26.7658284931137), (-26.7658284931137));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((Comparable) 17, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(2, 1918392666);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 23, (Number) 0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.toArray();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3317, 3317, 3317, 3317, 3317, 3317);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("2ir>t");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false, false);
      xYSeries0.getItems();
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(416);
      XYSeries xYSeries0 = new XYSeries((Comparable) spreadsheetDate0);
      xYSeries0.add((-3550.3), (Number) 6);
      assertEquals(1, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(6.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3317, 3317, 3317, 3317, 3317, 3317);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("2ir>t");
      Minute minute0 = new Minute((Date) mockDate0, (TimeZone) zoneInfo0);
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, false, false);
      int int0 = xYSeries0.getMaximumItemCount();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, true);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(boolean0);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries((Comparable) hour0, false, false);
      xYSeries0.add((double) 0, 1.0);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (Number) 23, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }
}
