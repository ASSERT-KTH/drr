/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 00:39:37 GMT 2017
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.TestProblem5;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.StepProblem;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerOutputTest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3695.2), 3051.587360742799, doubleArray0, doubleArray0);
      StepNormalizerOutputTest stepNormalizerOutputTest0 = new StepNormalizerOutputTest();
      double[] doubleArray1 = new double[1];
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) stepNormalizerOutputTest0, 3051.587360742799, doubleArray1, 3051.587360742799, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), (-3497.1155383), 1000.0, 2202.3893665);
      StepProblem stepProblem0 = new StepProblem((-3497.1155383), 829.95499, (double) 8);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) stepProblem0, (-1.0), doubleArray0, (-2230.297643890814), doubleArray0);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, 2227.645, (-886.1684745729482), doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate((FirstOrderDifferentialEquations) stepProblem0, 2214.026889, doubleArray0, 256.8745595, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(Double.NaN);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = testProblem5_0.computeTheoreticalState((-643.62095));
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) testProblem5_0, Double.NaN, doubleArray0, Double.NEGATIVE_INFINITY, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2848.1672816);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[9];
      testProblem5_0.n = 134;
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) testProblem5_0, 0.0, doubleArray0, (-1.3020833333333333), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 134
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[2];
      double double0 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) testProblem5_0, 217.65305201769553, doubleArray0, 0.0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(5.016939499436828);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[2];
      double double0 = classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) testProblem5_0, (-3259.4926839370983), doubleArray0, 5.016939499436828, doubleArray0);
      assertEquals(2604, testProblem5_0.getCalls());
      assertEquals(5.016939499436828, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-14.126), (-14.126), (-1347.0), (-1378.147));
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-0.4045142906258105));
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[2];
      classicalRungeKuttaIntegrator0.setMaxEvaluations(145);
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) testProblem5_0, (-3259.4926839370983), doubleArray0, (-0.4045142906258105), doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (145) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-972.1731280071969), 0.0, 0.0);
      StepProblem stepProblem0 = new StepProblem((-2140.041994525686), 0.0, 2225.0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2523.387, 0.225, 244.98273010027);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) stepProblem0, (double) (-645), (-972.1731280071969), (-554), (UnivariateSolver) regulaFalsiSolver0);
      StepNormalizerOutputTest stepNormalizerOutputTest0 = new StepNormalizerOutputTest();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) stepNormalizerOutputTest0);
      expandableStatefulODE0.setTime(2523.387);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-972.1731280071969));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-554) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-14.126), (-14.126), (-1347.0), (-1378.147));
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      StepProblem stepProblem0 = new StepProblem(559.036, 0.0, (-14.126));
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) stepProblem0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1634.0333972335), 3841.4451, doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) testProblem5_0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-1634.0333972335));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) testProblem5_0);
      StepNormalizer stepNormalizer0 = new StepNormalizer(3221175.953626368, (FixedStepHandler) null);
      eulerIntegrator0.addStepHandler(stepNormalizer0);
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, 1611.8962441145381);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(732.1232931820053, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMaxEvaluations(0);
      try { 
        dormandPrince853Integrator0.computeDerivatives(732.1232931820053, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, (-208.826888), 0.0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((double) (-185));
      classicalRungeKuttaIntegrator0.setMaxEvaluations((-185));
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((double) (-185));
      BisectionSolver bisectionSolver0 = new BisectionSolver((double) (-185), 6.6);
      classicalRungeKuttaIntegrator0.addEventHandler((EventHandler) null, 0.0, 1000.0, (-585), (UnivariateSolver) bisectionSolver0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, (double) 5, 0.0, 0.0, 931.6266162);
      adamsMoultonIntegrator0.clearEventHandlers();
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), (-3497.1155383), 1000.0, 2202.3893665);
      dormandPrince853Integrator0.clearStepHandlers();
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1182.349830761718), 0.0, doubleArray0, doubleArray1);
      StepNormalizerOutputTest stepNormalizerOutputTest0 = new StepNormalizerOutputTest();
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) stepNormalizerOutputTest0, 599.9633173, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), (-3497.1155383), 1000.0, 2202.3893665);
      Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2202.3893665, (-886.1684745729482), doubleArray0, doubleArray0);
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
      eulerIntegrator0.getStepHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      StepProblem stepProblem0 = new StepProblem((-3497.1155383), 829.95499, (double) 8);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2202.3893665, (-886.1684745729482), doubleArray0, doubleArray0);
      SecantSolver secantSolver0 = new SecantSolver();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) stepProblem0, 0.9166666666666666, (-1.0), Integer.MAX_VALUE, (UnivariateSolver) secantSolver0);
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      double double0 = threeEighthesIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3497.1155383), (-886.1684745729482), doubleArray0, doubleArray0);
      int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.2737367544323206E-10, 2.2737367544323206E-10, doubleArray0, doubleArray0);
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
      double double0 = eulerIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), (-3497.1155383), 1000.0, (-1.0));
      StepProblem stepProblem0 = new StepProblem((-3497.1155383), 829.95499, (double) 8);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) stepProblem0, (-1.0), doubleArray0, (-2230.297643890814), doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3497.1155383), (-886.1684745729482), doubleArray0, doubleArray0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) stepProblem0, (-1.0), doubleArray0, 829.95499, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimal step size (3.50E03) reached, integration needs 1.87E03
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }
}
