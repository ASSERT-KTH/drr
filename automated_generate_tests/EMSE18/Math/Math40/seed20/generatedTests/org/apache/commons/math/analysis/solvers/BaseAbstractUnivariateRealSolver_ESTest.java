/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 20 00:40:40 GMT 2017
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableUnivariateFunction;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.XMinus5Function;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver2;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseAbstractUnivariateRealSolver_ESTest extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.verifyInterval((-1.0), 0.0);
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      newtonSolver0.solve(897, (DifferentiableUnivariateFunction) xMinus5Function0, (double) 897, (double) 897);
      newtonSolver0.incrementEvaluationCount();
      assertEquals(Double.NaN, newtonSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.verifySequence(0.0, 1151.19730378, 1339.5921969);
      assertEquals(1.0E-6, newtonSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2327.0, Double.POSITIVE_INFINITY);
      SinFunction sinFunction0 = new SinFunction();
      mullerSolver2_0.setup(0, sinFunction0, 0.0, 0.0, 1.1630112062985817E135);
      mullerSolver2_0.verifyBracketing((-1.0), 1.1630112062985817E135);
      assertEquals(1.1630112062985817E135, mullerSolver2_0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2((-1502.1), Double.POSITIVE_INFINITY);
      boolean boolean0 = mullerSolver2_0.isSequence((-282.737), (-1.0), 0.0);
      assertTrue(boolean0);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-1502.1), mullerSolver2_0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2327.0, Double.POSITIVE_INFINITY);
      SinFunction sinFunction0 = new SinFunction();
      mullerSolver2_0.setup(0, sinFunction0, 0.0, 0.0, 1.1630112062985817E135);
      boolean boolean0 = mullerSolver2_0.isBracketing(2327.0, 4.0);
      assertEquals(1.1630112062985817E135, mullerSolver2_0.getStartValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2327.0, Double.POSITIVE_INFINITY);
      SinFunction sinFunction0 = new SinFunction();
      mullerSolver2_0.setup(0, sinFunction0, 0.0, 0.0, 1.1630112062985817E135);
      boolean boolean0 = mullerSolver2_0.isBracketing(2327.0, 2327.0);
      assertEquals(1.1630112062985817E135, mullerSolver2_0.getStartValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      // Undeclared exception!
      try { 
        mullerSolver2_0.verifySequence(0.0, (-122.9226321718723), (-122.9226321718723));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, -122.923]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      // Undeclared exception!
      try { 
        riddersSolver0.verifyInterval((-1.0), (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-1, -1]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      newtonSolver0.solve(3449, (DifferentiableUnivariateFunction) xMinus5Function0, 1.0E-15, (-2349.77), 1.0E-14);
      // Undeclared exception!
      try { 
        newtonSolver0.verifyBracketing(1.0E-15, 1.0E-15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(1349.10800519);
      // Undeclared exception!
      try { 
        mullerSolver2_0.setup(1, (UnivariateFunction) null, 1349.10800519, 1.0E-12, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(1.0E-14);
      // Undeclared exception!
      try { 
        mullerSolver2_0.incrementEvaluationCount();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      try { 
        newtonSolver0.computeObjectiveValue((-1.0));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      SinFunction sinFunction0 = new SinFunction();
      // Undeclared exception!
      try { 
        mullerSolver2_0.solve((-27), (UnivariateFunction) sinFunction0, (double) (-27));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-27) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      Expm1Function expm1Function0 = new Expm1Function();
      // Undeclared exception!
      try { 
        secantSolver0.solve(5, (UnivariateFunction) expm1Function0, (double) 5, (-977.1706053415307));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [5, -977.171]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2327.0, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        mullerSolver2_0.isBracketing(2327.0, 2327.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2327.0, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        mullerSolver2_0.verifyBracketing((-1.0), 1.1630112062985817E135);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      newtonSolver0.solve(897, (DifferentiableUnivariateFunction) xMinus5Function0, (double) 897, (double) 897);
      newtonSolver0.computeObjectiveValue(528.982710479);
      assertEquals(Double.NaN, newtonSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      int int0 = riddersSolver0.getMaxEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(0.24740394949913025);
      Expm1Function expm1Function0 = new Expm1Function();
      mullerSolver2_0.solve(2679, (UnivariateFunction) expm1Function0, (-1.0), 0.0, 0.0);
      double double0 = mullerSolver2_0.computeObjectiveValue((-1811.5192));
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.24740394949913025, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver((-179.92392743829583));
      mullerSolver0.getEvaluations();
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-179.92392743829583), mullerSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      SinFunction sinFunction0 = new SinFunction();
      riddersSolver0.solve(2995, (UnivariateFunction) sinFunction0, (-1823.14707005475), 0.0, 1031.4421108346726);
      riddersSolver0.computeObjectiveValue(0.0);
      assertEquals((-1823.14707005475), riddersSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2327.0, Double.POSITIVE_INFINITY);
      mullerSolver2_0.isSequence((-1.0), 2327.0, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2327.0, mullerSolver2_0.getRelativeAccuracy(), 0.01);
  }
}
