/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 20 04:58:57 GMT 2017
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableUnivariateFunction;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.QuinticFunction;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.SincFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.XMinus5Function;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver2;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseAbstractUnivariateRealSolver_ESTest extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      SincFunction sincFunction0 = new SincFunction();
      mullerSolver0.setup(1136, sincFunction0, 0.0, 0.0, (-309.299590440572));
      mullerSolver0.incrementEvaluationCount();
      assertEquals((-309.299590440572), mullerSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      mullerSolver2_0.setup((-2933), xMinus5Function0, 0.95, 0, 0.5);
      mullerSolver2_0.verifyBracketing(0.0, 1678.8082734303127);
      assertEquals(0.5, mullerSolver2_0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver((-599.3306156), 648.48065, 1794.4);
      boolean boolean0 = laguerreSolver0.isSequence((-231.77), 0.5, Double.POSITIVE_INFINITY);
      assertEquals(1794.4, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertTrue(boolean0);
      assertEquals((-599.3306156), laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(648.48065, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(1.0);
      SinFunction sinFunction0 = new SinFunction();
      newtonSolver0.solve(3948, (DifferentiableUnivariateFunction) sinFunction0, (double) 3948, 1.0);
      boolean boolean0 = newtonSolver0.isBracketing((-2.0), 2086.112243403065);
      assertEquals(1974.5, newtonSolver0.getStartValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      mullerSolver2_0.setup((-2933), xMinus5Function0, 0.95, 0, 0.5);
      mullerSolver2_0.isBracketing((-0.0625), 0);
      assertEquals(0.5, mullerSolver2_0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(0.0);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      newtonSolver0.setup(2258, quinticFunction0, 0.0, 1555, 0.0);
      newtonSolver0.computeObjectiveValue(0.0);
      assertEquals(1555.0, newtonSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      SincFunction sincFunction0 = new SincFunction();
      mullerSolver0.setup(1136, sincFunction0, 0.0, 0.0, (-309.299590440572));
      mullerSolver0.computeObjectiveValue(1342.1188471959);
      assertEquals((-309.299590440572), mullerSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      // Undeclared exception!
      try { 
        newtonSolver0.verifySequence((-3.141592653589793), 43, 43);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [43, 43]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      // Undeclared exception!
      try { 
        mullerSolver0.verifyInterval(1.0E-6, 1.0E-6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2((-0.0625));
      // Undeclared exception!
      try { 
        mullerSolver2_0.setup(0, (UnivariateFunction) null, 0, 0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(0.0);
      // Undeclared exception!
      try { 
        secantSolver0.incrementEvaluationCount();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver((-571.82359751195), (-571.82359751195), 0.0);
      try { 
        laguerreSolver0.computeObjectiveValue((-1126.3));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      Expm1Function expm1Function0 = new Expm1Function();
      // Undeclared exception!
      try { 
        bisectionSolver0.solve(0, (UnivariateFunction) expm1Function0, (double) 0, 694.3963391, (double) 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      // Undeclared exception!
      try { 
        mullerSolver2_0.isBracketing((-0.0625), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(516.9433939563764, 516.9433939563764);
      XMinus5Function xMinus5Function0 = new XMinus5Function();
      // Undeclared exception!
      try { 
        mullerSolver2_0.solve(0, (UnivariateFunction) xMinus5Function0, 0.95, 516.9433939563764);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      // Undeclared exception!
      try { 
        mullerSolver2_0.verifyBracketing(0.0, 1678.8082734303127);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(1.0);
      newtonSolver0.isSequence(1.0, 1.0, 0.0);
      assertEquals(1.0E-15, newtonSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0, newtonSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      int int0 = mullerSolver2_0.getMaxEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(547.0301073640737);
      mullerSolver2_0.verifyInterval(547.0301073640737, 1904.8494);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(547.0301073640737, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(1.0);
      newtonSolver0.verifySequence(2.837318610819345, Double.NaN, Double.NaN);
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0, newtonSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, newtonSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(1.0);
      newtonSolver0.getEvaluations();
      assertEquals(1.0E-15, newtonSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0, newtonSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(1.0);
      SincFunction sincFunction0 = new SincFunction();
      newtonSolver0.solve(43, (DifferentiableUnivariateFunction) sincFunction0, 1.0);
      newtonSolver0.computeObjectiveValue(0.0);
      assertEquals(Double.NaN, newtonSolver0.getMin(), 0.01);
  }
}
