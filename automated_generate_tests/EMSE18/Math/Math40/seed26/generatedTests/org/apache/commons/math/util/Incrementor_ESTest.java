/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 27 21:03:45 GMT 2017
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.Incrementor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Incrementor_ESTest extends Incrementor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor(1, (Incrementor.MaxCountExceededCallback) null);
      incrementor0.incrementCount((-1899));
      assertEquals(1, incrementor0.getMaximalCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor();
      int int0 = incrementor0.getMaximalCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor((-127));
      int int0 = incrementor0.getMaximalCount();
      assertEquals((-127), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor(257);
      incrementor0.incrementCount(257);
      int int0 = incrementor0.getCount();
      assertFalse(incrementor0.canIncrement());
      assertEquals(257, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor();
      // Undeclared exception!
      try { 
        incrementor0.incrementCount(163);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor(1, (Incrementor.MaxCountExceededCallback) null);
      incrementor0.setMaximalCount((-1850));
      // Undeclared exception!
      try { 
        incrementor0.incrementCount(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor(1144);
      incrementor0.incrementCount();
      assertEquals(1, incrementor0.getCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor(1, (Incrementor.MaxCountExceededCallback) null);
      incrementor0.incrementCount(1);
      // Undeclared exception!
      try { 
        incrementor0.incrementCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor();
      incrementor0.setMaximalCount(159);
      boolean boolean0 = incrementor0.canIncrement();
      assertEquals(159, incrementor0.getMaximalCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor();
      boolean boolean0 = incrementor0.canIncrement();
      assertFalse(boolean0);
      assertEquals(0, incrementor0.getCount());
      assertEquals(0, incrementor0.getMaximalCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor();
      // Undeclared exception!
      try { 
        incrementor0.incrementCount();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor(2612);
      int int0 = incrementor0.getMaximalCount();
      assertEquals(0, incrementor0.getCount());
      assertEquals(2612, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor(257);
      int int0 = incrementor0.getCount();
      assertEquals(257, incrementor0.getMaximalCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor();
      assertEquals(0, incrementor0.getMaximalCount());
      
      incrementor0.setMaximalCount((-1));
      boolean boolean0 = incrementor0.canIncrement();
      assertEquals(-1, incrementor0.getMaximalCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Incrementor incrementor0 = new Incrementor(2612);
      incrementor0.resetCount();
      assertEquals(2612, incrementor0.getMaximalCount());
      assertEquals(0, incrementor0.getCount());
  }
}
