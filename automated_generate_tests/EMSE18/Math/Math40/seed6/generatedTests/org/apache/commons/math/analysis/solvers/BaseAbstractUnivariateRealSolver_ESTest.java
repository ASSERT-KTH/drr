/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 11 23:18:21 GMT 2017
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableUnivariateFunction;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.MonitoredFunction;
import org.apache.commons.math.analysis.QuinticFunction;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.SincFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver2;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseAbstractUnivariateRealSolver_ESTest extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(1.0E-15, 1.0E-15);
      // Undeclared exception!
      try { 
        laguerreSolver0.isBracketing(1.0E-15, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.verifySequence((-2222.033073595249), 0.0, 794.43617);
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      newtonSolver0.verifyInterval(794.43617, 1927.877);
      assertEquals(1.0E-6, newtonSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver(0.5);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      bisectionSolver0.setup(84, quinticFunction0, 0.0, 268.609, (-1703.7));
      bisectionSolver0.incrementEvaluationCount();
      assertEquals((-1703.7), bisectionSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      QuinticFunction quinticFunction0 = new QuinticFunction();
      UnivariateFunction univariateFunction0 = quinticFunction0.derivative();
      secantSolver0.solve(494, univariateFunction0, 0.0, 0.5);
      assertEquals(0.25, secantSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2((-485.537234392798), (-0.5337898875267847));
      boolean boolean0 = mullerSolver2_0.isSequence((-485.537234392798), (-0.5337898875267847), 0.0);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-0.5337898875267847), mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-485.537234392798), mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver((-2425.87041244222));
      SinFunction sinFunction0 = new SinFunction();
      newtonSolver0.setup((-2215), sinFunction0, (-2425.87041244222), (-603.291975), (-1120.23137));
      boolean boolean0 = newtonSolver0.isBracketing((-471.9018761298551), (-471.9018761298551));
      assertEquals((-1120.23137), newtonSolver0.getStartValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      SincFunction sincFunction0 = new SincFunction();
      UnivariateFunction univariateFunction0 = sincFunction0.derivative();
      mullerSolver0.setup(518, univariateFunction0, (-1971.2479523866), 1106.912, (-2956.207281856454));
      mullerSolver0.computeObjectiveValue(0.0);
      assertEquals((-2956.207281856454), mullerSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      QuinticFunction quinticFunction0 = new QuinticFunction();
      secantSolver0.solve(523, (UnivariateFunction) quinticFunction0, 0.0, 0.5);
      secantSolver0.computeObjectiveValue(1.0E-15);
      assertEquals(0.25, secantSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      SinFunction sinFunction0 = new SinFunction();
      UnivariateFunction univariateFunction0 = sinFunction0.derivative();
      mullerSolver0.setup(502, univariateFunction0, 0.00971824862062931, 0.0, 0.0);
      double double0 = mullerSolver0.computeObjectiveValue((-662.99285679));
      assertEquals((-0.9931858290082819), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      // Undeclared exception!
      try { 
        mullerSolver0.verifySequence(47.2749461, 47.2749461, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [47.275, 47.275]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      // Undeclared exception!
      try { 
        newtonSolver0.verifyInterval(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      SinFunction sinFunction0 = new SinFunction();
      mullerSolver0.setup(502, sinFunction0, 0.00971824862062931, 0.0, 0.0);
      // Undeclared exception!
      try { 
        mullerSolver0.verifyBracketing(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver(1.0, 1.0);
      // Undeclared exception!
      try { 
        mullerSolver0.setup(864, (UnivariateFunction) null, 0.0, 864, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver((-2425.87041244222));
      try { 
        newtonSolver0.computeObjectiveValue((-2425.87041244222));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(29.313596280065052, 29.313596280065052);
      MonitoredFunction monitoredFunction0 = new MonitoredFunction((UnivariateFunction) null);
      secantSolver0.setup(2770, monitoredFunction0, 2770, 29.313596280065052, 2770);
      // Undeclared exception!
      try { 
        secantSolver0.computeObjectiveValue(29.313596280065052);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.MonitoredFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      SincFunction sincFunction0 = new SincFunction();
      // Undeclared exception!
      try { 
        brentSolver0.solve(73, (UnivariateFunction) sincFunction0, (double) 73, 0.95, 0.95);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [73, 0.95]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(816.8272923363893, 816.8272923363893);
      SincFunction sincFunction0 = new SincFunction();
      // Undeclared exception!
      try { 
        mullerSolver2_0.solve(0, (UnivariateFunction) sincFunction0, (double) 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      // Undeclared exception!
      try { 
        mullerSolver0.verifyBracketing(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(3803.96490771, 954);
      boolean boolean0 = bracketingNthOrderBrentSolver0.isSequence(3803.96490771, 0.0, 268.4778432617187);
      assertEquals(3803.96490771, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(0.0);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      newtonSolver0.solve(823, (DifferentiableUnivariateFunction) quinticFunction0, (double) 823, 0.0);
      newtonSolver0.isBracketing(0.0, 0.0);
      assertEquals(411.5, newtonSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(0.0);
      int int0 = newtonSolver0.getMaxEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(3803.96490771, 954);
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(3746, (UnivariateFunction) expm1Function0, (-2486.4), (double) 3746, allowedSolution0);
      assertEquals(629.7999999999997, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals((-2486.4), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      int int0 = mullerSolver0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver(0.5);
      // Undeclared exception!
      try { 
        bisectionSolver0.incrementEvaluationCount();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }
}
