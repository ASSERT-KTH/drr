/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 19:31:16 GMT 2017
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.MonitoredFunction;
import org.apache.commons.math.analysis.QuinticFunction;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.SincFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BaseSecantSolver;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseSecantSolver_ESTest extends BaseSecantSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BaseSecantSolver.Method.valueOf("REGULA_FALSI");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BaseSecantSolver.Method[] baseSecantSolver_MethodArray0 = BaseSecantSolver.Method.values();
      assertNotNull(baseSecantSolver_MethodArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-213.35), (-213.35));
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(24, (UnivariateRealFunction) expm1Function0, 0.0, (-1.0), allowedSolution0);
      assertEquals((-1.0), illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1371.75264571445, (-1613.0), 0.0);
      Expm1Function expm1Function0 = new Expm1Function();
      double double0 = regulaFalsiSolver0.solve(1025, (UnivariateRealFunction) expm1Function0, 1371.75264571445, 0.0, 1371.75264571445);
      assertEquals(1371.75264571445, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(2236.03, 2236.03, 2236.03);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      double double0 = pegasusSolver0.solve(4, (UnivariateRealFunction) quinticFunction0, 2236.03, (-1.0), (-1.0));
      assertEquals(2236.03, pegasusSolver0.getMin(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-481.654996), (-481.654996));
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(1, (UnivariateRealFunction) expm1Function0, 10.120988572891065, 16.363099, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-481.654996), (-481.654996));
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(22, (UnivariateRealFunction) expm1Function0, 10.936470939397466, 10.936470939397466, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [10.936, 10.936]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0E-6);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve((-891), (UnivariateRealFunction) null, (-1509.5), (-333.5983393592), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-720.303596859705));
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(0, (UnivariateRealFunction) expm1Function0, 839.81171672, 0.0, (-1009.793), allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(784, (UnivariateRealFunction) sinFunction0, (double) 784, (double) 784, (double) 784, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [784, 784]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1613.490439, 1613.490439);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(0, (UnivariateRealFunction) null, 0.0, (double) 0, (-1037.0), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(912.8082621352487, 0.0, 912.8082621352487);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(191, (UnivariateRealFunction) quinticFunction0, 1.0E-6, (-2.3388960684900453), 912.8082621352487);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, -2.339]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.125, 1.125);
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(0, (UnivariateRealFunction) null, 1.125, 1759.5104086682757, 1.125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(8892411.23141773);
      Expm1Function expm1Function0 = new Expm1Function();
      illinoisSolver0.setup(87883688, expm1Function0, 8892411.23141773, 8892411.23141773, 8892411.23141773);
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [8,892,411.231, 8,892,411.231]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-481.654996), (-481.654996));
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(422267734, (UnivariateRealFunction) expm1Function0, (-1893.894284070831), 0.14982303977012634, 1.0, allowedSolution0);
      assertEquals(1.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(5.225372938361784E-30, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(13.0, 0.0, (-279.0682353644));
      QuinticFunction quinticFunction0 = new QuinticFunction();
      MonitoredFunction monitoredFunction0 = new MonitoredFunction((UnivariateRealFunction) quinticFunction0);
      double double0 = pegasusSolver0.solve(3316, (UnivariateRealFunction) monitoredFunction0, (-899.18322114087), 8.95575158901761, 1.1921056801463227E-8);
      assertEquals(1.1921056801463227E-8, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(799, (UnivariateRealFunction) sinFunction0, (-2865.462422666554), 0.5, allowedSolution0);
      assertEquals(0.5, illinoisSolver0.getMax(), 0.01);
      assertEquals((-578.0530482605219), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(4276933, (UnivariateRealFunction) sinFunction0, (-2865.462422666554), 0.5, allowedSolution0);
      assertEquals(0.5, illinoisSolver0.getMax(), 0.01);
      assertEquals((-578.053048260522), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(912.8082621352487, 0.0, 912.8082621352487);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(191, (UnivariateRealFunction) quinticFunction0, (-2393.909930357571), (double) 191, allowedSolution0);
      assertEquals(191.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(190.9916428724718, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(836, (UnivariateRealFunction) sinFunction0, (-2865.462422666554), (double) 836, 13.0, allowedSolution0);
      assertEquals(836.0, illinoisSolver0.getMax(), 0.01);
      assertEquals((-948.7609813841176), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(784, (UnivariateRealFunction) sinFunction0, (-2865.462422666554), 2.479773539153719E-5, 13.0, allowedSolution0);
      assertEquals(13.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.9667489225297887E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.008333333333333333);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      illinoisSolver0.solve(1005, (UnivariateRealFunction) quinticFunction0, (double) 1005, 0.0, 0.0, allowedSolution0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      
      illinoisSolver0.setup(1005, quinticFunction0, (-4512.4027), 0.008333333333333333, 0.333333333333333);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(0.0012326113401163095, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(799, (UnivariateRealFunction) sinFunction0, (-2865.462422666554), (double) 799, 13.0, allowedSolution0);
      assertEquals(13.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-854.5132017764238), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(799, (UnivariateRealFunction) sinFunction0, (-2865.462422666554), (double) 799, 13.0, allowedSolution0);
      assertEquals(799.0, illinoisSolver0.getMax(), 0.01);
      assertEquals((-854.5132017764238), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-481.654996), (-481.654996));
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(422267734, (UnivariateRealFunction) expm1Function0, (-1893.894284070831), 0.14982303977012634, 1.0, allowedSolution0);
      assertEquals(0.14982303977012634, illinoisSolver0.getMax(), 0.01);
      assertEquals((-3.795187368454546E-20), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-481.654996));
      Expm1Function expm1Function0 = new Expm1Function();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(422267742, (UnivariateRealFunction) expm1Function0, (-1893.894284070831), 0.14982303977012634, 16.36309872337631, allowedSolution0);
      assertEquals(0.14982303977012634, illinoisSolver0.getMax(), 0.01);
      assertEquals(5.225372938361784E-30, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1440.2903738064), (-1787.711968687));
      SincFunction sincFunction0 = new SincFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(1049, (UnivariateRealFunction) sincFunction0, 769.1789, 1.073741824E9, allowedSolution0);
      assertEquals(769.1789, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0737411869220309E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.384185791015625E-7, 2.384185791015625E-7, 3.1850382335726706E-13);
      SincFunction sincFunction0 = new SincFunction();
      illinoisSolver0.setup(249, sincFunction0, (-1863.9928073718088), 2.384185791015625E-7, 249);
      double double0 = illinoisSolver0.doSolve();
      assertEquals((-1862.96444357875), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.008333333333333333, (-6.663542893624021E-14));
      QuinticFunction quinticFunction0 = new QuinticFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      illinoisSolver0.solve(1024, (UnivariateRealFunction) quinticFunction0, (-349.67133667), 0.09081737909415233, 0.0, allowedSolution0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      
      illinoisSolver0.setup(1024, quinticFunction0, (-4512.4027), 0.008333333333333333, 0.333333333333333);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(947.3964007127, 0.0, 947.3964007127);
      QuinticFunction quinticFunction0 = new QuinticFunction();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(191, (UnivariateRealFunction) quinticFunction0, (-2393.909930357571), (double) 191, (AllowedSolution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseSecantSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0894864352794245), (-6.663542893624021E-14));
      QuinticFunction quinticFunction0 = new QuinticFunction();
      illinoisSolver0.setup(1024, quinticFunction0, (-4512.4027), (-1.0894864352794245), 0.333333333333333);
      // Undeclared exception!
      try { 
        illinoisSolver0.doSolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-4,512.403, -1.089], values: [-1,870,851,107,693,340,160, -0.191]
         //
         verifyException("org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0894864352794245), (-6.663542893624021E-14));
      QuinticFunction quinticFunction0 = new QuinticFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(1024, (UnivariateRealFunction) quinticFunction0, (-1.0), (-349.67133667), allowedSolution0);
      assertEquals((-1.0), illinoisSolver0.getMin(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.5, 1.0E-6);
      SincFunction sincFunction0 = new SincFunction();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(0, (UnivariateRealFunction) sincFunction0, 5.669184079525E-24, 0.1428571343421936, 1627.8070477660124);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SinFunction sinFunction0 = new SinFunction();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      illinoisSolver0.solve(4276933, (UnivariateRealFunction) sinFunction0, (-2865.46242), 0.5, allowedSolution0);
  }
}
