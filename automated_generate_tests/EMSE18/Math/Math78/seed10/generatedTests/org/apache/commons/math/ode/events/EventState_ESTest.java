/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 13 21:34:12 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2490.518409470708), (-2490.518409470708), 1250.87931);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1250.87931, 1250.87931, 1);
      eventState0.stepAccepted(1250.87931, (double[]) null);
      assertFalse(eventState0.stop());
      assertEquals(1, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1250.87931, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1055.9388976), (-1055.9388976), (-1055.9388976));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1055.9388976), (-1055.9388976), 0);
      eventState0.reinitializeBegin((-1055.9388976), (double[]) null);
      assertFalse(eventState0.stop());
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-1055.9388976), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1055.9388976), (-1055.9388976), (-1055.9388976));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1055.9388976), (-1055.9388976), 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-1055.9388976), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, int0);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-3881.09249842), 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 1069.8296377270583, 2313);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(1069.8296377270583, eventState0.getConvergence(), 0.01);
      assertEquals(2313, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-4326.352121039489), 1507.887, 1507.887);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, Double.NaN, (-4643.4), 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(4643.4, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1055.9388976), (-1055.9388976), (-1055.9388976));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1055.9388976), (-1055.9388976), 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-1055.9388976), double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.732050807568877, 0.0, 2514);
      eventState0.getEventHandler();
      assertEquals(1.732050807568877, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2514, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.732050807568877, 0.0, 2514);
      double double0 = eventState0.getConvergence();
      assertEquals(1.732050807568877, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2514, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-1317.42241718124), 0.0, (-2104));
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted((-1317.42241718124), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-0.9899924966004454), (-1812.50703881), 2);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin((-1812.50703881), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-1400));
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1055.9388976), (-1055.9388976), (-1055.9388976));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1055.9388976), (-1055.9388976), 0);
      boolean boolean0 = eventState0.reset((-1055.9388976), (double[]) null);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1055.9388976), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.732050807568877, 0.0, 2514);
      boolean boolean0 = eventState0.stop();
      assertEquals(2514, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(1.732050807568877, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2490.518409470708), (-2490.518409470708), 1250.87931);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1250.87931, 1250.87931, 1);
      eventState0.stepAccepted((-2490.518409470708), (double[]) null);
      assertEquals(1, eventState0.getMaxIterationCount());
      assertEquals(1250.87931, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.4, 0.0, 3358);
      eventState0.stepAccepted(3358, (double[]) null);
      assertEquals(3358, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.4, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1570.0385046231831), (-1570.0385046231831), (-1570.0385046231831));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1570.0385046231831), 2196.4471, (-2540));
      double[] doubleArray0 = new double[2];
      eventState0.reinitializeBegin(2196.4471, doubleArray0);
      assertEquals(-2540, eventState0.getMaxIterationCount());
      assertEquals(2196.4471, eventState0.getConvergence(), 0.01);
      assertEquals((-1570.0385046231831), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2490.518409470708), (-2490.518409470708), 1250.87931);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1250.87931, 1250.87931, 1);
      eventState0.reinitializeBegin((-2490.518409470708), (double[]) null);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1250.87931, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(1, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1.732050807568877, 1.732050807568877, 1.732050807568877);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.732050807568877, 1.732050807568877, 0);
      double double0 = eventState0.getConvergence();
      assertEquals(1.732050807568877, double0, 0.01);
      assertEquals(1.732050807568877, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 0.0, 1);
      eventState0.getMaxCheckInterval();
      assertFalse(eventState0.stop());
      assertEquals(1, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1055.9388976), (-1055.9388976), (-1055.9388976));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1055.9388976), (-1055.9388976), 0);
      double double0 = eventState0.getEventTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals((-1055.9388976), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-1400));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-1400), int0);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 0.0, (-1));
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-1, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }
}
