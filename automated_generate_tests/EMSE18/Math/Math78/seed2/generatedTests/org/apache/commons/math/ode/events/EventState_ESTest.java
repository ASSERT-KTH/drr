/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 18 00:40:04 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-472.05038739), (-472.05038739), (-472.05038739));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-472.05038739), (-472.05038739), (-13));
      double[] doubleArray0 = new double[8];
      eventState0.stepAccepted((-13), doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-472.05038739), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(-13, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-472.05038739), (-472.05038739), (-472.05038739));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-472.05038739), (-472.05038739), (-13));
      double[] doubleArray0 = new double[8];
      eventState0.reinitializeBegin(0.0, doubleArray0);
      assertEquals(-13, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-472.05038739), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-2489.82894523), (-2489.82894523), 2);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-2489.82894523), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(271.729233075117, 271.729233075117, 271.729233075117);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 271.729233075117, 271.729233075117, (-3046));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-3046), int0);
      assertEquals(271.729233075117, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-570));
      eventState0.getMaxCheckInterval();
      assertEquals(-570, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1829.0, 1829.0, 1829.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1829.0, 1829.0, 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(1829.0, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-570));
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-570, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-570));
      eventState0.getConvergence();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-570, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-2489.82894523), (-2489.82894523), 2);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted(0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 3.762195691083631, 3.762195691083631, 0);
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(1.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-570));
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-2489.82894523), (-2489.82894523), 2);
      double[] doubleArray0 = new double[1];
      boolean boolean0 = eventState0.reset((-2489.82894523), doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(boolean0);
      assertEquals((-2489.82894523), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(2, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(271.729233075117, 271.729233075117, 271.729233075117);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 271.729233075117, 271.729233075117, (-3046));
      boolean boolean0 = eventState0.stop();
      assertFalse(boolean0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(271.729233075117, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(-3046, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-570));
      double[] doubleArray0 = new double[20];
      eventState0.stepAccepted((-570), doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(-570, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1012.6), (-1012.6), (-1012.6));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1012.6), (-1012.6), (-3832));
      double[] doubleArray0 = new double[2];
      eventState0.stepAccepted((-1012.6), doubleArray0);
      assertEquals(-3832, eventState0.getMaxIterationCount());
      assertEquals((-1012.6), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.9640275800758169, 0.9640275800758169, 0.9640275800758169);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-5050.5), 59.56001765, (-3069));
      double[] doubleArray0 = new double[1];
      eventState0.reinitializeBegin(0.9640275800758169, doubleArray0);
      assertEquals((-5050.5), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(59.56001765, eventState0.getConvergence(), 0.01);
      assertEquals(-3069, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.9640275800758169, 0.9640275800758169, 0.9640275800758169);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-5050.5), 59.56001765, (-3069));
      double[] doubleArray0 = new double[1];
      eventState0.reinitializeBegin((-5050.5), doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-5050.5), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(-3069, eventState0.getMaxIterationCount());
      assertEquals(59.56001765, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-2489.82894523), (-2489.82894523), 2);
      double double0 = eventState0.getConvergence();
      assertEquals((-2489.82894523), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals(2489.82894523, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 918.12048);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1803.0046688339), 0.0, 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-1803.0046688339), double0, 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(271.729233075117, 271.729233075117, 271.729233075117);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 271.729233075117, 271.729233075117, (-3046));
      double double0 = eventState0.getEventTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-3046, eventState0.getMaxIterationCount());
      assertEquals(271.729233075117, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 918.12048);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1803.0046688339), 0.0, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(0, int0);
      assertFalse(eventState0.stop());
      assertEquals((-1803.0046688339), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 0.0, 0);
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }
}
