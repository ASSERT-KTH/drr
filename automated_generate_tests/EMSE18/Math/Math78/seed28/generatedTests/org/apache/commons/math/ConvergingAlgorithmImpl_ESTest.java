/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 28 08:42:51 GMT 2017
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.integration.RombergIntegrator;
import org.apache.commons.math.analysis.integration.SimpsonIntegrator;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConvergingAlgorithmImpl_ESTest extends ConvergingAlgorithmImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      rombergIntegrator0.resetRelativeAccuracy();
      assertEquals(1.0E-14, rombergIntegrator0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      rombergIntegrator0.setAbsoluteAccuracy((-587.1656304193414));
      assertEquals((-587.1656304193414), rombergIntegrator0.getAbsoluteAccuracy(), 0.01);
      
      rombergIntegrator0.resetAbsoluteAccuracy();
      assertEquals(0, rombergIntegrator0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      laguerreSolver0.setRelativeAccuracy(3447.41905863);
      assertEquals(3447.41905863, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      brentOptimizer0.setMaximalIterationCount((-161));
      assertEquals(-161, brentOptimizer0.getMaximalIterationCount());
      
      brentOptimizer0.resetMaximalIterationCount();
      assertEquals(1.0E-14, brentOptimizer0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      laguerreSolver0.setAbsoluteAccuracy(820.07561931061);
      assertEquals(820.07561931061, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      brentOptimizer0.resetRelativeAccuracy();
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(1.0E-14, brentOptimizer0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      brentSolver0.resetAbsoluteAccuracy();
      assertEquals(100, brentSolver0.getMaximalIterationCount());
      assertEquals(0, brentSolver0.getIterationCount());
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      rombergIntegrator0.setRelativeAccuracy(0.0);
      rombergIntegrator0.getRelativeAccuracy();
      assertEquals(32, rombergIntegrator0.getMaximalIterationCount());
      assertEquals(0, rombergIntegrator0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      rombergIntegrator0.setRelativeAccuracy((-1.0));
      double double0 = rombergIntegrator0.getRelativeAccuracy();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      
      brentOptimizer0.setMaximalIterationCount(0);
      int int0 = brentOptimizer0.getMaximalIterationCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      simpsonIntegrator0.setMaximalIterationCount((-2734));
      int int0 = simpsonIntegrator0.getMaximalIterationCount();
      assertEquals((-2734), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double[] doubleArray0 = new double[3];
      laguerreSolver0.solveAll(doubleArray0, 0.0);
      int int0 = laguerreSolver0.getIterationCount();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      brentOptimizer0.setAbsoluteAccuracy(0.0);
      brentOptimizer0.getAbsoluteAccuracy();
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentOptimizer0.getRelativeAccuracy(), 0.01);
      assertEquals(0, brentOptimizer0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      bisectionSolver0.setAbsoluteAccuracy((-1997.7297));
      double double0 = bisectionSolver0.getAbsoluteAccuracy();
      assertEquals((-1997.7297), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RombergIntegrator rombergIntegrator0 = new RombergIntegrator();
      rombergIntegrator0.getRelativeAccuracy();
      assertEquals(32, rombergIntegrator0.getMaximalIterationCount());
      assertEquals(0, rombergIntegrator0.getIterationCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      int int0 = brentOptimizer0.getIterationCount();
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentOptimizer0.getRelativeAccuracy(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      brentOptimizer0.getAbsoluteAccuracy();
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1.0E-14, brentOptimizer0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpsonIntegrator simpsonIntegrator0 = new SimpsonIntegrator();
      int int0 = simpsonIntegrator0.getMaximalIterationCount();
      assertEquals(64, int0);
      assertEquals(0, simpsonIntegrator0.getIterationCount());
  }
}
