/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 28 08:27:44 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1713.0, 1713.0, 1713.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1713.0, 1713.0, 0);
      double[] doubleArray0 = new double[0];
      eventState0.stepAccepted(1713.0, doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(1713.0, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.5235987755982989, 0.5235987755982989, 0.5235987755982989);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.5235987755982989, 0.5235987755982989, 2);
      double[] doubleArray0 = new double[3];
      eventState0.reinitializeBegin(0.5235987755982989, doubleArray0);
      assertEquals(0.5235987755982989, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1197.414, 1197.414, 1197.414);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1197.414, 1197.414, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(0, int0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1197.414, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.5235987755982989, 0.5235987755982989, 0.5235987755982989);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.5235987755982989, 0.5235987755982989, 2);
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals(0.5235987755982989, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(11.0, 11.0, 11.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 11.0, 11.0, 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(11.0, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1618.078), 9.0, 9.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2339.1284245598563), 0.0, 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals((-2339.1284245598563), double0, 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.29205654128985475, 0.29205654128985475, 1.0E-12);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.0E-12, 1.0E-12, (-3838));
      eventState0.getEventHandler();
      assertFalse(eventState0.stop());
      assertEquals(-3838, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-3201.252012875426), 0.0, (-10));
      double double0 = eventState0.getConvergence();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-3201.252012875426), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(-10, eventState0.getMaxIterationCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 425.61808, 425.61808, 1953);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted(0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-3201.252012875426), 0.0, (-10));
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin((-10), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 13.9, 3450);
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 425.61808, 425.61808, 1953);
      double[] doubleArray0 = new double[2];
      boolean boolean0 = eventState0.reset(1.0, doubleArray0);
      assertEquals(1953, eventState0.getMaxIterationCount());
      assertEquals(425.61808, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(11.0, 11.0, 11.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 11.0, 11.0, 0);
      boolean boolean0 = eventState0.stop();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertFalse(boolean0);
      assertEquals(11.0, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.29205654128985475, 0.29205654128985475, 1.0E-12);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.0E-12, 1.0E-12, (-3838));
      double[] doubleArray0 = new double[20];
      eventState0.stepAccepted((-3838), doubleArray0);
      assertEquals(-3838, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-168));
      eventState0.stepAccepted(4022.7341011518, (double[]) null);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-168, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1197.414, 1197.414, 1197.414);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1197.414, 1197.414, 0);
      double[] doubleArray0 = new double[7];
      eventState0.reinitializeBegin(1996.814596603459, doubleArray0);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(1197.414, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.29205654128985475, 0.29205654128985475, 1.0E-12);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.0E-12, 1.0E-12, (-3838));
      double[] doubleArray0 = new double[20];
      eventState0.reinitializeBegin((-3838), doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-3838, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((double) 31, (double) 31, (double) 31);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (double) 31, (double) 31, 31);
      double double0 = eventState0.getConvergence();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(31.0, double0, 0.01);
      assertEquals(31, eventState0.getMaxIterationCount());
      assertEquals(31.0, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 13.9, 3450);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(3450, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(13.9, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.29205654128985475, 0.29205654128985475, 1.0E-12);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.0E-12, 1.0E-12, (-3838));
      double double0 = eventState0.getEventTime();
      assertFalse(eventState0.stop());
      assertEquals(-3838, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, (-3125.924));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, (-3125.924), (-1378));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(3125.924, eventState0.getConvergence(), 0.01);
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-1378), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 1.0, 0.0, 1);
      eventState0.getEventHandler();
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(1, eventState0.getMaxIterationCount());
      assertEquals(1.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }
}
