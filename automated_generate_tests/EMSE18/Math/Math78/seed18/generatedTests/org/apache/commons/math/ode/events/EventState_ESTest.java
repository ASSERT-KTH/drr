/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 18 20:29:52 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-834.7), (-834.7), (-834.7));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-834.7), (-834.7), 9);
      double[] doubleArray0 = new double[6];
      eventState0.stepAccepted(9, doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(9, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-834.7), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.5235987755982989, 0.5235987755982989, 0.5235987755982989);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1.0), (-2616.336598837577), 3766);
      double[] doubleArray0 = new double[1];
      eventState0.reinitializeBegin(1946.8238299, doubleArray0);
      assertEquals(2616.336598837577, eventState0.getConvergence(), 0.01);
      assertEquals((-1.0), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(3766, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(964.885514, 964.885514, 964.885514);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1168.2), 964.885514, 2535);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(2535, int0);
      assertFalse(eventState0.stop());
      assertEquals((-1168.2), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(964.885514, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-6042));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals((-6042), int0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-6042));
      eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-6042, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(2127.2016901718453, 2127.2016901718453, 1.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.0, 1.0, (-899));
      double double0 = eventState0.getMaxCheckInterval();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-899, eventState0.getMaxIterationCount());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1.3863, 1.3863, 1.3863);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.3863, 1.3863, 1886);
      eventState0.getEventHandler();
      assertEquals(1.3863, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1886, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2060.33386895334), (-2060.33386895334), (-2060.33386895334));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2060.33386895334), (-2060.33386895334), 1588);
      double double0 = eventState0.getConvergence();
      assertEquals((-2060.33386895334), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(2060.33386895334, double0, 0.01);
      assertEquals(1588, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 0.0, (-433));
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted(0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 32.0, (-601));
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 18.0, 0.0, (-2078));
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-6042));
      boolean boolean0 = eventState0.reset(0.0, (double[]) null);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(boolean0);
      assertFalse(eventState0.stop());
      assertEquals(-6042, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1.0), (-1.0), (-1.0));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1.0), (-1.0), (-1901));
      boolean boolean0 = eventState0.stop();
      assertEquals(-1901, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1.0), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-6042));
      eventState0.stepAccepted((-6042), (double[]) null);
      assertEquals(-6042, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-6042));
      eventState0.stepAccepted(0.0, (double[]) null);
      assertEquals(-6042, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1962.2), (-1962.2), (-1962.2));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1962.2), (-1962.2), 42);
      double[] doubleArray0 = new double[2];
      eventState0.reinitializeBegin((-1962.2), doubleArray0);
      assertEquals((-1962.2), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(42, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1962.2), (-1962.2), (-1962.2));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1962.2), (-1962.2), 42);
      double[] doubleArray0 = new double[2];
      eventState0.reinitializeBegin(Double.NaN, doubleArray0);
      assertEquals(42, eventState0.getMaxIterationCount());
      assertEquals((-1962.2), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-6042));
      eventState0.getConvergence();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-6042, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1962.2), (-1962.2), (-1962.2));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1962.2), (-1962.2), 42);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-1962.2), double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(42, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-6042));
      double double0 = eventState0.getEventTime();
      assertEquals(-6042, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, (-1254.866787), 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1254.866787), 20.08553692318767, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, int0);
      assertEquals((-1254.866787), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(20.08553692318767, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 18.0, 0.0, (-2078));
      eventState0.getEventHandler();
      assertEquals(-2078, eventState0.getMaxIterationCount());
      assertEquals(18.0, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
  }
}
