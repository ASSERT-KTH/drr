/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 21 18:03:21 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1073.6708886, 1073.6708886, 1073.6708886);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 2819.5492269945835, 2819.5492269945835, 277);
      double[] doubleArray0 = new double[8];
      eventState0.stepAccepted(2819.5492269945835, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(277, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(2819.5492269945835, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1073.6708886, 1073.6708886, 1073.6708886);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 2819.5492269945835, 2819.5492269945835, 277);
      double[] doubleArray0 = new double[8];
      eventState0.reinitializeBegin(2819.5492269945835, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2819.5492269945835, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(277, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(975.15002894, 975.15002894, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 975.15002894, 0.0, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(975.15002894, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1917.1613220129, 1917.1613220129, 1917.1613220129);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1917.1613220129, 1917.1613220129, 1659);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(1659, int0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1917.1613220129, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-571));
      eventState0.getMaxCheckInterval();
      assertEquals(-571, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-2951.0), (-1141.44296915487), 4264);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals((-2951.0), double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(4264, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(1141.44296915487, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1917.1613220129, 1917.1613220129, 1917.1613220129);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1917.1613220129, 1917.1613220129, 1659);
      eventState0.getEventHandler();
      assertFalse(eventState0.stop());
      assertEquals(1917.1613220129, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1659, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(2459.508425, 2459.508425, 2459.508425);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 961);
      eventState0.getConvergence();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(961, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, (-4417.0), (-1515));
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted((-1515.0), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 1955.6267719547693, 943.952, 3065);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(4591.457413093057, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(2459.508425, 2459.508425, 2459.508425);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 961);
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, (-4417.0), (-1515));
      double[] doubleArray0 = new double[3];
      boolean boolean0 = eventState0.reset((-4417.0), doubleArray0);
      assertEquals(4417.0, eventState0.getConvergence(), 0.01);
      assertEquals(-1515, eventState0.getMaxIterationCount());
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-571));
      boolean boolean0 = eventState0.stop();
      assertEquals(-571, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(2459.508425, 2459.508425, 2459.508425);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 961);
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted(961, doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(961, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      StepProblem stepProblem0 = new StepProblem(269.0, 269.0, 269.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-3931.5411249999997), (-3931.5411249999997), 2265);
      eventState0.stepAccepted(269.0, doubleArray0);
      assertEquals((-3931.5411249999997), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2265, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(73.972, 73.972, (-1.0));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-264.957338643), Double.NaN, 280);
      eventState0.reinitializeBegin((-1.0), (double[]) null);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(Double.NaN, eventState0.getConvergence(), 0.01);
      assertEquals(280, eventState0.getMaxIterationCount());
      assertEquals((-264.957338643), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1073.6708886, 1073.6708886, 1073.6708886);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 2819.5492269945835, 2819.5492269945835, 277);
      double[] doubleArray0 = new double[8];
      eventState0.reinitializeBegin(277, doubleArray0);
      assertEquals(2819.5492269945835, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(277, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1990.6399126643), (-1990.6399126643), (-1990.6399126643));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1990.6399126643), (-1990.6399126643), 0);
      double double0 = eventState0.getConvergence();
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals((-1990.6399126643), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(1990.6399126643, double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 1955.6267719547693, 943.952, 3065);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(3065, eventState0.getMaxIterationCount());
      assertEquals(943.952, eventState0.getConvergence(), 0.01);
      assertEquals(1955.6267719547693, double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-571));
      double double0 = eventState0.getEventTime();
      assertFalse(eventState0.stop());
      assertEquals(-571, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-268.86210885), 0.7853981633974483, (-3913));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals((-268.86210885), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.7853981633974483, eventState0.getConvergence(), 0.01);
      assertEquals((-3913), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-268.86210885), 0.7853981633974483, (-3913));
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.7853981633974483, eventState0.getConvergence(), 0.01);
      assertEquals(-3913, eventState0.getMaxIterationCount());
      assertEquals((-268.86210885), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }
}
