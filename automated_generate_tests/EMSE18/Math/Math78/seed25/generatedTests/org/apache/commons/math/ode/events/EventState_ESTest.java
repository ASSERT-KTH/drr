/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 27 22:52:08 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1.0), (-1.0), (-1.0));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, (-1.0), 0);
      double[] doubleArray0 = new double[8];
      eventState0.stepAccepted(0.1411200080598672, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1.0, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-77.6837199028165), (-1.0), 0);
      double[] doubleArray0 = new double[4];
      eventState0.reinitializeBegin(0.0, doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1.0, eventState0.getConvergence(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals((-77.6837199028165), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-476.9281861278872), (-476.9281861278872), 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-476.9281861278872), (-476.9281861278872), 2);
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-476.9281861278872), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(453.0, 453.0, 453.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 453.0, 453.0, (-5686));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(453.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals((-5686), int0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 2);
      eventState0.getMaxCheckInterval();
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1.0, 0.0, 2578.750057710849);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.0, 1.0, 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(1.0, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 2);
      eventState0.getEventHandler();
      assertFalse(eventState0.stop());
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2143.809988631442), (-2143.809988631442), (-2143.809988631442));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2143.809988631442), 0.0, (-1831));
      double double0 = eventState0.getConvergence();
      assertEquals(-1831, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2143.809988631442), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-2073.070195858271), (-2073.070195858271), 0);
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted(1387.55809, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 424.2143, 1.662337662337662, 0);
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(0.9640275800758169, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2143.809988631442), (-2143.809988631442), (-2143.809988631442));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2143.809988631442), 0.0, (-1831));
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 424.2143, 1.662337662337662, 0);
      double[] doubleArray0 = new double[8];
      boolean boolean0 = eventState0.reset(424.2143, doubleArray0);
      assertEquals(424.2143, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(1.662337662337662, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-476.9281861278872), (-476.9281861278872), 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-476.9281861278872), (-476.9281861278872), 2);
      boolean boolean0 = eventState0.stop();
      assertFalse(boolean0);
      assertEquals((-476.9281861278872), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.4, 0.4, 0.4);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.4, 0.4, 4033);
      eventState0.stepAccepted(0.0, (double[]) null);
      assertEquals(0.4, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(4033, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-476.9281861278872), (-476.9281861278872), 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-476.9281861278872), (-476.9281861278872), 2);
      eventState0.stepAccepted(0.0, (double[]) null);
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-476.9281861278872), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(861.55737459912, 861.55737459912, 861.55737459912);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 861.55737459912, 861.55737459912, 1186);
      double[] doubleArray0 = new double[5];
      eventState0.reinitializeBegin(1186, doubleArray0);
      assertEquals(1186, eventState0.getMaxIterationCount());
      assertEquals(861.55737459912, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(864.1522917024565, 864.1522917024565, 864.1522917024565);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 864.1522917024565, 864.1522917024565, (-618490607));
      double[] doubleArray0 = new double[7];
      eventState0.reinitializeBegin((-618490607), doubleArray0);
      assertEquals(864.1522917024565, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-618490607, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1260.368964, 1260.368964, 1260.368964);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1260.368964, 1260.368964, 1);
      double double0 = eventState0.getConvergence();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1260.368964, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(1, eventState0.getMaxIterationCount());
      assertEquals(1260.368964, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-341.74816), (-341.74816), 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-3751.9982889), 0.0, 793);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals((-3751.9982889), double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(793, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 2);
      double double0 = eventState0.getEventTime();
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-77.6837199028165), (-1.0), 0);
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals((-77.6837199028165), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(1.0, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-2073.070195858271), (-2073.070195858271), 0);
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals((-2073.070195858271), eventState0.getMaxCheckInterval(), 0.01);
  }
}
