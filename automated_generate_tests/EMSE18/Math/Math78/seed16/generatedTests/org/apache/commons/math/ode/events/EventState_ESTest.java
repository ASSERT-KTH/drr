/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 15 19:35:54 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-54.1236), (-54.1236), (-54.1236));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-54.1236), (-54.1236), 0);
      double[] doubleArray0 = new double[2];
      eventState0.stepAccepted(0.0, doubleArray0);
      assertEquals((-54.1236), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-54.1236), (-54.1236), (-54.1236));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-54.1236), (-54.1236), 0);
      double[] doubleArray0 = new double[2];
      eventState0.reinitializeBegin((-54.1236), doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals((-54.1236), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-54.1236), (-54.1236), (-54.1236));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-54.1236), (-54.1236), 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-54.1236), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1008.52), (-1008.52), (-1008.52));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1008.52), (-1008.52), (-386));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals((-1008.52), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals((-386), int0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-3449.283874665), (-1.0), (-1.0));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, (-3449.283874665), 419);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(3449.283874665, eventState0.getConvergence(), 0.01);
      assertEquals(419, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1398.925957842068, 1169.1911644804, 1398.925957842068);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1398.925957842068, 1169.1911644804, 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(1169.1911644804, eventState0.getConvergence(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(1398.925957842068, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1398.925957842068, 1169.1911644804, 1398.925957842068);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1398.925957842068, 1169.1911644804, 0);
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(1169.1911644804, eventState0.getConvergence(), 0.01);
      assertEquals(1398.925957842068, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(998.013259756, 998.013259756, 998.013259756);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 998.013259756, 0.0, 1069);
      double double0 = eventState0.getConvergence();
      assertFalse(eventState0.stop());
      assertEquals(998.013259756, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1069, eventState0.getMaxIterationCount());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-2881.56), (-2881.56), (-4303));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted(0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-623.8740951342336), 1400.556121393689, (-552));
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin(4425.5, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(998.013259756, 998.013259756, 998.013259756);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 998.013259756, 0.0, 1069);
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-623.8740951342336), 1400.556121393689, (-552));
      boolean boolean0 = eventState0.reset(809.6263069937, (double[]) null);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(boolean0);
      assertFalse(eventState0.stop());
      assertEquals(-552, eventState0.getMaxIterationCount());
      assertEquals((-623.8740951342336), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(1400.556121393689, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-3206.5373645), (-3206.5373645), (-3206.5373645));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1.0), (-3206.5373645), (-596));
      boolean boolean0 = eventState0.stop();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(boolean0);
      assertEquals(-596, eventState0.getMaxIterationCount());
      assertEquals(3206.5373645, eventState0.getConvergence(), 0.01);
      assertEquals((-1.0), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1398.925957842068, 1169.1911644804, 1398.925957842068);
      double[] doubleArray0 = new double[3];
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1398.925957842068, 1169.1911644804, 0);
      eventState0.stepAccepted(0.0, doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(1398.925957842068, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1169.1911644804, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((double) 3310, (double) 3310, (double) 3310);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (double) 3310, (double) 3310, 3310);
      double[] doubleArray0 = new double[0];
      eventState0.stepAccepted(3310, doubleArray0);
      assertEquals(3310, eventState0.getMaxIterationCount());
      assertEquals(3310.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-3206.5373645), (-3206.5373645), (-3206.5373645));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1.0), (-3206.5373645), (-596));
      eventState0.reinitializeBegin((-596), (double[]) null);
      assertEquals((-1.0), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(-596, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(3206.5373645, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1398.925957842068, 1169.1911644804, 1398.925957842068);
      double[] doubleArray0 = new double[3];
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1398.925957842068, 1169.1911644804, 0);
      eventState0.reinitializeBegin(1169.1911644804, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1169.1911644804, eventState0.getConvergence(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(1398.925957842068, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1656.533), (-1656.533), (-1656.533));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1656.533), (-1656.533), 3282);
      double double0 = eventState0.getConvergence();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(3282, eventState0.getMaxIterationCount());
      assertEquals((-1656.533), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(1656.533, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(13.0, (-1262.179076), (-1262.179076));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1262.179076), (-1063.28775), 2121);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals((-1262.179076), double0, 0.01);
      assertEquals(1063.28775, eventState0.getConvergence(), 0.01);
      assertEquals(2121, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-54.1236), (-54.1236), (-54.1236));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-54.1236), (-54.1236), 0);
      double double0 = eventState0.getEventTime();
      assertEquals((-54.1236), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 1.5, 1722);
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals(1.5, eventState0.getConvergence(), 0.01);
      assertEquals(1722, int0);
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-623.8740951342336), 1400.556121393689, (-552));
      eventState0.getEventHandler();
      assertEquals(-552, eventState0.getMaxIterationCount());
      assertEquals((-623.8740951342336), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(1400.556121393689, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }
}
