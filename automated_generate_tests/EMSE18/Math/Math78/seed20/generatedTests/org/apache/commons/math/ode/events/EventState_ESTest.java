/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 19 22:14:49 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 18.0);
      double[] doubleArray0 = new double[2];
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 18.0, 0.0, 2);
      eventState0.stepAccepted(18.0, doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(18.0, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 18.0);
      double[] doubleArray0 = new double[2];
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 18.0, 0.0, 2);
      eventState0.reinitializeBegin(18.0, doubleArray0);
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(18.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-738.97448422), (-738.97448422), 3);
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals(3, int0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-738.97448422), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1.0, 1.0, 1.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.0, 1.0, (-8));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals((-8), int0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1.0, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 1040.60171598, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-1787));
      eventState0.getMaxCheckInterval();
      assertEquals(-1787, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 18.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 18.0, 0.0, 2);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals(18.0, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 18.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 18.0, 0.0, 2);
      eventState0.getEventHandler();
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals(18.0, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 18.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 18.0, 0.0, 2);
      double double0 = eventState0.getConvergence();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals(18.0, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 732.4517405300321, 1476.0, 0);
      // Undeclared exception!
      try { 
        eventState0.stepAccepted((-2088.8), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-1.0), (-1.0), 4);
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin((-1.0), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 18.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 18.0, 0.0, 2);
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-633.94), (-633.94), (-633.94));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-633.94), (-633.94), 2899);
      boolean boolean0 = eventState0.reset((-633.94), (double[]) null);
      assertEquals(2899, eventState0.getMaxIterationCount());
      assertEquals((-633.94), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1.0, 1.0, 1.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.0, 1.0, (-8));
      boolean boolean0 = eventState0.stop();
      assertFalse(boolean0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-8, eventState0.getMaxIterationCount());
      assertEquals(1.0, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1.0, 1.0, 1.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.0, 1.0, (-8));
      double[] doubleArray0 = new double[5];
      eventState0.stepAccepted((-8), doubleArray0);
      assertEquals(1.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-8, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(3098.02, 3098.02, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 863.6602743036437, 3098.02, (-836));
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted(1.0, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(863.6602743036437, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(3098.02, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-836, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-633.94), (-633.94), (-633.94));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-633.94), (-633.94), 2914);
      eventState0.reinitializeBegin(2914, (double[]) null);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2914, eventState0.getMaxIterationCount());
      assertEquals((-633.94), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 18.0);
      double[] doubleArray0 = new double[2];
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 18.0, 0.0, 2);
      eventState0.reinitializeBegin(0.0, doubleArray0);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals(18.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-3862.63901), (-3862.63901), (-3862.63901));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-3862.63901), (double) 1, 1);
      double double0 = eventState0.getConvergence();
      assertFalse(eventState0.stop());
      assertEquals((-3862.63901), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1703.09081732), 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1703.09081732), 0.0, 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertFalse(eventState0.stop());
      assertEquals((-1703.09081732), double0, 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(3098.02, 3098.02, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 863.6602743036437, 3098.02, (-836));
      double double0 = eventState0.getEventTime();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3098.02, eventState0.getConvergence(), 0.01);
      assertEquals(863.6602743036437, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(-836, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 2.220446049250313E-16, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0, int0);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 0.0, (-3025));
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-3025, eventState0.getMaxIterationCount());
  }
}
