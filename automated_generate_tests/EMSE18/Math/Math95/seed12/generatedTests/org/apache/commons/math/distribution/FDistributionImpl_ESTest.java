/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 14 08:33:49 GMT 2017
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FDistributionImpl_ESTest extends FDistributionImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = null;
      try {
        fDistributionImpl0 = new FDistributionImpl((-1949.9338669), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0, 843.67217599499);
      // Undeclared exception!
      try { 
        fDistributionImpl0.inverseCumulativeProbability((-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // p must be between 0.0 and 1.0, inclusive.
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1642.3951499866528, 1642.3951499866528);
      double double0 = fDistributionImpl0.getInitialDomain(1642.3951499866528);
      assertEquals(1.0012192184303985, double0, 0.01);
      assertEquals(1642.3951499866528, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(4.086844028776982E-28, 4.086844028776982E-28);
      double double0 = fDistributionImpl0.getInitialDomain(4.086844028776982E-28);
      assertEquals((-2.043422014388491E-28), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(4.086844028776982E-28, 4.086844028776982E-28);
      // Undeclared exception!
      try { 
        fDistributionImpl0.inverseCumulativeProbability(1388.6577389198615);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // p must be between 0.0 and 1.0, inclusive.
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(4.086844028776982E-28, 4.086844028776982E-28);
      fDistributionImpl0.setDenominatorDegreesOfFreedom(4.086844028776982E-28);
      assertEquals(4.086844028776982E-28, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(2.0, 2.0);
      // Undeclared exception!
      try { 
        fDistributionImpl0.setDenominatorDegreesOfFreedom((-790.2699497599443));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(2.0, 2.0);
      // Undeclared exception!
      try { 
        fDistributionImpl0.setNumeratorDegreesOfFreedom(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(4.086844028776982E-28, 4.086844028776982E-28);
      fDistributionImpl0.setNumeratorDegreesOfFreedom(5049.547228009174);
      double double0 = fDistributionImpl0.cumulativeProbability(4.086844028776982E-28);
      assertEquals(5049.547228009174, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals((-1.2823075934420558E-12), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(2.0, 2.0);
      double double0 = fDistributionImpl0.cumulativeProbability((-470.48161));
      assertEquals(2.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(2.0, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(4.086844028776982E-28, 4.086844028776982E-28);
      double double0 = fDistributionImpl0.getDenominatorDegreesOfFreedom();
      assertEquals(4.086844028776982E-28, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(4.086844028776982E-28, 4.086844028776982E-28);
      double double0 = fDistributionImpl0.getNumeratorDegreesOfFreedom();
      assertEquals(4.086844028776982E-28, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = null;
      try {
        fDistributionImpl0 = new FDistributionImpl(104.4235043131, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
         verifyException("org.apache.commons.math.distribution.FDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0, 843.67217599499);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(1.0);
      assertEquals(843.67217599499, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.0, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1015.0018, 1015.0018);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals(1015.0018, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1015.0018, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(14.72692409602326, 14.72692409602326);
      double double0 = fDistributionImpl0.getDomainUpperBound(14.72692409602326);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(14.72692409602326, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(14.72692409602326, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(4.086844028776982E-28, 4.086844028776982E-28);
      double double0 = fDistributionImpl0.getDomainLowerBound((-1.2823075934420558E-12));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(4.086844028776982E-28, 4.086844028776982E-28);
      double double0 = fDistributionImpl0.cumulativeProbability(4.086844028776982E-28);
      assertEquals(0.5000000000000027, double0, 0.01);
  }
}
