/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 13 21:40:41 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.3333333333333333, 0.3333333333333333, 0.3333333333333333);
      double[] doubleArray0 = new double[4];
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.3333333333333333, 0.3333333333333333, 2481);
      eventState0.stepAccepted(0.3333333333333333, doubleArray0);
      assertEquals(2481, eventState0.getMaxIterationCount());
      assertEquals(0.3333333333333333, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-2695));
      double[] doubleArray0 = new double[3];
      eventState0.reinitializeBegin(0.0, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-2695, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.4771212547196624, 0.4771212547196624, (-1853.60489284));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.4771212547196624, 0.4771212547196624, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, int0);
      assertEquals(0.4771212547196624, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-3881.09249842), 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 1069.8296377270583, 2313);
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals(2313, int0);
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(1069.8296377270583, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.4771212547196624, 0.4771212547196624, (-1853.60489284));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.4771212547196624, 0.4771212547196624, 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(0.4771212547196624, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(822.43392869, 822.43392869, 822.43392869);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-203.99012833748043), 822.43392869, 32);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(822.43392869, eventState0.getConvergence(), 0.01);
      assertEquals(32, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-203.99012833748043), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-2695));
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-2695, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.25, 0.25, 0.25);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.25, 0.0, 2988);
      double double0 = eventState0.getConvergence();
      assertEquals(0.25, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2988, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-1317.42241718124), 0.0, (-2104));
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted((-1317.42241718124), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 11.0, (-1812.50703881), 1);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin((-1812.50703881), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.25, 0.25, 0.25);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.25, 0.0, 2988);
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((double) 0, (double) 0, (double) 0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (double) 0, (double) 0, (-2145679437));
      double[] doubleArray0 = new double[0];
      boolean boolean0 = eventState0.reset(2.0, doubleArray0);
      assertEquals(-2145679437, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.4771212547196624, 0.4771212547196624, (-1853.60489284));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.4771212547196624, 0.4771212547196624, 0);
      boolean boolean0 = eventState0.stop();
      assertEquals(0.4771212547196624, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertFalse(boolean0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.25, 0.25, 0.25);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.25, 0.0, 2988);
      double[] doubleArray0 = new double[9];
      eventState0.stepAccepted((-4280.642556495432), doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.25, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(2988, eventState0.getMaxIterationCount());
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((double) 0, (double) 0, (double) 0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (double) 0, (double) 0, (-2145679437));
      double[] doubleArray0 = new double[0];
      eventState0.stepAccepted(2.0, doubleArray0);
      assertEquals(-2145679437, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(452.80712099754, 306.623878772854, 452.80712099754);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 306.623878772854, 0.0, (-1161));
      double[] doubleArray0 = new double[8];
      eventState0.reinitializeBegin(4711.175541867034, doubleArray0);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(306.623878772854, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(-1161, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.3333333333333333, 0.3333333333333333, 0.3333333333333333);
      double[] doubleArray0 = new double[4];
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.3333333333333333, 0.3333333333333333, 2481);
      eventState0.reinitializeBegin((-5295.2117), doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(2481, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.3333333333333333, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(2.718281828459045, 2.718281828459045, 2.718281828459045);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 2.718281828459045, 2.718281828459045, 0);
      double double0 = eventState0.getConvergence();
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(2.718281828459045, double0, 0.01);
      assertEquals(2.718281828459045, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1.0, 1.0, 1.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.25, 621);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.25, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(621, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.3333333333333333, 0.3333333333333333, 0.3333333333333333);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.3333333333333333, 0.3333333333333333, 2481);
      double double0 = eventState0.getEventTime();
      assertEquals(2481, eventState0.getMaxIterationCount());
      assertEquals(0.3333333333333333, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(452.80712099754, 306.623878772854, 452.80712099754);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 306.623878772854, 0.0, (-1161));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals((-1161), int0);
      assertEquals(306.623878772854, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 0.0, (-1));
      eventState0.getEventHandler();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-1, eventState0.getMaxIterationCount());
  }
}
