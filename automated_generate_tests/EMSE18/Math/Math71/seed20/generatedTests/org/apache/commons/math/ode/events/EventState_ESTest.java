/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 19 23:26:01 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-117.2465), (-117.2465), (-117.2465));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-117.2465), (-117.2465), 0);
      eventState0.stepAccepted(0, (double[]) null);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-117.2465), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 166);
      double[] doubleArray0 = new double[1];
      eventState0.reinitializeBegin(0.0, doubleArray0);
      assertEquals(166, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.9, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(0, int0);
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.9, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 166);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(166, int0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 166);
      eventState0.getMaxCheckInterval();
      assertEquals(166, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(2767.528, 2767.528, 1.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1.3862943611198906, 322.8629174454, 1031);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(1031, eventState0.getMaxIterationCount());
      assertEquals(1.3862943611198906, double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(322.8629174454, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 166);
      eventState0.getEventHandler();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(166, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(4173.261390086987, 4173.261390086987, 4173.261390086987);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 4173.261390086987, 0.0, 0);
      double double0 = eventState0.getConvergence();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(4173.261390086987, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(0.0, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 732.4517405300321, 1476.0, 0);
      // Undeclared exception!
      try { 
        eventState0.stepAccepted((-2088.8), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-1.0), (-1.0), 4);
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin((-1.0), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(4173.261390086987, 4173.261390086987, 4173.261390086987);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 4173.261390086987, 0.0, 0);
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 166);
      double[] doubleArray0 = new double[1];
      boolean boolean0 = eventState0.reset(0.0, doubleArray0);
      assertFalse(boolean0);
      assertEquals(166, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 166);
      boolean boolean0 = eventState0.stop();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(166, eventState0.getMaxIterationCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 166);
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted(Double.NaN, doubleArray0);
      assertEquals(166, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[1];
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, (-2146163321));
      eventState0.stepAccepted(0.0, doubleArray0);
      assertEquals(-2146163321, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 6.0, 6.0, (-902));
      double[] doubleArray0 = new double[1];
      eventState0.reinitializeBegin(32.0, doubleArray0);
      assertEquals(6.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(-902, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(4173.261390086987, 4173.261390086987, 4173.261390086987);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 4173.261390086987, 0.0, 0);
      double[] doubleArray0 = new double[12];
      eventState0.reinitializeBegin(0.0, doubleArray0);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(4173.261390086987, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-88.17), (-88.17), (-88.17));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-88.17), (-88.17), 1526);
      double double0 = eventState0.getConvergence();
      assertEquals(1526, eventState0.getMaxIterationCount());
      assertEquals(88.17, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-88.17), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2.0), (-2.0), 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2.0), 0.0, 2);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-2.0), double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(2, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, 0.0, 166);
      double double0 = eventState0.getEventTime();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(166, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-740.835987979), (-740.835987979), (-740.835987979));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 815.55676, 815.55676, (-1468));
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(815.55676, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals((-1468), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 0.0, 0.0, (-3025));
      eventState0.getEventHandler();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-3025, eventState0.getMaxIterationCount());
  }
}
