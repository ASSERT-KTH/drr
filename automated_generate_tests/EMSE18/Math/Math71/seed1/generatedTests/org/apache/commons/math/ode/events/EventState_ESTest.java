/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 23:17:28 GMT 2017
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EventState_ESTest extends EventState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-14.559803072935406), (-14.559803072935406), (-14.559803072935406));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-14.559803072935406), (-14.559803072935406), 442);
      double[] doubleArray0 = new double[15];
      eventState0.stepAccepted((-14.559803072935406), doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(442, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-14.559803072935406), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-14.559803072935406), (-14.559803072935406), (-14.559803072935406));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-14.559803072935406), (-14.559803072935406), 442);
      double[] doubleArray0 = new double[15];
      eventState0.reinitializeBegin((-14.559803072935406), doubleArray0);
      assertEquals(442, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-14.559803072935406), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(31.441028201647555, 31.441028201647555, 31.441028201647555);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 31.441028201647555, 31.441028201647555, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(0, int0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(31.441028201647555, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1359.70839218594), (-0.25), (-3590.990787252));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, (-0.25), 7);
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(7, int0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.25, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(31.441028201647555, 31.441028201647555, 31.441028201647555);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 31.441028201647555, 31.441028201647555, 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(31.441028201647555, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-2048.99032304516), (-2048.99032304516), (-2048.99032304516));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-2048.99032304516), (-1.0), 3264);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-2048.99032304516), double0, 0.01);
      assertEquals(1.0, eventState0.getConvergence(), 0.01);
      assertEquals(3264, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1219.743, 3550.797, 1219.743);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1219.743, 1219.743, (-135));
      eventState0.getEventHandler();
      assertFalse(eventState0.stop());
      assertEquals(1219.743, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-135, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(550.0, 385.89582, (-304.817152498538));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-304.817152498538), 385.89582, (-27));
      double double0 = eventState0.getConvergence();
      assertEquals((-304.817152498538), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(-27, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(385.89582, double0, 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 3359.20687670574, 1.0, 0);
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        eventState0.stepAccepted(3040.3872171, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 1.662337662337662, 1.662337662337662, (-1288));
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        eventState0.reinitializeBegin((-1288), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1219.743, 3550.797, 1219.743);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1219.743, 1219.743, (-135));
      // Undeclared exception!
      try { 
        eventState0.evaluateStep((StepInterpolator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1813.8826), (-1813.8826), (-1813.8826));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1813.8826), 0.0, 473);
      double[] doubleArray0 = new double[4];
      boolean boolean0 = eventState0.reset(473, doubleArray0);
      assertFalse(boolean0);
      assertEquals((-1813.8826), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(473, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-14.559803072935406), (-14.559803072935406), (-14.559803072935406));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1557.77373), (-14.559803072935406), 442);
      boolean boolean0 = eventState0.stop();
      assertEquals(442, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(14.559803072935406, eventState0.getConvergence(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1557.77373), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-14.559803072935406), (-14.559803072935406), (-14.559803072935406));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1557.77373), (-14.559803072935406), 442);
      double[] doubleArray0 = new double[15];
      eventState0.stepAccepted((-882.1928144893786), doubleArray0);
      assertEquals((-1557.77373), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(14.559803072935406, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(442, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1813.8826), (-1813.8826), (-1813.8826));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1813.8826), 0.0, 473);
      double[] doubleArray0 = new double[4];
      eventState0.stepAccepted(0.0, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(473, eventState0.getMaxIterationCount());
      assertEquals((-1813.8826), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1359.70839218594), (-0.25), (-3590.990787252));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, (-0.25), 7);
      double[] doubleArray0 = new double[5];
      eventState0.reinitializeBegin(7, doubleArray0);
      assertEquals(0.25, eventState0.getConvergence(), 0.01);
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(7, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-14.559803072935406), (-14.559803072935406), (-14.559803072935406));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1557.77373), (-14.559803072935406), 442);
      double[] doubleArray0 = new double[15];
      eventState0.reinitializeBegin((-1557.77373), doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(14.559803072935406, eventState0.getConvergence(), 0.01);
      assertEquals((-1557.77373), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(442, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem((-1813.8826), (-1813.8826), (-1813.8826));
      EventState eventState0 = new EventState((EventHandler) stepProblem0, (-1813.8826), 0.0, 473);
      double double0 = eventState0.getConvergence();
      assertEquals(473, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals((-1813.8826), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 0.0, (-688.6679015), (-111));
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(0.0, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-111, eventState0.getMaxIterationCount());
      assertEquals(688.6679015, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 1.662337662337662, 1.662337662337662, (-1288));
      double double0 = eventState0.getEventTime();
      assertEquals(1.662337662337662, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(-1288, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(1219.743, 3550.797, 1219.743);
      EventState eventState0 = new EventState((EventHandler) stepProblem0, 1219.743, 1219.743, (-135));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals((-135), int0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(1219.743, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 272.32, 272.32, (-1571));
      eventState0.getEventHandler();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(-1571, eventState0.getMaxIterationCount());
      assertEquals(272.32, eventState0.getMaxCheckInterval(), 0.01);
  }
}
