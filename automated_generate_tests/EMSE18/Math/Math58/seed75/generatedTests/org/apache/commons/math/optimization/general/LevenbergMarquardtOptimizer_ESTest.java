/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 20 16:44:40 GMT 2017
 */

package org.apache.commons.math.optimization.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
import org.apache.commons.math.optimization.ConvergenceChecker;
import org.apache.commons.math.optimization.VectorialPointValuePair;
import org.apache.commons.math.optimization.general.CircleVectorial;
import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LevenbergMarquardtOptimizer_ESTest extends LevenbergMarquardtOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(2.2251E-308, 2.2251E-308, (-213.5593766798634));
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // evaluations
         //
         verifyException("org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(10.0, 10.0, 10.0);
      double[] doubleArray0 = new double[2];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      circleVectorial0.addPoint(0.0, 159);
      circleVectorial0.addPoint((-652.6105418713), 959.0);
      levenbergMarquardtOptimizer0.optimize(159, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      circleVectorial0.addPoint(2.2250738585072014E-308, 959.0);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // dimensions mismatch: 3 != 2
         //
         verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(180.5306702010973, 180.5306702010973, (-1212.7));
      levenbergMarquardtOptimizer0.cols = (-3237);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[2];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      circleVectorial0.addPoint(0.0, 206);
      circleVectorial0.addPoint(8.875856470674002, 8.875856470674002);
      levenbergMarquardtOptimizer0.optimize(206, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      levenbergMarquardtOptimizer0.cols = 206;
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-6.451211720399617);
      CircleVectorial circleVectorial0 = new CircleVectorial();
      circleVectorial0.addPoint((-6.451211720399617), 1048);
      circleVectorial0.addPoint((-652.4199121896518), 959.0);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(1048, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unable to perform Q.R decomposition on the CONVERGENCE_FAILEDx2 jacobian matrix
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 8.109623804260607;
      CircleVectorial circleVectorial0 = new CircleVectorial();
      circleVectorial0.addPoint(0.0, 207);
      circleVectorial0.addPoint(8.109623804260607, 207);
      levenbergMarquardtOptimizer0.optimize(207, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      levenbergMarquardtOptimizer0.doOptimize();
      assertEquals(133.33427869992832, levenbergMarquardtOptimizer0.getChiSquare(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.116875610148907E-14;
      CircleVectorial circleVectorial0 = new CircleVectorial();
      circleVectorial0.addPoint(2.116875610148907E-14, 1025);
      circleVectorial0.addPoint((-621.7208131653344), 958.717360541532);
      levenbergMarquardtOptimizer0.optimize(1025, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      levenbergMarquardtOptimizer0.doOptimize();
      levenbergMarquardtOptimizer0.doOptimize();
      assertEquals(39, levenbergMarquardtOptimizer0.getJacobianEvaluations());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 10.0;
      levenbergMarquardtOptimizer0.setConvergenceChecker((ConvergenceChecker<VectorialPointValuePair>) null);
      CircleVectorial circleVectorial0 = new CircleVectorial();
      circleVectorial0.addPoint(3165.593, 159);
      circleVectorial0.addPoint((-652.6105418713), 0.0);
      levenbergMarquardtOptimizer0.optimize(159, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(5, levenbergMarquardtOptimizer0.getJacobianEvaluations());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(2.116875610148907E-14, 2.116875610148907E-14, 2.116875610148907E-14, 2.116875610148907E-14, 2.116875610148907E-14);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.116875610148907E-14;
      CircleVectorial circleVectorial0 = new CircleVectorial();
      circleVectorial0.addPoint(2.116875610148907E-14, 1048);
      circleVectorial0.addPoint((-652.4199121896518), 958.717360541532);
      VectorialPointValuePair vectorialPointValuePair0 = levenbergMarquardtOptimizer0.optimize(1048, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(vectorialPointValuePair0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 8.109623804260607;
      CircleVectorial circleVectorial0 = new CircleVectorial();
      circleVectorial0.addPoint(0.0, 206);
      circleVectorial0.addPoint(8.109623804260607, 206);
      levenbergMarquardtOptimizer0.optimize(206, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(9, levenbergMarquardtOptimizer0.getJacobianEvaluations());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 8.875856470674002;
      CircleVectorial circleVectorial0 = new CircleVectorial();
      circleVectorial0.addPoint(0.0, 206);
      circleVectorial0.addPoint(8.875856470674002, 8.875856470674002);
      levenbergMarquardtOptimizer0.optimize(206, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray0);
      levenbergMarquardtOptimizer0.doOptimize();
      assertEquals(4.481162348843307E-28, levenbergMarquardtOptimizer0.getChiSquare(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      levenbergMarquardtOptimizer0.optimize(839, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray1);
  }
}
