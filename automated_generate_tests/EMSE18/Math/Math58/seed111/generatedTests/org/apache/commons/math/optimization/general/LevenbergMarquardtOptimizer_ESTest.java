/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 20 20:46:50 GMT 2017
 */

package org.apache.commons.math.optimization.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
import org.apache.commons.math.optimization.VectorialPointValuePair;
import org.apache.commons.math.optimization.general.CircleVectorial;
import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LevenbergMarquardtOptimizer_ESTest extends LevenbergMarquardtOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(1974.0, (-2.356194490192345), (-2.356194490192345));
      double[] doubleArray0 = new double[1];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray1 = new double[2];
      circleVectorial0.addPoint(1974.0, 1236.5);
      VectorialPointValuePair vectorialPointValuePair0 = levenbergMarquardtOptimizer0.optimize(1826, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray1);
      VectorialPointValuePair vectorialPointValuePair1 = levenbergMarquardtOptimizer0.doOptimize();
      assertFalse(vectorialPointValuePair1.equals((Object)vectorialPointValuePair0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // evaluations
         //
         verifyException("org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-640.5271533299996), 0.0, 0.0);
      levenbergMarquardtOptimizer0.cols = (-2026);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(1974.0, 1974.0, 1974.0, 1974.0, 0.0);
      double[] doubleArray0 = new double[1];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray1 = new double[2];
      circleVectorial0.addPoint(1974.0, 1236.5);
      levenbergMarquardtOptimizer0.optimize(1826, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray1);
      levenbergMarquardtOptimizer0.cols = 1826;
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(1958.3956188153709, 1958.3956188153709, 1958.3956188153709, 1958.3956188153709, (-0.3945942365298468));
      double[] doubleArray0 = new double[1];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray1 = new double[2];
      circleVectorial0.addPoint(1958.3956188153709, (-0.3945942365298468));
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(1826, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(336.22, (-0.036643397551302276), 336.22, 336.22, 336.22);
      double[] doubleArray0 = new double[1];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = (-0.036643397551302276);
      circleVectorial0.addPoint(336.22, (-0.036643397551302276));
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(1826, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unable to perform Q.R decomposition on the CONVERGENCE_FAILEDx1 jacobian matrix
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-2.356194490192345), 0.1666666505, 0.1666666505, (-2.356194490192345), 1974.0);
      double[] doubleArray0 = new double[1];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray1 = new double[2];
      circleVectorial0.addPoint(1974.0, 1974.0);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(1826, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // orthogonality tolerance is too small (CONVERGENCE_FAILED), solution is orthogonal to the jacobian
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(1974.0, (-2.356194490192345), (-2.356194490192345));
      double[] doubleArray0 = new double[1];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = 1974.0;
      circleVectorial0.addPoint(1974.0, 1236.5);
      VectorialPointValuePair vectorialPointValuePair0 = levenbergMarquardtOptimizer0.optimize(1826, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray1);
      assertNotNull(vectorialPointValuePair0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-2.356194490192345), 0.1666666505, 0.0, (-2.356194490192345), 1974.0);
      double[] doubleArray0 = new double[1];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.7976931348623157E308;
      circleVectorial0.addPoint(1974.0, 1236.5);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(1826, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // orthogonality tolerance is too small (CONVERGENCE_FAILED), solution is orthogonal to the jacobian
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(1984.1483271700324, (-2.356194490192345), (-2.356194490192345));
      double[] doubleArray0 = new double[1];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 1984.1483271700324;
      circleVectorial0.addPoint(1984.1483271700324, 1236.5);
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.optimize(1826, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parameters relative tolerance is too small (CONVERGENCE_FAILED), no further improvement in the approximate solution is possible
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[1];
      CircleVectorial circleVectorial0 = new CircleVectorial();
      double[] doubleArray1 = new double[2];
      circleVectorial0.addPoint(1974.0, 1826);
      levenbergMarquardtOptimizer0.optimize(1826, (DifferentiableMultivariateVectorialFunction) circleVectorial0, doubleArray0, doubleArray0, doubleArray1);
      levenbergMarquardtOptimizer0.rows = 104;
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // dimensions mismatch: 1 != 104
         //
         verifyException("org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer", e);
      }
  }
}
