/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 27 20:45:04 GMT 2017
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex((-823.0), 0.0);
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-0.40193151506260144));
      Complex complex1 = complex0.sqrt();
      assertEquals(0.44829204491190866, complex1.getReal(), 0.01);
      assertEquals((-0.40193151506260144), complex0.getImaginary(), 0.01);
      assertEquals((-0.44829204491190866), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-1052.0530677352426), (-1052.0530677352426));
      complex0.hashCode();
      assertFalse(complex0.isInfinite());
      assertEquals((-1052.0530677352426), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1052.0530677352426), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 1.0);
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(2845.2940790402695, 2845.2940790402695);
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2845.2940790402695, complex0.getImaginary(), 0.01);
      assertEquals(2845.2940790402695, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.atan();
      assertTrue(complex2.isNaN());
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.tanh();
      assertEquals((-0.27175258531951174), complex1.getImaginary(), 0.01);
      assertEquals((-1.0839233273386948), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 524.6595717081932);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt1z();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(3.59523162184993E227, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-1534.937575603), 0.0);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1534.937249856819, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.sqrt1z();
      assertEquals((-0.7861513777574233), complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.sqrt();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-1322.8313865608875), (-1322.8313865608875));
      Complex complex1 = complex0.sinh();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-1322.8313865608875), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-1322.8313865608875), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.sinh();
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-0.6349639147847361), complex1.getReal(), 0.01);
      assertEquals((-1.2984575814159773), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-232.9548482), (-232.9548482));
      Complex complex1 = complex0.sin();
      assertEquals((-232.9548482), complex0.getImaginary(), 0.01);
      assertEquals((-3.4032259695948373E100), complex1.getReal(), 0.01);
      assertEquals((-232.9548482), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-6.585274619450337E100), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2181.835563448);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.multiply(complex0);
      Complex complex3 = complex2.pow(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.multiply(0.9327217101831833);
      assertEquals(1.0558146299690612, complex3.getImaginary(), 0.01);
      assertEquals((-0.40930120630853717), complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-1391.1356));
      Complex complex1 = complex0.multiply(6.283185307179586);
      assertEquals((-8740.76276221446), complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(6.283185307179586, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1391.1356), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 1.0);
      Complex complex2 = complex1.log();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2181.835563448);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.log();
      assertEquals((-1.5707963267948966), complex2.getImaginary(), 0.01);
      assertEquals((-2181.835563448), complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(7.687921803080313, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(634.76160560042, (-1919.841));
      Complex complex1 = complex0.tan();
      boolean boolean0 = complex1.isNaN();
      assertTrue(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals(634.76160560042, complex0.getReal(), 0.01);
      assertEquals((-1919.841), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(2847.5145620740973, 2847.5145620740973);
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex1.isInfinite();
      assertTrue(boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2847.5145620740973, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 524.6595717081932);
      Complex complex1 = complex0.cos();
      double double0 = complex1.getReal();
      assertFalse(complex1.isInfinite());
      assertEquals(524.6595717081932, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(3.59523162184993E227, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(2310.725909296, 2310.725909296);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.subtract(complex1);
      double double0 = complex2.getReal();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getImaginary();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-5382.964), 0.0);
      Complex complex1 = complex0.atan();
      double double0 = complex1.getImaginary();
      assertEquals((-1.5706105555379282), complex1.getReal(), 0.01);
      assertEquals(1.1102230246251564E-16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getArgument();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-232.9548482), (-232.9548482));
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertEquals((-2.356194490192345), double0, 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(2845.2940790402695, 2845.2940790402695);
      Complex complex1 = complex0.exp();
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(2845.2940790402695, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-5382.964), 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.exp();
      assertEquals(3.141592653589793, complex1.getImaginary(), 0.01);
      assertEquals((-5382.964000000004), complex2.getReal(), 0.01);
      assertEquals(6.592229632525437E-13, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-345.562), (-0.7853981633974483));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.divide(complex1);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-345.562), (-0.7853981633974483));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.divide(complex1);
      assertEquals((-18.589309999712626), complex2.getImaginary(), 0.01);
      assertEquals(0.021124995048487274, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 0.0);
      Complex complex1 = complex0.createComplex(2556.0, Double.NaN);
      assertEquals(2556.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-0.40193151506260144));
      Complex complex1 = complex0.createComplex((-0.40193151506260144), 0.0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-0.40193151506260144), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-1534.937575603), 0.0);
      Complex complex1 = complex0.createComplex(2.0, (-1534.937575603));
      Complex complex2 = complex0.pow(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-1534.937575603), 0.0);
      Complex complex1 = complex0.cos();
      assertFalse(complex1.isInfinite());
      assertEquals((-0.2663115199104261), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2181.835563448);
      Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.conjugate();
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-1391.1356));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.conjugate();
      assertEquals(1391.1356, complex1.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertEquals((-1391.1356), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(8.0, 8.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.asin();
      assertTrue(complex4.isInfinite());
      assertEquals(2.687150614702758E93, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-994.5017), (-994.5017));
      Complex complex1 = complex0.asin();
      assertEquals((-0.7853980370114528), complex1.getReal(), 0.01);
      assertEquals((-7.941962578534217), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(720.34809, 2.7553817452272217E-6);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.add(complex0);
      assertEquals(720.34809, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(2.7553817452272217E-6, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.7553817452272217E-6, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(2882.8659883799173, 2882.8659883799173);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.add(complex0);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-0.40193151506260144));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.add(complex1);
      assertEquals((-0.7823933159496961), complex2.getImaginary(), 0.01);
      assertEquals(1.8406142179058704, complex2.getReal(), 0.01);
      assertEquals(0.9203071089529352, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-0.39119665797484804), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-5382.964), 0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.add(complex1);
      assertEquals((-3.1412211110758563), complex2.getReal(), 0.01);
      assertEquals(2.2204460492503128E-16, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 0.0);
      Complex complex1 = complex0.acos();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.3169578969248164, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-1534.937575603), 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tan();
      assertEquals((-0.9999997877788739), complex2.getImaginary(), 0.01);
      assertEquals((-5.197917904815199E-23), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-1391.1356));
      complex0.nthRoot(1398);
      // Undeclared exception!
      complex0.nthRoot(3955);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-994.5017), (-994.5017));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-994.5017), complex0.getReal(), 0.01);
      assertEquals((-994.5017), complex0.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotSame(complex3, complex2);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-994.5017), (-994.5017));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.log();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-1534.937575603), 0.0);
      Complex complex1 = complex0.exp();
      assertFalse(complex1.isInfinite());
      assertEquals((-1534.937575603), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(720.34809, 2.7553817452272217E-6);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.subtract(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(720.34809, complex0.getReal(), 0.01);
      assertEquals(2.7553817452272217E-6, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-1534.937575603), 0.0);
      Complex complex1 = complex0.negate();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1534.937575603, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1534.937575603), complex0.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(2845.2940790402695, 2845.2940790402695);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(complex0);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(2845.2940790402695, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(2845.2940790402695, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 524.6595717081932);
      Complex complex1 = complex0.divide(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.sinh();
      double double0 = complex1.abs();
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.6349639147847361, complex1.getReal(), 0.01);
      assertEquals(1.4453965766582497, double0, 0.01);
      assertEquals(1.2984575814159773, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(1238.865479, 1238.865479);
      Complex complex1 = complex0.cos();
      double double0 = complex1.abs();
      assertEquals(1238.865479, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-345.562), (-0.7853981633974483));
      double double0 = complex0.abs();
      assertEquals((-345.562), complex0.getReal(), 0.01);
      assertEquals((-0.7853981633974483), complex0.getImaginary(), 0.01);
      assertEquals(345.5628925308316, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-702.1769338369073), Double.POSITIVE_INFINITY);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals((-702.1769338369073), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.negate();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-1534.937575603), 0.0);
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertEquals(3.141592653589793, double0, 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-232.9548482), (-232.9548482));
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertEquals((-232.9548482), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-232.9548482), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-232.9548482), (-232.9548482));
      double double0 = complex0.getImaginary();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-232.9548482), complex0.getReal(), 0.01);
      assertEquals((-232.9548482), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getReal();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-994.5017), (-994.5017));
      Complex complex1 = complex0.sin();
      List<Complex> list0 = complex1.nthRoot(43);
      assertEquals(1, list0.size());
      assertEquals((-994.5017), complex0.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5017), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(634.76160560042, (-1919.841));
      Complex complex1 = complex0.tan();
      complex1.nthRoot(1);
      assertEquals((-1919.841), complex0.getImaginary(), 0.01);
      assertEquals(634.76160560042, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-1997.918249774), 0.0);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-994.5017), (-994.5017));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.tanh();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5017), complex0.getImaginary(), 0.01);
      assertEquals((-994.5017), complex0.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(634.76160560042, (-1919.841));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals((-1919.841), complex0.getImaginary(), 0.01);
      assertEquals(634.76160560042, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-5382.964), 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sqrt();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(6.056760083503205, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-1052.0530677352426), (-1052.0530677352426));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.sinh();
      assertTrue(complex1.isInfinite());
      assertSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1052.0530677352426), complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-1052.0530677352426), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-1052.0530677352426), (-1052.0530677352426));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.sin();
      assertFalse(complex0.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals((-1052.0530677352426), complex0.getImaginary(), 0.01);
      assertEquals((-1052.0530677352426), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex1.exp();
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-994.5017), (-994.5017));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.cos();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertTrue(complex3.equals((Object)complex2));
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-1052.0530677352426), (-1052.0530677352426));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.atan();
      assertTrue(complex3.equals((Object)complex2));
      assertEquals((-1052.0530677352426), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-1052.0530677352426), complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-994.5017), (-994.5017));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.acos();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isNaN());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-1052.0530677352426), (-1052.0530677352426));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.subtract(complex2);
      assertTrue(complex1.isInfinite());
      assertNotSame(complex3, complex2);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals((-1052.0530677352426), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-994.5017), (-994.5017));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.negate();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-994.5017), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals((-994.5017), complex0.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertNotSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(0.0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-994.5017), (-994.5017));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply((-994.5017));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-994.5017), complex0.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-994.5017), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex((-994.5017), (-994.5017));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.multiply((-994.5017));
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex((-994.5017), (-994.5017));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply(complex1);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-994.5017), complex0.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals((-994.5017), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-994.5017), (-994.5017));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.multiply(complex2);
      assertTrue(complex1.isInfinite());
      assertNotSame(complex3, complex2);
      assertEquals((-994.5017), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-994.5017), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex3.isNaN());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex((-1052.0530677352426), (-1052.0530677352426));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      complex2.hashCode();
      assertEquals((-1052.0530677352426), complex0.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals((-1052.0530677352426), complex0.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.subtract(complex0);
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 524.6595717081932);
      Complex complex1 = complex0.multiply(complex0);
      boolean boolean0 = complex0.equals(complex1);
      assertEquals((-275267.6661850247), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertEquals(524.6595717081932, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(3397.0, 3397.0);
      Complex complex1 = complex0.tanh();
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(3397.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(3397.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.35880272784681905);
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex1.isInfinite());
      assertEquals(0.35880272784681905, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.equals(complex0);
      assertFalse(complex0.isInfinite());
      assertTrue(boolean0);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(8.0, 8.0);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertEquals(8.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(8.0, complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex((-1322.8313865608875), (-1322.8313865608875));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex1);
      assertTrue(complex2.isNaN());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals((-1322.8313865608875), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex((-1322.8313865608875), (-1322.8313865608875));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-1322.8313865608875), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-460.846744323));
      Complex complex1 = complex0.atan();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals((-0.0021699221744298125), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex0.divide(complex1);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.sqrt1z();
      assertSame(complex3, complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex((-994.5017), (-994.5017));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.divide(complex1);
      assertTrue(complex1.isInfinite());
      assertEquals((-994.5017), complex0.getReal(), 0.01);
      assertEquals((-994.5017), complex0.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertNotSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex((-994.5017), (-994.5017));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.conjugate();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-994.5017), complex0.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals((-994.5017), complex0.getReal(), 0.01);
      assertNotSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2181.835563448);
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.acos();
      assertEquals((-1.038642403655272E10), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex((-1052.0530677352426), (-1052.0530677352426));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      double double0 = complex2.abs();
      assertTrue(complex1.isInfinite());
      assertEquals((-1052.0530677352426), complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.cosh();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getField();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2181.835563448);
      Complex complex1 = complex0.pow(complex0);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      String string0 = complex0.toString();
      assertFalse(complex0.isInfinite());
      assertEquals("(0.0, 0.0)", string0);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.isNaN();
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2181.835563448);
      Complex complex1 = (Complex)complex0.readResolve();
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(2181.835563448, complex1.getImaginary(), 0.01);
  }
}
