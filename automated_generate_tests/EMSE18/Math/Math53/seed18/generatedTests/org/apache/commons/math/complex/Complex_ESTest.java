/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 18 20:39:53 GMT 2017
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.sinh();
      assertFalse(complex1.isInfinite());
      assertEquals((-0.6349639147847361), complex1.getReal(), 0.01);
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertEquals((-1.2984575814159773), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-0.1428571423679182), 0.0);
      Complex complex1 = complex0.negate();
      complex1.hashCode();
      assertEquals(0.1428571423679182, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-0.1428571423679182), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(197.687, 197.687);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.conjugate();
      boolean boolean0 = complex1.equals(complex2);
      assertFalse(boolean0);
      assertEquals(0.7854013619522158, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(901.52138362482, 5859.582628901374);
      Complex complex1 = complex0.sqrt1z();
      boolean boolean0 = complex1.equals(complex0);
      assertEquals((-901.5213707999723), complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertEquals(5859.582712258527, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-179.5), (-179.5));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      assertEquals((-1.3619226015966137E-78), complex2.getImaginary(), 0.01);
      assertEquals(1.3619226015966137E-78, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-0.1428571423679182), 0.0);
      Complex complex1 = complex0.tan();
      assertEquals((-0.14383695893684464), complex1.getReal(), 0.01);
      assertEquals((-0.1428571423679182), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-179.5), (-179.5));
      Complex complex1 = complex0.tan();
      assertEquals((-179.5), complex0.getReal(), 0.01);
      assertEquals((-1.8548331727396884E-156), complex1.getReal(), 0.01);
      assertEquals((-179.5), complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-190.313), 0.0);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(190.31037273096808, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-0.1428571423679182), 0.0);
      Complex complex1 = complex0.sin();
      assertEquals((-0.1423717293080226), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.1428571423679182), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-1437.8949128549684), (-1.7168146928204135));
      Complex complex1 = complex0.sin();
      assertFalse(complex1.isInfinite());
      assertEquals((-1.7168146928204135), complex0.getImaginary(), 0.01);
      assertEquals((-1.5568767612494936), complex1.getImaginary(), 0.01);
      assertEquals((-1437.8949128549684), complex0.getReal(), 0.01);
      assertEquals(2.344642253604988, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(1090.8, 1090.8);
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex0.subtract(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-0.1428571423679182), 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.pow(complex1);
      assertEquals((-0.13997158555717432), complex2.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-0.004496260425209693), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1535.68));
      Complex complex1 = complex0.pow(complex0);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1680.2505094541793);
      Complex complex1 = complex0.negate();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals((-1680.2505094541793), complex1.getImaginary(), 0.01);
      assertEquals(1680.2505094541793, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(2886.48557052599, 1.4456468917292502E-16);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex2.multiply(complex3);
      assertEquals((-2.864442713033344E-13), complex4.getReal(), 0.01);
      assertEquals((-2318.546338222869), complex4.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-0.1428571423679182), 0.0);
      Complex complex1 = complex0.multiply((double) 1);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-0.1428571423679182), complex0.getReal(), 0.01);
      assertEquals((-0.1428571423679182), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(5.0, (-173.756));
      Complex complex1 = complex0.multiply(5.0);
      assertEquals(25.0, complex1.getReal(), 0.01);
      assertEquals((-868.78), complex1.getImaginary(), 0.01);
      assertEquals((-173.756), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(5.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.log();
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-179.5), (-179.5));
      Complex complex1 = complex0.log();
      assertEquals((-179.5), complex0.getImaginary(), 0.01);
      assertEquals(5.536748798208306, complex1.getReal(), 0.01);
      assertEquals((-2.356194490192345), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(2886.48557052599, 1.4456468917292502E-16);
      Complex complex1 = complex0.tanh();
      boolean boolean0 = complex1.isNaN();
      assertTrue(boolean0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.4456468917292502E-16, complex0.getImaginary(), 0.01);
      assertEquals(2886.48557052599, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1680.2505094541793);
      boolean boolean0 = complex0.isInfinite();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(boolean0);
      assertEquals(1680.2505094541793, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getReal();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-1430.807), (-1430.807));
      Complex complex1 = complex0.tanh();
      double double0 = complex1.getReal();
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1430.807), complex0.getImaginary(), 0.01);
      assertEquals((-1430.807), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(2.0, 0.49999999999999994);
      double double0 = complex1.getImaginary();
      assertFalse(complex1.isInfinite());
      assertEquals(0.49999999999999994, double0, 0.01);
      assertEquals(2.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-1757.653243757315), (-1757.653243757315));
      double double0 = complex0.getImaginary();
      assertEquals((-1757.653243757315), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1757.653243757315), double0, 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      double double0 = complex1.getArgument();
      assertEquals(3.141592653589793, double0, 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      double double0 = complex0.getArgument();
      assertEquals((-2.356194490192345), double0, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-1437.8949128549684), (-1.7168146928204135));
      Complex complex1 = complex0.exp();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals((-1.7168146928204135), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(1694.24251, 1694.24251);
      Complex complex1 = complex0.exp();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(1694.24251, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(1988.0, (-60.161));
      Complex complex1 = new Complex((-60.161), (-60.161));
      Complex complex2 = complex1.divide(complex0);
      assertFalse(complex2.isInfinite());
      assertEquals((-0.029319428878017677), complex2.getReal(), 0.01);
      assertEquals((-0.031149339115055543), complex2.getImaginary(), 0.01);
      assertEquals((-60.161), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex((-1329.30664321825), 0.0);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1329.30664321825), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(715.430166972, 715.430166972);
      Complex complex2 = complex1.cosh();
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(715.430166972, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-460.9248258), (-460.9248258));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.subtract(complex0);
      assertEquals((-5.83836321936895E199), complex2.getImaginary(), 0.01);
      assertEquals((-4.735780660324489E199), complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-1430.807), (-1430.807));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.conjugate();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-179.5), (-179.5));
      Complex complex1 = complex0.conjugate();
      assertEquals((-179.5), complex0.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertEquals((-179.5), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-179.5), (-179.5));
      Complex complex1 = complex0.atan();
      assertEquals((-1.5680107970659767), complex1.getReal(), 0.01);
      assertEquals((-0.0027855009114803077), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.7976931348623157E308));
      Complex complex1 = complex0.asin();
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals((-1.7976931348623157E308), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-0.1428571423679182), 0.0);
      Complex complex1 = complex0.asin();
      assertEquals(1.1102230246251565E-16, complex1.getImaginary(), 0.01);
      assertEquals((-0.14334756841107088), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(293.70625018345, 1.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.asin();
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0034047689873338604, complex1.getReal(), 0.01);
      assertEquals(5.275704289837927E-4, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex2 = complex1.add(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-0.99), Double.NaN);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.add(complex1);
      assertEquals((-0.99), complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-0.99), Double.NaN);
      Complex complex1 = complex0.add(complex0);
      assertTrue(complex1.isNaN());
      assertEquals((-1.98), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-0.99), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.acos();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-179.5), (-179.5));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.acos();
      assertEquals((-142.2067437904459), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-0.1428571423679182), 0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.acos();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-2.2204460492503128E-16), complex3.getImaginary(), 0.01);
      assertEquals(1.7136554715120462, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.nthRoot(610722);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-4501.1292259), (-4501.1292259));
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(5169.02375, 5169.02375);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-179.5), (-179.5));
      Complex complex1 = complex0.sqrt();
      assertEquals(6.097185188509964, complex1.getReal(), 0.01);
      assertEquals((-14.71990717440111), complex1.getImaginary(), 0.01);
      assertEquals((-179.5), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-179.5), (-179.5));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.sqrt();
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals((-4.107073474049632E77), complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.8797080702784849E77, complex1.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-179.5), (-179.5));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.log();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-4.107073474049632E77), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertSame(complex4, complex3);
      assertEquals((-1.8797080702784849E77), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-0.1428571423679182), 0.0);
      Complex complex1 = complex0.subtract(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(4.455505956692757, (-1357.84184));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.subtract(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-1357.84184), complex0.getImaginary(), 0.01);
      assertEquals(4.455505956692757, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(2077.2442979075645, 2077.2442979075645);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.multiply(complex1);
      assertEquals(2077.2442979075645, complex0.getReal(), 0.01);
      assertEquals(2077.2442979075645, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(1090.8, 1090.8);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1090.8, complex0.getImaginary(), 0.01);
      assertEquals(1090.8, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-1430.807), (-1430.807));
      Complex complex1 = complex0.divide(complex0);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.7976931348623157E308));
      Complex complex1 = complex0.divide(complex0);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.7976931348623157E308));
      double double0 = complex0.abs();
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals((-1.7976931348623157E308), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(2220.4939289027, (-1625.7587));
      Complex complex1 = complex0.sinh();
      double double0 = complex1.abs();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals((-1625.7587), complex0.getImaginary(), 0.01);
      assertEquals(2220.4939289027, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-0.1428571423679182), 0.0);
      double double0 = complex0.abs();
      assertEquals(0.1428571423679182, double0, 0.01);
      assertEquals((-0.1428571423679182), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.isInfinite();
      assertFalse(complex0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getImaginary();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(complex0);
      assertFalse(complex0.isNaN());
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-1430.807), (-1430.807));
      double double0 = complex0.getReal();
      assertFalse(complex0.isInfinite());
      assertEquals((-1430.807), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1430.807), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(1694.24251, 1694.24251);
      Complex complex1 = complex0.sinh();
      List<Complex> list0 = complex1.nthRoot(2277);
      assertTrue(complex1.isInfinite());
      assertEquals(1, list0.size());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(1694.24251, complex0.getReal(), 0.01);
      assertEquals(1694.24251, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-460.9248258), (-460.9248258));
      List<Complex> list0 = complex0.nthRoot(37);
      assertEquals((-460.9248258), complex0.getImaginary(), 0.01);
      assertEquals(37, list0.size());
      assertEquals((-460.9248258), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-1430.807), (-1430.807));
      try { 
        complex0.nthRoot((-823));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -823
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-0.99), Double.NaN);
      List<Complex> list0 = complex0.nthRoot(118);
      assertEquals(1, list0.size());
      assertEquals((-0.99), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-179.5), (-179.5));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.tanh();
      assertTrue(complex3.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1.8797080702784849E77), complex1.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
      assertEquals((-4.107073474049632E77), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1114.5846);
      Complex complex1 = complex0.sqrt();
      assertEquals(1114.5846, complex0.getImaginary(), 0.01);
      assertEquals(23.607039204440692, complex1.getImaginary(), 0.01);
      assertEquals(23.607039204440696, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.sinh();
      assertFalse(complex0.isInfinite());
      assertSame(complex2, complex1);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 225.5134);
      Complex complex1 = complex0.sin();
      assertFalse(complex0.isInfinite());
      assertEquals(225.5134, complex0.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.cosh();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-0.99), Double.NaN);
      Complex complex1 = complex0.cos();
      assertEquals((-0.99), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-179.5), (-179.5));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.tan();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1.8797080702784849E77), complex1.getImaginary(), 0.01);
      assertEquals((-4.107073474049632E77), complex1.getReal(), 0.01);
      assertTrue(complex4.equals((Object)complex2));
      assertSame(complex4, complex3);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 225.5134);
      Complex complex1 = complex0.asin();
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(225.5134, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-0.99), Double.NaN);
      Complex complex1 = complex0.acos();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals((-0.99), complex0.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(1090.8, 1090.8);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(2483.030720736215, 2483.030720736215);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.subtract(complex1);
      assertTrue(complex3.isNaN());
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertNotSame(complex3, complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(2483.030720736215, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-0.99), Double.NaN);
      Complex complex1 = complex0.negate();
      assertFalse(complex0.isInfinite());
      assertEquals((-0.99), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply((-2907.9));
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(1694.24251, 1694.24251);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply(1694.24251);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(1694.24251, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.multiply(387.1505162);
      assertFalse(complex0.isInfinite());
      assertFalse(complex2.isInfinite());
      assertFalse(complex0.isNaN());
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-1430.807), (-1430.807));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply(complex1);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex1.isInfinite());
      assertEquals((-1430.807), complex0.getReal(), 0.01);
      assertEquals((-1430.807), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, Double.NEGATIVE_INFINITY);
      Complex complex2 = complex1.asin();
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex((-179.5), (-179.5));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.multiply(complex0);
      assertEquals(1.8797080702784849E77, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals((-4.107073474049632E77), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.pow(complex0);
      complex1.hashCode();
      assertFalse(complex0.isNaN());
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      boolean boolean0 = complex1.equals(complex0);
      assertTrue(boolean0);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(197.687, 197.687);
      Complex complex1 = complex0.conjugate();
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(197.687, complex0.getReal(), 0.01);
      assertEquals(197.687, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex((-179.5), (-179.5));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.tanh();
      boolean boolean0 = complex0.equals(complex2);
      assertEquals(1.8797080702784849E77, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals((-4.107073474049632E77), complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.equals("(1.0, 0.0)");
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex((-179.5), (-179.5));
      boolean boolean0 = complex0.equals(complex0);
      assertEquals((-179.5), complex0.getReal(), 0.01);
      assertTrue(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals((-179.5), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.divide(complex1);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex((-3.940510424527919E-20), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-3.940510424527919E-20), complex0.getReal(), 0.01);
      assertNotSame(complex2, complex1);
      assertTrue(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.conjugate();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.asin();
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex2 = complex1.sqrt();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex((-3.940510424527919E-20), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(complex0);
      assertTrue(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-3.940510424527919E-20), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1114.5846);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.divide(complex0);
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1114.5846, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getField();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.pow(complex0);
      double double0 = complex1.abs();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      String string0 = complex0.toString();
      assertFalse(complex0.isNaN());
      assertEquals("(0.0, 0.0)", string0);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
  }
}
