/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 25 03:35:42 GMT 2017
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 732.12166);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.sqrt();
      assertEquals((-19.13271622117466), complex2.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(19.13271622117466, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-110.27289), (-1789.10325537));
      Complex complex1 = complex0.sinh();
      assertEquals((-110.27289), complex0.getReal(), 0.01);
      assertEquals(3.887139122418346E47, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.3128300081715086E46, complex1.getReal(), 0.01);
      assertEquals((-1789.10325537), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-538.605932576377), (-538.605932576377));
      Complex complex1 = complex0.multiply(complex0);
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
      assertEquals(580192.7012129375, complex1.getImaginary(), 0.01);
      assertEquals((-538.605932576377), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-985.1), (-985.1));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tanh();
      assertEquals(0.10274318871174021, complex2.getImaginary(), 0.01);
      assertEquals((-1.512547669943213), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(11.0, 11.0);
      Complex complex1 = complex0.tanh();
      assertEquals(1.0000000005578717, complex1.getReal(), 0.01);
      assertEquals((-4.938088971894E-12), complex1.getImaginary(), 0.01);
      assertEquals(11.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(11.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-289.03650083987293), 0.0);
      Complex complex1 = complex0.tan();
      assertFalse(complex1.isInfinite());
      assertEquals((-289.03650083987293), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-0.009977040634844855), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-228.8996378659108), (-228.8996378659108));
      Complex complex1 = complex0.tan();
      assertFalse(complex0.isInfinite());
      assertEquals(2.321659372821329E-199, complex1.getReal(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals((-228.8996378659108), complex0.getImaginary(), 0.01);
      assertEquals((-228.8996378659108), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(3583.474, 15.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.subtract(complex0);
      assertEquals((-14.999998831913244), complex2.getImaginary(), 0.01);
      assertEquals((-3581.903482727121), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-289.03650083987293), 0.0);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(289.03477094937534, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-3314.1076), (-3314.1076));
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, (-3314.1076));
      Complex complex2 = complex1.sqrt();
      assertTrue(complex2.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals((-3314.1076), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(8.0E298, 2827.0);
      Complex complex1 = complex0.sin();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(8.0E298, complex0.getReal(), 0.01);
      assertEquals(2827.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-72.10192927), 0.0);
      Complex complex1 = complex0.sin();
      assertEquals((-0.15408543040535247), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-72.10192927), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-24.346125829596872), (-24.346125829596872));
      Complex complex1 = complex0.sin();
      assertFalse(complex1.isInfinite());
      assertEquals((-24.346125829596872), complex0.getImaginary(), 0.01);
      assertEquals((-24.346125829596872), complex0.getReal(), 0.01);
      assertEquals((-1.3222507659292566E10), complex1.getImaginary(), 0.01);
      assertEquals(1.3254736722945923E10, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 613.236678);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.pow(complex1);
      assertEquals(14747.508073818899, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(1486.58833, 1486.58833);
      Complex complex1 = complex0.pow(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-934.7), (-934.7));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.negate();
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-143.8), (-143.8));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply(complex0);
      assertEquals((-2.8685303786851304E64), complex2.getReal(), 0.01);
      assertEquals((-2.072842566732974E63), complex2.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(0.09522332251072, 0.09522332251072);
      Complex complex1 = complex0.multiply((-1540.73980506));
      assertEquals((-146.71436336233222), complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.09522332251072, complex0.getImaginary(), 0.01);
      assertEquals((-146.71436336233222), complex1.getReal(), 0.01);
      assertEquals(0.09522332251072, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.log();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-78.55969252), Double.NaN);
      boolean boolean0 = complex0.isNaN();
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals((-78.55969252), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(750.79, 750.79);
      Complex complex1 = complex0.sinh();
      boolean boolean0 = complex1.isInfinite();
      assertEquals(750.79, complex0.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertEquals(750.79, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getReal();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(1199.414181, 0.0);
      double double0 = complex0.getReal();
      assertEquals(1199.414181, double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-2811.0), 0.0);
      Complex complex1 = complex0.cosh();
      double double0 = complex1.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-478.3574266), (-478.3574266));
      double double0 = complex0.getImaginary();
      assertFalse(complex0.isInfinite());
      assertEquals((-478.3574266), double0, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-478.3574266), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.getArgument();
      assertFalse(complex0.isNaN());
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-24.346125829596872), (-24.346125829596872));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.tan();
      double double0 = complex2.getArgument();
      assertTrue(complex2.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.3222507659292566E10, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals((-24.346125829596872), complex0.getImaginary(), 0.01);
      assertEquals((-1.3254736722945923E10), complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(1080.27438, 1080.27438);
      Complex complex1 = complex0.exp();
      assertEquals(1080.27438, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(1.0E-6, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 5.0);
      Complex complex2 = complex0.multiply(complex0);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex2.divide(complex3);
      assertEquals((-6.261890898703273E-13), complex4.getReal(), 0.01);
      assertEquals((-8.081818842118336E-14), complex4.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-3314.1076), (-3314.1076));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.divide(complex1);
      assertEquals(9.145664441599608, complex1.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(2.356194478135692, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-78.55969252), Double.NaN);
      Complex complex1 = complex0.createComplex(Double.NaN, (-78.55969252));
      assertTrue(complex1.equals((Object)complex0));
      assertEquals((-78.55969252), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-78.55969252), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-289.03650083987293), 0.0);
      Complex complex1 = complex0.createComplex((-289.03650083987293), (-3.852));
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-3.852), complex1.getImaginary(), 0.01);
      assertEquals((-289.03650083987293), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(11.0, 11.0);
      Complex complex1 = complex0.createComplex(11.0, 0.0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(11.0, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-228.8996378659108), (-228.8996378659108));
      Complex complex1 = complex0.cos();
      assertEquals((-5.433018391907071E98), complex1.getImaginary(), 0.01);
      assertEquals((-228.8996378659108), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.1642222178486698E99), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-289.03650083987293), 0.0);
      Complex complex1 = complex0.cos();
      assertEquals(0.9999502330454565, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-5061.95), (-5061.95));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.conjugate();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-3314.1076), (-3314.1076));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.conjugate();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-538.605932576377), (-538.605932576377));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.multiply(complex1);
      Complex complex3 = complex2.atan();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-143.8), (-143.8));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.exp();
      assertEquals((-7.253183121808361E-4), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-2811.0), 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.add(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.add(complex0);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-72.10192927), 0.0);
      Complex complex1 = complex0.add(complex0);
      assertEquals((-144.20385854), complex1.getReal(), 0.01);
      assertEquals((-72.10192927), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(1080.27438, 1080.27438);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.add(complex0);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-24.346125829596872), (-24.346125829596872));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.acos();
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.isInfinite());
      assertEquals(1.3222507659292566E10, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 249.17674404);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(4224.8468798, 4224.8468798);
      complex0.nthRoot(2737);
      // Undeclared exception!
      complex0.nthRoot(2737);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(10.4479652897, 10.4479652897);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(1435.63138261, 1435.63138261);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 732.12166);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-110.27289), (-1789.10325537));
      Complex complex1 = complex0.sqrt();
      assertEquals(29.00194411795383, complex1.getReal(), 0.01);
      assertEquals((-1789.10325537), complex0.getImaginary(), 0.01);
      assertEquals((-30.84454007796058), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 732.12166);
      Complex complex1 = complex0.sqrt();
      assertEquals(19.13271622117466, complex1.getImaginary(), 0.01);
      assertEquals(732.12166, complex0.getImaginary(), 0.01);
      assertEquals(19.13271622117466, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-78.55969252), Double.NaN);
      Complex complex1 = complex0.sqrt();
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals((-78.55969252), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-78.55969252), Double.NaN);
      Complex complex1 = complex0.log();
      assertEquals((-78.55969252), complex0.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-24.346125829596872), (-24.346125829596872));
      Complex complex1 = complex0.subtract(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-5480.2823724), (-5480.2823724));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.subtract(complex0);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-478.3574266), (-478.3574266));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.divide(complex2);
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-478.3574266), (-478.3574266));
      Complex complex1 = complex0.pow(complex0);
      double double0 = complex1.abs();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-24.346125829596872), (-24.346125829596872));
      Complex complex1 = complex0.cosh();
      double double0 = complex1.abs();
      assertEquals((-1.3254736722945923E10), complex1.getImaginary(), 0.01);
      assertEquals(1.3222507659292566E10, complex1.getReal(), 0.01);
      assertEquals(1.872225291984546E10, double0, 0.01);
      assertEquals((-24.346125829596872), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      double double0 = complex1.abs();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-143.8), (-143.8));
      double double0 = complex0.abs();
      assertEquals(203.3639102692511, double0, 0.01);
      assertEquals((-143.8), complex0.getReal(), 0.01);
      assertEquals((-143.8), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(2078.785649709225, Double.POSITIVE_INFINITY);
      assertEquals(2078.785649709225, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 3146.409);
      assertEquals(3146.409, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-2811.0), 0.0);
      boolean boolean0 = complex0.isInfinite();
      assertEquals((-2811.0), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-2811.0), 0.0);
      double double0 = complex0.getImaginary();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2811.0), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-110.27289), (-1789.10325537));
      double double0 = complex0.getReal();
      assertEquals((-110.27289), double0, 0.01);
      assertEquals((-1789.10325537), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(1486.58833, 1486.58833);
      Complex complex1 = complex0.cosh();
      List<Complex> list0 = complex1.nthRoot(4075);
      assertTrue(complex1.isInfinite());
      assertEquals(1486.58833, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(331.00312731243, 2950.6);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow(complex0);
      complex2.nthRoot(1665);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(331.00312731243, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(2950.6, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(750.79, 750.79);
      try { 
        complex0.nthRoot((-1103));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,103
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(2321.41, 2321.41);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.tanh();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(2321.41, complex0.getReal(), 0.01);
      assertEquals(2321.41, complex0.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.acos();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(4224.8468798, 4224.8468798);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.acos();
      assertEquals(9.388459069766672, complex2.getImaginary(), 0.01);
      assertEquals((-4224.846820626259), complex1.getImaginary(), 0.01);
      assertEquals(0.7853981557124966, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-3314.1076), (-3314.1076));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-359.7585728501835), (-359.7585728501835));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sinh();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals((-359.7585728501835), complex0.getReal(), 0.01);
      assertEquals((-359.7585728501835), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(2321.41, 2321.41);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.pow(complex1);
      Complex complex3 = complex2.sin();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(2321.41, complex0.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(2321.41, complex0.getImaginary(), 0.01);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-3314.1076), (-3314.1076));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.exp();
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-3314.1076), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-3314.1076), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-2811.0), 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.cosh();
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(331.00312731243, 2950.6);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.cos();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(2950.6, complex0.getImaginary(), 0.01);
      assertEquals(331.00312731243, complex0.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-78.55969252), Double.NaN);
      Complex complex1 = complex0.atan();
      assertEquals((-78.55969252), complex0.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-78.55969252), Double.NaN);
      Complex complex1 = complex0.asin();
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals((-78.55969252), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-934.7), (-934.7));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.acos();
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex0.isInfinite());
      assertEquals((-934.7), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-2811.0), 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.subtract(complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(3258.004976176897, (-35.66145974237314));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.subtract(complex1);
      assertTrue(complex1.isInfinite());
      assertEquals(3258.004976176897, complex0.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-35.66145974237314), complex0.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertNotSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-78.55969252), Double.NaN);
      Complex complex1 = complex0.negate();
      assertEquals((-78.55969252), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.15224832216115683, 0.15224832216115683);
      Complex complex1 = complex0.createComplex(3717.0, Double.NEGATIVE_INFINITY);
      Complex complex2 = complex1.multiply((-590.150702));
      assertFalse(complex0.isInfinite());
      assertEquals(3717.0, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-934.7), (-934.7));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply(0.0);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals((-934.7), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(8596478.289709391, 8596478.289709391);
      Complex complex1 = complex0.multiply(Double.NaN);
      assertFalse(complex0.isNaN());
      assertEquals(8596478.289709391, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(8596478.289709391, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply((-590.150702));
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(1486.58833, 1486.58833);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.multiply((double) 4075);
      assertSame(complex3, complex2);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(3717.0, Double.NEGATIVE_INFINITY);
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.pow(complex2);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertTrue(complex2.isInfinite());
      assertTrue(complex4.isNaN());
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(1.0, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(3258.004976176897, (-35.66145974237314));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.multiply(complex1);
      assertTrue(complex1.isInfinite());
      assertEquals((-35.66145974237314), complex0.getImaginary(), 0.01);
      assertEquals(3258.004976176897, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertFalse(complex0.isInfinite());
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(3717.0, Double.NEGATIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      assertTrue(complex1.isInfinite());
      assertEquals(3717.0, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-2811.0), 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(3717.0, Double.NEGATIVE_INFINITY);
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex2.exp();
      complex3.hashCode();
      assertTrue(complex2.isInfinite());
      assertFalse(complex0.isInfinite());
      assertTrue(complex3.isNaN());
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(3717.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(3258.004976176897, (-35.66145974237314));
      complex0.hashCode();
      assertFalse(complex0.isInfinite());
      assertEquals((-35.66145974237314), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(3258.004976176897, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(8596478.289709391, 8596478.289709391);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tan();
      boolean boolean0 = complex2.equals(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertEquals(8596478.289709391, complex0.getReal(), 0.01);
      assertEquals(8596478.289709391, complex0.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex((-359.7585728501835), (-359.7585728501835));
      boolean boolean0 = complex0.equals(complex0);
      assertFalse(complex0.isNaN());
      assertTrue(boolean0);
      assertEquals((-359.7585728501835), complex0.getImaginary(), 0.01);
      assertEquals((-359.7585728501835), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex((-359.7585728501835), (-359.7585728501835));
      Complex complex1 = complex0.tan();
      boolean boolean0 = complex1.equals(complex0);
      assertTrue(complex1.isNaN());
      assertEquals((-359.7585728501835), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(boolean0);
      assertEquals((-359.7585728501835), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(3258.004976176897, (-35.66145974237314));
      Complex complex1 = complex0.sinh();
      complex1.divide(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(3258.004976176897, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex(3258.004976176897, (-35.66145974237314));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals((-35.66145974237314), complex0.getImaginary(), 0.01);
      assertEquals(3258.004976176897, complex0.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex(2321.41, 2321.41);
      Complex complex1 = complex0.createComplex(0.0, 1.0);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.atan();
      assertTrue(complex3.isInfinite());
      assertEquals(2321.41, complex0.getReal(), 0.01);
      assertEquals(2321.41, complex0.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex((-3314.1076), (-3314.1076));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.divide(complex1);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-3314.1076), complex0.getImaginary(), 0.01);
      assertEquals((-3314.1076), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex((-3314.1076), (-3314.1076));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.divide(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-3314.1076), complex0.getImaginary(), 0.01);
      assertEquals((-3314.1076), complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex(1486.58833, 1486.58833);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.conjugate();
      assertTrue(complex3.isNaN());
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(1486.58833, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex(2321.41, 2321.41);
      Complex complex1 = complex0.acos();
      assertEquals(0.7853981865930857, complex1.getReal(), 0.01);
      assertEquals((-8.789650809510489), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex((-78.55969252), Double.NaN);
      double double0 = complex0.abs();
      assertEquals((-78.55969252), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(3717.0, Double.NEGATIVE_INFINITY);
      Complex complex2 = complex1.log();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals((-1.5707963267948966), complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex((-24.346125829596872), (-24.346125829596872));
      double double0 = complex0.getArgument();
      assertFalse(complex0.isNaN());
      assertEquals((-2.356194490192345), double0, 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getField();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex(2321.41, 2321.41);
      String string0 = complex0.toString();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals("(2321.41, 2321.41)", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.isNaN();
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
  }
}
