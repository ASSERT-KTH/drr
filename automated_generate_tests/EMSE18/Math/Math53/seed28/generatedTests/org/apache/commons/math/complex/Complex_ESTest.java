/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 28 10:55:16 GMT 2017
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(368.492731, 368.492731);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.acos();
      assertEquals(9.703758912228101E-10, complex3.getImaginary(), 0.01);
      assertEquals(9.703759215005672E-10, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-1218.506780836944), (-1218.506780836944));
      complex0.hashCode();
      assertFalse(complex0.isInfinite());
      assertEquals((-1218.506780836944), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1218.506780836944), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(368.492731, 368.492731);
      Complex complex1 = complex0.conjugate();
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      assertEquals(368.492731, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertEquals(368.492731, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex((-1310.77989157), (-1310.77989157));
      Complex complex1 = complex0.acos();
      boolean boolean0 = complex1.equals(complex0);
      assertFalse(boolean0);
      assertEquals(2.3561944174713556, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-4.503599627370496E15));
      Complex complex1 = complex0.tanh();
      assertEquals((-4.503599627370496E15), complex0.getImaginary(), 0.01);
      assertEquals(1.8005242480088435, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 843.75);
      Complex complex1 = complex0.tanh();
      assertEquals((-1.2644811277963854), complex1.getReal(), 0.01);
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertEquals(843.75, complex0.getImaginary(), 0.01);
      assertEquals((-0.1562602103464167), complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-1232.344901237), 0.0);
      Complex complex1 = complex0.tan();
      assertEquals((-1.1169373947992114), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1232.344901237), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-4.503599627370496E15));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.tan();
      assertFalse(complex2.isInfinite());
      assertEquals((-0.8742173026236351), complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals((-0.703510502283449), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(0.04168701738764507, (-8.0E298));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.subtract(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.sqrt();
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(1774.4143994535, 1774.4143994535);
      Complex complex1 = complex0.sinh();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(1774.4143994535, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(1774.4143994535, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-1093.8079202177), 4.9E-324);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sinh();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.8609425136857155, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.9713128104038089, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(1179.698951708745, 1179.698951708745);
      Complex complex1 = complex0.pow(complex0);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(complex0);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(0.0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-1218.506780836944), (-1218.506780836944));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.log();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals((-0.7853981633974483), complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-4.503599627370496E15));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.log();
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals((-1.5707963267948966), complex2.getImaginary(), 0.01);
      assertEquals((-0.13442630422575974), complex2.getReal(), 0.01);
      assertEquals((-0.8742173026236351), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(913.7174160286448, 1299.0);
      Complex complex1 = complex0.tan();
      boolean boolean0 = complex1.isNaN();
      assertEquals(913.7174160286448, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertTrue(boolean0);
      assertEquals(1299.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(658.1, 4414.15);
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex1.isInfinite();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(4414.15, complex0.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(658.1, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1767.5009628387);
      double double0 = complex0.getReal();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1767.5009628387, complex0.getImaginary(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-5149.0553410975), (-5149.0553410975));
      double double0 = complex0.getReal();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-5149.0553410975), double0, 0.01);
      assertEquals((-5149.0553410975), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(2.718281828459045, 2.718281828459045);
      double double0 = complex0.getImaginary();
      assertEquals(2.718281828459045, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(2.718281828459045, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(1588.64104823, 1588.64104823);
      Complex complex1 = complex0.conjugate();
      double double0 = complex1.getImaginary();
      assertEquals((-1588.64104823), double0, 0.01);
      assertEquals(1588.64104823, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1588.64104823, complex0.getImaginary(), 0.01);
      assertEquals(1588.64104823, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-1218.506780836944), (-1218.506780836944));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.pow(complex1);
      double double0 = complex2.getArgument();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-1218.506780836944), complex0.getReal(), 0.01);
      assertEquals((-1218.506780836944), complex0.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-1310.77989157), (-1310.77989157));
      double double0 = complex0.getArgument();
      assertFalse(complex0.isNaN());
      assertEquals((-2.356194490192345), double0, 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(456.32103362888, 456.32103362888);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.exp();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-5.2979856228075454E197), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-5.348029661827557E197), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.exp();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(477.58682446, 477.58682446);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.divide(complex0);
      assertEquals((-0.014725023383526367), complex2.getImaginary(), 0.01);
      assertEquals(0.035549351158770316, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 428.5396189);
      Complex complex1 = complex0.createComplex(0.0, Double.NaN);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(428.5396189, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(0.04168701738764507, 439.2579129306242);
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.04168701738764507, complex0.getReal(), 0.01);
      assertEquals(439.2579129306242, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-2011.5), (-2011.5));
      Complex complex1 = complex0.createComplex(1387.463712492, 0.0);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1387.463712492, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-1218.506780836944), (-1218.506780836944));
      Complex complex1 = complex0.createComplex((-1218.506780836944), 818.7934089498);
      assertEquals(818.7934089498, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-1218.506780836944), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(1121.4625198, 1121.4625198);
      Complex complex1 = complex0.cosh();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(1121.4625198, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(368.492731, 368.492731);
      Complex complex1 = complex0.cosh();
      assertEquals((-3.250905342460392E159), complex1.getReal(), 0.01);
      assertEquals((-4.3263806996650194E159), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(368.492731, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.7553817452272217E-6);
      Complex complex1 = complex0.conjugate();
      assertEquals((-2.7553817452272217E-6), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
      assertEquals((-4083.40733), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.conjugate();
      assertTrue(complex1.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-4.9E-324), 0.99);
      Complex complex1 = complex0.atan();
      assertEquals(2.6466524123622457, complex1.getImaginary(), 0.01);
      assertEquals((-2.47E-322), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1696.534533));
      Complex complex1 = complex0.atan();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals((-5.894369353293968E-4), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(456.32103362888, 456.32103362888);
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex((-1790.0), 456.32103362888);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex4.asin();
      assertTrue(complex5.isInfinite());
      assertEquals((-2.822506484311709E95), complex4.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(1642.831, 1642.831);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      assertEquals((-0.7853981170821747), complex2.getReal(), 0.01);
      assertEquals((-8.443897022965857), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 428.5396189);
      Complex complex1 = complex0.add(complex0);
      assertEquals(857.0792378, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(428.5396189, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-1093.8079202177), 4.9E-324);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.add(complex2);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.8609425136857155, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-1218.506780836944), (-1218.506780836944));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.add(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.isInfinite());
      assertTrue(complex3.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.7553817452272217E-6);
      Complex complex1 = complex0.acos();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals((-2.755381745218747E-6), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2272.716602361792));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(0.0913690483, 0.0913690483);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-2011.5), (-2011.5));
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-1218.506780836944), (-1218.506780836944));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.log();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertSame(complex3, complex2);
      assertEquals((-1218.506780836944), complex0.getReal(), 0.01);
      assertEquals((-1218.506780836944), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.exp();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-1093.8079202177), 4.9E-324);
      Complex complex1 = complex0.subtract(complex0);
      assertEquals((-1093.8079202177), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(4.9E-324, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(477.58682446, 477.58682446);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.subtract(complex1);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(477.58682446, complex0.getReal(), 0.01);
      assertEquals(477.58682446, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-1218.506780836944), (-1218.506780836944));
      Complex complex1 = complex0.negate();
      assertEquals((-1218.506780836944), complex0.getReal(), 0.01);
      assertEquals((-1218.506780836944), complex0.getImaginary(), 0.01);
      assertEquals(1218.506780836944, complex1.getReal(), 0.01);
      assertEquals(1218.506780836944, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(1218.506780836944, 1218.506780836944);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(1218.506780836944, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.04168701738764507, (-8.0E298));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply(complex0);
      assertEquals((-8.0E298), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 843.75);
      Complex complex1 = complex0.multiply(complex0);
      assertEquals((-1687.5), complex1.getImaginary(), 0.01);
      assertEquals(843.75, complex0.getImaginary(), 0.01);
      assertEquals((-711913.0625), complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = complex0.multiply(complex1);
      assertNotSame(complex2, complex1);
      assertTrue(complex2.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 1791.73453349701);
      Complex complex1 = complex0.divide(complex0);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(1791.73453349701, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertTrue(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-1.0));
      Complex complex2 = complex0.divide(complex1);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0913690483, 0.0913690483);
      double double0 = complex0.abs();
      assertEquals(0.0913690483, complex0.getImaginary(), 0.01);
      assertEquals(0.0913690483, complex0.getReal(), 0.01);
      assertEquals(0.1292153472869824, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-1.0));
      double double0 = complex1.abs();
      assertEquals(1.0, double0, 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.04168701738764507, 439.2579129306242);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.cos();
      double double0 = complex2.abs();
      assertEquals((-1.2193622675523547E189), complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(2.9233462193828747E190, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getImaginary();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.add(complex0);
      assertEquals((-8166.81466), complex1.getImaginary(), 0.01);
      assertEquals((-8166.81466), complex1.getReal(), 0.01);
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(658.1, 4414.15);
      double double0 = complex0.getReal();
      assertFalse(complex0.isNaN());
      assertEquals(658.1, double0, 0.01);
      assertEquals(4414.15, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(1179.698951708745, 1179.698951708745);
      Complex complex1 = complex0.exp();
      List<Complex> list0 = complex1.nthRoot(433);
      assertTrue(complex1.isInfinite());
      assertEquals(1, list0.size());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(1179.698951708745, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.tanh();
      List<Complex> list0 = complex1.nthRoot(279);
      assertEquals(1, list0.size());
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.nthRoot((-1449));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,449
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      List<Complex> list0 = complex0.nthRoot(279);
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertEquals(279, list0.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tanh();
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.sqrt();
      boolean boolean0 = complex2.equals(complex3);
      assertFalse(complex0.isInfinite());
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertSame(complex3, complex2);
      assertFalse(complex3.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1696.534533));
      Complex complex1 = complex0.sqrt();
      assertEquals(29.125028180243877, complex1.getReal(), 0.01);
      assertEquals((-1696.534533), complex0.getImaginary(), 0.01);
      assertEquals((-29.125028180243877), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(913.7174160286448, 1299.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sinh();
      assertEquals(913.7174160286448, complex0.getReal(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1299.0, complex0.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sin();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.cosh();
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(51.17224731938968, 0.0);
      Complex complex1 = complex0.cosh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(8.371333459373101E21, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-1218.506780836944), (-1218.506780836944));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.cos();
      assertFalse(complex0.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1218.506780836944), complex0.getImaginary(), 0.01);
      assertEquals((-1218.506780836944), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atan();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.asin();
      assertFalse(complex0.isInfinite());
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(51.17224731938968, 0.0);
      Complex complex1 = complex0.asin();
      assertEquals((-4.628249036525491), complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.acos();
      assertFalse(complex0.isInfinite());
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(456.32103362888, 456.32103362888);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt1z();
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals((-5.2979856228075454E197), complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals((-5.348029661827557E197), complex1.getImaginary(), 0.01);
      assertEquals(456.32103362888, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-1218.506780836944), (-1218.506780836944));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.negate();
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals((-1218.506780836944), complex0.getImaginary(), 0.01);
      assertEquals((-1218.506780836944), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(1642.831, 1642.831);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(1642.831, complex0.getReal(), 0.01);
      assertEquals(1642.831, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(13.07, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(2762.71);
      complex1.multiply(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(13.07, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(456.32103362888, 456.32103362888);
      Complex complex1 = complex0.multiply((-1790.0));
      assertEquals(456.32103362888, complex0.getImaginary(), 0.01);
      assertEquals((-816814.6501956952), complex1.getImaginary(), 0.01);
      assertEquals(456.32103362888, complex0.getReal(), 0.01);
      assertEquals((-816814.6501956952), complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(13.07, 13.07);
      Complex complex1 = new Complex(13.07, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.multiply(complex1);
      assertEquals(13.07, complex2.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertFalse(complex2.isInfinite());
      assertEquals(13.07, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(13.07, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(complex0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(13.07, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex((-1218.506780836944), (-1218.506780836944));
      Complex complex1 = complex0.tanh();
      complex1.hashCode();
      assertFalse(complex0.isInfinite());
      assertEquals((-1218.506780836944), complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals((-1218.506780836944), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(51.17224731938968, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.sqrt1z();
      boolean boolean0 = complex1.equals(complex2);
      assertFalse(boolean0);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(51.16247546509829, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(51.17224731938968, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.log();
      boolean boolean0 = complex2.equals(complex3);
      assertFalse(complex3.equals((Object)complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply(0.0);
      boolean boolean0 = complex1.equals(complex2);
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(boolean0);
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(51.17224731938968, 0.0);
      Complex complex1 = complex0.sqrt();
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(7.1534779876218035, complex1.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(456.32103362888, 456.32103362888);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.divide(complex2);
      assertEquals(456.32103362888, complex0.getImaginary(), 0.01);
      assertEquals((-5.348029661827557E197), complex1.getReal(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(456.32103362888, complex0.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals((-5.2979856228075454E197), complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex(0.04168701738764507, (-8.0E298));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.atan();
      assertEquals((-8.0E298), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(51.17224731938968, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.divide(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(51.17224731938968, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex((-1218.506780836944), (-1218.506780836944));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.multiply(complex1);
      assertEquals((-1218.506780836944), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertSame(complex3, complex2);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1218.506780836944), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.divide(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), (-4083.40733));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.conjugate();
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-4083.40733), complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, (-1.0));
      Complex complex2 = complex1.atan();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex(0.04168701738764507, (-8.0E298));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.pow(complex0);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals((-1.0416332804728032), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex(0.04168701738764507, (-8.0E298));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.cos();
      double double0 = complex2.abs();
      assertEquals((-8.0E298), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex(5.348029661827557E197, 0.9953151816532887);
      Complex complex1 = complex0.sqrt1z();
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.9953151816532887, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex((-4083.40733), Double.NaN);
      assertEquals((-4083.40733), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex(51.17224731938968, 0.0);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = new Complex(0.04168701738764507, (-8.0E298));
      complex0.getField();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.04168701738764507, complex0.getReal(), 0.01);
      assertEquals((-8.0E298), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex(0.04168701738764507, (-8.0E298));
      String string0 = complex0.toString();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals("(0.04168701738764507, -8.0E298)", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }
}
