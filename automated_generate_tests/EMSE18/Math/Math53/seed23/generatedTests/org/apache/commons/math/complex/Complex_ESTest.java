/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 25 05:52:50 GMT 2017
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2288.8265278929653);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sqrt();
      assertEquals(33.82917770130516, complex2.getReal(), 0.01);
      assertEquals((-33.82917770130517), complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-1636.572236588626), (-284.6628709742056));
      complex0.hashCode();
      assertEquals((-284.6628709742056), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1636.572236588626), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(174.91878, 4405.705927);
      Complex complex1 = complex0.atan();
      assertEquals(2.2662115981804317E-4, complex1.getImaginary(), 0.01);
      assertEquals(1.570787329304185, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-1369.9606282), (-1369.9606282));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tanh();
      assertEquals((-1.2613721243481857), complex2.getReal(), 0.01);
      assertEquals(0.39945928823304944, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex((-1369.9606282), (-1369.9606282));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      assertEquals((-1.332060151790256E-7), complex2.getReal(), 0.01);
      assertEquals((-0.7853980967944407), complex1.getReal(), 0.01);
      assertEquals((-0.9999999999999734), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-870.648384784), (-870.648384784));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.subtract(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-0.25), 725.1941523248212);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.subtract(complex0);
      assertEquals((-724.8114128851054), complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-0.42826335666806437), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-1085.9060677055486), (-1085.9060677055486));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sqrt1z();
      assertFalse(complex2.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals((-1085.9060677055486), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-1085.9060677055486), (-1085.9060677055486));
      Complex complex1 = complex0.sqrt1z();
      assertEquals((-1085.905837483082), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-1636.572236588626), (-284.6628709742056));
      Complex complex1 = complex0.sqrt();
      boolean boolean0 = complex1.equals(complex0);
      assertEquals(3.505170447831377, complex1.getReal(), 0.01);
      assertEquals((-40.60613816231453), complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-1636.572236588626), (-284.6628709742056));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sin();
      assertEquals(2.0794821870645146E123, complex1.getImaginary(), 0.01);
      assertEquals((-284.6628709742056), complex0.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals((-4.162000226354845E122), complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1636.572236588626), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.sin();
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-387.0), (-387.0));
      Complex complex1 = complex0.pow(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.negate();
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-3106.0371479), (-1453.99709028));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.negate();
      assertEquals(1453.99709028, complex1.getImaginary(), 0.01);
      assertEquals((-3106.0371479), complex0.getReal(), 0.01);
      assertEquals((-1453.99709028), complex0.getImaginary(), 0.01);
      assertEquals(3106.0371479, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-4705.3403817), (-4705.3403817));
      Complex complex1 = complex0.multiply((-56.5854));
      Complex complex2 = complex1.multiply(complex0);
      assertFalse(complex1.isInfinite());
      assertEquals((-2.505627327125995E9), complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      Complex complex1 = complex0.log();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-1369.9606282), (-1369.9606282));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.tanh();
      assertEquals(0.03535748684119992, complex3.getReal(), 0.01);
      assertEquals((-1369.9606282), complex0.getImaginary(), 0.01);
      assertEquals((-1.6101670326980557), complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(2701.0470413678595, 2701.0470413678595);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sin();
      boolean boolean0 = complex2.isNaN();
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(2701.0470413678595, complex0.getImaginary(), 0.01);
      assertEquals(2701.0470413678595, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-1571.604162841), (-1571.604162841));
      Complex complex1 = complex0.cosh();
      boolean boolean0 = complex1.isInfinite();
      assertEquals((-1571.604162841), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getReal();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-1369.9606282), (-1369.9606282));
      double double0 = complex0.getReal();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals((-1369.9606282), complex0.getImaginary(), 0.01);
      assertEquals((-1369.9606282), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2288.8265278929653);
      double double0 = complex0.getImaginary();
      assertFalse(complex0.isInfinite());
      assertEquals(2288.8265278929653, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-2389.861006), (-266.8));
      double double0 = complex0.getImaginary();
      assertEquals((-266.8), double0, 0.01);
      assertEquals((-2389.861006), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2288.8265278929653);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.divide(complex2);
      double double0 = complex3.getArgument();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, double0, 0.01);
      assertEquals(407.70563914758327, complex3.getReal(), 0.01);
      assertEquals(2288.8265278929653, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-1085.9060677055486), (-1085.9060677055486));
      Complex complex1 = complex0.negate();
      double double0 = complex1.getArgument();
      assertEquals((-1085.9060677055486), complex0.getReal(), 0.01);
      assertEquals((-1085.9060677055486), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.7853981633974483, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(174.91878, 4405.705927);
      Complex complex1 = complex0.multiply(4405.705927);
      Complex complex2 = complex1.exp();
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(770640.705789609, complex1.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(1.9410244715202928E7, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-1369.9606282), (-1369.9606282));
      Complex complex1 = complex0.exp();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1369.9606282), complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex((-3375.3661322175017), (-3375.3661322175017));
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.divide(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.divide(complex1);
      assertFalse(complex2.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3727.7838029606));
      Complex complex1 = new Complex(1561.44593796, (-3727.7838029606));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.sqrt1z();
      assertEquals(0.403068205705885, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(Double.NaN, Double.NaN);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, Double.POSITIVE_INFINITY);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-1636.572236588626), (-284.6628709742056));
      Complex complex1 = complex0.createComplex((-4673.819717), 0.0);
      assertEquals((-4673.819717), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2288.8265278929653);
      Complex complex1 = complex0.cosh();
      assertEquals((-0.17536820122159638), complex1.getReal(), 0.01);
      assertEquals(2288.8265278929653, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-1085.9060677055486), (-1085.9060677055486));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.negate();
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.conjugate();
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.atan();
      assertTrue(complex1.isInfinite());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-708.8458280760581), 0.6299605249474366);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.atan();
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-4705.3403817), (-4705.3403817));
      Complex complex1 = complex0.multiply(1.633123935319537E16);
      Complex complex2 = complex1.atan();
      assertEquals((-1.5707963267948966), complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-7.684404001179836E19), complex1.getReal(), 0.01);
      assertEquals((-7.684404001179836E19), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-2389.861006), (-266.8));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.atan();
      assertEquals((-4.613826481507691E-5), complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-1636.572236588626), (-284.6628709742056));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.asin();
      assertEquals((-1636.572236588626), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-284.6628709742056), complex0.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals((-4.162000226354845E122), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.asin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-1369.9606282), (-1369.9606282));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.exp();
      assertEquals((-0.41846300357329097), complex2.getImaginary(), 0.01);
      assertEquals((-0.18102021622457978), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-4705.3403817), (-4705.3403817));
      Complex complex1 = complex0.multiply((-56.5854));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.add(complex2);
      assertEquals(266253.5676346472, complex1.getReal(), 0.01);
      assertEquals(266253.5676346472, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-1636.572236588626), (-284.6628709742056));
      Complex complex1 = complex0.add(complex0);
      assertEquals((-3273.144473177252), complex1.getReal(), 0.01);
      assertEquals((-284.6628709742056), complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-569.3257419484112), complex1.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1636.572236588626), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-6.032174644509064E-23), (-6.032174644509064E-23));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.acos();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-1636.572236588626), (-284.6628709742056));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.acos();
      assertEquals(1.7683322584510908, complex2.getReal(), 0.01);
      assertEquals((-284.6628709742056), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-1085.9060677055486), (-1085.9060677055486));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(1.1730463525082348E-7, 1.1730463525082348E-7);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.633123935319537E16);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2911.703548456));
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.log();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(2701.0470413678595, 2701.0470413678595);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.exp();
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2701.0470413678595, complex0.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(2701.0470413678595, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-0.25), 725.1941523248212);
      Complex complex1 = complex0.subtract(complex0);
      assertEquals((-0.25), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(725.1941523248212, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-1369.9606282), (-1369.9606282));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.multiply(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals((-1369.9606282), complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals((-1369.9606282), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.divide(complex0);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.0), complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-0.25), 725.1941523248212);
      Complex complex1 = complex0.exp();
      double double0 = complex1.abs();
      assertEquals(0.382739439715851, complex1.getImaginary(), 0.01);
      assertEquals(0.778800783071405, double0, 0.01);
      assertEquals(725.1941523248212, complex0.getImaginary(), 0.01);
      assertEquals((-0.6782633566680644), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 611.452783);
      double double0 = complex0.abs();
      assertEquals(611.452783, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-0.25), 725.1941523248212);
      double double0 = complex0.abs();
      assertEquals(725.1941954167283, double0, 0.01);
      assertEquals((-0.25), complex0.getReal(), 0.01);
      assertEquals(725.1941523248212, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-314.767), Double.POSITIVE_INFINITY);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      assertFalse(complex0.isInfinite());
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(544.05409, Double.NaN);
      assertFalse(complex0.isInfinite());
      assertEquals(544.05409, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-1085.9060677055486), (-1085.9060677055486));
      double double0 = complex0.getArgument();
      assertFalse(complex0.isNaN());
      assertEquals((-2.356194490192345), double0, 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-0.25), 725.1941523248212);
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertEquals((-0.25), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(725.1941523248212, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getImaginary();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(174.91878, 4405.705927);
      double double0 = complex0.getReal();
      assertEquals(174.91878, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(4405.705927, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      List<Complex> list0 = complex1.nthRoot(108);
      assertEquals(1, list0.size());
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(2701.0470413678595, 2701.0470413678595);
      Complex complex1 = complex0.tanh();
      List<Complex> list0 = complex1.nthRoot(901);
      assertEquals(2701.0470413678595, complex0.getImaginary(), 0.01);
      assertEquals(2701.0470413678595, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      try { 
        complex0.nthRoot((-1473));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,473
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(2701.0470413678595, 2701.0470413678595);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.tanh();
      assertEquals(2701.0470413678595, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2701.0470413678595, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertSame(complex3, complex2);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-1604.92), 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.tan();
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-708.8458280760581), 0.6299605249474366);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.sqrt();
      assertEquals(6.466487273775616E-155, complex3.getImaginary(), 0.01);
      assertEquals(6.466487273775615E-155, complex3.getReal(), 0.01);
      assertEquals(1.1471150871622963E-308, complex1.getReal(), 0.01);
      assertEquals(0.6299605249474366, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sqrt1z();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(2701.0470413678595, 2701.0470413678595);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt();
      assertEquals(2701.0470413678595, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertTrue(complex2.isNaN());
      assertEquals(2701.0470413678595, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(174.91878, 4405.705927);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex1);
      Complex complex3 = complex2.sinh();
      assertNotSame(complex3, complex2);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(4405.705927, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(2701.0470413678595, 2701.0470413678595);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.multiply(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertSame(complex3, complex2);
      assertEquals(2701.0470413678595, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(2701.0470413678595, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(174.91878, 4405.705927);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.cosh();
      assertEquals(4405.705927, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.cos();
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-1369.9606282), (-1369.9606282));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.asin();
      complex2.atan();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-1604.92), 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.asin();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1604.92), complex0.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-358.64275), (-358.64275));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.acos();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals((-2.5034743820216335E155), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals((-1.371516885677849E155), complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(2701.0470413678595, 2701.0470413678595);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.subtract(complex1);
      assertSame(complex3, complex2);
      assertEquals(2701.0470413678595, complex0.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(17.00867682012816, (-1731.0));
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(17.00867682012816, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1731.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.multiply((double) 108);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(174.91878, 4405.705927);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.multiply(4405.705927);
      assertEquals(4405.705927, complex0.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(174.91878, 4405.705927);
      Complex complex1 = complex0.multiply(Double.NaN);
      assertEquals(174.91878, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(4405.705927, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-358.64275), (-358.64275));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.multiply(2566.713402654183);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertNotSame(complex4, complex3);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals((-2.5034743820216335E155), complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertTrue(complex4.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-1.371516885677849E155), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.multiply(complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(174.91878, 4405.705927);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply(complex1);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(4405.705927, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.multiply(complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertTrue(complex3.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-358.64275), (-358.64275));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.multiply(complex3);
      assertEquals((-2.5034743820216335E155), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals((-1.371516885677849E155), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-1604.92), 0.0);
      Complex complex1 = complex0.sinh();
      complex1.hashCode();
      assertEquals((-1604.92), complex0.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      boolean boolean0 = complex0.equals(complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(boolean0);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex((-1369.9606282), (-1369.9606282));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.cos();
      boolean boolean0 = complex0.equals(complex2);
      assertEquals((-1369.9606282), complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals((-1369.9606282), complex0.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-3106.0371479), (-1453.99709028));
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertEquals((-3106.0371479), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
      assertEquals((-1453.99709028), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex((-1369.9606282), (-1369.9606282));
      boolean boolean0 = complex0.equals(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals((-1369.9606282), complex0.getReal(), 0.01);
      assertTrue(boolean0);
      assertEquals((-1369.9606282), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cos();
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(174.91878, 4405.705927);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.divide(complex1);
      assertTrue(complex1.isInfinite());
      assertEquals(4405.705927, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      assertTrue(complex1.isNaN());
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(174.91878, 4405.705927);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.divide(complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex((-1604.92), 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.conjugate();
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(2701.0470413678595, 2701.0470413678595);
      Complex complex1 = complex0.tanh();
      double double0 = complex1.abs();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(2701.0470413678595, complex0.getReal(), 0.01);
      assertEquals(2701.0470413678595, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex1.add(complex3);
      complex4.divide(complex0);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex(174.91878, 4405.705927);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.negate();
      assertEquals(4405.705927, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(174.91878, complex0.getReal(), 0.01);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex0.subtract(complex3);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertSame(complex4, complex2);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = new Complex(174.91878, 4405.705927);
      List<Complex> list0 = complex0.nthRoot(108);
      assertEquals(4405.705927, complex0.getImaginary(), 0.01);
      assertEquals(174.91878, complex0.getReal(), 0.01);
      assertEquals(108, list0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getField();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 0.0);
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex((-3106.0371479), (-1453.99709028));
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
      assertEquals((-1453.99709028), complex0.getImaginary(), 0.01);
      assertEquals((-3106.0371479), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }
}
