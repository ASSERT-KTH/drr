/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 25 04:50:57 GMT 2017
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.NoSuchElementException;
import org.apache.commons.math.linear.ArrayRealVectorTest;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.linear.SparseRealVectorTest;
import org.apache.commons.math.util.OpenIntToDoubleHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenMapRealVector_ESTest extends OpenMapRealVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector0.set(37);
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(24, 24, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
      assertFalse(boolean0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (-1694.484943469733);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.hashCode();
      assertEquals(0.0625, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-697.0900128759384));
      openMapRealVector0.hashCode();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1393.58672935);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-697.0900128759384));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      openMapRealVector0.set((-2.9744540612141517));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      openMapRealVector1.subtract(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1), 0.0);
      openMapRealVector0.set((-1.0));
      assertEquals(-1, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1328.0));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[2];
      doubleArray0[6] = doubleArray0[4];
      doubleArray0[7] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(1.0E-12);
      assertEquals(9, openMapRealVector1.getDimension());
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) doubleArray0[7];
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray1);
      openMapRealVector1.projection((RealVector) arrayRealVectorTest_RealVectorTestImpl0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1393.58672935);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-697.0900128759384));
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct(doubleArray0);
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      assertEquals(4, openMapRealMatrix0.getColumnDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      double double0 = openMapRealVector1.getLInfDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1393.58672935);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-697.0900128759384));
      double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1393.58672935);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-697.0900128759384));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((-697.0900128759384));
      double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(697.0900128759386, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1393.58672935);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.48332981161466076);
      double double0 = openMapRealVector0.getL1Distance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      openMapRealVector0.set((-1.0));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      double double0 = openMapRealVector0.getL1Distance(openMapRealVector1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(74.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-697.0900128759384));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(2362.114006426475);
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector1);
      assertEquals(4724.22801285295, double0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-697.0900128759384));
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-1393.58672935);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1393.58672935));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.projection(doubleArray0);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector2, openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(223, 223, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(1.0E-12);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector1.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, (-146));
      assertEquals(-146, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 4.455505956692757);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // iterator exhausted
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1393.58672935));
      double[] doubleArray1 = openMapRealVector0.toArray();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 177, 0);
      double[] doubleArray0 = openMapRealVector0.toArray();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(1.0E-12);
      assertEquals(0, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-650), 31);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(31);
      assertEquals(-650, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(720.1376409360797);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(274, 274, 274);
      boolean boolean0 = openMapRealVector0.isDefaultValue(0.3999999761581421);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      boolean boolean0 = openMapRealVector0.isDefaultValue(1.0E-12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1393.58672935));
      double double0 = openMapRealVector0.getSparsity();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      double double0 = openMapRealVector1.getL1Distance(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(344, 2254.033165782008);
      double double0 = openMapRealVector0.getEntry(188);
      assertEquals(0.0, double0, 0.01);
      assertEquals(344, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(43, 43, 0.0);
      openMapRealVector0.set((-1.0));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      double double0 = openMapRealVector1.getEntry(43);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-5024.0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      openMapRealVector0.mapMultiplyToSelf(1942083.9722204302);
      double double0 = openMapRealVector0.getDistance(doubleArray0);
      assertEquals(9.757024852435442E9, double0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector0.set(37);
      double double0 = openMapRealVector1.getDistance((RealVector) openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(225.06221362103412, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1426, 1426, 1426);
      int int0 = openMapRealVector0.getDimension();
      assertEquals(1426, int0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2237), (-2237), 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 6.059922800987113);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-1393.58672935);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1393.58672935));
      double double0 = openMapRealVector0.dotProduct((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1942083.9722204302, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1393.58672935);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-673.479113));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(2362.114006426475);
      double double0 = openMapRealVector0.dotProduct((RealVector) openMapRealVector1);
      assertEquals((-1349726.760347266), double0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (-0.8564111382016825);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      double double0 = openMapRealVector0.dotProduct(openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals((-0.6281262174344471), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, (-1940), 3575.6678874);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1), 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(0.0);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(2, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 37);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(709);
      // Undeclared exception!
      try { 
        openMapRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(471, 0.0);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 471 != 1
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-697.0900128759384));
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(222, 222, 0.0);
      double[] doubleArray0 = new double[2];
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((RealVector) arrayRealVectorTest_RealVectorTestImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 222 != 2
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(43, 43, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 43 != 86
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-4369), (-4369), (-4369));
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector(750, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (750)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      // Undeclared exception!
      try { 
        openMapRealVector0.setEntry(860, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (860)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 37);
      // Undeclared exception!
      try { 
        openMapRealVector0.projection((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1328.0));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[1];
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[5] = doubleArray0[2];
      doubleArray0[6] = double0;
      doubleArray0[7] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = new double[9];
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray1);
      // Undeclared exception!
      try { 
        openMapRealVector0.projection((RealVector) arrayRealVectorTest_RealVectorTestImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 9
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(274, 274, 274);
      // Undeclared exception!
      try { 
        openMapRealVector0.projection((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        openMapRealVector0.outerProduct(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(60, (-84));
      // Undeclared exception!
      try { 
        openMapRealVector0.mapAdd(31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1), 0.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getSubVector((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-650), 31);
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -650 != 9
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1393.58672935));
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 4.455505956692757);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-2004));
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != -2,004
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(93, 0, 0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(107, 0, (-1849.41));
      // Undeclared exception!
      try { 
        openMapRealVector1.getL1Distance((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 107 != 93
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1393.58672935));
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      openMapRealVector0.set((-1.0));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
      // Undeclared exception!
      try { 
        openMapRealVector1.getL1Distance(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (38)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-274.85995));
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = new double[7];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray1);
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1925), 0, (-1925));
      // Undeclared exception!
      try { 
        openMapRealVector0.getData();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1.0));
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = new double[3];
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(43, 43, 0.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      openMapRealVector0.mapAddToSelf(2155.4861178);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(989, 989);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1939, 1939, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapMultiplyToSelf(0.0);
      openMapRealVector1.copy();
      // Undeclared exception!
      OpenMapRealVector openMapRealVector2 = null;
      openMapRealVector2 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(255, 255, 0.0);
      double[] doubleArray0 = new double[1];
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide((RealVector) arrayRealVectorTest_RealVectorTestImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 255 != 1
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(229, 229, 229);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(229);
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeDivide((RealVector) openMapRealVector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(904, (-5));
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.dotProduct((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(229, 229, 0.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.append((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2345));
      // Undeclared exception!
      try { 
        openMapRealVector0.append((-51.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-2,345)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(43, 43, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      // Undeclared exception!
      try { 
        openMapRealVector1.add((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 86 != 43
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1328.0));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.add((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-17), 0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(0, 750);
      // Undeclared exception!
      try { 
        openMapRealVector1.add(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != -17
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.add((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((double[]) null, (-697.0900128759384));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1393.58672935));
      openMapRealVector0.unitize();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1393.58672935));
      openMapRealVector0.setEntry(0, 1320.55066673916);
      double double0 = openMapRealVector0.getEntry(0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1320.55066673916, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-697.0900128759384));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(2362.114006426475);
      double double0 = openMapRealVector1.getLInfDistance(doubleArray0);
      assertEquals(2362.114006426475, double0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      double double0 = openMapRealVector0.getDistance(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(43, 43, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector0.set((-1.0));
      double double0 = openMapRealVector1.dotProduct(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAddToSelf(2155.4861178);
      openMapRealVector2.add(openMapRealVector1);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(2469.868);
      doubleArray0[0] = double0;
      Double double1 = new Double(4.455505956692757);
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2469.868);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(2469.868);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2469.868);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.48332981161466076);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      int int0 = openMapRealVector0.getDimension();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((OpenMapRealVector) null, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1426, 1426, 1426);
      // Undeclared exception!
      try { 
        openMapRealVector0.getEntry(1426);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,426)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector0.set(0.0);
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector0.set((-2.9744540612141517));
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(222, 222, 0.0);
      Object object0 = new Object();
      boolean boolean0 = openMapRealVector0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      openMapRealVector0.set((-2.9744540612141517));
      openMapRealVector0.unitVector();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      // Undeclared exception!
      try { 
        openMapRealVector0.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector0.set(37);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-209));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(-209, openMapRealVector1.getDimension());
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(43, 43, 0.0);
      double[] doubleArray0 = new double[9];
      openMapRealVector0.setSubVector(32, doubleArray0);
      assertEquals(0.20930232558139536, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1328.0));
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      boolean boolean0 = openMapRealVector0.isNaN();
      assertFalse(boolean0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-1393.58672935);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1393.58672935));
      openMapRealVector0.mapMultiplyToSelf(1.7976931348623157E308);
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      boolean boolean0 = openMapRealVector1.isInfinite();
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(boolean0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      openMapRealVector0.mapAddToSelf(2155.4861178);
      double double0 = openMapRealVector0.getLInfDistance((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(2155.4861178, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      double double0 = openMapRealVector0.getLInfDistance((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector0.set(37);
      double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(37.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector0.set((-2.9744540612141517));
      double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      openMapRealVector0.set(37);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(36.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      double double0 = openMapRealVector0.getL1Distance((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1328.0));
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = double0;
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(1.0E-12);
      double double1 = openMapRealVector0.getL1Distance(openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(1.0E-12, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1328.0));
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double double1 = openMapRealVector0.getL1Distance(openMapRealVector0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      double double0 = openMapRealVector0.getDistance((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector0.set((-2.9744540612141517));
      double double0 = openMapRealVector1.getDistance(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(18.09289771164681, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      openMapRealVector0.set((-2.9744540612141517));
      double double0 = openMapRealVector0.getDistance(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-12;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.getDistance(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 177, 0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(43, 43, 0.0);
      openMapRealVector0.set((-1.0));
      openMapRealVector0.getData();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = openMapRealVector0.getData();
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      openMapRealVector0.set((-2.9744540612141517));
      openMapRealVector0.getSubVector(34, 1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(24, 24, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.getSubVector(24, 24);
      assertEquals(48, openMapRealVector1.getDimension());
      assertEquals(24, openMapRealVector2.getDimension());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1328.0));
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[5] = double0;
      doubleArray0[6] = doubleArray0[1];
      doubleArray0[7] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(1.0E-12);
      double[] doubleArray1 = new double[9];
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeMultiply(doubleArray1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, (-1940), 3575.6678874);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(43, 43, 0.0);
      openMapRealVector0.set((-1.0));
      openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1), 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(-2, openMapRealVector2.getDimension());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(229, 229, 229);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(229);
      double double0 = openMapRealVector1.dotProduct(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.2008989E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector0.set((-2.9744540612141517));
      double double0 = openMapRealVector1.dotProduct((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-17), 0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      assertEquals(-17, openMapRealVector1.getDimension());
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.dotProduct(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2237), (-2237), 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      assertEquals(-4474, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(709);
      // Undeclared exception!
      try { 
        openMapRealVector0.append((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      openMapRealVector0.set((-1.0));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.getSubVector(37, 37);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1), 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(-2, openMapRealVector1.getDimension());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(43, 43, 0.0);
      openMapRealVector0.set((-1.0));
      openMapRealVector0.add(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector0.set((-1.0));
      openMapRealVector0.add((RealVector) openMapRealVector1);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      assertEquals(1, openMapRealVector0.getDimension());
      
      openMapRealVector0.add((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1.0));
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-274.85995));
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1170));
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        openMapRealVector0.projection(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,170 != 2
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(43, 43, 0.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector(31, (RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (73)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      double double0 = openMapRealVector0.getSparsity();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-17), 0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(720.1376409360797);
      assertEquals(-17, openMapRealVector1.getDimension());
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(37, 37, 37);
      openMapRealVector0.mapSubtractToSelf(37);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      
      openMapRealVector0.set((-2.9744540612141517));
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1725), (-1725), 2721.558904);
      // Undeclared exception!
      try { 
        openMapRealVector0.toArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1), 0.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(-1, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-1393.58672935));
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1726));
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.setValue((-1726));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry", e);
      }
  }
}
