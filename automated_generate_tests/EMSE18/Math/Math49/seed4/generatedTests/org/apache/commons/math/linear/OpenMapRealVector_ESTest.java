/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 10 22:21:35 GMT 2017
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.NoSuchElementException;
import org.apache.commons.math.analysis.Expm1Function;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.linear.AbstractRealVector;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.ArrayRealVectorTest;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.linear.SparseRealVectorTest;
import org.apache.commons.math.util.OpenIntToDoubleHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenMapRealVector_ESTest extends OpenMapRealVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      
      Expm1Function expm1Function0 = new Expm1Function();
      openMapRealVector0.map(expm1Function0);
      openMapRealVector0.ebeDivide(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      openMapRealVector0.setEntry(1, 0.0);
      double[] doubleArray1 = new double[2];
      openMapRealVector0.getLInfDistance(doubleArray0);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      expm1Function0.derivative();
      openMapRealVector0.isDefaultValue(0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.map(univariateRealFunction0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.projection(doubleArray0);
      expm1Function0.derivative();
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.getSubVector(1, 1);
      openMapRealVector0.append(0.0);
      OpenMapRealVector openMapRealVector4 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector2.getLInfDistance((RealVector) openMapRealVector0);
      openMapRealVector3.getL1Norm();
      openMapRealVector2.isNaN();
      openMapRealVector0.getDistance((RealVector) openMapRealVector2);
      openMapRealVector3.toArray();
      openMapRealVector1.ebeDivide((RealVector) openMapRealVector2);
      openMapRealVector0.isNaN();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.getL1Distance(doubleArray0);
      openMapRealVector0.isNaN();
      openMapRealVector0.getLInfDistance(doubleArray0);
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract(openMapRealVector0);
      openMapRealVector2.mapAddToSelf(0.0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.getLInfDistance(doubleArray0);
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      openMapRealVector0.dotProduct(doubleArray0);
      openMapRealVector0.getLInfNorm();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      openMapRealVector1.getL1Distance((RealVector) arrayRealVectorTest_RealVectorTestImpl0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.getLInfDistance(doubleArray0);
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      openMapRealVector1.add(openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 137.744921045);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector2.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      openMapRealVector2.getMinIndex();
      doubleArray0[2] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[5] = (Double) 1.0E-12;
      doubleArray0[6] = (Double) 1.0E-12;
      doubleArray0[7] = (Double) 1.0E-12;
      doubleArray0[8] = (Double) 1.0E-12;
      openMapRealVector2.isInfinite();
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 137.744921045;
      doubleArray1[1] = 137.744921045;
      doubleArray1[2] = 1.0E-12;
      doubleArray1[3] = 1.0E-12;
      doubleArray1[4] = (double) doubleArray0[6];
      doubleArray1[5] = 2471.66078971691;
      openMapRealVector2.outerProduct(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      openMapRealVector0.toArray();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      openMapRealVector0.projection((RealVector) openMapRealVector1);
      double[] doubleArray0 = openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      abstractRealVector_EntryImpl0.getIndex();
      openMapRealVector1.dotProduct(doubleArray0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      // Undeclared exception!
      try { 
        openMapRealVector2.ebeDivide((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 137.744921045);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      openMapRealVector3.getMinIndex();
      doubleArray0[2] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[5] = (Double) 1.0E-12;
      doubleArray0[6] = (Double) 1.0E-12;
      doubleArray0[7] = (Double) 1.0E-12;
      doubleArray0[8] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector4 = new OpenMapRealVector(doubleArray0);
      openMapRealVector4.isInfinite();
      openMapRealVector4.getDistance(openMapRealVector1);
      Object object0 = new Object();
      // Undeclared exception!
      openMapRealVector2.add(openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 127.98158440481389);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[26];
      doubleArray0[1] = (Double) 1.0E-12;
      openMapRealVector3.getMinIndex();
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = 1.0E-12;
      openMapRealVector3.setSubVector(32, doubleArray1);
      doubleArray0[4] = (Double) 1.0E-12;
      openMapRealVector2.mapSubtract(950);
      doubleArray0[14] = (Double) 1.0E-12;
      openMapRealVector1.append(openMapRealVector2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 21.3175259779215;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 21.3175259779215);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(21.3175259779215);
      openMapRealVector1.isInfinite();
      openMapRealVector0.setEntry(1, 0.0);
      openMapRealVector0.add((RealVector) openMapRealVector1);
      openMapRealVector0.getLInfDistance(doubleArray0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(0.0);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      expm1Function0.derivative();
      OpenMapRealVector openMapRealVector3 = (OpenMapRealVector)openMapRealVector0.map(univariateRealFunction0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      openMapRealVector3.getDistance(doubleArray0);
      OpenMapRealVector openMapRealVector4 = openMapRealVector2.projection(doubleArray0);
      expm1Function0.derivative();
      OpenMapRealVector openMapRealVector5 = openMapRealVector4.getSubVector(1, 1);
      openMapRealVector0.append((-3219.94));
      OpenMapRealVector openMapRealVector6 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector4.getLInfDistance((RealVector) openMapRealVector2);
      // Undeclared exception!
      try { 
        openMapRealVector5.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1009.9995749672992);
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(10.0);
      openMapRealVector1.outerProduct(doubleArray0);
      openMapRealVector0.setEntry(1, 0.0);
      // Undeclared exception!
      try { 
        openMapRealVector1.add((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1009.9995749672992);
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(10.0);
      openMapRealVector1.isDefaultValue((-1009.9995749672992));
      openMapRealVector1.outerProduct(doubleArray0);
      openMapRealVector0.setEntry(1, 0.0);
      openMapRealVector0.add((RealVector) openMapRealVector1);
      openMapRealVector0.getLInfDistance(doubleArray0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(10.0);
      openMapRealVector0.outerProduct(doubleArray0);
      Expm1Function expm1Function0 = new Expm1Function();
      expm1Function0.derivative();
      openMapRealVector0.isDefaultValue(2177.010159);
      openMapRealVector0.isInfinite();
      openMapRealVector0.map(expm1Function0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      openMapRealVector2.projection(doubleArray0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((-3219.94));
      OpenMapRealVector openMapRealVector4 = new OpenMapRealVector(1, 1.0E-12);
      OpenMapRealVector openMapRealVector5 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector5.equals(openMapRealVector2);
      // Undeclared exception!
      try { 
        openMapRealVector3.getLInfDistance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1009.9995749672992);
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 10.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(10.0);
      openMapRealVector1.outerProduct(doubleArray0);
      openMapRealVector0.add((RealVector) openMapRealVector1);
      openMapRealVector0.getLInfDistance(doubleArray0);
      openMapRealVector0.mapAdd(0.0);
      openMapRealVector0.outerProduct(doubleArray0);
      Expm1Function expm1Function0 = new Expm1Function();
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide(doubleArray0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2, 2);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      int int0 = Double.SIZE;
      openMapRealVector0.set(2);
      abstractRealVector_EntryImpl0.setIndex(2);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(64);
      // Undeclared exception!
      try { 
        openMapRealVector1.projection((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 127.98158440481389);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector2.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[26];
      doubleArray0[1] = (Double) 1.0E-12;
      // Undeclared exception!
      openMapRealVector2.unitize();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 127.98158440481389);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[26];
      doubleArray0[3] = (Double) 1.0E-12;
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = 1.0E-12;
      openMapRealVector3.setSubVector(32, doubleArray1);
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[14] = (Double) 1.0E-12;
      doubleArray0[7] = (Double) 1.0E-12;
      doubleArray0[8] = (Double) 1.0E-12;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 950;
      openMapRealVector0.append(doubleArray2);
      openMapRealVector2.mapAddToSelf(1110.999532464029);
      // Undeclared exception!
      openMapRealVector1.getData();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 137.744921045);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector2.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      openMapRealVector2.getMinIndex();
      doubleArray0[2] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[5] = (Double) 1.0E-12;
      doubleArray0[6] = (Double) 1.0E-12;
      doubleArray0[7] = (Double) 1.0E-12;
      doubleArray0[8] = (Double) 1.0E-12;
      openMapRealVector2.isInfinite();
      // Undeclared exception!
      openMapRealVector0.getDistance(openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 137.744921045);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      openMapRealVector1.ebeMultiply((RealVector) openMapRealVector0);
      openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      // Undeclared exception!
      openMapRealVector0.append((RealVector) openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1009.9995749672992);
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(10.0);
      // Undeclared exception!
      try { 
        openMapRealVector1.getSubVector(1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 137.744921045);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      openMapRealVector3.getMinIndex();
      doubleArray0[2] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[5] = (Double) 1.0E-12;
      doubleArray0[6] = (Double) 1.0E-12;
      doubleArray0[7] = (Double) 1.0E-12;
      doubleArray0[8] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector4 = new OpenMapRealVector(doubleArray0);
      openMapRealVector4.isInfinite();
      Object object0 = new Object();
      openMapRealVector3.equals(object0);
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeMultiply((RealVector) openMapRealVector2);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 21.3175259779215;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(21.3175259779215);
      openMapRealVector1.isInfinite();
      openMapRealVector0.setEntry(1, 0.0);
      openMapRealVector0.add((RealVector) openMapRealVector1);
      openMapRealVector0.getLInfDistance(doubleArray0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(21.3175259779215);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      expm1Function0.derivative();
      openMapRealVector0.isDefaultValue(0.0);
      openMapRealVector0.map(univariateRealFunction0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.projection(doubleArray0);
      expm1Function0.derivative();
      OpenMapRealVector openMapRealVector4 = openMapRealVector3.getSubVector(1, 1);
      OpenMapRealVector openMapRealVector5 = openMapRealVector0.append((-3219.94));
      // Undeclared exception!
      try { 
        openMapRealVector4.getL1Distance((RealVector) openMapRealVector5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 137.744921045);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector2.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      openMapRealVector2.getMinIndex();
      doubleArray0[2] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[5] = (Double) 1.0E-12;
      doubleArray0[6] = (Double) 1.0E-12;
      doubleArray0[7] = (Double) 1.0E-12;
      doubleArray0[8] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(doubleArray0);
      openMapRealVector3.getDistance(openMapRealVector0);
      openMapRealVector3.isInfinite();
      openMapRealVector1.subtract((RealVector) openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      openMapRealVector0.toArray();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      double[] doubleArray0 = openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      abstractRealVector_EntryImpl0.getIndex();
      openMapRealVector1.dotProduct(doubleArray0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      openMapRealVector1.getL1Distance((RealVector) openMapRealVector3);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      // Undeclared exception!
      try { 
        openMapRealVector2.ebeMultiply((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 127.98158440481389);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[26];
      doubleArray0[0] = (Double) 1.0E-12;
      openMapRealVector3.getMinIndex();
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[6] = (Double) 1.0E-12;
      doubleArray0[7] = (Double) 1.0E-12;
      doubleArray0[8] = (Double) 1.0E-12;
      double[] doubleArray1 = new double[1];
      openMapRealVector2.subtract(openMapRealVector1);
      doubleArray1[0] = (double) 950;
      openMapRealVector0.append(doubleArray1);
      openMapRealVector1.append(doubleArray1);
      openMapRealVector2.mapAddToSelf(1.0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      openMapRealVector0.set(0);
      abstractRealVector_EntryImpl0.setIndex(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      double[] doubleArray0 = openMapRealVector0.toArray();
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.ebeMultiply(doubleArray0);
      int int0 = openMapRealVector0.getDimension();
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double double0 = openMapRealVector2.getDistance((RealVector) openMapRealVector4);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[20];
      doubleArray1[0] = (double) 0;
      double double1 = openMapRealVector2.dotProduct((RealVector) openMapRealVector1);
      assertEquals(0.0, double1, 0.01);
      
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      int int1 = openMapRealVector4.hashCode();
      assertFalse(int1 == int0);
      
      OpenMapRealVector openMapRealVector5 = openMapRealVector2.append(openMapRealVector4);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl1 = openMapRealVector0.new EntryImpl();
      boolean boolean0 = openMapRealVector4.equals(abstractRealVector_EntryImpl1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector5));
      assertFalse(boolean0);
      assertNotSame(openMapRealVector4, openMapRealVector5);
      assertNotSame(openMapRealVector4, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 21.3175259779215;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(21.3175259779215);
      openMapRealVector1.isInfinite();
      openMapRealVector0.setEntry(1, 0.0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector1);
      double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
      assertEquals(21.3175259779215, double0, 0.01);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapAdd(21.3175259779215);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      expm1Function0.derivative();
      openMapRealVector0.isDefaultValue(0.0);
      OpenMapRealVector openMapRealVector4 = (OpenMapRealVector)openMapRealVector0.map(univariateRealFunction0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector5 = openMapRealVector3.projection(doubleArray0);
      OpenMapRealVector openMapRealVector6 = openMapRealVector5.getSubVector(1, 1);
      OpenMapRealVector openMapRealVector7 = openMapRealVector0.append((-3219.94));
      OpenMapRealVector openMapRealVector8 = new OpenMapRealVector(openMapRealVector0);
      double double1 = openMapRealVector5.getLInfDistance((RealVector) openMapRealVector3);
      double double2 = openMapRealVector0.getDistance((RealVector) openMapRealVector5);
      assertEquals(double2, double1, 0.01);
      
      openMapRealVector6.toArray();
      openMapRealVector4.ebeDivide((RealVector) openMapRealVector5);
      boolean boolean0 = openMapRealVector1.equals(openMapRealVector7);
      assertFalse(boolean0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      
      openMapRealVector0.copy();
      double double3 = openMapRealVector6.getSparsity();
      assertEquals(1.0, double3, 0.01);
      assertEquals(0.3333333333333333, openMapRealVector5.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 127.98158440481389);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector1);
      openMapRealVector3.getEntry(950);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[26];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      openMapRealVector3.getMinIndex();
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = 1.0E-12;
      openMapRealVector3.setSubVector(32, doubleArray1);
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[6] = (Double) 1.0E-12;
      doubleArray0[7] = (Double) 1.0E-12;
      doubleArray0[8] = (Double) 1.0E-12;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 950;
      openMapRealVector0.append(doubleArray2);
      // Undeclared exception!
      try { 
        openMapRealVector2.ebeMultiply(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 950 != 2
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 21.3175259779215;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 21.3175259779215);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(21.3175259779215);
      openMapRealVector1.isInfinite();
      openMapRealVector0.setEntry(1, 0.0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector1);
      openMapRealVector0.getLInfDistance(doubleArray0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapAdd(21.3175259779215);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      expm1Function0.derivative();
      openMapRealVector0.isDefaultValue(0.0);
      OpenMapRealVector openMapRealVector4 = (OpenMapRealVector)openMapRealVector0.map(univariateRealFunction0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector5 = openMapRealVector3.projection(doubleArray0);
      OpenMapRealVector openMapRealVector6 = openMapRealVector5.getSubVector(1, 1);
      openMapRealVector0.append((-3219.94));
      OpenMapRealVector openMapRealVector7 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector5.getLInfDistance((RealVector) openMapRealVector3);
      openMapRealVector0.getDistance((RealVector) openMapRealVector5);
      openMapRealVector6.toArray();
      openMapRealVector4.ebeDivide((RealVector) openMapRealVector5);
      openMapRealVector2.sparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 127.98158440481389);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector2.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[26];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      openMapRealVector2.getMinIndex();
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = 1.0E-12;
      openMapRealVector0.mapMultiply(127.98158440481389);
      openMapRealVector2.setSubVector(32, doubleArray1);
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[6] = (Double) 1.0E-12;
      doubleArray0[7] = (Double) 1.0E-12;
      openMapRealVector2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-6), (-6));
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set((-6));
      abstractRealVector_EntryImpl0.setIndex((-6));
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      // Undeclared exception!
      try { 
        openMapRealVector2.getData();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 137.744921045);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      openMapRealVector_OpenMapSparseIterator0.next();
      openMapRealVector2.getDistance(openMapRealVector1);
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = (Double) 1.0E-12;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2731.155732347);
      doubleArray1[1] = (double) 950;
      doubleArray1[2] = 29280.966514102638;
      doubleArray1[3] = (double) 950;
      doubleArray1[4] = (double) 950;
      doubleArray1[5] = 137.744921045;
      doubleArray1[6] = 1.0E-12;
      doubleArray1[7] = (double) doubleArray0[0];
      doubleArray1[8] = (double) doubleArray0[0];
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray1);
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)arrayRealVectorTest_RealVectorTestImpl0.mapMultiply(1.0E-12);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 950 != 9
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 127.98158440481389);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[26];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      // Undeclared exception!
      try { 
        openMapRealVector2.getDistance((RealVector) openMapRealVector3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 950 != 1,900
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 21.3175259779215;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(21.3175259779215);
      openMapRealVector1.isInfinite();
      openMapRealVector0.setEntry(1, 0.0);
      openMapRealVector0.add((RealVector) openMapRealVector1);
      openMapRealVector0.getLInfDistance(doubleArray0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(21.3175259779215);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      expm1Function0.derivative();
      openMapRealVector0.isDefaultValue(0.0);
      OpenMapRealVector openMapRealVector3 = (OpenMapRealVector)openMapRealVector0.map(univariateRealFunction0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector4 = openMapRealVector2.projection(doubleArray0);
      OpenMapRealVector openMapRealVector5 = openMapRealVector4.getSubVector(1, 1);
      OpenMapRealVector openMapRealVector6 = openMapRealVector0.append((-3219.94));
      OpenMapRealVector openMapRealVector7 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector4.getLInfDistance((RealVector) openMapRealVector2);
      openMapRealVector0.getDistance((RealVector) openMapRealVector4);
      openMapRealVector5.toArray();
      openMapRealVector3.ebeDivide((RealVector) openMapRealVector4);
      // Undeclared exception!
      try { 
        openMapRealVector6.getDistance(openMapRealVector4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (3)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      openMapRealVector0.set(0);
      openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      abstractRealVector_EntryImpl0.getIndex();
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      abstractRealVector_EntryImpl0.setIndex(857);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append(1.0E-12);
      assertEquals(1, openMapRealVector2.getDimension());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      int int0 = abstractRealVector_EntryImpl0.getIndex();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set(0);
      abstractRealVector_EntryImpl0.setIndex(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      openMapRealVector2.getDistance((RealVector) openMapRealVector3);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      double double0 = openMapRealVector2.dotProduct((RealVector) openMapRealVector1);
      assertEquals(0.0, double0, 0.01);
      
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      OpenMapRealVector openMapRealVector4 = openMapRealVector2.ebeMultiply((RealVector) openMapRealVector1);
      int int1 = openMapRealVector3.hashCode();
      assertFalse(int1 == int0);
      
      OpenMapRealVector openMapRealVector5 = openMapRealVector2.add(openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector2, openMapRealVector5);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set(0);
      abstractRealVector_EntryImpl0.setIndex(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      double[] doubleArray0 = openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      double double0 = openMapRealVector2.dotProduct((RealVector) openMapRealVector1);
      assertEquals(0.0, double0, 0.01);
      
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      OpenMapRealVector openMapRealVector4 = openMapRealVector2.append(doubleArray0);
      doubleArray1[5] = (double) 0;
      OpenMapRealVector openMapRealVector5 = openMapRealVector2.ebeMultiply((RealVector) openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector4));
      assertNotSame(openMapRealVector2, openMapRealVector5);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 137.744921045);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector2.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      openMapRealVector2.getMinIndex();
      doubleArray0[2] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[5] = (Double) 1.0E-12;
      doubleArray0[6] = (Double) 1.0E-12;
      doubleArray0[7] = (Double) 1.0E-12;
      doubleArray0[8] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(doubleArray0);
      openMapRealVector3.isInfinite();
      // Undeclared exception!
      try { 
        openMapRealVector0.outerProduct((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1009.9995749672992);
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-15), (-15));
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set((-15));
      abstractRealVector_EntryImpl0.setIndex((-15));
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      openMapRealVector0.getDimension();
      openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      openMapRealVector2.dotProduct((RealVector) openMapRealVector1);
      doubleArray0[1] = (double) (-15);
      doubleArray0[3] = (double) (-15);
      doubleArray0[4] = (double) (-15);
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      try { 
        abstractRealVector_EntryImpl0.setValue(1.0E-12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-15)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 21.3175259779215;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(21.3175259779215);
      boolean boolean0 = openMapRealVector1.isInfinite();
      openMapRealVector0.setEntry(1, 0.0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector1);
      double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapAdd(21.3175259779215);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      expm1Function0.derivative();
      openMapRealVector0.isDefaultValue(0.0);
      OpenMapRealVector openMapRealVector4 = (OpenMapRealVector)openMapRealVector0.map(univariateRealFunction0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector5 = openMapRealVector3.projection(doubleArray0);
      OpenMapRealVector openMapRealVector6 = openMapRealVector5.getSubVector(1, 1);
      OpenMapRealVector openMapRealVector7 = openMapRealVector0.append((-3217.245080670156));
      OpenMapRealVector openMapRealVector8 = new OpenMapRealVector(openMapRealVector0);
      double double1 = openMapRealVector5.getLInfDistance((RealVector) openMapRealVector3);
      assertEquals(21.3175259779215, double1, 0.01);
      
      double double2 = openMapRealVector0.getDistance((RealVector) openMapRealVector5);
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = openMapRealVector6.toArray();
      assertArrayEquals(new double[] {21.3175259779215}, doubleArray1, 0.01);
      
      openMapRealVector4.ebeDivide((RealVector) openMapRealVector5);
      boolean boolean1 = openMapRealVector5.equals(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(openMapRealVector0, openMapRealVector7);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertEquals(0.3333333333333333, openMapRealVector5.getSparsity(), 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 137.744921045);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      openMapRealVector3.getMinIndex();
      doubleArray0[2] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[5] = (Double) 1.0E-12;
      doubleArray0[6] = (Double) 1.0E-12;
      doubleArray0[7] = (Double) 1.0E-12;
      doubleArray0[8] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector4 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector5 = openMapRealVector1.add(openMapRealVector2);
      assertTrue(openMapRealVector5.equals((Object)openMapRealVector1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 21.3175259779215;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(21.3175259779215);
      openMapRealVector1.isInfinite();
      openMapRealVector0.setEntry(1, 0.0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector1);
      double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapAdd(21.3175259779215);
      Expm1Function expm1Function0 = new Expm1Function();
      expm1Function0.derivative();
      boolean boolean0 = openMapRealVector0.isDefaultValue(0.0);
      assertFalse(boolean0);
      
      OpenMapRealVector openMapRealVector4 = (OpenMapRealVector)openMapRealVector0.map(expm1Function0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector5 = openMapRealVector3.projection(doubleArray0);
      OpenMapRealVector openMapRealVector6 = openMapRealVector5.getSubVector(1, 1);
      OpenMapRealVector openMapRealVector7 = openMapRealVector5.ebeMultiply((RealVector) openMapRealVector4);
      assertEquals(0.0, openMapRealVector7.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector8 = new OpenMapRealVector(openMapRealVector0);
      double double1 = openMapRealVector0.getDistance((RealVector) openMapRealVector5);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = openMapRealVector6.toArray();
      assertArrayEquals(new double[] {21.3175259779215}, doubleArray1, 0.01);
      assertEquals(0.3333333333333333, openMapRealVector5.getSparsity(), 0.01);
      
      double double2 = openMapRealVector8.getL1Distance((RealVector) openMapRealVector2);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 137.744921045);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector2.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = (Double) 1.0E-12;
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeDivide((RealVector) openMapRealVector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 31, 137.74492);
      openMapRealVector0.getL1Norm();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(31);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 31;
      doubleArray0[1] = 137.74492;
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0E-12;
      openMapRealVector0.append(openMapRealVector1);
      doubleArray0[7] = 1.543080634815244;
      openMapRealVector1.add(doubleArray0);
      openMapRealVector1.combine(0.0, 0.0, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector2.new OpenMapSparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 137.744921045);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector2.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      openMapRealVector2.getMinIndex();
      doubleArray0[2] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[5] = (Double) 1.0E-12;
      doubleArray0[6] = (Double) 1.0E-12;
      openMapRealVector0.getLInfNorm();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      
      doubleArray0[7] = (Double) 1.0E-12;
      doubleArray0[8] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(doubleArray0);
      double double0 = openMapRealVector3.getL1Distance(openMapRealVector0);
      assertEquals(902500.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 21.3175259779215;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(21.3175259779215);
      openMapRealVector1.isInfinite();
      double double0 = openMapRealVector0.dotProduct(openMapRealVector1);
      openMapRealVector0.setEntry(1, 0.0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector1);
      double double1 = openMapRealVector0.getLInfDistance(doubleArray0);
      assertEquals(21.3175259779215, double1, 0.01);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapAdd(21.3175259779215);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      expm1Function0.derivative();
      boolean boolean0 = openMapRealVector0.isDefaultValue(0.0);
      assertFalse(boolean0);
      
      OpenMapRealVector openMapRealVector4 = (OpenMapRealVector)openMapRealVector0.map(univariateRealFunction0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector5 = openMapRealVector3.projection(doubleArray0);
      expm1Function0.derivative();
      OpenMapRealVector openMapRealVector6 = openMapRealVector5.getSubVector(1, 1);
      OpenMapRealVector openMapRealVector7 = openMapRealVector5.ebeMultiply((RealVector) openMapRealVector4);
      OpenMapRealVector openMapRealVector8 = openMapRealVector0.append((-3219.94));
      OpenMapRealVector openMapRealVector9 = new OpenMapRealVector(openMapRealVector0);
      double double2 = openMapRealVector0.getDistance((RealVector) openMapRealVector5);
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = openMapRealVector6.toArray();
      assertArrayEquals(new double[] {21.3175259779215}, doubleArray1, 0.01);
      assertTrue(openMapRealVector5.equals((Object)openMapRealVector7));
      assertEquals(0.3333333333333333, openMapRealVector5.getSparsity(), 0.01);
      
      double double3 = openMapRealVector9.getL1Distance((RealVector) openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector8);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(1.0, double3, 0.01);
      assertNotSame(openMapRealVector2, openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set(0);
      abstractRealVector_EntryImpl0.setIndex(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      double double0 = openMapRealVector2.dotProduct((RealVector) openMapRealVector1);
      assertEquals(0.0, double0, 0.01);
      
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      OpenMapRealVector openMapRealVector4 = openMapRealVector2.ebeMultiply((RealVector) openMapRealVector1);
      openMapRealVector0.sparseIterator();
      OpenMapRealVector openMapRealVector5 = (OpenMapRealVector)openMapRealVector4.add((RealVector) openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector5);
      assertNotSame(openMapRealVector5, openMapRealVector4);
      
      openMapRealVector2.mapAdd(1.0E-12);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 21.3175259779215;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 21.3175259779215);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(21.3175259779215);
      openMapRealVector1.isInfinite();
      openMapRealVector0.setEntry(1, 0.0);
      openMapRealVector0.add((RealVector) openMapRealVector1);
      openMapRealVector0.getLInfDistance(doubleArray0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(21.3175259779215);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      expm1Function0.derivative();
      openMapRealVector0.isDefaultValue(21.3175259779215);
      openMapRealVector0.map(univariateRealFunction0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.projection(doubleArray0);
      OpenMapRealVector openMapRealVector4 = openMapRealVector3.getSubVector(1, 1);
      openMapRealVector0.append((-3219.94));
      OpenMapRealVector openMapRealVector5 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector0.getDistance((RealVector) openMapRealVector3);
      openMapRealVector4.toArray();
      // Undeclared exception!
      try { 
        openMapRealVector2.ebeMultiply(doubleArray0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 21.3175259779215;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(21.3175259779215);
      openMapRealVector1.isInfinite();
      openMapRealVector0.setEntry(1, 0.0);
      openMapRealVector0.add((RealVector) openMapRealVector1);
      openMapRealVector0.getLInfDistance(doubleArray0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(21.3175259779215);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      expm1Function0.derivative();
      openMapRealVector0.isDefaultValue(0.0);
      OpenMapRealVector openMapRealVector3 = (OpenMapRealVector)openMapRealVector0.map(univariateRealFunction0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector4 = openMapRealVector2.projection(doubleArray0);
      OpenMapRealVector openMapRealVector5 = openMapRealVector4.getSubVector(1, 1);
      openMapRealVector0.append((-3219.94));
      OpenMapRealVector openMapRealVector6 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector4.getLInfDistance((RealVector) openMapRealVector2);
      openMapRealVector0.getDistance((RealVector) openMapRealVector4);
      openMapRealVector5.toArray();
      openMapRealVector4.checkIndex(1);
      // Undeclared exception!
      try { 
        openMapRealVector3.ebeDivide((RealVector) openMapRealVector5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set(0);
      abstractRealVector_EntryImpl0.setIndex(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      double double0 = openMapRealVector2.dotProduct((RealVector) openMapRealVector1);
      assertEquals(0.0, double0, 0.01);
      
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      OpenMapRealVector openMapRealVector4 = openMapRealVector2.ebeMultiply((RealVector) openMapRealVector1);
      OpenMapRealVector openMapRealVector5 = openMapRealVector3.subtract(openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector5);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector5);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set(0);
      abstractRealVector_EntryImpl0.setIndex(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      Double double0 = new Double(1.0E-12);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[1] = (double) 0;
      OpenMapRealVector openMapRealVector4 = openMapRealVector2.ebeMultiply((RealVector) openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      
      OpenMapRealVector openMapRealVector5 = openMapRealVector0.append(0.0);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertEquals(0.0, openMapRealVector5.getSparsity(), 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector2));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1009.9995749672992);
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      openMapRealVector0.setEntry(1, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      openMapRealVector0.getLInfDistance(doubleArray0);
      Expm1Function expm1Function0 = new Expm1Function();
      expm1Function0.derivative();
      expm1Function0.derivative();
      openMapRealVector0.isDefaultValue(2177.010159);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      openMapRealVector1.projection(doubleArray0);
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector1.append((RealVector) openMapRealVector1);
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.add(openMapRealVector1);
      OpenMapRealVector openMapRealVector4 = openMapRealVector3.append(openMapRealVector1);
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct(openMapRealVector4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 31, 137.744921045);
      openMapRealVector0.getL1Norm();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(31);
      openMapRealVector1.combine(137.744921045, 0.0, (RealVector) openMapRealVector0);
      openMapRealVector0.append((RealVector) openMapRealVector1);
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      doubleArray0[2] = (Double) 1.0E-12;
      doubleArray0[4] = (Double) 1.0E-12;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) doubleArray0[4];
      doubleArray1[1] = (double) doubleArray0[4];
      doubleArray1[2] = 1.0E-12;
      doubleArray1[3] = (double) doubleArray0[0];
      doubleArray1[4] = 0.07490822288864472;
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray1);
      // Undeclared exception!
      try { 
        openMapRealVector0.projection((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 950 != 5
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set(0);
      abstractRealVector_EntryImpl0.setIndex(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      double double0 = openMapRealVector2.dotProduct((RealVector) openMapRealVector1);
      assertEquals(0.0, double0, 0.01);
      
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      OpenMapRealVector openMapRealVector4 = openMapRealVector2.ebeMultiply((RealVector) openMapRealVector1);
      openMapRealVector2.copy();
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2080.3834);
      doubleArray0[1] = (-1706.34);
      doubleArray0[2] = 1848.61633039;
      doubleArray0[3] = 0.6666666269302368;
      doubleArray0[4] = 1765.7;
      doubleArray0[4] = 1054.5078563735;
      doubleArray0[6] = 20.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector0.outerProduct(doubleArray0);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      
      openMapRealVector1.unitize();
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0.8571428571428571, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 127.98158440481389);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      openMapRealVector3.getMinIndex();
      openMapRealVector1.copy();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      openMapRealVector3.setSubVector(32, doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 950;
      // Undeclared exception!
      try { 
        openMapRealVector2.ebeMultiply(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 950 != 2
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set(0);
      abstractRealVector_EntryImpl0.setIndex(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      double[] doubleArray0 = openMapRealVector0.toArray();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      openMapRealVector0.getDimension();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (double) 0;
      double double0 = openMapRealVector2.dotProduct((RealVector) openMapRealVector1);
      assertEquals(0.0, double0, 0.01);
      
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      OpenMapRealVector openMapRealVector4 = openMapRealVector2.ebeMultiply((RealVector) openMapRealVector1);
      OpenMapRealVector openMapRealVector5 = openMapRealVector4.projection(doubleArray0);
      assertNotSame(openMapRealVector2, openMapRealVector4);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertTrue(openMapRealVector5.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      openMapRealVector0.toArray();
      openMapRealVector0.set(0);
      openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      abstractRealVector_EntryImpl0.getIndex();
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      abstractRealVector_EntryImpl0.setIndex(857);
      double[] doubleArray1 = openMapRealVector0.toArray();
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 21.3175259779215;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 21.3175259779215);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(21.3175259779215);
      boolean boolean0 = openMapRealVector1.isInfinite();
      assertFalse(boolean0);
      
      openMapRealVector0.setEntry(1, 21.3175259779215);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector1);
      double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      openMapRealVector0.isDefaultValue(21.3175259779215);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.projection(doubleArray0);
      OpenMapRealVector openMapRealVector4 = openMapRealVector3.getSubVector(1, 1);
      assertEquals(1.0, openMapRealVector4.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector5 = openMapRealVector0.append((-3219.94));
      assertEquals(0.5, openMapRealVector5.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector6 = new OpenMapRealVector(openMapRealVector0);
      double double1 = openMapRealVector3.getLInfDistance((RealVector) openMapRealVector2);
      assertEquals(21.3175259779215, double1, 0.01);
      
      double double2 = openMapRealVector0.getDistance((RealVector) openMapRealVector3);
      assertEquals(20.3175259779215, double2, 0.01);
      
      OpenMapRealVector openMapRealVector7 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector3);
      openMapRealVector2.ebeMultiply(doubleArray0);
      assertEquals(0.3333333333333333, openMapRealVector2.getSparsity(), 0.01);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector7));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.getLInfDistance(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      SinFunction sinFunction0 = new SinFunction();
      UnivariateRealFunction univariateRealFunction0 = sinFunction0.derivative();
      openMapRealVector0.mapToSelf(univariateRealFunction0);
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      openMapRealVector1.outerProduct(doubleArray0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1009.9995749672992);
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 0.0;
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(115.75055938394028);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-38), (-38));
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set((-38));
      abstractRealVector_EntryImpl0.setIndex((-38));
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      openMapRealVector0.projection((RealVector) openMapRealVector1);
      // Undeclared exception!
      try { 
        openMapRealVector0.toArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      openMapRealVector0.getLInfNorm();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector1, openMapRealVector0);
      
      double double1 = openMapRealVector1.dotProduct(openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(983, 1706);
      openMapRealVector0.mapDivide(983);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(938.27);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      
      double double0 = openMapRealVector0.getSparsity();
      assertEquals(983, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      openMapRealVector0.set(0);
      openMapRealVector0.toArray();
      int int0 = Double.SIZE;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(0);
      assertEquals(0, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set(0);
      abstractRealVector_EntryImpl0.setIndex(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      openMapRealVector2.add(doubleArray0);
      doubleArray0[5] = (double) 0;
      openMapRealVector2.getSparsity();
      // Undeclared exception!
      try { 
        openMapRealVector3.outerProduct(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set(0);
      abstractRealVector_EntryImpl0.setIndex(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      double[] doubleArray0 = openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      abstractRealVector_EntryImpl0.getIndex();
      openMapRealVector1.dotProduct(doubleArray0);
      openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      openMapRealVector2.isNaN();
      // Undeclared exception!
      try { 
        openMapRealVector1.getLInfDistance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2080.3834);
      doubleArray0[1] = (-1706.34);
      doubleArray0[2] = 1848.61633039;
      doubleArray0[3] = 0.6666666269302368;
      doubleArray0[4] = 1765.7;
      doubleArray0[5] = 1054.5078563735;
      doubleArray0[6] = 20.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2080.3834);
      doubleArray0[1] = (-1706.34);
      doubleArray0[2] = 1848.61633039;
      doubleArray0[3] = 0.6666666269302368;
      doubleArray0[6] = 20.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2080.3834);
      doubleArray0[1] = (-1706.34);
      doubleArray0[2] = 1848.61633039;
      doubleArray0[3] = 0.6666666269302368;
      doubleArray0[4] = 1765.7;
      doubleArray0[6] = 20.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)arrayRealVectorTest_RealVectorTestImpl0.mapMultiply((-1706.34));
      openMapRealVector0.dotProduct((RealVector) arrayRealVector0);
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      // Undeclared exception!
      try { 
        sparseRealVectorTest_SparseRealVectorTestImpl0.unitVector();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported, unneeded for test purposes
         //
         verifyException("org.apache.commons.math.linear.SparseRealVectorTest$SparseRealVectorTestImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2080.3834);
      doubleArray0[1] = (-1706.34);
      doubleArray0[2] = 1848.61633039;
      doubleArray0[3] = 0.6666666;
      doubleArray0[4] = 1765.7;
      doubleArray0[6] = (-1706.34);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double double0 = openMapRealVector0.getL1Norm();
      assertEquals(9108.04639699, double0, 0.01);
      
      openMapRealVector0.hashCode();
      assertEquals(0.8571428571428571, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 31, 137.744921045);
      openMapRealVector0.getL1Norm();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(31);
      openMapRealVector1.copy();
      openMapRealVector1.combine(1.0E-12, 0.0, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector2.new OpenMapSparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      openMapRealVector0.getDimension();
      openMapRealVector0.getMinValue();
      openMapRealVector0.isDefaultValue(1);
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector(950, (-2127552465), 137.744921045);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.setIndex(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      double[] doubleArray0 = openMapRealVector0.toArray();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      openMapRealVector0.getDimension();
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      double[] doubleArray1 = new double[6];
      double double0 = openMapRealVector1.dotProduct((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01);
      
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.ebeMultiply((RealVector) openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2080.3834);
      doubleArray0[1] = (-1706.34);
      doubleArray0[2] = 1848.61633039;
      doubleArray0[3] = 0.6666666269302368;
      doubleArray0[4] = 1765.7;
      doubleArray0[5] = 1054.5078563735;
      doubleArray0[6] = 20.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, (-5), 137.744921045);
      openMapRealVector0.getL1Norm();
      // Undeclared exception!
      try { 
        openMapRealVector0.mapAddToSelf((-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(75, 9.9459065904368);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-7.572410630970258);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector1.append((RealVector) openMapRealVector0);
      double double0 = openMapRealVector2.getDistance(openMapRealVector3);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.013157894736842105, openMapRealVector3.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0E-12;
      // Undeclared exception!
      try { 
        openMapRealVector0.projection(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(5606.9874366573);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      Double.sum(0.0, 1892.054038004);
      Double double2 = new Double((-1969.32));
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      Double.isFinite(0.0);
      Double double4 = new Double(5606.9874366573);
      doubleArray0[4] = double4;
      Double.isFinite(2324.243895294853);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2577));
      assertEquals(-2577, openMapRealVector0.getDimension());
      
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2965.92794);
      doubleArray0[1] = 196.01;
      doubleArray0[2] = 3071.9769992675706;
      doubleArray0[3] = 722.6;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.08371849358081818;
      doubleArray0[6] = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector();
      openMapRealVector0.subtract(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.dotProduct((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      
      double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      openMapRealVector0.sparseIterator();
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector2, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-443), (-443), (-8.0E298));
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 1.0E-12);
      openMapRealVector0.getL1Norm();
      // Undeclared exception!
      try { 
        openMapRealVector0.projection((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(30, 251, 0.041666666666666664);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 251;
      doubleArray0[1] = (double) 251;
      doubleArray0[2] = (double) 30;
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.append((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 179, 179);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 179;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1.0E-12;
      // Undeclared exception!
      try { 
        openMapRealVector0.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 3376, (-2222.4344568716));
      openMapRealVector0.isDefaultValue(0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2988, 2988);
      openMapRealVector0.hashCode();
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(2395, 2395);
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,988 != 2,395
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = 1.0E-12;
      doubleArray0[6] = 1.0E-12;
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.7168146928204135);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1136.6357555273928);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.setValue(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3063, (-1652));
      // Undeclared exception!
      try { 
        openMapRealVector0.set(1086.7519177887962);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      openMapRealVector0.equals(abstractRealVector_EntryImpl0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(3434, 3434, 1.0E-12);
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3,434
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getEntry(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 255, (-2284.246782));
      openMapRealVector0.getData();
      openMapRealVector0.getData();
      // Undeclared exception!
      try { 
        openMapRealVector0.add((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(31, (-571.45166));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector();
      openMapRealVector1.append((RealVector) openMapRealVector0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1539.461793086703);
      doubleArray0[1] = (-199.7618918386);
      doubleArray0[2] = (-800.385);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-571.45166);
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 31 != 5
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.99);
      openMapRealVector0.mapDivide(0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, (-4485));
      // Undeclared exception!
      try { 
        openMapRealVector1.append(1.0E-12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-4,485)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 31, 137.744921045);
      openMapRealVector0.getL1Norm();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(31);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.combine(0.0, 0.0, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertEquals(1900, openMapRealVector3.getDimension());
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2830, 2830);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = (double) 2830;
      // Undeclared exception!
      try { 
        openMapRealVector0.setEntry(2830, 1.0E-12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (2,830)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 413.88;
      doubleArray0[1] = 1099.380812655375;
      doubleArray0[2] = 0.3333333333332802;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2799.2579786075;
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl1 = (SparseRealVectorTest.SparseRealVectorTestImpl)sparseRealVectorTest_SparseRealVectorTestImpl0.copy();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl1);
      assertEquals(0.8, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(309, 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(1649);
      OpenMapRealVector openMapRealVector2 = new OpenMapRealVector();
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector((RealVector) openMapRealVector1);
      openMapRealVector3.getEntry(309);
      // Undeclared exception!
      try { 
        openMapRealVector3.add((RealVector) openMapRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,649 != 0
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2080.3834);
      doubleArray0[1] = (-1706.34);
      doubleArray0[2] = 1848.61633039;
      doubleArray0[3] = 0.6666666269302368;
      doubleArray0[4] = 1765.7;
      doubleArray0[5] = 1054.5078563735;
      doubleArray0[6] = 20.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((OpenMapRealVector) null, (-626));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2, 2);
      openMapRealVector0.set(2);
      double[] doubleArray0 = openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      openMapRealVector0.append(doubleArray0);
      double[] doubleArray1 = new double[20];
      doubleArray1[1] = (double) 2;
      doubleArray1[4] = (double) 2;
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 20
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1445), (-1445), 0.0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((-1445));
      openMapRealVector1.subtract((RealVector) openMapRealVector0);
      Expm1Function expm1Function0 = new Expm1Function();
      openMapRealVector1.map(expm1Function0);
      // Undeclared exception!
      try { 
        openMapRealVector1.toArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-443), (-443), (-8.0E298));
      assertEquals(-443, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd((-8.0E298));
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract((RealVector) openMapRealVector0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(1149.889);
      doubleArray0[1] = double1;
      Double double2 = new Double(1149.889);
      doubleArray0[2] = double2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1149.889);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.0E-12;
      doubleArray1[2] = (double) doubleArray0[1];
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector(89, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (89)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double((-1507.0389915340781));
      doubleArray0[0] = double0;
      Double double1 = new Double((-1507.0389915340781));
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      doubleArray0[3] = double3;
      Double double4 = new Double(0.0);
      doubleArray0[4] = double4;
      Double double5 = new Double((-1507.0389915340781));
      doubleArray0[5] = double5;
      Double double6 = new Double(1818.475472);
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[2]);
      Double.max((double) doubleArray0[4], 1571.954419011486);
      doubleArray0[7] = double7;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[3]);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) doubleArray0[7];
      doubleArray1[1] = (double) doubleArray0[7];
      doubleArray1[2] = (double) doubleArray0[2];
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 3
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // iterator exhausted
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(623.7768097);
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-0.1428571423679182));
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((Double[]) null, (-2226.86426891375));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(746, 746);
      openMapRealVector0.hashCode();
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      assertEquals(746, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      openMapRealVector0.getLInfDistance(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(0.0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.projection(doubleArray0);
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(openMapRealVector0);
      double double0 = openMapRealVector2.getLInfDistance((RealVector) openMapRealVector1);
      assertEquals(0.0, double0, 0.01);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector1.subtract(openMapRealVector2);
      openMapRealVector2.ebeMultiply((RealVector) openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector5 = openMapRealVector0.unitVector();
      assertTrue(openMapRealVector5.equals((Object)openMapRealVector4));
      
      double double1 = openMapRealVector0.getDistance((RealVector) openMapRealVector2);
      double double2 = openMapRealVector3.getL1Distance((RealVector) openMapRealVector2);
      assertEquals(double2, double1, 0.01);
      
      OpenMapRealVector openMapRealVector6 = openMapRealVector3.add(openMapRealVector2);
      openMapRealVector3.equals(openMapRealVector2);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector6));
      assertNotSame(openMapRealVector2, openMapRealVector6);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector5));
      
      openMapRealVector3.sparseIterator();
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 22.451444801804577;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(22.451444801804577);
      openMapRealVector1.isInfinite();
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.unitVector();
      openMapRealVector0.setEntry(1, 0.0);
      openMapRealVector2.getL1Distance(doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 22.451444801804577;
      openMapRealVector1.setSubVector(1, doubleArray1);
      openMapRealVector0.add((RealVector) openMapRealVector1);
      openMapRealVector0.getLInfDistance(doubleArray0);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      expm1Function0.derivative();
      openMapRealVector0.isDefaultValue(0.0);
      OpenMapRealVector openMapRealVector3 = (OpenMapRealVector)openMapRealVector0.map(univariateRealFunction0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.projection(doubleArray0);
      expm1Function0.derivative();
      openMapRealVector4.dotProduct(openMapRealVector2);
      OpenMapRealVector openMapRealVector5 = openMapRealVector4.getSubVector(1, 1);
      openMapRealVector0.append(22.451444801804577);
      OpenMapRealVector openMapRealVector6 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector4.getLInfDistance((RealVector) openMapRealVector0);
      openMapRealVector5.getL1Norm();
      openMapRealVector4.isNaN();
      openMapRealVector0.getDistance((RealVector) openMapRealVector4);
      openMapRealVector5.toArray();
      openMapRealVector3.ebeDivide((RealVector) openMapRealVector4);
      openMapRealVector0.isNaN();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      openMapRealVector0.toArray();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      double[] doubleArray0 = openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      abstractRealVector_EntryImpl0.getIndex();
      openMapRealVector1.dotProduct(doubleArray0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[1] = (double) 0;
      openMapRealVector1.subtract((RealVector) openMapRealVector2);
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.append(openMapRealVector1);
      abstractRealVector_EntryImpl0.setIndex(857);
      double double0 = openMapRealVector1.getL1Distance(openMapRealVector3);
      assertEquals(0.0, double0, 0.01);
      
      OpenMapRealVector openMapRealVector5 = openMapRealVector4.subtract(doubleArray0);
      assertNotSame(openMapRealVector5, openMapRealVector4);
      
      double double1 = openMapRealVector1.getL1Distance(doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray2 = openMapRealVector0.toArray();
      openMapRealVector2.equals(openMapRealVector0);
      OpenMapRealVector openMapRealVector6 = openMapRealVector2.ebeDivide(doubleArray0);
      openMapRealVector6.getSparsity();
      double double2 = openMapRealVector2.getDistance(doubleArray2);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector4));
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector4);
      assertEquals(double2, double0, 0.01);
      assertNotSame(openMapRealVector2, openMapRealVector6);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 127.98158440481389);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[26];
      doubleArray0[1] = (Double) 1.0E-12;
      openMapRealVector3.getMinIndex();
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      double[] doubleArray1 = new double[10];
      doubleArray1[0] = (double) doubleArray0[3];
      doubleArray1[1] = 1.0E-12;
      openMapRealVector3.setSubVector(32, doubleArray1);
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[14] = (Double) 1.0E-12;
      doubleArray0[7] = (Double) 1.0E-12;
      doubleArray0[8] = (Double) 1.0E-12;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 950;
      openMapRealVector0.append(doubleArray2);
      // Undeclared exception!
      try { 
        openMapRealVector2.ebeMultiply(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 950 != 10
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      openMapRealVector0.toArray();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set(0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      double[] doubleArray0 = openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      abstractRealVector_EntryImpl0.getIndex();
      openMapRealVector1.dotProduct(doubleArray0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      openMapRealVector1.getL1Distance((RealVector) openMapRealVector3);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      OpenMapRealVector openMapRealVector4 = openMapRealVector1.subtract((RealVector) openMapRealVector2);
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      OpenMapRealVector openMapRealVector5 = openMapRealVector0.append(openMapRealVector1);
      openMapRealVector1.getL1Distance(openMapRealVector3);
      OpenMapRealVector openMapRealVector6 = openMapRealVector5.subtract(doubleArray0);
      openMapRealVector1.getL1Distance(doubleArray0);
      openMapRealVector0.toArray();
      openMapRealVector2.equals(openMapRealVector0);
      openMapRealVector3.append((RealVector) openMapRealVector6);
      // Undeclared exception!
      try { 
        openMapRealVector4.getSubVector(0, 857);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 21.3175259779215;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(21.3175259779215);
      openMapRealVector1.isInfinite();
      openMapRealVector0.setEntry(1, 0.0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract(doubleArray0);
      openMapRealVector0.getLInfDistance(doubleArray0);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      expm1Function0.derivative();
      openMapRealVector0.isDefaultValue(0.0);
      OpenMapRealVector openMapRealVector3 = (OpenMapRealVector)openMapRealVector0.map(univariateRealFunction0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector4 = openMapRealVector2.projection(doubleArray0);
      openMapRealVector0.append((-3219.94));
      OpenMapRealVector openMapRealVector5 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector4.getLInfDistance((RealVector) openMapRealVector1);
      openMapRealVector0.unitVector();
      openMapRealVector0.getDistance((RealVector) openMapRealVector4);
      openMapRealVector2.getSubVector(1, 1);
      double[] doubleArray1 = openMapRealVector2.toArray();
      openMapRealVector3.mapMultiplyToSelf(1.0E-12);
      openMapRealVector5.getL1Distance((RealVector) openMapRealVector4);
      expm1Function0.derivative();
      openMapRealVector1.cosine(doubleArray1);
      // Undeclared exception!
      try { 
        openMapRealVector1.setSubVector(1, (RealVector) openMapRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (3)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      openMapRealVector0.getLInfDistance(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(0.0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.projection(doubleArray0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      
      OpenMapRealVector openMapRealVector3 = new OpenMapRealVector(openMapRealVector0);
      double double0 = openMapRealVector2.getLInfDistance((RealVector) openMapRealVector1);
      assertEquals(0.0, double0, 0.01);
      
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.unitVector();
      openMapRealVector4.isInfinite();
      OpenMapRealVector openMapRealVector5 = (OpenMapRealVector)openMapRealVector3.projection((RealVector) openMapRealVector4);
      assertTrue(openMapRealVector5.equals((Object)openMapRealVector4));
      
      openMapRealVector0.getDistance((RealVector) openMapRealVector2);
      OpenMapRealVector openMapRealVector6 = openMapRealVector3.add(openMapRealVector2);
      assertTrue(openMapRealVector6.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector6.equals((Object)openMapRealVector5));
      
      openMapRealVector3.sparseIterator();
      double double1 = openMapRealVector3.getLInfDistance((RealVector) openMapRealVector1);
      assertTrue(openMapRealVector3.equals((Object)openMapRealVector1));
      assertEquals(0.0, double1, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 21.3175259779215;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.097);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(21.3175259779215);
      openMapRealVector1.isInfinite();
      openMapRealVector0.setEntry(1, 0.097);
      openMapRealVector0.add((RealVector) openMapRealVector1);
      openMapRealVector0.getLInfDistance(doubleArray0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapAdd(0.097);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      expm1Function0.derivative();
      OpenMapRealVector openMapRealVector3 = (OpenMapRealVector)openMapRealVector0.map(univariateRealFunction0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      openMapRealVector3.getDistance(doubleArray0);
      OpenMapRealVector openMapRealVector4 = openMapRealVector2.projection(doubleArray0);
      expm1Function0.derivative();
      OpenMapRealVector openMapRealVector5 = openMapRealVector4.getSubVector(1, 1);
      openMapRealVector0.append((-3219.94));
      OpenMapRealVector openMapRealVector6 = new OpenMapRealVector(openMapRealVector0);
      openMapRealVector4.getLInfDistance((RealVector) openMapRealVector2);
      // Undeclared exception!
      try { 
        openMapRealVector5.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(4, 4);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      abstractRealVector_EntryImpl0.getIndex();
      abstractRealVector_EntryImpl0.setIndex(0);
      openMapRealVector0.set(4);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      double[] doubleArray0 = openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      abstractRealVector_EntryImpl0.getIndex();
      openMapRealVector1.dotProduct(doubleArray0);
      openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
      double[] doubleArray1 = new double[6];
      openMapRealVector0.ebeDivide(doubleArray0);
      doubleArray1[0] = (double) 0;
      openMapRealVector2.ebeDivide(doubleArray0);
      openMapRealVector0.getMinIndex();
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (double) 4;
      openMapRealVector2.ebeMultiply((RealVector) openMapRealVector0);
      doubleArray1[3] = (double) 4;
      openMapRealVector1.subtract((RealVector) openMapRealVector2);
      doubleArray1[4] = (double) 3;
      openMapRealVector0.append(openMapRealVector1);
      abstractRealVector_EntryImpl0.setIndex(857);
      // Undeclared exception!
      try { 
        openMapRealVector2.getDistance(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 6
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1009.9995749672992);
      doubleArray0[1] = 10.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(10.0);
      openMapRealVector1.outerProduct(doubleArray0);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector1);
      openMapRealVector0.getLInfDistance(doubleArray0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.mapAdd(0.0);
      openMapRealVector0.outerProduct(doubleArray0);
      Expm1Function expm1Function0 = new Expm1Function();
      UnivariateRealFunction univariateRealFunction0 = expm1Function0.derivative();
      expm1Function0.derivative();
      openMapRealVector2.getL1Distance((RealVector) openMapRealVector0);
      openMapRealVector0.isDefaultValue(2177.010159);
      openMapRealVector0.isInfinite();
      openMapRealVector0.map(univariateRealFunction0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      openMapRealVector3.projection(doubleArray0);
      OpenMapRealVector openMapRealVector4 = openMapRealVector0.append((-3219.94));
      OpenMapRealVector openMapRealVector5 = new OpenMapRealVector(openMapRealVector0);
      Double double0 = new Double(1.0E-12);
      // Undeclared exception!
      try { 
        openMapRealVector5.getLInfDistance((RealVector) openMapRealVector4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 4
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(2, 2);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = openMapRealVector0.new EntryImpl();
      int int0 = Double.MAX_EXPONENT;
      openMapRealVector0.set(2);
      abstractRealVector_EntryImpl0.setIndex(2);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivideToSelf(1023);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector1);
      openMapRealVector0.toArray();
      openMapRealVector0.getDimension();
      openMapRealVector2.getDistance((RealVector) openMapRealVector0);
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) 1023;
      openMapRealVector2.dotProduct((RealVector) openMapRealVector1);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1023;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 1023;
      openMapRealVector1.hashCode();
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.append(openMapRealVector2);
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl1 = openMapRealVector0.new EntryImpl();
      openMapRealVector1.equals(abstractRealVector_EntryImpl1);
      openMapRealVector3.getData();
      openMapRealVector1.getL1Distance((RealVector) openMapRealVector2);
      // Undeclared exception!
      try { 
        openMapRealVector0.add(openMapRealVector3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(950, 950, 137.744921045);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(950);
      OpenMapRealVector openMapRealVector2 = (OpenMapRealVector)openMapRealVector1.combine(1.0E-12, 1.0E-12, (RealVector) openMapRealVector0);
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.append((RealVector) openMapRealVector1);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector3.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = (Double) 1.0E-12;
      doubleArray0[1] = (Double) 1.0E-12;
      openMapRealVector3.getMinIndex();
      doubleArray0[2] = (Double) 1.0E-12;
      doubleArray0[3] = (Double) 1.0E-12;
      doubleArray0[4] = (Double) 1.0E-12;
      doubleArray0[5] = (Double) 1.0E-12;
      doubleArray0[6] = (Double) 1.0E-12;
      doubleArray0[7] = (Double) 1.0E-12;
      doubleArray0[8] = (Double) 1.0E-12;
      OpenMapRealVector openMapRealVector4 = new OpenMapRealVector(doubleArray0);
      openMapRealVector4.isInfinite();
      openMapRealVector4.getDistance(openMapRealVector1);
      Object object0 = new Object();
      openMapRealVector3.equals(object0);
      // Undeclared exception!
      try { 
        openMapRealVector3.add((RealVector) openMapRealVector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,900 != 950
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }
}
