/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 18 01:55:48 GMT 2017
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.NoSuchElementException;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.ArrayRealVectorTest;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.linear.SparseRealVectorTest;
import org.apache.commons.math.util.OpenIntToDoubleHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenMapRealVector_ESTest extends OpenMapRealVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = 2293.421676194263;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-10.909903449785443));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-10.909903449785443));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
      assertTrue(boolean0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-3059.604180157098));
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.hashCode();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      openMapRealVector0.hashCode();
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(802, 802);
      openMapRealVector0.set(802);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(802);
      // Undeclared exception!
      openMapRealVector1.subtract(openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      openMapRealVector0.set(1.0E-12);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((-2554.42467354));
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      assertEquals(2554.42467354, double0, 0.01);
      assertEquals(77, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (double) doubleArray0[5];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray1);
      double double1 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = new double[7];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray1);
      double double1 = openMapRealVector1.getL1Distance(openMapRealVector0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((-2554.42467354));
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.getSubVector(11, 1);
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector2, openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.getSubVector(11, 1);
      assertEquals(1, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(802, 802);
      openMapRealVector0.set(802);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      openMapRealVector_OpenMapSparseIterator0.next();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(802, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0, 0);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // iterator exhausted
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      boolean boolean0 = openMapRealVector_OpenMapSparseIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 958, 0);
      double[] doubleArray0 = openMapRealVector0.toArray();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = new double[7];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(1.0E-12);
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[0];
      Double double1 = new Double(0.0);
      doubleArray0[4] = double1;
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      boolean boolean0 = openMapRealVector0.isDefaultValue((double) doubleArray0[4]);
      assertEquals(0.8571428571428571, openMapRealVector0.getSparsity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-996), 288);
      openMapRealVector0.isDefaultValue(1.0);
      assertEquals(-996, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (-2679.6371337);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      double double0 = openMapRealVector0.getSparsity();
      assertEquals(0.0625, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-0.10340665938599258));
      double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[1] = (-1.0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      double double0 = openMapRealVector0.getL1Distance(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((-2555.7520950800877));
      double double0 = openMapRealVector1.getEntry(75);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(2555.7520950800877, double0, 0.01);
      assertEquals(77, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-0.10340665938599258));
      double double0 = openMapRealVector0.getDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1.0E-12;
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = (OpenMapRealVector)sparseRealVectorTest_SparseRealVectorTestImpl0.mapMultiply((-2362.717678952821));
      double double0 = openMapRealVector0.getDistance((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      assertEquals(2.363717678952821E-9, double0, 0.01);
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(-1, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertEquals(-1, openMapRealVector1.getDimension());
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[2] = 2282.1336584052;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2282.1336584052);
      double double0 = openMapRealVector0.dotProduct((RealVector) openMapRealVector0);
      assertEquals(5208134.034825902, double0, 0.01);
      assertEquals(0.07692307692307693, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 2282.1336584052;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-0.10340665938599258));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      openMapRealVector1.set((-1556.4110948363));
      double double0 = openMapRealVector0.dotProduct((RealVector) openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals((-3551938.1458412083), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-41.0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      double double0 = openMapRealVector0.dotProduct(openMapRealVector1);
      assertEquals((-41.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      assertEquals(0, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.copy();
      assertEquals(-1, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 77;
      ArrayRealVectorTest.RealVectorTestImpl arrayRealVectorTest_RealVectorTestImpl0 = new ArrayRealVectorTest.RealVectorTestImpl(doubleArray0);
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)arrayRealVectorTest_RealVectorTestImpl0.mapMultiply((-2554.42467354));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) arrayRealVector0);
      assertEquals(0.012658227848101266, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(654, 654, 654);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      assertEquals(1308, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(0.008333333333333333);
      assertEquals(0.01282051282051282, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(-1, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(-1, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      // Undeclared exception!
      try { 
        openMapRealVector0.toArray();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 != 0
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector();
      // Undeclared exception!
      try { 
        openMapRealVector1.subtract((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != -1
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector();
      // Undeclared exception!
      try { 
        openMapRealVector1.subtract(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != -1
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-3925.557871079));
      // Undeclared exception!
      try { 
        openMapRealVector0.subtract((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1808);
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector(1808, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (1,808)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-812));
      // Undeclared exception!
      try { 
        openMapRealVector0.setEntry(5206, 5206);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (5,206)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        openMapRealVector0.projection(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.projection((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 16 != 8
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(815, 815);
      openMapRealVector0.set(815);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = (-210.8497125);
      doubleArray0[2] = 1.0E-12;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[4] = 1.0E-12;
      doubleArray0[5] = 1.0E-12;
      // Undeclared exception!
      openMapRealVector0.outerProduct(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        openMapRealVector0.outerProduct(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      // Undeclared exception!
      try { 
        openMapRealVector0.outerProduct((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(802, 802);
      openMapRealVector0.mapMultiplyToSelf((-648.5123344248208));
      openMapRealVector0.mapAdd(802);
      // Undeclared exception!
      openMapRealVector0.hashCode();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getSubVector(273, (-227));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (273)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 != 2
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 16
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1808);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,808 != 2
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.getL1Distance((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 16 != 8
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 7.38905609893065;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.getL1Distance(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (10)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(3688, 3688, 3688);
      // Undeclared exception!
      try { 
        openMapRealVector0.getL1Distance((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2282.1336584052);
      // Undeclared exception!
      try { 
        openMapRealVector0.getEntry(259);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (259)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-152));
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -152 != 6
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(815, 815);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(815);
      // Undeclared exception!
      openMapRealVector1.getDistance((RealVector) openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 16
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(815, 815);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(815);
      // Undeclared exception!
      openMapRealVector0.getDistance(openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-4257.577076564459);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.getDistance(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (9)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1877), (-2036));
      // Undeclared exception!
      try { 
        openMapRealVector0.getDistance((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      // Undeclared exception!
      try { 
        openMapRealVector0.getData();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 != 5
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeMultiply(doubleArray0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1989), 2303.97493);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeMultiply((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeMultiply((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 14 != 7
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 2282.1336584052;
      doubleArray0[4] = 239.2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeMultiply((RealVector) openMapRealVector1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, 0);
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 2282.1336584052;
      doubleArray0[4] = 239.2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      // Undeclared exception!
      try { 
        openMapRealVector1.ebeDivide(doubleArray0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-3059.604180157098));
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(815, 815);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(815);
      openMapRealVector1.getData();
      // Undeclared exception!
      OpenMapRealVector openMapRealVector2 = null;
      openMapRealVector2 = openMapRealVector1.ebeDivide((RealVector) openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 14
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = new double[7];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray1);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide((RealVector) openMapRealVector1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // map has been modified while iterating
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      // Undeclared exception!
      try { 
        openMapRealVector0.ebeDivide((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(802, 292);
      double[] doubleArray0 = new double[8];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 802 != 8
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct(openMapRealVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 16 != 32
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        openMapRealVector0.append(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.append((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(802, 802);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(802);
      // Undeclared exception!
      openMapRealVector1.append(openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(223, 223);
      // Undeclared exception!
      try { 
        openMapRealVector0.append((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      // Undeclared exception!
      try { 
        openMapRealVector0.append(653.4722);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (-1)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.add((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 16 != 8
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      // Undeclared exception!
      try { 
        openMapRealVector0.add((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(812, 812);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(812);
      // Undeclared exception!
      openMapRealVector0.add(openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      // Undeclared exception!
      try { 
        openMapRealVector1.add(openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 16 != 8
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-2350), (-2350));
      // Undeclared exception!
      try { 
        openMapRealVector0.add((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((OpenMapRealVector) null, (-670));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector((OpenMapRealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.util.OpenIntToDoubleHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(47);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((-2554.42467354));
      openMapRealVector1.unitize();
      assertEquals(47, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 7.38905609893065;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.subtract(openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(0.14285714285714285, openMapRealVector2.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      double[] doubleArray0 = new double[2];
      openMapRealVector0.setSubVector(50, doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(77, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      
      openMapRealVector0.mapAddToSelf(1.3862943611198906);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAddToSelf(1943.63134);
      assertEquals(-1, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2679.6371337);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      double double0 = openMapRealVector0.getL1Distance(openMapRealVector1);
      assertEquals(0.14285714285714285, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(2679.6371337, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double double1 = openMapRealVector0.getL1Distance(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[2];
      doubleArray0[6] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = new double[7];
      double double1 = openMapRealVector0.getDistance(doubleArray1);
      assertEquals(5.291502622129181, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-41.0);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double double0 = openMapRealVector0.dotProduct(openMapRealVector0);
      assertEquals(0.14285714285714285, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(1681.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      double double0 = openMapRealVector0.dotProduct(openMapRealVector0);
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((-2554.42467354));
      double double0 = openMapRealVector0.dotProduct(openMapRealVector1);
      assertEquals(77, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double0;
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.add(openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector(doubleArray0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((-2857.5373));
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector(doubleArray0, 3022.7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = doubleArray0[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      openMapRealVector0.getDimension();
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.getIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      openMapRealVector0.sparseIterator();
      assertEquals(-0.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(0, (-1523), 2960.0);
      // Undeclared exception!
      try { 
        openMapRealVector0.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[0];
      doubleArray0[6] = doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, 2147481722);
      assertEquals(2147481729, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(83);
      double double0 = openMapRealVector0.getEntry(82);
      assertEquals(83, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(83);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract(0.0);
      openMapRealVector0.setEntry(39, 1.0E-12);
      boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
      assertEquals(0.012048192771084338, openMapRealVector0.getSparsity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((-2555.7520950800877));
      boolean boolean0 = openMapRealVector1.equals(openMapRealVector0);
      assertEquals(77, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = (OpenMapRealVector)sparseRealVectorTest_SparseRealVectorTestImpl0.mapMultiply((-2362.71767895));
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2282.1336584052);
      boolean boolean0 = openMapRealVector0.equals(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (-407.76034));
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((-2554.42467354));
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract((RealVector) openMapRealVector1);
      assertEquals(77, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector2, openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(-0.0, openMapRealVector1.getSparsity(), 0.01);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(815, 815);
      openMapRealVector0.set(815);
      double[] doubleArray0 = new double[6];
      openMapRealVector0.outerProduct(doubleArray0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(815, 815);
      double[] doubleArray0 = new double[3];
      openMapRealVector0.outerProduct(doubleArray0);
      openMapRealVector0.set(815);
      // Undeclared exception!
      openMapRealVector0.projection((RealVector) openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      boolean boolean0 = openMapRealVector0.isNaN();
      assertFalse(boolean0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[4];
      doubleArray0[6] = doubleArray0[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = new double[7];
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray1);
      boolean boolean0 = openMapRealVector1.isInfinite();
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (-2679.6371337);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertEquals(0.0625, openMapRealVector0.getSparsity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = 239.2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2282.1336584052);
      double double0 = openMapRealVector0.getLInfDistance(doubleArray0);
      assertEquals(239.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = (OpenMapRealVector)sparseRealVectorTest_SparseRealVectorTestImpl0.mapMultiply((-2362.717678952821));
      double double0 = openMapRealVector0.getLInfDistance((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (-1234.57210198954);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
      double double0 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.14285714285714285, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(802, 802);
      openMapRealVector0.set(802);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(802);
      // Undeclared exception!
      openMapRealVector0.getLInfDistance((RealVector) openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      double double0 = openMapRealVector0.getL1Distance(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((-2554.42467354));
      double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector1);
      assertEquals(196690.6998625797, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((-2554.0));
      double double0 = openMapRealVector1.getL1Distance((RealVector) openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(77, openMapRealVector1.getDimension());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(815, 815);
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(815, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 7.38905609893065;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      double double0 = openMapRealVector0.getDistance(openMapRealVector1);
      assertEquals(0.14285714285714285, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(7.38905609893065, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 7.38905609893065;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      double double0 = openMapRealVector0.getDistance(openMapRealVector0);
      assertEquals(0.14285714285714285, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (-2679.6371337);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      openMapRealVector1.setSubVector(10, (RealVector) openMapRealVector0);
      assertEquals(0.0625, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(32, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 7.38905609893065;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertEquals(0.14285714285714285, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply(doubleArray0);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = 2282.1336584052;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2282.1336584052);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0.125, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(0.125, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = 2282.1336584052;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 2282.1336584052);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      assertEquals(0.125, openMapRealVector0.getSparsity(), 0.01);
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((-2555.7520950800877));
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeDivide((RealVector) openMapRealVector0);
      assertEquals(77, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector2, openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      // Undeclared exception!
      try { 
        openMapRealVector0.dotProduct((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((-2554.0));
      double double0 = openMapRealVector0.dotProduct((RealVector) openMapRealVector1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(77, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      assertEquals(-2, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-269), (-269));
      // Undeclared exception!
      try { 
        openMapRealVector0.append((RealVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[4];
      doubleArray0[6] = doubleArray0[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((-1), (-1));
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(openMapRealVector0);
      assertEquals(-2, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[1];
      Double double1 = new Double(0.0);
      doubleArray0[4] = double1;
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[4] = 2.0;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray1);
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);
      assertEquals(0.8571428571428571, openMapRealVector0.getSparsity(), 0.01);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector0));
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertEquals(0.8571428571428571, openMapRealVector2.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(815, 815);
      openMapRealVector0.set(815);
      openMapRealVector0.add((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(77);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((-2554.0));
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertEquals(77, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparsity(), 0.01);
      assertNotSame(openMapRealVector2, openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1.0E-12;
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      OpenMapRealVector openMapRealVector0 = (OpenMapRealVector)sparseRealVectorTest_SparseRealVectorTestImpl0.mapMultiply((-2362.71767895));
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) openMapRealVector0);
      boolean boolean0 = openMapRealVector0.equals(openMapRealVector1);
      assertEquals(0.25, openMapRealVector1.getSparsity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = null;
      try {
        openMapRealVector0 = new OpenMapRealVector(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      double[] doubleArray0 = openMapRealVector0.getData();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(815, 815);
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.projection((RealVector) openMapRealVector0);
      assertEquals(1.0, openMapRealVector1.getSparsity(), 0.01);
      assertEquals(815, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      // Undeclared exception!
      try { 
        openMapRealVector0.setSubVector(10, (RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index (25)
         //
         verifyException("org.apache.commons.math.linear.AbstractRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      double double0 = openMapRealVector0.getSparsity();
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      OpenMapRealVector.OpenMapEntry openMapRealVector_OpenMapEntry0 = openMapRealVector0.new OpenMapEntry((OpenIntToDoubleHashMap.Iterator) null);
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapEntry0.setValue(0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 1.0);
      double[] doubleArray1 = openMapRealVector0.toArray();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(83);
      // Undeclared exception!
      try { 
        openMapRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((-1.0));
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparsity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(815, 815);
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(815);
      // Undeclared exception!
      openMapRealVector0.add((RealVector) openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      // Undeclared exception!
      try { 
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
         verifyException("org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (-2679.6371337);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, 7.38905609893065);
      SparseRealVectorTest.SparseRealVectorTestImpl sparseRealVectorTest_SparseRealVectorTestImpl0 = new SparseRealVectorTest.SparseRealVectorTestImpl(doubleArray0);
      openMapRealVector0.add((RealVector) sparseRealVectorTest_SparseRealVectorTestImpl0);
  }
}
