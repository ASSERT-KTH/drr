/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 10 18:14:01 GMT 2017
 */

package org.apache.commons.math.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math.ode.TestProblem5;
import org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class AdaptiveStepsizeIntegrator_ESTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(7, (double) 7, (double) 7, doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      try { 
        adamsBashforthIntegrator0.integrate(testProblem5_0, 45.651820529732305, doubleArray0, (-91.9), doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // minimal step size (7.00E00) reached, integration needs 3.60E00
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.2, doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      highamHall54Integrator0.setInitialStepSize(0.0);
      double[] doubleArray1 = new double[1];
      // Undeclared exception!
      try { 
        highamHall54Integrator0.initializeStep(testProblem5_0, true, 5, doubleArray0, 5, doubleArray1, doubleArray1, doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Double double0 = new Double(1.543080635);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5069.61, 1.543080635, doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray1 = new double[2];
      try { 
        dormandPrince54Integrator0.integrate(testProblem5_0, (double) double0, doubleArray1, 5069.61, doubleArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: state vector has dimension 2, absolute tolerance vector has dimension 5
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInitialStepSize(Double.NaN);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 783.0, 783.0, 783.0);
      highamHall54Integrator0.resetInternalState();
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(783.0, highamHall54Integrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2790.4926458688396, 2790.4926458688396, 2790.4926458688396, 2790.4926458688396);
      StepProblem stepProblem0 = new StepProblem(2790.4926458688396, 2790.4926458688396, 2790.4926458688396);
      double[] doubleArray0 = new double[1];
      dormandPrince853Integrator0.integrate(stepProblem0, (-1.0), doubleArray0, 23.4375, doubleArray0);
      assertEquals(26, dormandPrince853Integrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-0.017578125), (-360.0), (-2659.4645624));
      double double0 = highamHall54Integrator0.getMinStep();
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.017578125, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3.7333333333333334), 861.79117, doubleArray0, doubleArray0);
      double double0 = dormandPrince54Integrator0.getMinStep();
      assertEquals((-3.7333333333333334), double0, 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(861.79117, dormandPrince54Integrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3457480.0), (-3457480.0), (-3457480.0), (-3457480.0));
      double double0 = dormandPrince853Integrator0.getMaxStep();
      assertEquals(3457480.0, double0, 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(3457480.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      double double0 = dormandPrince54Integrator0.filterStep(0.0, false, false);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      try { 
        dormandPrince853Integrator0.sanityChecks(testProblem5_0, 0.0, doubleArray0, 1035.0, doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: ODE problem has dimension 2, initial state vector has dimension 1
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 1.0, 1.0, 3479.45744477);
      double[] doubleArray0 = new double[3];
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.sanityChecks((FirstOrderDifferentialEquations) null, (-1.0), doubleArray0, (-551.48522045), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1683.3570840288), (-138.1536), (-138.1536), 1.0E-12);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[6];
      try { 
        dormandPrince853Integrator0.integrate(testProblem5_0, 5, doubleArray0, 1.0E-12, doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: ODE problem has dimension 2, initial state vector has dimension 6
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((double) 2472, 1.0E-10, doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(testProblem5_0, 0.9640275800758169, (double[]) null, (-3067.61024955817), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1163.574165), 0.0, (-551.8699108067404), 0.0);
      StepProblem stepProblem0 = new StepProblem((-1394.405586657793), 0.0, (-551.8699108067404));
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[0];
      try { 
        graggBulirschStoerIntegrator0.initializeStep(stepProblem0, true, 1, doubleArray0, (-1163.574165), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.30545274794128174, Double.NaN, 0.30545274794128174, Double.NaN);
      StepProblem stepProblem0 = new StepProblem(Double.NaN, Double.NaN, 0.30545274794128174);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        highamHall54Integrator0.initializeStep(stepProblem0, true, (-2916), doubleArray0, (-2916.0), doubleArray0, doubleArray0, doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.6643771824549864, (-1388.4009560136), doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.initializeStep(testProblem5_0, false, 4925, doubleArray0, 4925, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2791.05447017, 2791.05447017, 2791.05447017, 2791.05447017);
      dormandPrince853Integrator0.setInitialStepSize(2791.05447017);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double double0 = dormandPrince853Integrator0.initializeStep(testProblem5_0, false, 2147144802, (double[]) null, (-2790.268692062703), (double[]) null, (double[]) null, (double[]) null, (double[]) null);
      assertEquals(2791.05447017, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals((-2791.05447017), double0, 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2791.05447017, 1530.980780203314, 2791.05447017, 2791.05447017);
      double double0 = dormandPrince853Integrator0.filterStep(2791.05447017, false, true);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2067.135880954809, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1530.980780203314, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2791.05447017, 2791.05447017, 2791.05447017, 2791.05447017);
      double double0 = dormandPrince853Integrator0.filterStep(2038.0, false, true);
      assertEquals(2791.05447017, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals((-2791.05447017), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2791.05447017, 2791.05447017, 2791.05447017, 2791.05447017);
      try { 
        dormandPrince853Integrator0.filterStep(2038.0, false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // minimal step size (2.79E03) reached, integration needs 2.04E03
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.7379383052487448;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.7379383052487448, 0.0, doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray1 = new double[8];
      // Undeclared exception!
      try { 
        highamHall54Integrator0.initializeStep(testProblem5_0, true, 5, doubleArray0, 0.0, doubleArray0, doubleArray1, doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.25;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.25, 0.25, (-1329.0), (-1479.2));
      // Undeclared exception!
      highamHall54Integrator0.integrate(testProblem5_0, (-1414.056461324911), doubleArray0, (-1479.2), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2791.05447017, 2791.05447017, 2791.05447017, 2791.05447017);
      dormandPrince853Integrator0.setInitialStepSize(2791.05447017);
      StepProblem stepProblem0 = new StepProblem(2791.05447017, 2791.05447017, 2791.05447017);
      double[] doubleArray0 = new double[1];
      double double0 = dormandPrince853Integrator0.initializeStep(stepProblem0, true, (-286), doubleArray0, (-1), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(2791.05447017, double0, 0.01);
      assertEquals(2791.05447017, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(7, (double) 7, (double) 7, doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray1 = new double[7];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((double) 7, 596.0, doubleArray0, doubleArray1);
      adamsBashforthIntegrator0.setStarterIntegrator(highamHall54Integrator0);
      try { 
        adamsBashforthIntegrator0.integrate(testProblem5_0, 7.0, doubleArray0, (-91.9), doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: state vector has dimension 2, relative tolerance vector has dimension 7
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      StepProblem stepProblem0 = new StepProblem(0.0, Double.NaN, 0.0);
      graggBulirschStoerIntegrator0.sanityChecks(stepProblem0, 0.0, doubleArray0, (-11.573902539959631), doubleArray0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double double0 = new Double(1.543080635);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1479.1911649207), 0.25, doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray1 = new double[2];
      try { 
        dormandPrince54Integrator0.integrate(testProblem5_0, (double) double0, doubleArray1, (-1479.1911649207), doubleArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: state vector has dimension 2, absolute tolerance vector has dimension 1
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2791.05447017, 2791.05447017, 2791.05447017, 2791.05447017);
      StepProblem stepProblem0 = new StepProblem(2791.05447017, 2791.05447017, 2791.05447017);
      double[] doubleArray0 = new double[1];
      dormandPrince853Integrator0.integrate(stepProblem0, (-1.0), doubleArray0, (-2791.05447017), doubleArray0);
      assertEquals(26, dormandPrince853Integrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInitialStepSize(1747.668848);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5069.61, 1.543080635, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setInitialStepSize(1.543080635);
      assertEquals(88.4466902603051, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-0.017578125), (-360.0), (-2659.4645624));
      double double0 = highamHall54Integrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.017578125, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2791.05447017, 1530.980780203314, 2791.05447017, 2791.05447017);
      double double0 = dormandPrince853Integrator0.getMinStep();
      assertEquals(2791.05447017, double0, 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2067.135880954809, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(293.842469, (-2153.8), doubleArray0, doubleArray0);
      double double0 = graggBulirschStoerIntegrator0.getMaxStep();
      assertEquals(293.842469, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals((-2153.8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2240.5974), 0.0, (-2572.6537899303), 10.427508642579134);
      double double0 = dormandPrince54Integrator0.getMaxStep();
      assertEquals(2240.5974, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }
}
