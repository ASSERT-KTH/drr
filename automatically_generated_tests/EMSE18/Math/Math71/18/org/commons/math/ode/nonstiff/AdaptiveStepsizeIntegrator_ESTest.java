/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 11 20:24:15 GMT 2017
 */

package org.apache.commons.math.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math.ode.TestProblem5;
import org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class AdaptiveStepsizeIntegrator_ESTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setInitialStepSize(0.0);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.initializeStep((FirstOrderDifferentialEquations) null, true, 2081, doubleArray0, 1.0E-10, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[1];
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(7, 0.0, 0.0, doubleArray0, doubleArray1);
      StepProblem stepProblem0 = new StepProblem(7.0, 0.01, 7.0);
      try { 
        adamsMoultonIntegrator0.integrate(stepProblem0, 0.0, doubleArray1, 413.258896150375, doubleArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: state vector has dimension 1, absolute tolerance vector has dimension 8
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.13218399525833954, 0.13218399525833954, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setInitialStepSize(0.13218399525833954);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.13218399525833954, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(3, (double) 3, (double) 3, (double) 3, 2259.5409521181105);
      double[] doubleArray0 = new double[1];
      StepProblem stepProblem0 = new StepProblem((-0.3111643669578199), (double) 3, 2259.5409521181105);
      adamsBashforthIntegrator0.sanityChecks(stepProblem0, (-3069.9669468493394), doubleArray0, 0.0, doubleArray0);
      assertEquals(Double.NaN, adamsBashforthIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(3.0, adamsBashforthIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.001, 0.001, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.resetInternalState();
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.001, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      double double0 = dormandPrince54Integrator0.getMinStep();
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1622.059076492335), (-1622.059076492335), doubleArray0, doubleArray0);
      double double0 = highamHall54Integrator0.getMinStep();
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals((-1622.059076492335), double0, 0.01);
      assertEquals(1622.059076492335, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 94326.0);
      double double0 = dormandPrince853Integrator0.getMaxStep();
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.47766253643826434, 0.47766253643826434, doubleArray0, doubleArray0);
      double double0 = dormandPrince54Integrator0.getMaxStep();
      assertEquals(0.47766253643826434, double0, 0.01);
      assertEquals(0.47766253643826434, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      double double0 = dormandPrince853Integrator0.filterStep(0.0, true, true);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.175201193643801, 1.175201193643801, 1.175201193643801, 1.175201193643801);
      double double0 = graggBulirschStoerIntegrator0.filterStep(566.18665, false, false);
      assertEquals(1.175201193643801, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.175201193643801, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(10.645537881454485, (-36.78975785864341), doubleArray0, doubleArray0);
      double double0 = dormandPrince853Integrator0.filterStep(1.5918643406525463, true, true);
      assertEquals((-36.78975785864341), double0, 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.645537881454485, dormandPrince853Integrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      StepProblem stepProblem0 = new StepProblem(0.0, 0.0, 0.0);
      try { 
        highamHall54Integrator0.sanityChecks(stepProblem0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: ODE problem has dimension 1, initial state vector has dimension 2
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, (-1155.2), (-2276.72));
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.sanityChecks((FirstOrderDifferentialEquations) null, (-1155.2), doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(3, (double) 3, (double) 3, 0.8414709848078965, 2259.5409521181105);
      double[] doubleArray0 = new double[1];
      StepProblem stepProblem0 = new StepProblem((-0.3111643669578199), 0.8414709848078965, 10.0);
      // Undeclared exception!
      adamsBashforthIntegrator0.integrate(stepProblem0, (-4377.626692), doubleArray0, 1.3770619164466714E-5, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(1, (-1955.818409309129), 0.0, 996.0059487, 0.0);
      StepProblem stepProblem0 = new StepProblem(1.0, 996.0059487, 25.01743136);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(stepProblem0, (-1955.818409309129), (double[]) null, 1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(1, (double) 1, Double.NaN, doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray1 = new double[1];
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.initializeStep(testProblem5_0, false, 1, doubleArray1, (-30.0), doubleArray0, doubleArray1, doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.175201193643801, 1.175201193643801, 1.175201193643801, 1.175201193643801);
      try { 
        graggBulirschStoerIntegrator0.filterStep(0.0, false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // minimal step size (1.18E00) reached, integration needs 0.00E00
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(3, (double) 3, (double) 3, 0.8414709848078965, 11.172494591783998);
      double[] doubleArray0 = new double[1];
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(3, 11.172494591783998, 0.8414709848078965, 0.0, 1611.0);
      adamsBashforthIntegrator0.setStarterIntegrator(adamsMoultonIntegrator0);
      doubleArray0[0] = 8.807722969720924;
      StepProblem stepProblem0 = new StepProblem((-0.3111643669578199), 0.8414709848078965, 8.807722969720924);
      adamsBashforthIntegrator0.integrate(stepProblem0, 8.807722969720924, doubleArray0, 53.1428303572064, doubleArray0);
      double double0 = adamsMoultonIntegrator0.initializeStep(stepProblem0, true, (-1277), doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(0.21036774620197418, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.8414709848078965, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(3, (double) 3, (double) 3, 0.8414709848078965, 2259.5409521181105);
      double[] doubleArray0 = new double[1];
      StepProblem stepProblem0 = new StepProblem((-0.3111643669578199), 0.8414709848078965, 8.807722969720924);
      adamsBashforthIntegrator0.integrate(stepProblem0, 8.807722969720924, doubleArray0, 53.1428303572064, doubleArray0);
      double[] doubleArray1 = new double[6];
      double double0 = adamsBashforthIntegrator0.initializeStep(stepProblem0, true, (-1948520555), doubleArray0, (-4105.60737233937), doubleArray0, doubleArray1, doubleArray0, doubleArray1);
      assertEquals(38, adamsBashforthIntegrator0.getEvaluations());
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray1 = new double[6];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((double) 5, 743.23051275244, doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.initializeStep(testProblem5_0, false, 41, doubleArray1, 2595.55766533, doubleArray0, doubleArray1, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(3, (double) 3, (double) 3, 0.8414709848078965, 2259.5409521181105);
      double double0 = adamsBashforthIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3.0, adamsBashforthIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0, 96.32455395918828, doubleArray0, doubleArray0);
      double double0 = dormandPrince54Integrator0.getMinStep();
      assertEquals(9.814507321266221, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), (-1292.95609973884), doubleArray0, doubleArray0);
      double double0 = dormandPrince54Integrator0.getMaxStep();
      assertEquals(35.957698754770725, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals((-1292.95609973884), double0, 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-17.075668282632197), 3.7144858205258256E-15, 3.7144858205258256E-15, (-17.075668282632197));
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[2];
      try { 
        dormandPrince54Integrator0.integrate(testProblem5_0, 1.9586600070378624E-7, doubleArray0, (-1001.8209652683928), doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // minimal step size (1.71E01) reached, integration needs 3.71E-14
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1.1147520243002949, 1.1147520243002949, 1.1147520243002949);
      dormandPrince853Integrator0.setInitialStepSize(0.01);
      double double0 = dormandPrince853Integrator0.initializeStep((FirstOrderDifferentialEquations) null, true, 2081, doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.01, double0, 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1.0, 1.0, 1.0);
      dormandPrince853Integrator0.setInitialStepSize(0.5353955212983091);
      double double0 = dormandPrince853Integrator0.initializeStep((FirstOrderDifferentialEquations) null, false, 2081, doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals((-0.5353955212983091), double0, 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[2];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray1);
      TestProblem5 testProblem5_0 = new TestProblem5();
      try { 
        graggBulirschStoerIntegrator0.integrate(testProblem5_0, 1.3770619164466719E-5, doubleArray1, 2997.358580758785, doubleArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: state vector has dimension 2, absolute tolerance vector has dimension 1
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2595.55766533, 2595.55766533, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setInitialStepSize(3017.201);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2595.55766533, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(10.645537881454485, (-36.78975785864341), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setInitialStepSize(0.01);
      assertEquals((-36.78975785864341), dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.645537881454485, dormandPrince853Integrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(3, (double) 3, (double) 3, 1.3238841854295325, 2259.5409521181105);
      double[] doubleArray0 = new double[1];
      StepProblem stepProblem0 = new StepProblem(0.0, 1.3238841854295325, 8.807722969720924);
      adamsBashforthIntegrator0.integrate(stepProblem0, 8.807722969720924, doubleArray0, 53.1428303572064, doubleArray0);
      double double0 = adamsBashforthIntegrator0.initializeStep(stepProblem0, false, (-1948520555), doubleArray0, (-4105.60737233937), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(38, adamsBashforthIntegrator0.getEvaluations());
      assertEquals(Double.NaN, double0, 0.01);
  }
}
