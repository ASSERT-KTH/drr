/*
 * This file was automatically generated by EvoSuite
 * Wed Jan 11 01:13:33 GMT 2017
 */

package org.apache.commons.math.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math.ode.TestProblem5;
import org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math.ode.nonstiff.StepProblem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class AdaptiveStepsizeIntegrator_ESTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      dormandPrince853Integrator0.setInitialStepSize(0.0);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.initializeStep(testProblem5_0, true, (-22), doubleArray0, (-22.0), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[1];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(167.0, 1.23, doubleArray0, doubleArray1);
      StepProblem stepProblem0 = new StepProblem(167.0, 0.0010100857504719387, 1.23);
      dormandPrince54Integrator0.sanityChecks(stepProblem0, 1.3862943611198906, doubleArray1, 45.1282021748, doubleArray0);
      assertEquals(14.332131732579072, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-4798.564), 2546.71, 2546.71, 677.1779);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[8];
      try { 
        dormandPrince853Integrator0.sanityChecks(testProblem5_0, (-1.0), doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: ODE problem has dimension 2, final state vector has dimension 8
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince853Integrator0.resetInternalState();
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-4798.564), 2546.71, 2546.71, 677.1779);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[2];
      dormandPrince853Integrator0.integrate(testProblem5_0, (-2168.28822), doubleArray0, 0.0, doubleArray0);
      assertEquals(26, testProblem5_0.getCalls());
      assertEquals(3495.7904577419968, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-4798.564), 2546.71, 2546.71, 677.1779);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[2];
      double double0 = dormandPrince853Integrator0.integrate(testProblem5_0, (-2168.28822), doubleArray0, (-3551.5506), doubleArray0);
      assertEquals(26, testProblem5_0.getCalls());
      assertEquals((-3551.5506), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, (-2150.75), 0.0);
      double double0 = dormandPrince853Integrator0.getMinStep();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.322376179245283), (-0.322376179245283), doubleArray0, doubleArray0);
      double double0 = graggBulirschStoerIntegrator0.getMinStep();
      assertEquals(0.322376179245283, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals((-0.322376179245283), double0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(598.57249051, 598.57249051, 598.57249051, 598.57249051);
      double double0 = highamHall54Integrator0.getMaxStep();
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(598.57249051, double0, 0.01);
      assertEquals(598.57249051, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2542.929411792929, (-3451.0), doubleArray0, doubleArray0);
      double double0 = dormandPrince54Integrator0.getMaxStep();
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals((-3451.0), double0, 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2542.929411792929, dormandPrince54Integrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      double double0 = graggBulirschStoerIntegrator0.filterStep(0.0, true, true);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1554.189338), (-1554.189338), doubleArray0, doubleArray0);
      double double0 = dormandPrince853Integrator0.filterStep((-1554.189338), true, false);
      assertEquals(1554.189338, double0, 0.01);
      assertEquals(1554.189338, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(999.0, (-623.9049595113147), (-1092.4), 999.0);
      double double0 = dormandPrince853Integrator0.filterStep(2.174266295349115E-6, false, true);
      assertEquals((-623.9049595113147), double0, 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(789.4815099492853, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[6];
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.sanityChecks((FirstOrderDifferentialEquations) null, (-247), doubleArray0, 2984.0896, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, (-0.2908093278463649), 1.0E-12);
      double[] doubleArray0 = new double[1];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.3300429552584842, 1.0E-12, (-990.0149561884));
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(stepProblem0, 4372.554, doubleArray0, 1.0E-10, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-206.456), (-206.456), doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) null, (-807.2766409), doubleArray0, (-956.320554), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(274.0, (-709.987), 1928.3611632736, 0.0);
      StepProblem stepProblem0 = new StepProblem(0.0, (-0.2908093278463649), 1.0E-12);
      double[] doubleArray0 = new double[1];
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      try { 
        graggBulirschStoerIntegrator0.initializeStep(stepProblem0, true, 0, doubleArray0, (-161.750616), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3429.035335712998, 3429.035335712998, 1034.1, (-2790.62803156));
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[9];
      // Undeclared exception!
      try { 
        highamHall54Integrator0.initializeStep(testProblem5_0, true, 9, doubleArray0, 1034.1, doubleArray1, doubleArray0, doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(998.2283, 998.2283, 998.2283, 998.2283);
      try { 
        graggBulirschStoerIntegrator0.filterStep(1.0E-10, false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // minimal step size (9.98E02) reached, integration needs 1.00E-10
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0E-6, 0.44923629829290207, doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.initializeStep(testProblem5_0, false, (-1109), doubleArray0, 1.0E-12, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(2, (double) 2, (double) 2, 0.0, 1.0E-15);
      double double0 = adamsBashforthIntegrator0.getMinStep();
      assertEquals(2.0, double0, 0.01);
      assertEquals(2.0, adamsBashforthIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, adamsBashforthIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      double double0 = graggBulirschStoerIntegrator0.getMaxStep();
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-18.520065659997), (-18.520065659997), (-18.520065659997), 2253.21857211376);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[2];
      graggBulirschStoerIntegrator0.integrate(testProblem5_0, (-1.0), doubleArray0, 0.01, doubleArray0);
      assertEquals(8, testProblem5_0.getCalls());
      assertEquals(8, graggBulirschStoerIntegrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, (-0.2908093278463649), 1.0E-12);
      double[] doubleArray0 = new double[1];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2587.2991215231, 0.3300429552584842, 1.0E-12, (-990.0149561884));
      try { 
        dormandPrince54Integrator0.integrate(stepProblem0, 4372.554, doubleArray0, 1.0E-10, doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // minimal step size (2.59E03) reached, integration needs 3.30E00
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StepProblem stepProblem0 = new StepProblem(0.0, 1.0E-10, 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 274.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1041.03), 274.0, 2587.2991215231, (-990.0149561884));
      dormandPrince54Integrator0.integrate(stepProblem0, 4372.554, doubleArray0, 274.0, doubleArray0);
      assertEquals(98, dormandPrince54Integrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-4798.564), 2546.71, 2546.71, 677.1779);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      dormandPrince853Integrator0.integrate(testProblem5_0, (-2168.28822), doubleArray0, 3.969164406680468E-7, doubleArray0);
      assertEquals(26, testProblem5_0.getCalls());
      assertEquals(26, dormandPrince853Integrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(274.0, (-709.987), 1928.3611632736, 0.0);
      StepProblem stepProblem0 = new StepProblem(0.0, (-0.2908093278463649), 1.0E-12);
      double[] doubleArray0 = new double[1];
      graggBulirschStoerIntegrator0.setInitialStepSize(492.965554714683);
      double double0 = graggBulirschStoerIntegrator0.initializeStep(stepProblem0, false, 0, doubleArray0, (-161.750616), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(441.06285039663, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals((-492.965554714683), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.2908093278463649), (-709.987), 1928.3611632736, 0.0);
      StepProblem stepProblem0 = new StepProblem(1.0E-10, (-0.2908093278463649), 1.0E-12);
      double[] doubleArray0 = new double[1];
      graggBulirschStoerIntegrator0.setInitialStepSize(438.8771);
      double double0 = graggBulirschStoerIntegrator0.initializeStep(stepProblem0, true, 0, doubleArray0, (-161.750616), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(14.36909329949726, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(438.8771, double0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1723.4614657), (-18.52006565999696), doubleArray0, doubleArray0);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray1 = new double[2];
      try { 
        highamHall54Integrator0.integrate(testProblem5_0, 1118.664344, doubleArray1, (-631.162018874237), doubleArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // dimensions mismatch: state vector has dimension 2, absolute tolerance vector has dimension 6
         //
         verifyException("org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[26];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(1, 0.0, (-1845.2), doubleArray0, doubleArray0);
      adamsBashforthIntegrator0.setInitialStepSize(0.322376179245283);
      assertEquals(-0.0, adamsBashforthIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, adamsBashforthIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2587.2991215231, 0.3300429552584842, 1.0E-12, (-990.0149561884));
      dormandPrince54Integrator0.setInitialStepSize(2.675424484351598);
      assertEquals(29.22190699124826, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(12.360567175794303, 698.724, 12.360567175794303, 12.360567175794303);
      double double0 = graggBulirschStoerIntegrator0.getCurrentStepStart();
      assertEquals(92.933443599921, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-4798.564), 2546.71, 2546.71, 677.1779);
      TestProblem5 testProblem5_0 = new TestProblem5();
      double[] doubleArray0 = new double[2];
      dormandPrince853Integrator0.integrate(testProblem5_0, (-2168.28822), doubleArray0, 3.969164406680468E-7, doubleArray0);
      double double0 = dormandPrince853Integrator0.initializeStep(testProblem5_0, false, 1, doubleArray0, (-193.41071), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(27, testProblem5_0.getCalls());
      assertEquals(Double.NaN, double0, 0.01);
  }
}
