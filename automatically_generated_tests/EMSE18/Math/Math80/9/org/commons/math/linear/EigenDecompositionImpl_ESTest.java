/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 16 14:20:19 GMT 2017
 */

package org.apache.commons.math.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class EigenDecompositionImpl_ESTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3304.7932);
      doubleArray0[2] = (-3304.7932);
      doubleArray0[1] = (-3304.7932);
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (-3304.7932);
      doubleArray1[2] = 2.2250738585072014E-308;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      eigenDecompositionImpl0.getV();
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3304.7932);
      doubleArray0[2] = (-3304.7932);
      doubleArray0[1] = (-3304.7932);
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (-3304.7932);
      doubleArray1[2] = 2.2250738585072014E-308;
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = (-3304.7932);
      doubleArray1[6] = (-3304.7932);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-5448);
      doubleArray0[1] = 3.5834549549463;
      doubleArray0[3] = 3.5834549549463;
      doubleArray0[4] = (double) (-5448);
      doubleArray0[6] = (double) (-5448);
      doubleArray0[7] = 3.5834549549463;
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (double) (-5448);
      doubleArray1[2] = (-0.6633606526334896);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 3.5834549549463;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(4.267043390061436E22, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.15885495038741;
      doubleArray0[2] = 0.15885495038741;
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, 0.15885495038741);
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, (-1357.22430938));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.15885495038741;
      doubleArray0[2] = 0.15885495038741;
      doubleArray0[3] = 0.15885495038741;
      double[] doubleArray1 = new double[7];
      doubleArray1[4] = 49.8014015728657;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      double double0 = eigenDecompositionImpl0.getRealEigenvalue(3);
      assertEquals(0.15885495038741, double0, 0.01);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      eigenDecompositionImpl0.getImagEigenvalue(6);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(2);
      assertEquals(Double.NaN, arrayRealVector0.getL1Norm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (-5448);
      doubleArray0[2] = 0.15885495038741;
      doubleArray0[3] = 0.15885495038741;
      doubleArray0[4] = (double) (-5448);
      doubleArray0[5] = (double) (-5448);
      doubleArray0[6] = (double) (-5448);
      doubleArray0[7] = 0.15885495038741;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3304.7932);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(7.079492617844133E15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 0.15885495038741;
      doubleArray0[3] = 0.15885495038741;
      doubleArray0[7] = 0.15885495038741;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3304.7932);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 0.15885495038741;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals((-1.1470798210374195E-6), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      try { 
        eigenDecompositionImpl0.getRealEigenvalue((-5448));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5448
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((double[]) null, (double[]) null, 240.3334255097641);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) null, (-2330.97904));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 6.428401320590638E-6;
      double[] doubleArray1 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 6.428401320590638E-6);
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (-5448);
      doubleArray0[5] = (double) (-5448);
      doubleArray0[2] = (double) (-5448);
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (double) (-5448);
      doubleArray1[2] = 0.15885495038741;
      doubleArray1[3] = (double) (-5448);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 0.15885495038741;
      doubleArray1[6] = 0.15885495038741;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (-5451);
      doubleArray0[5] = (double) (-5451);
      double[] doubleArray1 = new double[7];
      doubleArray0[2] = (-3304.7932);
      doubleArray1[1] = (double) (-5451);
      doubleArray1[2] = 0.15885495038741;
      doubleArray1[3] = (double) (-5451);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 0.15885495038741;
      doubleArray1[6] = 0.15885495038741;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-5448);
      doubleArray0[4] = (double) (-5448);
      doubleArray0[5] = (double) (-5448);
      doubleArray0[6] = (double) (-5448);
      doubleArray0[7] = (-5448.0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3304.7932);
      doubleArray1[1] = (double) (-5448);
      doubleArray1[2] = (-5448.0);
      doubleArray1[3] = (double) (-5448);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 3.5834549549463;
      doubleArray1[6] = 3.5834549549463;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(1.0616069563868612E30, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (-5448);
      doubleArray0[4] = (double) (-5448);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3304.7932);
      doubleArray1[2] = (-0.8891123146020142);
      doubleArray1[3] = (double) (-5448);
      doubleArray1[1] = 49.8014015728657;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 0.15885495038741;
      doubleArray0[5] = (double) (-5448);
      doubleArray0[6] = (double) (-5448);
      double[] doubleArray1 = new double[7];
      doubleArray1[3] = (double) (-5448);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 0.15885495038741;
      doubleArray1[6] = 0.15885495038741;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.15885495038741;
      doubleArray0[1] = (double) (-5448);
      doubleArray0[5] = (double) (-5448);
      doubleArray0[6] = (double) (-5448);
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (-3304.7932);
      doubleArray1[2] = 0.15885495038741;
      doubleArray1[3] = (double) (-5448);
      doubleArray1[4] = 0.15885495038741;
      doubleArray1[5] = 0.15885495038741;
      doubleArray1[6] = 0.15885495038741;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(7.079497796714639E15, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = 0.15885495038741;
      doubleArray0[3] = 0.15885495038741;
      doubleArray0[4] = (double) (-35);
      doubleArray0[5] = (double) (-35);
      doubleArray0[6] = (double) (-35);
      doubleArray0[7] = 0.15885495038741;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3304.7932);
      doubleArray1[1] = (double) (-35);
      doubleArray1[2] = (-19.59374856783727);
      doubleArray1[3] = (double) (-35);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 0.15885495038741;
      doubleArray1[6] = 0.15885495038741;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(2.9808533489293008E13, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-0.19479450034474333);
      doubleArray0[1] = (double) (-5448);
      doubleArray0[5] = (double) (-5448);
      doubleArray0[2] = (double) (-5448);
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = (-0.19479450034474333);
      doubleArray1[3] = (double) (-5448);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = (-0.19479450034474333);
      doubleArray1[1] = (-0.19479450034474333);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-5448);
      doubleArray0[1] = (double) (-5448);
      doubleArray0[4] = (double) (-5448);
      doubleArray0[6] = (double) (-5448);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3304.7932);
      doubleArray1[1] = (double) (-5448);
      doubleArray1[2] = (-0.6633606526334896);
      doubleArray1[3] = (double) (-5448);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 3.5834549549463;
      doubleArray1[6] = 3.5834549549463;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals((-2.6294986033962253E11), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (-5448);
      doubleArray0[3] = 3.5834549549463;
      doubleArray0[4] = (double) (-5448);
      doubleArray0[5] = (double) (-5448);
      doubleArray0[6] = (double) (-5448);
      doubleArray0[7] = 3.5834549549463;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3304.7932);
      doubleArray1[1] = (double) (-5448);
      doubleArray1[2] = 2.2250738585072014E-308;
      doubleArray1[3] = (double) (-5448);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 3.5834549549463;
      doubleArray1[6] = 3.5834549549463;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.15885495038741;
      doubleArray0[1] = (double) (-5448);
      doubleArray0[2] = 0.15885495038741;
      doubleArray0[3] = 0.15885495038741;
      doubleArray0[4] = (double) (-5448);
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (double) (-5448);
      doubleArray1[3] = (double) (-5448);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 0.15885495038741;
      doubleArray1[6] = (-5448.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals((-2.787683936527211E30), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.15885495038741;
      doubleArray0[1] = (double) (-5448);
      doubleArray0[2] = 0.15885495038741;
      doubleArray0[3] = 0.15885495038741;
      doubleArray0[6] = (double) (-5448);
      doubleArray0[7] = 0.15885495038741;
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (-3304.7932);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 0.15885495038741;
      doubleArray1[3] = 0.15885495038741;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(1.1346006240009535E19, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-5448);
      doubleArray0[1] = 3.5834549549463;
      doubleArray0[3] = 3.5834549549463;
      doubleArray0[4] = (double) (-5448);
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (double) (-5448);
      doubleArray1[2] = (-0.6633606526334896);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 3.5834549549463;
      doubleArray1[6] = 3.5834549549463;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(3.106100332206137E30, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3304.7932);
      doubleArray0[2] = (-3304.7932);
      doubleArray0[1] = (-3304.7932);
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = 2.2250738585072014E-308;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.15885495038741;
      doubleArray0[1] = (double) (-5448);
      doubleArray0[2] = 0.15885495038741;
      doubleArray0[3] = 0.15885495038741;
      doubleArray0[5] = (double) (-5448);
      doubleArray0[6] = (double) (-5448);
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (-3304.7932);
      doubleArray1[3] = (double) (-5448);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 0.15885495038741;
      doubleArray1[6] = 0.15885495038741;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(7.080053204344238E15, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.15885495038741;
      doubleArray0[1] = (double) (-5448);
      doubleArray0[2] = 0.15885495038741;
      doubleArray0[3] = 0.15885495038741;
      double[] doubleArray1 = new double[7];
      doubleArray1[3] = (double) (-5448);
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 0.15885495038741;
      doubleArray1[6] = (-5448.0);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals((-1.0900236557996127E22), eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (-5448);
      doubleArray0[3] = (-3304.7932);
      doubleArray0[2] = (double) (-5448);
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (-3304.7932);
      doubleArray1[3] = (double) (-5448);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (-3304.7932);
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = (-3304.7932);
      doubleArray1[2] = 2.2250738585072014E-308;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = 0.15885495038741;
      doubleArray0[2] = 0.15885495038741;
      doubleArray0[3] = 0.15885495038741;
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (double) 4);
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      eigenDecompositionImpl0.getVT();
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(decompositionSolver0.isNonSingular());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      try { 
        eigenDecompositionImpl0.getEigenvector((-28782));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -28782
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      eigenDecompositionImpl0.getV();
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      eigenDecompositionImpl0.getVT();
      eigenDecompositionImpl0.getVT();
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      eigenDecompositionImpl0.getD();
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      eigenDecompositionImpl0.getVT();
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      eigenDecompositionImpl0.getV();
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, 2438.13720703125);
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getVT();
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      doubleArray1[4] = 49.8014015728657;
      doubleArray1[5] = 0.15885495038741;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, 0.15885495038741);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (-3304.7932));
      eigenDecompositionImpl0.getRealEigenvalue(3);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, 6.428401320590638E-6);
      try { 
        eigenDecompositionImpl0.getImagEigenvalue(3327);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3327
         //
         verifyException("org.apache.commons.math.linear.EigenDecompositionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, (double) 4);
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }
}
