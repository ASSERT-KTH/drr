/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 12 14:04:52 GMT 2017
 */

package org.jfree.chart.renderer.category;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.awt.image.BufferedImage;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import javax.swing.JSpinner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.jfree.chart.BufferedImageRenderingSource;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.IntervalCategoryItemLabelGenerator;
import org.jfree.chart.labels.IntervalCategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

public class AbstractCategoryItemRenderer_ESTest  {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1364.0F), (-1364.0F), (-1364.0F), (-1364.0F));
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      Point2D.Double point2D_Double0 = (Point2D.Double)stackedBarRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Double0, rectangle2D_Float0, fastScatterPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals((-2046.0), point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      CategoryToolTipGenerator categoryToolTipGenerator0 = intervalBarRenderer0.getSeriesToolTipGenerator(0);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = waterfallBarRenderer0.getSeriesItemLabelGenerator(2);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("RectangleAnchor.CENTER");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      ValueAxis valueAxis0 = levelRenderer0.getRangeAxis(combinedDomainCategoryPlot0, (byte)13);
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue((Number) 0.2, (Comparable) (-1380.33F), (Comparable) 3.0);
      Range range0 = layeredBarRenderer0.findRangeBounds(defaultKeyedValues2DDataset0);
      assertEquals(0.2, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("");
      boolean boolean0 = areaRenderer0.equals(standardCategoryURLGenerator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = stackedBarRenderer3D0.createState(plotRenderingInfo0);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.setSeriesURLGenerator((-4524), (CategoryURLGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      IntervalCategoryToolTipGenerator intervalCategoryToolTipGenerator0 = new IntervalCategoryToolTipGenerator();
      // Undeclared exception!
      try { 
        stackedBarRenderer0.setSeriesToolTipGenerator((-1520), (CategoryToolTipGenerator) intervalCategoryToolTipGenerator0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.setSeriesItemLabelGenerator((-2386), (CategoryItemLabelGenerator) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      DecimalFormat decimalFormat0 = jSpinner_NumberEditor0.getFormat();
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator("Null 'generator' argument.", (NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.setSeriesItemLabelGenerator((-2733), (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.getRangeAxis((CategoryPlot) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.getDomainAxis((CategoryPlot) null, defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-1421.6751841309), 0.0, false);
      CategoryPlot categoryPlot0 = new CategoryPlot();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.getDomainAxis(categoryPlot0, defaultStatisticalCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, (-3713.814749));
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[9];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.findRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      JFreeChart jFreeChart0 = new JFreeChart("}lznw.G 0T($~", (Plot) combinedRangeCategoryPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 10, 1, (ChartRenderingInfo) null);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImageRenderingSource0.createGraphics2D();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("}lznw.G 0T($~");
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) 0.2, jFreeChart0.DEFAULT_BACKGROUND_PAINT, stackedAreaRenderer0.DEFAULT_STROKE);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.drawDomainMarker(sunGraphics2D0, combinedRangeCategoryPlot0, categoryAxis3D0, categoryMarker0, rectangle2D_Double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(false);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        categoryStepRenderer0.addEntity((EntityCollection) null, line2D_Double0, defaultBoxAndWhiskerCategoryDataset0, 3, 7, false, 3, 2531.7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      StandardEntityCollection standardEntityCollection0 = (StandardEntityCollection)categoryStepRenderer_State0.getEntityCollection();
      double[][] doubleArray0 = new double[4][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, categoryStepRenderer_State0.line, defaultIntervalCategoryDataset0, 19, 1239, true, 0.0, (-4359.769));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addEntity(standardEntityCollection0, categoryStepRenderer_State0.line, defaultKeyedValues2DDataset0, (-2974), (-2974), true, (-2974), (-2974));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, rectangle2D_Float0, defaultKeyedValues2DDataset0, (-784), 99, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Fc", (Comparable) stackedAreaRenderer0.ZERO, 0.2, 0.2);
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, (Layer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LevelRenderer levelRenderer1 = (LevelRenderer)levelRenderer0.clone();
      assertEquals(1.0, levelRenderer1.getMaximumItemWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, true);
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart((Plot) meterPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, true, true, false, true, false);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(1, 4140, 2, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("");
      PeriodAxis periodAxis0 = new PeriodAxis("COPY");
      Layer layer0 = Layer.BACKGROUND;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      statisticalLineAndShapeRenderer0.drawAnnotations(sunGraphics2D0, (Rectangle2D) null, extendedCategoryAxis0, periodAxis0, layer0, plotRenderingInfo0);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("^RgV%KRSr|1SvloVVV");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) 0.0F, 0.0, "");
      Layer layer0 = Layer.FOREGROUND;
      ganttRenderer0.drawAnnotations((Graphics2D) null, rectangle2D_Double0, extendedCategoryAxis0, cyclicNumberAxis0, layer0, plotRenderingInfo0);
      assertTrue(ganttRenderer0.getBaseCreateEntities());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      Range range0 = stackedAreaRenderer0.findRangeBounds((CategoryDataset) null, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Range range0 = minMaxCategoryRenderer0.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("{0}: ({1}, {2})", (Comparable) barRenderer3D0.ZERO, (double) 261);
      Layer layer0 = Layer.FOREGROUND;
      barRenderer3D0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      assertTrue(barRenderer3D0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      Layer layer0 = Layer.FOREGROUND;
      // Undeclared exception!
      try { 
        minMaxCategoryRenderer0.addAnnotation((CategoryAnnotation) null, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator();
      intervalBarRenderer0.setBaseURLGenerator((CategoryURLGenerator) standardCategoryURLGenerator0, true);
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      StandardCategoryURLGenerator standardCategoryURLGenerator0 = new StandardCategoryURLGenerator("q");
      waterfallBarRenderer0.setSeriesURLGenerator(806, (CategoryURLGenerator) standardCategoryURLGenerator0, true);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer3D0.getURLGenerator(4, 419, true);
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, true);
      assertTrue(statisticalBarRenderer0.getBaseCreateEntities());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      statisticalBarRenderer0.setSeriesToolTipGenerator(192, (CategoryToolTipGenerator) null, true);
      assertTrue(statisticalBarRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, true);
      assertTrue(stackedBarRenderer3D0.getShadowsVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      IntervalCategoryItemLabelGenerator intervalCategoryItemLabelGenerator0 = new IntervalCategoryItemLabelGenerator("", (DateFormat) mockSimpleDateFormat0);
      intervalBarRenderer0.setSeriesItemLabelGenerator(353, (CategoryItemLabelGenerator) intervalCategoryItemLabelGenerator0, true);
      assertTrue(intervalBarRenderer0.getShadowsVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      ganttRenderer0.setPlot(categoryPlot0);
      assertFalse(categoryPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      MeterPlot meterPlot0 = new MeterPlot();
      JFreeChart jFreeChart0 = new JFreeChart("m}MA!zS\"64", (Plot) meterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) null);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 4351, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImageRenderingSource0.createGraphics2D();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float();
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)roundRectangle2D_Float0.getBounds2D();
      // Undeclared exception!
      try { 
        barRenderer0.drawBackground(sunGraphics2D0, (CategoryPlot) null, rectangle2D_Float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryPlot categoryPlot0 = stackedBarRenderer3D0.getPlot();
      assertNull(categoryPlot0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultKeyedValues2DDataset0, 13, 13);
      Range range0 = lineRenderer3D0.findRangeBounds(slidingCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      RoundRectangle2D.Float roundRectangle2D_Float0 = new RoundRectangle2D.Float(0.0F, 0.0F, 4.0F, (float) 5254, 1382.0286F, 0.0F);
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)roundRectangle2D_Float0.getBounds2D();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      PeriodAxis periodAxis0 = new PeriodAxis("oYok4q?`w");
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        lineRenderer3D0.createHotSpotBounds((Graphics2D) null, rectangle2D_Float0, (CategoryPlot) null, categoryAxis0, periodAxis0, defaultCategoryDataset0, 5254, 0, true, categoryItemRendererState0, rectangle2D_Float0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Number[][] numberArray0 = new Number[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.addEntity(standardEntityCollection0, (Shape) null, defaultIntervalCategoryDataset0, 0, 0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'hotspot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      Line2D.Float line2D_Float0 = new Line2D.Float((float) 1239, (float) 1239, (float) 1239, (float) 1239);
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)line2D_Float0.getBounds2D();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        scatterRenderer0.addEntity(standardEntityCollection0, rectangle2D_Float0, defaultKeyedValues2DDataset0, 2478, 18, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2478, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      LegendItemCollection legendItemCollection0 = intervalBarRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(true);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("HorizontalAlignment.CENTER");
      NumberAxis numberAxis0 = new NumberAxis("HorizontalAlignment.CENTER");
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, (CategoryAxis) categoryAxis3D0, (ValueAxis) numberAxis0, (CategoryItemRenderer) lineRenderer3D0);
      NumberAxis numberAxis1 = (NumberAxis)stackedBarRenderer3D0.getRangeAxis(categoryPlot0, 916);
      assertTrue(numberAxis1.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertFalse(stackedAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      float[][] floatArray0 = new float[6][6];
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(102.1279971, (String) null);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, (ValueAxis) cyclicNumberAxis0, (ValueAxis) cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(":>NSG,3VQP(9,", (Plot) fastScatterPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 1, 10, chartRenderingInfo0);
      BufferedImageRenderingSource bufferedImageRenderingSource0 = new BufferedImageRenderingSource(bufferedImage0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImageRenderingSource0.createGraphics2D();
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 500, 1, 10, 1, 10, 3, true, false, true, true, true, true);
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      boxAndWhiskerRenderer0.drawItemLabel(sunGraphics2D0, plotOrientation0, defaultMultiValueCategoryDataset0, 200, 500, true, 1692.190698172626, 2.5E-8, false);
      assertFalse(boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        stackedAreaRenderer0.updateCrosshairValues(categoryCrosshairState0, true, 0.05, 0.05, 0, 0.5F, 20000.0, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(true);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      // Undeclared exception!
      try { 
        stackedBarRenderer3D0.updateCrosshairValues(categoryCrosshairState0, 0.0, scatterRenderer0.ZERO, 0.0, 0, 2051.1603, (double) stackedAreaRenderer0.ZERO, (PlotOrientation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(527.0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      levelRenderer0.updateCrosshairValues((CategoryCrosshairState) null, 10, 0.2, (-3632.3023353), 2801, 3.0, 3.0, plotOrientation0);
      assertFalse(levelRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer(false);
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation("\"2x=>{iJ@3", (Comparable) stackedAreaRenderer0.ZERO, (double) stackedAreaRenderer1.ZERO);
      assertTrue(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      
      stackedAreaRenderer1.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      assertFalse(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer(false);
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer(false);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = (StandardCategorySeriesLabelGenerator)stackedAreaRenderer0.getLegendItemLabelGenerator();
      assertTrue(stackedAreaRenderer0.equals((Object)stackedAreaRenderer1));
      
      stackedAreaRenderer1.setLegendItemURLGenerator(standardCategorySeriesLabelGenerator0);
      boolean boolean0 = stackedAreaRenderer0.equals(stackedAreaRenderer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      LegendItem legendItem0 = levelRenderer0.getLegendItem(193, 3);
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      GeneralPath generalPath0 = new GeneralPath();
      Rectangle rectangle0 = generalPath0.getBounds();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      RectangleAnchor rectangleAnchor0 = xYBlockRenderer0.getBlockAnchor();
      // Undeclared exception!
      try { 
        groupedStackedBarRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle0, rectangle0, (RectangleInsets) null, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1364.0F), (-1364.0F), (-1364.0F), (-1364.0F));
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(false);
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      Point2D.Double point2D_Double0 = (Point2D.Double)stackedBarRenderer0.calculateDomainMarkerTextAnchorPoint((Graphics2D) null, plotOrientation0, rectangle2D_Double0, rectangle2D_Float0, fastScatterPlot0.DEFAULT_INSETS, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals((-2046.0), point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(0.0, 714.171461946);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, 0.0F, 1.0F);
      LogAxis logAxis0 = new LogAxis();
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) 0.2);
      stackedBarRenderer3D0.drawRangeMarker((Graphics2D) null, (CategoryPlot) null, logAxis0, categoryMarker0, rectangle2D_Float0);
      assertFalse(stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(true);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("HorizontalAlignment.CENTER");
      NumberAxis numberAxis0 = new NumberAxis("HorizontalAlignment.CENTER");
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) null, (CategoryAxis) categoryAxis3D0, (ValueAxis) numberAxis0, (CategoryItemRenderer) boxAndWhiskerRenderer0);
      ChartPanel chartPanel0 = new ChartPanel((JFreeChart) null, 2, 7, (-587), 10, (-587), 12, true, true, true, false, false, false);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)chartPanel0.getScreenDataArea(500, 500);
      // Undeclared exception!
      try { 
        categoryStepRenderer0.drawDomainLine((Graphics2D) null, categoryPlot0, rectangle2D_Double0, (-3296.646), categoryPlot0.DEFAULT_OUTLINE_PAINT, categoryPlot0.DEFAULT_OUTLINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      double[][] doubleArray0 = new double[4][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        levelRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, categoryPlot0, defaultIntervalCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot();
      double[][] doubleArray0 = new double[4][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        levelRenderer0.initialise((Graphics2D) null, (Rectangle2D) null, categoryPlot0, defaultIntervalCategoryDataset0, (PlotRenderingInfo) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      // Undeclared exception!
      try { 
        ganttRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(false, false);
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = (StandardCategorySeriesLabelGenerator)statisticalLineAndShapeRenderer0.getLegendItemLabelGenerator();
      statisticalLineAndShapeRenderer0.setLegendItemLabelGenerator(standardCategorySeriesLabelGenerator0);
      assertTrue(statisticalLineAndShapeRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation("Fc", (Comparable) stackedAreaRenderer0.ZERO, 0.2, 0.2);
      Layer layer0 = Layer.BACKGROUND;
      waterfallBarRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
      assertEquals(3.0, BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD, 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      // Undeclared exception!
      try { 
        statisticalLineAndShapeRenderer0.addAnnotation((CategoryAnnotation) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      minMaxCategoryRenderer0.setBaseURLGenerator((CategoryURLGenerator) null, false);
      assertFalse(minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setSeriesURLGenerator(18, (CategoryURLGenerator) null, false);
      assertTrue(waterfallBarRenderer0.getDefaultShadowsVisible());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-1.0), (-2177.77554425928));
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 47, 1);
      // Undeclared exception!
      try { 
        barRenderer3D0.addEntity(standardEntityCollection0, combinedDomainCategoryPlot0.DEFAULT_LEGEND_ITEM_CIRCLE, slidingGanttCategoryDataset0, 149, 1410, false, (-187.0), (-2177.77554425928));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null, false);
      assertFalse(groupedStackedBarRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-1.0), (-2177.77554425928));
      barRenderer3D0.setSeriesToolTipGenerator(1534, (CategoryToolTipGenerator) null);
      assertTrue(barRenderer3D0.getIncludeBaseInRange());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      stackedBarRenderer3D0.setSeriesToolTipGenerator(121, (CategoryToolTipGenerator) null, false);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      intervalBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null, false);
      assertTrue(intervalBarRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection0, 1, 1);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) slidingGanttCategoryDataset0, tableOrder0);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = (StandardCategoryItemLabelGenerator)spiderWebPlot0.getLabelGenerator();
      waterfallBarRenderer0.setSeriesItemLabelGenerator(1, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0, false);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = lineRenderer3D0.getItemLabelGenerator(1, 747, false);
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      // Undeclared exception!
      try { 
        waterfallBarRenderer0.setPlot((CategoryPlot) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      waterfallBarRenderer0.setSeriesURLGenerator(3, (CategoryURLGenerator) null);
      assertTrue(waterfallBarRenderer0.getShadowsVisible());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      CategoryURLGenerator categoryURLGenerator0 = statisticalLineAndShapeRenderer0.getSeriesURLGenerator((-924));
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = ganttRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0.0, 2553.890922916, 1.0E7, 1.0E7);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("N'?KGLv!}");
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      CategoryItemRendererState categoryItemRendererState0 = new CategoryItemRendererState(plotRenderingInfo0);
      // Undeclared exception!
      try { 
        boxAndWhiskerRenderer0.createHotSpotShape((Graphics2D) null, rectangle2D_Double0, combinedDomainCategoryPlot0, categoryAxis3D0, logarithmicAxis0, defaultMultiValueCategoryDataset0, 93, 0, true, categoryItemRendererState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
         verifyException("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      groupedStackedBarRenderer0.setBaseItemLabelGenerator((CategoryItemLabelGenerator) null);
      assertFalse(groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BarRenderer barRenderer0 = new BarRenderer();
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = (StandardCategorySeriesLabelGenerator)statisticalBarRenderer0.getLegendItemLabelGenerator();
      barRenderer0.setLegendItemToolTipGenerator(standardCategorySeriesLabelGenerator0);
      assertFalse(barRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      int int0 = intervalBarRenderer0.getRowCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D((-1.0), (-2177.77554425928));
      // Undeclared exception!
      try { 
        barRenderer3D0.setSeriesToolTipGenerator((-477), (CategoryToolTipGenerator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      statisticalLineAndShapeRenderer0.setBaseToolTipGenerator((CategoryToolTipGenerator) null);
      assertFalse(statisticalLineAndShapeRenderer0.getUseOutlinePaint());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(false);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      NumberAxis numberAxis0 = new NumberAxis("org.jfree.chart.ChartPanel");
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultStatisticalCategoryDataset0, categoryAxis0, (ValueAxis) numberAxis0, (CategoryItemRenderer) minMaxCategoryRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("HF%2C!", stackedAreaRenderer0.DEFAULT_VALUE_LABEL_FONT, (Plot) categoryPlot0, true);
      // Undeclared exception!
      jFreeChart0.createBufferedImage(500, 227, (ChartRenderingInfo) null);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = boxAndWhiskerRenderer0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      lineAndShapeRenderer0.removeAnnotations();
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      statisticalLineAndShapeRenderer0.setBaseURLGenerator((CategoryURLGenerator) null);
      assertTrue(statisticalLineAndShapeRenderer0.getDrawOutlines());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      CategoryURLGenerator categoryURLGenerator0 = statisticalLineAndShapeRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(true, false);
      CategoryToolTipGenerator categoryToolTipGenerator0 = statisticalLineAndShapeRenderer0.getToolTipGenerator(4, (-47), false);
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      boxAndWhiskerRenderer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      DrawingSupplier drawingSupplier0 = intervalBarRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      Line2D.Float line2D_Float0 = new Line2D.Float((float) 1239, (float) 1239, (float) 1239, (float) 1239);
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)line2D_Float0.getBounds2D();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      // Undeclared exception!
      try { 
        scatterRenderer0.getItemMiddle(1239.0F, 1239.0F, defaultKeyedValues2DDataset0, categoryAxis0, rectangle2D_Float0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
         verifyException("org.jfree.chart.axis.CategoryAxis", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      int int0 = barRenderer3D0.getPassCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      int int0 = statisticalBarRenderer0.getColumnCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      BasicStroke basicStroke0 = new BasicStroke();
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation((Comparable) statisticalBarRenderer0.ZERO, 0.0, (Comparable) 3.0, (double) minMaxCategoryRenderer0.ZERO, statisticalBarRenderer0.DEFAULT_VALUE_LABEL_PAINT, (Stroke) basicStroke0);
      boolean boolean0 = minMaxCategoryRenderer0.removeAnnotation(categoryLineAnnotation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((-1364.0F), (-1364.0F), (-1364.0F), (-1364.0F));
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.2, "java.awt.geom.Rectangle2D$Double[x=-0.2,y=-3664.66637221562,w=0.4,h=3664.66637221562]");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) cyclicNumberAxis0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      // Undeclared exception!
      try { 
        statisticalBarRenderer0.initialise((Graphics2D) null, rectangle2D_Float0, combinedRangeCategoryPlot0, defaultCategoryDataset0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
         verifyException("org.jfree.chart.plot.CategoryPlot", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedBarRenderer3D0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(false);
      StandardCategoryItemLabelGenerator standardCategoryItemLabelGenerator0 = new StandardCategoryItemLabelGenerator();
      stackedBarRenderer3D0.setSeriesItemLabelGenerator(10, (CategoryItemLabelGenerator) standardCategoryItemLabelGenerator0);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01);
  }
}
