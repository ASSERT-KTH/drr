/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:25:52 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.StepFunction;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.TooManyEvaluationsException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BaseSecantSolverEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double double0 = (-827.724);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      
      int int0 = 516;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tanh0, double0, (double) int0, (double) int0, allowedSolution0);
      assertEquals(516.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(516, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(516.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(16, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-827.724), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(5.1362374458834505E-15, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = (-38.224748983504874);
      double double1 = 2161.5351835028;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double1, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-38.224748983504874), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2161.5351835028, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 2847;
      double[] doubleArray0 = new double[31];
      doubleArray0[5] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(5, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 2847.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double0, doubleArray0[5], allowedSolution0);
      assertEquals(1404.3876255082475, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-38.224748983504874), pegasusSolver0.getMin(), 0.01D);
      assertEquals(2847.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-38.224748983504874), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2161.5351835028, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2847, pegasusSolver0.getMaxEvaluations());
      assertEquals(5, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 2847.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-38.22474772467967), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 2060;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, (double) int0, (double) int0);
      assertNotNull(harmonicOscillator0);
      
      double double0 = (-2617.1058395465197);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double0, (double) int0, allowedSolution0);
      assertEquals((-2617.1058395465197), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(24, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2060, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-278.5529197732599), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(2060.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1676.7134175529286, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = (-947.0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 155;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tanh0, double0, (double) int0, (double) int0, allowedSolution0);
      assertEquals(155, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(155.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-947.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(12, regulaFalsiSolver0.getEvaluations());
      assertEquals(155.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(6.926129834231888E-7, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tanh0, double0, double1, double0);
      assertEquals(6.926129834231888E-7, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(155, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-947.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(4, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-947.0), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-9.900869187007277E-14), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = (-947.0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      
      int int0 = 155;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      double double1 = 4340.007059151182;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tanh0, double0, double1, double1, allowedSolution0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(4340.007059151182, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(4340.007059151182, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-947.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(155, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(18, regulaFalsiSolver0.getEvaluations());
      assertEquals(7.439921820978634E-10, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = (-829.2869118839936);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 1259;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tanh0, double0, (double) int0, (double) int0, allowedSolution0);
      assertEquals(1259.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1259, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(17, regulaFalsiSolver0.getEvaluations());
      assertEquals((-829.2869118839936), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1259.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-1.9513149291095295E-18), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = (-826.774970777058);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 498;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tanh0, double0, (double) int0, (double) int0, allowedSolution0);
      assertEquals(498, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(498.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-826.774970777058), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(16, regulaFalsiSolver0.getEvaluations());
      assertEquals(498.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3.7643988013265276E-23, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = (-788.6867315325948);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      
      int int0 = 447;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      double double1 = 4340.3;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tanh0, double0, double1, double1, allowedSolution0);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(4340.3, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(447, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-788.6867315325948), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(4340.3, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(18, regulaFalsiSolver0.getEvaluations());
      assertEquals((-5.4553436065269334E-14), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-870.7221606059276);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 432;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tanh0, double0, (double) int0, (double) int0, allowedSolution0);
      assertEquals(432, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(16, regulaFalsiSolver0.getEvaluations());
      assertEquals(432.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(432.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-870.7221606059276), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(4.825492520177627E-20, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-682.11316);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 521;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tanh0, double0, (double) int0, (double) int0, allowedSolution0);
      assertEquals(521, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(521.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(521.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-682.11316), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(16, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-3.1127404278093087E-10), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = (-788.6867315325948);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 447;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tanh0, double0, (double) int0, (double) int0, allowedSolution0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-788.6867315325948), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(447.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(447.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(16, regulaFalsiSolver0.getEvaluations());
      assertEquals(447, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-5.4084343256762047E-17), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = (-1839.2193329814847);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 479;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) tanh0, double0, (double) int0, (double) int0, allowedSolution0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(479.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(479.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-1839.2193329814847), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(17, regulaFalsiSolver0.getEvaluations());
      assertEquals(479, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3.55066051447385E-11, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = (-17.544);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-17.544), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-17.544), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      int int0 = 266;
      Logit logit0 = new Logit(double0, (double) int0);
      assertNotNull(logit0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try {
        double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) logit0, double0, (double) int0, double0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (266) exceeded: evaluations
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = 578.128900699977;
      double double1 = (-455.69706);
      int int0 = (-3425);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((double) int0);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals((-3425.0), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int1 = 2168;
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      double double2 = illinoisSolver0.solve(int1, (UnivariateRealFunction) tanh0, double1, double0);
      assertEquals(578.128900699977, illinoisSolver0.getMax(), 0.01D);
      assertEquals(16, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2168, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(61.215920349988494, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-455.69706), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-3425.0), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(7.888609052210118E-31, double2, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      
      int int0 = 246;
      Ceil ceil0 = new Ceil();
      assertNotNull(ceil0);
      
      double double0 = (-1520.5126434237166);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) ceil0, double0, (double) int0, allowedSolution0);
      assertEquals(3, regulaFalsiSolver0.getEvaluations());
      assertEquals((-1520.5126434237166), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-637.2563217118583), regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(246, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(246.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-0.07141012584045825), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      
      int int0 = 2017;
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, (double) int0, (double) int0);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      int int1 = (-1);
      double double0 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, (double) int1, (double) int0, allowedSolution0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2017, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(21, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.0), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1008.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(2017.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(857.2801536023434, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = 246;
      Ceil ceil0 = new Ceil();
      assertNotNull(ceil0);
      
      double double0 = (-0.9923843303757317);
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) ceil0, (double) int0, double0);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-0.9923843303757317), regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(246.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(122.50380783481214, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(246, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2, regulaFalsiSolver0.getEvaluations());
      assertEquals((-0.9923843303757317), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test17()  throws Throwable  {
      double double0 = 0.24821381040537133;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.24821381040537133, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      
      double[] doubleArray0 = new double[1];
      int int0 = 954;
      StepFunction stepFunction0 = new StepFunction(doubleArray0, doubleArray0);
      assertNotNull(stepFunction0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) stepFunction0, doubleArray0[0], double0);
      assertEquals(0.12410690520268566, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(2, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(954, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.24821381040537133, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.24821381040537133, regulaFalsiSolver0.getMax(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      RegulaFalsiSolver regulaFalsiSolver1 = new RegulaFalsiSolver(double1, double0, double0);
      assertNotNull(regulaFalsiSolver1);
      assertNotSame(regulaFalsiSolver1, regulaFalsiSolver0);
      assertNotSame(regulaFalsiSolver0, regulaFalsiSolver1);
      assertEquals(0.24821381040537133, regulaFalsiSolver1.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver1.getStartValue(), 0.01D);
      assertEquals(0.24821381040537133, regulaFalsiSolver1.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver1.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver1.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver1.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver1.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver1.getEvaluations());
      assertEquals(0.12410690520268566, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(2, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(954, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.24821381040537133, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.24821381040537133, regulaFalsiSolver0.getMax(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(regulaFalsiSolver1.equals((Object)regulaFalsiSolver0));
      assertFalse(double0 == double1);
      assertFalse(regulaFalsiSolver0.equals((Object)regulaFalsiSolver1));
  }
}
