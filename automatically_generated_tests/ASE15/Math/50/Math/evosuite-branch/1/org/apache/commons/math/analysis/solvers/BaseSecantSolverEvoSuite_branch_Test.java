/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:54:43 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BaseSecantSolverEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 1522;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = (-831.0797923);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, allowedSolution0);
      assertEquals(345.46010385, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-831.0797923), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1522.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1522, illinoisSolver0.getMaxEvaluations());
      assertEquals(27, illinoisSolver0.getEvaluations());
      assertEquals(6.781321146277253E-7, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 15.209251018466253;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertEquals(15.209251018466253, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      
      double double1 = illinoisSolver0.getFunctionValueAccuracy();
      assertEquals(15.209251018466253, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 1432;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double2 = (-1123.856493047933);
      assertFalse(double2 == double1);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double2, double1, double2, allowedSolution0);
      assertEquals(15.209251018466253, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1123.856493047933), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-1123.856493047933), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1432, illinoisSolver0.getMaxEvaluations());
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-0.0010809530260728168), double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 0.5;
      double double1 = (-2563.7620064052);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double1);
      assertNotNull(illinoisSolver0);
      assertEquals(0.5, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.5, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals((-2563.7620064052), illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 2087;
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) asinh0, double1, (double) int0, allowedSolution0);
      assertEquals((-2563.7620064052), illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.5, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2087.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2087, illinoisSolver0.getMaxEvaluations());
      assertEquals((-238.3810032025999), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.5, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-2563.7620064052), illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(13, illinoisSolver0.getEvaluations());
      assertEquals(0.010256239099405262, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 653.4818684432242;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(653.4818684432242, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(653.4818684432242, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(653.4818684432242, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      int int0 = 1665;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double1 = (-815.861457478);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, double0, (double) int0, allowedSolution0);
      assertEquals(653.4818684432242, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1665, pegasusSolver0.getMaxEvaluations());
      assertEquals(653.4818684432242, pegasusSolver0.getMax(), 0.01D);
      assertEquals(653.4818684432242, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(653.4818684432242, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1665.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-815.861457478), pegasusSolver0.getMin(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(653.4818684432242, double2, 0.01D);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 659.985841736269;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(659.985841736269, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(659.985841736269, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(659.985841736269, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      
      int int0 = 1456;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double1 = (-809.8443);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, double0, (double) int0, allowedSolution0);
      assertEquals(1456, pegasusSolver0.getMaxEvaluations());
      assertEquals(1456.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(659.985841736269, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(659.985841736269, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(659.985841736269, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-809.8443), pegasusSolver0.getMin(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(659.985841736269, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-49.875444018670805), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 659.985841736269;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(659.985841736269, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(659.985841736269, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(659.985841736269, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = pegasusSolver0.getEvaluations();
      assertEquals(659.985841736269, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(659.985841736269, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(659.985841736269, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, int0);
      
      int int1 = 1544;
      assertFalse(int1 == int0);
      
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double1 = (-779.793);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = pegasusSolver0.solve(int1, (UnivariateRealFunction) cbrt0, double1, double0, (double) int0, allowedSolution0);
      assertEquals(1544, pegasusSolver0.getMaxEvaluations());
      assertEquals(659.985841736269, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(659.985841736269, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-779.793), pegasusSolver0.getMin(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(659.985841736269, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(659.985841736269, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(659.985841736269, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 2958.471042353917;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(2958.471042353917, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2958.471042353917, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2958.471042353917, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      int int0 = 1488;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double1 = (-794.9795655414398);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, (double) int0, double0, allowedSolution0);
      assertEquals(2958.471042353917, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(1488, pegasusSolver0.getMaxEvaluations());
      assertEquals((-794.9795655414398), pegasusSolver0.getMin(), 0.01D);
      assertEquals(2958.471042353917, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2958.471042353917, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(2958.471042353917, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1488.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-794.9795655414398), double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 15.209251018466253;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertEquals(15.209251018466253, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      double double1 = illinoisSolver0.getFunctionValueAccuracy();
      assertEquals(15.209251018466253, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double1, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(15.209251018466253, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(15.209251018466253, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(15.209251018466253, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 1432;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double2 = (-1123.856493047933);
      assertFalse(double2 == double1);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double2, (double) int0, double2, allowedSolution0);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1432, pegasusSolver0.getMaxEvaluations());
      assertEquals(15.209251018466253, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(15.209251018466253, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1123.856493047933), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1432.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-1123.856493047933), pegasusSolver0.getMin(), 0.01D);
      assertEquals(15.209251018466253, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(102.49151069259506, double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 15.209251018466253;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(15.209251018466253, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      
      double double1 = illinoisSolver0.getFunctionValueAccuracy();
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(15.209251018466253, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double1, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(15.209251018466253, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(15.209251018466253, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(15.209251018466253, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 1432;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double2 = (-1123.856493047933);
      assertFalse(double2 == double1);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double2, (double) int0, double2, allowedSolution0);
      assertEquals((-1123.856493047933), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1432, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1123.856493047933), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(15.209251018466253, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(15.209251018466253, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1432.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(15.209251018466253, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-1123.856493047933), double3, 0.01D);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 659.985841736;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(659.985841736, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(659.985841736, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(659.985841736, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      
      int int0 = 1474;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double1 = (-756.7116795085176);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double1, double0, (double) int0, allowedSolution0);
      assertEquals(1474, pegasusSolver0.getMaxEvaluations());
      assertEquals(659.985841736, pegasusSolver0.getMax(), 0.01D);
      assertEquals(659.985841736, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(659.985841736, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(1474.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(659.985841736, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-756.7116795085176), pegasusSolver0.getMin(), 0.01D);
      assertEquals((-32.219621770531944), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      double double0 = pegasusSolver0.getFunctionValueAccuracy();
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, double0, 0.01D);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 3;
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = double0;
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(1, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 1.0E-15}, doubleArray0, 0.01);
      
      double double1 = (-1.2618735033278432);
      assertFalse(double1 == double0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, (double) int0, double1, allowedSolution0);
      assertEquals(1, polynomialFunction0.degree());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals((-1.2618735033278432), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-1.2618735033278432), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(3, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertArrayEquals(new double[] {0.0, 1.0E-15}, doubleArray0, 0.01);
      assertEquals(4.440892098500626E-16, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = (-9.238685363643546);
      double double1 = 0.5;
      int int0 = 2087;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double1, double1, double1);
      assertNotNull(pegasusSolver0);
      assertEquals(0.5, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.5, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.5, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertFalse(double1 == double0);
      
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, double1, allowedSolution0);
      assertEquals(0.5, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2087.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.5, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2087, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.5, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.5, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-9.238685363643546), pegasusSolver0.getMin(), 0.01D);
      assertEquals(10, pegasusSolver0.getEvaluations());
      assertEquals(0.031950385072845144, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1474;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      double double0 = (-633.324);
      double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, allowedSolution0);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1474.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1474, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(420.3380000000001, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-633.324), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(26, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-3.205956918652578E-7), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1522;
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      double double0 = (-831.0797923);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) cbrt0, double0, (double) int0, (double) int0);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1522.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-831.0797923), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1522.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1522, illinoisSolver0.getMaxEvaluations());
      assertEquals(27, illinoisSolver0.getEvaluations());
      assertEquals(6.781321146277253E-7, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = 0.25628868260039867;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.25628868260039867, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 291;
      Gaussian gaussian0 = new Gaussian(double0, double0);
      assertNotNull(gaussian0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) gaussian0, (double) int0, double0, allowedSolution0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.25628868260039867, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2, pegasusSolver0.getEvaluations());
      assertEquals(145.62814434130019, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(291, pegasusSolver0.getMaxEvaluations());
      assertEquals(291.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.25628868260039867, pegasusSolver0.getMax(), 0.01D);
      assertEquals(291.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = 0.25628868260039867;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.25628868260039867, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      int int0 = 291;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((double) int0, (double) int0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(291.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(291.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      
      double double1 = regulaFalsiSolver0.getMax();
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(291.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(291.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      
      Rint rint0 = new Rint();
      assertNotNull(rint0);
      
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) rint0, (double) int0, double1, double0);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(291.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(291.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(2, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(291, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.25628868260039867, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.25628868260039867, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(291.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = (-9.238685363643546);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertNotNull(illinoisSolver0);
      assertEquals((-9.238685363643546), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-9.238685363643546), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-9.238685363643546), illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 2087;
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) asinh0, double0, (double) int0, allowedSolution0);
      assertEquals((-9.238685363643546), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1038.8806573181782, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-9.238685363643546), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2087, illinoisSolver0.getMaxEvaluations());
      assertEquals(2087.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-9.238685363643546), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(13, illinoisSolver0.getEvaluations());
      assertEquals((-9.238685363643546), illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }
}
