/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:19:02 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class OpenMapRealVectorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 1091;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1091, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCos();
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1091, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1091, openMapRealVector0.getDimension());
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertFalse(boolean0);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1091, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1091, openMapRealVector0.getDimension());
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      
      doubleArray0[4] = double0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.125, openMapRealVector1.getSparcity(), 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      boolean boolean0 = openMapRealVector1.equals((Object) openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.125, openMapRealVector1.getSparcity(), 0.01D);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0[1]);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(11, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(11, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test03()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = (-880.49768639962);
      Double double1 = new Double(double0);
      assertEquals((-880.49768639962), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[3];
      doubleArray0[7] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      int int0 = 0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(openMapRealVector0, int0);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      
      boolean boolean0 = openMapRealVector0.equals((Object) openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertTrue(boolean0);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test04()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      Object object0 = null;
      boolean boolean0 = openMapRealVector0.equals(object0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test
  public void test05()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = openMapRealVector0.equals(object0);
      assertFalse(boolean0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NaN;
      doubleArray0[5] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
      
      int int0 = openMapRealVector0.hashCode();
      //  // Unstable assertion: assertEquals((-504335079), int0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      double double2 = 130.0;
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double2);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertFalse(double2 == double0);
      
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-727.0839249371253);
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = (Double) double0;
      doubleArray0[1] = (Double) double0;
      doubleArray0[2] = (Double) double0;
      doubleArray0[3] = (Double) double0;
      doubleArray0[4] = (Double) double0;
      doubleArray0[5] = (Double) double0;
      doubleArray0[6] = doubleArray0[5];
      doubleArray0[7] = (Double) double0;
      doubleArray0[8] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(6543.755324434129, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(727.0839249371253, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2181.251774811376, arrayRealVector0.getNorm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(6543.755324434129, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(727.0839249371253, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2181.251774811376, arrayRealVector0.getNorm(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(6543.755324434129, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(727.0839249371253, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2181.251774811376, arrayRealVector0.getNorm(), 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test09()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double double0 = 770.0;
      doubleArray0[0] = (Double) double0;
      double double1 = 0.0;
      Double double2 = new Double(double1);
      assertEquals(0.0, (double)double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double2.equals((Object)double1));
      assertFalse(double2.equals((Object)double0));
      
      doubleArray0[1] = double2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapAdd(double0);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(double0 == double1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.add(openMapRealVector0);
      assertNotNull(openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertEquals(2, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(double0 == double1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector0.subtract(openMapRealVector2);
      assertNotNull(openMapRealVector3);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertEquals(1.0, openMapRealVector3.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector3.getDimension());
      assertEquals(2, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(0.5, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(double0 == double1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-2848.987);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[1]);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      openMapRealVector0.set(double0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1592;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1592, openMapRealVector0.getDimension());
      
      int int1 = 0;
      openMapRealVector0.setSubVector(int1, (RealVector) openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1592, openMapRealVector0.getDimension());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = Double.NaN;
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(6, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector1.outerProduct(doubleArray0);
      //  // Unstable assertion: assertNotNull(openMapRealMatrix0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(6, openMapRealMatrix0.getColumnDimension());
      //  // Unstable assertion: assertEquals(true, openMapRealMatrix0.isSquare());
      //  // Unstable assertion: assertEquals(6, openMapRealMatrix0.getRowDimension());
      //  // Unstable assertion: assertEquals(6, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      //  // Unstable assertion: assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      //  // Unstable assertion: assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NaN;
      doubleArray0[5] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[5]);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
      
      boolean boolean0 = openMapRealVector0.isNaN();
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double1);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertTrue(double1.equals((Object)double0));
      
      boolean boolean0 = openMapRealVector0.isNaN();
      assertFalse(boolean0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertTrue(double1.equals((Object)double0));
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertTrue(boolean0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
  }

  @Test
  public void test16()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[5] = double1;
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double1);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertTrue(double1.equals((Object)double0));
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertTrue(double1.equals((Object)double0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.subtract((RealVector) openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertTrue(double1.equals((Object)double0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      
      boolean boolean0 = openMapRealVector2.isInfinite();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertFalse(boolean0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertTrue(double1.equals((Object)double0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
  }

  @Test
  public void test17()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = (-880.49768639962);
      Double double1 = new Double(double0);
      assertEquals((-880.49768639962), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[3];
      doubleArray0[7] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      
      boolean boolean0 = openMapRealVector0.isInfinite();
      assertFalse(boolean0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 2164;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(2164, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2164, arrayRealVector0.getDimension());
      assertEquals(100666.71219425018, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2164.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4682896.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) arrayRealVector0);
      assertEquals(2164.0, double0, 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2164, arrayRealVector0.getDimension());
      assertEquals(100666.71219425018, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2164.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4682896.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2164, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      double double0 = 1583.0212343159703;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 1583.0212343159703, 1583.0212343159703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(21, openMapRealVector0.getDimension());
      assertEquals(0.09523809523809523, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 1583.0212343159703, 1583.0212343159703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(21, openMapRealVector0.getDimension());
      assertEquals(0.09523809523809523, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(21, openMapRealVector1.getDimension());
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      double double1 = openMapRealVector1.getLInfDistance((RealVector) openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1583.0212343159703, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 1583.0212343159703, 1583.0212343159703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(21, openMapRealVector0.getDimension());
      assertEquals(0.09523809523809523, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(21, openMapRealVector1.getDimension());
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(double1 == double0);
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NaN;
      doubleArray0[5] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[5]);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      
      double double1 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(21, openMapRealVector0.getDimension());
      
      double double0 = openMapRealVector0.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(21, openMapRealVector0.getDimension());
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 2164;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2164, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(2164, arrayRealVector0.getDimension());
      assertEquals(4682896.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2164.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(100666.71219425018, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) arrayRealVector0);
      assertEquals(4682896.0, double0, 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2164, openMapRealVector0.getDimension());
      assertEquals(2164, arrayRealVector0.getDimension());
      assertEquals(4682896.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2164.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(100666.71219425018, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test23()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      double[] doubleArray0 = new double[11];
      double double0 = (-12.378263252);
      doubleArray0[10] = double0;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-12.378263252)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(11, openMapRealVector1.getDimension());
      assertEquals(0.09090909090909091, openMapRealVector1.getSparcity(), 0.01D);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      double double1 = openMapRealVector0.getL1Distance(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(12.378263252, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-12.378263252)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(11, openMapRealVector1.getDimension());
      assertEquals(0.09090909090909091, openMapRealVector1.getSparcity(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[1]);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      
      double double0 = openMapRealVector0.getL1Distance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
  }

  @Test
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double double0 = openMapRealVector0.getDistance(doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-27);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(-27, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double double0 = openMapRealVector0.getDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(-27, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      
      double double0 = openMapRealVector0.getDistance((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int int0 = (-46);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(-46, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAcos();
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(4.967294132898051, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(15.707963267948966, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1.5707963267948966, arrayRealVector1.getLInfNorm(), 0.01D);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector((RealVector) arrayRealVector1);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(4.967294132898051, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(15.707963267948966, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1.5707963267948966, arrayRealVector1.getLInfNorm(), 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      
      double double0 = openMapRealVector0.getDistance(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(4.967294132898051, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(4.967294132898051, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(15.707963267948966, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1.5707963267948966, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(-46, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test29()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      double double0 = 12.73735151795525;
      Double double1 = new Double(double0);
      assertEquals(12.73735151795525, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[1];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[2];
      doubleArray0[6] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      
      double double2 = openMapRealVector0.getDistance(openMapRealVector0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector0.getDimension());
      assertFalse(double2 == double0);
  }

  @Test
  public void test30()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      double[] doubleArray0 = new double[8];
      double double0 = 617.14396652313;
      doubleArray0[3] = double0;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 617.14396652313, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.125, openMapRealVector1.getSparcity(), 0.01D);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      double[] doubleArray1 = openMapRealVector1.toArray();
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 617.14396652313, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 617.14396652313, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0.125, openMapRealVector1.getSparcity(), 0.01D);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.25, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapAddToSelf(doubleArray0[0]);
      assertNotNull(openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      
      int int0 = 1;
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.getSubVector(int0, int0);
      assertNotNull(openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertNotSame(openMapRealVector3, openMapRealVector2);
      assertSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector3.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector3.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
  }

  @Test
  public void test32()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      
      double[] doubleArray0 = new double[8];
      double double0 = 617.14396652313;
      doubleArray0[3] = double0;
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 617.14396652313, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.125, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.ebeMultiply(doubleArray0);
      assertNotNull(openMapRealVector2);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 617.14396652313, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.125, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(0.125, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[3]);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NaN;
      doubleArray0[5] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.ebeDivide(doubleArray0);
      //  // Unstable assertion: assertNotNull(openMapRealVector1);
      //  // Unstable assertion: assertNotSame(openMapRealVector1, openMapRealVector0);
      //  // Unstable assertion: assertNotSame(openMapRealVector0, openMapRealVector1);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(6, openMapRealVector1.getDimension());
      //  // Unstable assertion: assertEquals(0.16666666666666666, openMapRealVector1.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      //  // Unstable assertion: assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      //  // Unstable assertion: assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 565;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) int0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 565.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.subtract(doubleArray0);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 565.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.projection(doubleArray0);
      assertNotNull(openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 565.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.16666666666666666, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector2.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test36()  throws Throwable  {
      double double0 = Double.NaN;
      double[] doubleArray0 = new double[6];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      //  // Unstable assertion: assertNotNull(openMapRealVector0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      //  // Unstable assertion: assertEquals(6, openMapRealVector0.getDimension());
      
      RealVector realVector0 = null;
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(realVector0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[2];
      doubleArray0[5] = double1;
      doubleArray0[6] = doubleArray0[0];
      doubleArray0[7] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) double1);
      assertNotNull(openMapRealVector0);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(16, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(double1.equals((Object)double0));
  }

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 853.92892624761;
      doubleArray0[1] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 853.92892624761, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) doubleArray0[2];
      doubleArray1[1] = (Double) doubleArray0[0];
      doubleArray1[2] = (Double) double0;
      doubleArray1[3] = (Double) doubleArray0[4];
      doubleArray1[4] = (Double) double0;
      OpenMapRealVector openMapRealVector1 = new OpenMapRealVector(doubleArray1, (double) doubleArray1[4]);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(0.4, openMapRealVector1.getSparcity(), 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.add(openMapRealVector1);
      assertNotNull(openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 853.92892624761, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(0.4, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.2, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.6, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector2.getDimension());
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 1592;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1592, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.add((RealVector) openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1592, openMapRealVector0.getDimension());
      assertEquals(1592, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 2164;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(2164, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4682896.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2164.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(100666.71219425018, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2164, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)openMapRealVector0.add((RealVector) arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4682896.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2164.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(100666.71219425018, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2164, arrayRealVector0.getDimension());
      assertEquals(2164, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(100666.71219425018, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(4682896.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(2164.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(2164, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test
  public void test41()  throws Throwable  {
      double double0 = (-727.0839249371253);
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = (Double) double0;
      doubleArray0[1] = (Double) double0;
      doubleArray0[2] = (Double) double0;
      doubleArray0[3] = (Double) double0;
      doubleArray0[4] = (Double) double0;
      doubleArray0[5] = (Double) double0;
      doubleArray0[6] = doubleArray0[5];
      doubleArray0[7] = (Double) double0;
      doubleArray0[8] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(6543.755324434129, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2181.251774811376, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(727.0839249371253, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapUlp();
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(3.410605131648481E-13, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1.0231815394945443E-12, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(1.1368683772161603E-13, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(6543.755324434129, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2181.251774811376, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(727.0839249371253, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector1);
      assertNotNull(openMapRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3.410605131648481E-13, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1.0231815394945443E-12, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(1.1368683772161603E-13, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(6543.755324434129, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2181.251774811376, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(727.0839249371253, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
  }

  @Test
  public void test42()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test
  public void test43()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      
      double double2 = openMapRealVector0.getSparcity();
      assertEquals(1.0, double2, 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertFalse(double2 == double0);
  }

  @Test
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAcos();
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(4.967294132898051, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(15.707963267948966, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector1);
      assertNotNull(openMapRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(4.967294132898051, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(15.707963267948966, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      
      ArrayRealVector arrayRealVector2 = (ArrayRealVector)openMapRealVector0.projection((RealVector) arrayRealVector0);
      assertNotNull(arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(10, arrayRealVector2.getDimension());
      assertEquals(true, arrayRealVector2.isNaN());
      assertEquals(Double.NaN, arrayRealVector2.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(4.967294132898051, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(15.707963267948966, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
  }

  @Test
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(19, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector.OpenMapSparseIterator openMapRealVector_OpenMapSparseIterator0 = openMapRealVector0.new OpenMapSparseIterator();
      assertNotNull(openMapRealVector_OpenMapSparseIterator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(19, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      // Undeclared exception!
      try {
        openMapRealVector_OpenMapSparseIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
      }
  }
}
