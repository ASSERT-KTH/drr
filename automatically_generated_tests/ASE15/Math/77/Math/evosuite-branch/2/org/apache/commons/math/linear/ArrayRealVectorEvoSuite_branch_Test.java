/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:11:46 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.linear.AbstractRealVector;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.MatrixIndexException;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.junit.runner.RunWith;

 
public class ArrayRealVectorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      int int0 = arrayRealVector0.hashCode();
      assertEquals(1, int0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 648;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(648, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      boolean boolean0 = arrayRealVector0.equals((Object) openMapRealVector0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(648, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = arrayRealVector0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      
      String string0 = null;
      boolean boolean0 = arrayRealVector0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapLogToSelf();
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      
      ArrayRealVector arrayRealVector2 = arrayRealVector0.ebeMultiply(arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotNull(arrayRealVector2);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(true, arrayRealVector2.isInfinite());
      assertEquals(3, arrayRealVector2.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector2.getL1Norm(), 0.01D);
      
      boolean boolean1 = arrayRealVector0.equals((Object) arrayRealVector2);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(true, arrayRealVector2.isInfinite());
      assertEquals(3, arrayRealVector2.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector2.getL1Norm(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 1285;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1285, arrayRealVector0.getDimension());
      assertEquals(1651225.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1285.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(46063.26220536275, arrayRealVector0.getNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapExpToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(1285, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1285, arrayRealVector0.getDimension());
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertSame(arrayRealVector0, arrayRealVector1);
      assertTrue(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1285, arrayRealVector0.getDimension());
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.projection(arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      
      boolean boolean1 = arrayRealVector1.isInfinite();
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 1203;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(1203, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      boolean boolean0 = arrayRealVector0.isInfinite();
      assertFalse(boolean0);
      assertEquals(1203, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.projection(arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      
      int int0 = arrayRealVector1.hashCode();
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(9, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 83;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(83, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(83, openMapRealVector0.getDimension());
      
      // Undeclared exception!
      try {
        arrayRealVector0.setSubVector(int0, (RealVector) openMapRealVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 83 out of allowed range [0, 82]
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      
      int int0 = (-1787);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(-1787, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      arrayRealVector0.setSubVector(int0, (RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(-1787, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(30, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(30, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(30, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(30, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(30, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(30, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(30, array2DRowRealMatrix0.getRowDimension());
  }

  @Test
  public void test12()  throws Throwable  {
      Double[] doubleArray0 = new Double[19];
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      try {
        arrayRealVector0.unitize();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // cannot normalize a zero norm vector
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      try {
        RealVector realVector0 = arrayRealVector0.unitVector();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCoshToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(1.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector2 = (ArrayRealVector)arrayRealVector0.unitVector();
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector2.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector2));
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotNull(arrayRealVector2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1.0, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector2.getDimension());
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(1.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double double0 = arrayRealVector0.getLInfDistance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      
      double double1 = arrayRealVector0.getDistance((RealVector) openMapRealVector0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) double0;
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[2] = (Double) doubleArray0[0];
      doubleArray1[3] = (Double) double0;
      doubleArray1[4] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray1[3]);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      
      try {
        double double1 = arrayRealVector0.getDistance((RealVector) openMapRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 5 but expected 4
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((double) int0);
      assertEquals(0.0, (double)double0, 0.01D);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      double double1 = arrayRealVector0.getLInfNorm();
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) double0;
      doubleArray1[1] = doubleArray1[0];
      doubleArray1[2] = (Double) doubleArray0[0];
      doubleArray1[3] = (Double) double0;
      doubleArray1[4] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray1);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      double double1 = arrayRealVector0.getL1Norm();
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 83;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(83, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(83, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapLog10ToSelf();
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
      assertEquals(83, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(83, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double double0 = arrayRealVector0.dotProduct((RealVector) openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(83, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(83, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.ebeDivide(doubleArray0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.ebeDivide((RealVector) openMapRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 1203;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1203, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.ebeMultiply((RealVector) arrayRealVector0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1203, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1203, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.ebeMultiply((RealVector) openMapRealVector0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
  }

  @Test
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapUlpToSelf();
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4.9E-324, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4.9E-323, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4.9E-324, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(4.9E-323, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSignum();
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(5, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(30, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapRint();
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(30, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(30, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapFloorToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(16, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 1285;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(1285.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1651225.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1285, arrayRealVector0.getDimension());
      assertEquals(46063.26220536275, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCbrt();
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(389.71992149116346, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(13970.249751206296, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(10.87178968965501, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(1285, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1285.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1651225.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1285, arrayRealVector0.getDimension());
      assertEquals(46063.26220536275, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSqrt();
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAbsToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
  }

  @Test
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapInv();
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
  }

  @Test
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAtanToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(12, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAsin();
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(12, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(12, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
  }

  @Test
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAcosToSelf();
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966}, doubleArray0, 0.01);
      assertEquals(6.283185307179587, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(25.132741228718352, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(16, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(6.283185307179587, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(25.132741228718352, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1.5707963267948966, arrayRealVector1.getLInfNorm(), 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(12, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapTanToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(12, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(12, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSinToSelf();
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
  }

  @Test
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCosToSelf();
      assertSame(arrayRealVector0, arrayRealVector1);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(4.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 1285;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(1651225.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(46063.26220536275, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1285.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1285, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapTanh();
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(1651225.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(46063.26220536275, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1285.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1285, arrayRealVector0.getDimension());
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(1285.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(1285, arrayRealVector1.getDimension());
      assertEquals(35.84689665786984, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
  }

  @Test
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(doubleArray0, arrayRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector2 = (ArrayRealVector)arrayRealVector1.mapSinhToSelf();
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertSame(arrayRealVector2, arrayRealVector1);
      assertNotNull(arrayRealVector2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(0.0, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector2.getDimension());
      assertEquals(0.0, arrayRealVector2.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector2.getNorm(), 0.01D);
  }

  @Test
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapLog1pToSelf();
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
  }

  @Test
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapLog10();
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(16, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(true, arrayRealVector1.isInfinite());
  }

  @Test
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapExpm1();
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapPow(doubleArray0[3]);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(16.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(4.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(16, arrayRealVector1.getDimension());
  }

  @Test
  public void test45()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double double0 = (-2513.88);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-2513.88), (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2513.88, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2513.88, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2513.88, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      arrayRealVector0.unitize();
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1466.4999852321582;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSubtractToSelf(double0);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {(-1466.4999852321582), (-1466.4999852321582), (-1466.4999852321582), (-1466.4999852321582), (-1466.4999852321582), (-1466.4999852321582), (-1466.4999852321582), (-1466.4999852321582), (-1466.4999852321582)}, doubleArray0, 0.01);
      assertEquals(4399.499955696474, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(13198.499867089424, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(9, arrayRealVector1.getDimension());
      assertEquals(1466.4999852321582, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(13198.499867089424, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1466.4999852321582, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4399.499955696474, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1466.4999852321582;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAdd(double0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(13198.499867089424, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1466.4999852321582, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(4399.499955696474, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(9, arrayRealVector1.getDimension());
  }

  @Test
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[2]);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.subtract((RealVector) openMapRealVector0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test49()  throws Throwable  {
      int int0 = 1903;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) int0;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {1903.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1903.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1903.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1903.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {1903.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.add((RealVector) openMapRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {1903.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3806.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(3806.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(3806.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(0.1, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1903.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1903.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1903.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
  }

  @Test
  public void test50()  throws Throwable  {
      int int0 = 648;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(648, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector((RealVector) openMapRealVector0, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(650, arrayRealVector1.getDimension());
      assertEquals(648, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test
  public void test51()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double double0 = (-2513.88);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-2513.88), (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(2513.88, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2513.88, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2513.88, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, arrayRealVector0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(2513.88, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2513.88, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2513.88, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2513.88, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(5027.76, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(2, arrayRealVector1.getDimension());
      assertEquals(3555.1631901784763, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
  }

  @Test
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0, boolean0);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(2, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test53()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      int int0 = 1;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      int int0 = 4767;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // position 4,767 and size 4,767 dont fit to the size of the input array {2}
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = 4001;
      ArrayRealVector arrayRealVector0 = null;
      try {
        arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // position 4,001 and size 4,001 dont fit to the size of the input array {2}
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[16];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      double double0 = arrayRealVector0.getL1Distance((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test58()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double double0 = (-2513.88);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-2513.88), (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2513.88, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2513.88, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2513.88, arrayRealVector0.getNorm(), 0.01D);
      
      arrayRealVector0.set((double) double1);
      assertTrue(double1.equals((Object)double0));
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2513.88, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2513.88, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(2513.88, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test59()  throws Throwable  {
      int int0 = 0;
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double((double) int0);
      assertEquals(0.0, (double)double0, 0.01D);
      
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.append((RealVector) arrayRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
  }

  @Test
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.append(doubleArray0[2]);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(17, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = new ArrayRealVector(arrayRealVector0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
  }

  @Test
  public void test62()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      double double0 = (-134.0);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-134.0), (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[1];
      doubleArray0[4] = doubleArray0[1];
      doubleArray0[5] = doubleArray0[3];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(328.2316255329459, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(804.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(134.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6, arrayRealVector0.getDimension());
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try {
        RealVector realVector0 = arrayRealVector0.projection(doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test63()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      
      int int0 = 0;
      arrayRealVector0.setSubVector(int0, (RealVector) arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test64()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double double0 = (-2513.88);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-2513.88), (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2513.88, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2513.88, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2513.88, arrayRealVector0.getL1Norm(), 0.01D);
      
      String string0 = arrayRealVector0.toString();
      assertNotNull(string0);
      assertEquals("{-2,513.88}", string0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2513.88, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2513.88, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2513.88, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      double double0 = arrayRealVector0.getDistance((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test66()  throws Throwable  {
      double double0 = (-854.93253745);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) double0;
      doubleArray0[1] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(854.93253745, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1709.8650749, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1209.057189375834, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      
      double[] doubleArray1 = arrayRealVector0.getData();
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-854.93253745), (-854.93253745)}, doubleArray1, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(854.93253745, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1709.8650749, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1209.057189375834, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
  }

  @Test
  public void test67()  throws Throwable  {
      double double0 = (-854.93253745);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) double0;
      doubleArray0[1] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(1209.057189375834, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1709.8650749, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(854.93253745, arrayRealVector0.getLInfNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.projection((RealVector) arrayRealVector0);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(1209.057189375834, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(2, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(854.93253745, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(1709.8650749, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1209.057189375834, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(1709.8650749, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(854.93253745, arrayRealVector0.getLInfNorm(), 0.01D);
  }

  @Test
  public void test68()  throws Throwable  {
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      try {
        RealVector realVector0 = arrayRealVector0.ebeDivide((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector must have at least one element
         //
      }
  }

  @Test
  public void test69()  throws Throwable  {
      double double0 = (-854.93253745);
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) double0;
      doubleArray0[1] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(854.93253745, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1709.8650749, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1209.057189375834, arrayRealVector0.getNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.subtract((RealVector) arrayRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(2, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(854.93253745, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1709.8650749, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1209.057189375834, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test70()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.add((RealVector) arrayRealVector0);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
  }

  @Test
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      
      double[] doubleArray1 = arrayRealVector0.getDataRef();
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test
  public void test72()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = arrayRealVector0.new EntryImpl();
      assertNotNull(abstractRealVector_EntryImpl0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      abstractRealVector_EntryImpl0.setValue(doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test
  public void test73()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(30, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(30, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(30, openMapRealVector0.getDimension());
      
      double double0 = arrayRealVector0.getL1Distance((RealVector) openMapRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(30, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(30, openMapRealVector0.getDimension());
  }

  @Test
  public void test74()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      double double0 = arrayRealVector0.getLInfDistance((RealVector) arrayRealVector0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
  }

  @Test
  public void test75()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.append(doubleArray0);
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(2, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
  }

  @Test
  public void test76()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      double[] doubleArray0 = arrayRealVector0.toArray();
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }

  @Test
  public void test77()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(5, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(5, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
  }

  @Test
  public void test78()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.ebeMultiply(arrayRealVector0);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      
      boolean boolean1 = arrayRealVector0.equals((Object) arrayRealVector1);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(3, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
  }

  @Test
  public void test79()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double double0 = (-2513.88);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-2513.88), (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2513.88, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2513.88, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2513.88, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCeil();
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(2513.88, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2513.88, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2513.88, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(2513.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(2513.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(2513.0, arrayRealVector1.getL1Norm(), 0.01D);
  }

  @Test
  public void test80()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(30, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      
      int int0 = 1;
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.getSubVector(int0, int0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(30, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
  }

  @Test
  public void test81()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.append(arrayRealVector0);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
  }
}
