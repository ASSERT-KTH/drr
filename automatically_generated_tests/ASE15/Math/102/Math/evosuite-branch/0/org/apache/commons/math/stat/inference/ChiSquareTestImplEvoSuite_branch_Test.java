/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:22:44 GMT 2014
 */

package org.apache.commons.math.stat.inference;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.distribution.ChiSquaredDistribution;
import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
import org.apache.commons.math.distribution.DistributionFactoryImpl;
import org.apache.commons.math.stat.inference.ChiSquareTestImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ChiSquareTestImplEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[2][6];
      long[] longArray1 = new long[24];
      long long0 = (-3497L);
      longArray1[3] = long0;
      longArray0[0] = longArray1;
      assertNotNull(longArray0[0]);
      
      longArray0[1] = longArray1;
      assertNotNull(longArray0[1]);
      
      try {
        double double0 = chiSquareTestImpl0.chiSquareTest(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All entries in input 2-way table must be non-negative
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[7][1];
      long[] longArray1 = new long[3];
      longArray0[0] = longArray1;
      assertNotNull(longArray0[0]);
      
      try {
        double double0 = chiSquareTestImpl0.chiSquareTest(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input table must be rectangular
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      long[][] longArray0 = new long[24][6];
      long[] longArray1 = new long[1];
      longArray0[0] = longArray1;
      assertNotNull(longArray0[0]);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      try {
        double double0 = chiSquareTestImpl0.chiSquare(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input table must have at least two columns
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 138.2;
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0);
      assertNotNull(chiSquaredDistributionImpl0);
      assertEquals(138.2, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertNotNull(chiSquareTestImpl0);
      assertEquals(138.2, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      
      long[][] longArray0 = new long[1][2];
      try {
        double double1 = chiSquareTestImpl0.chiSquare(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input table must have at least two rows
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[2];
      long long0 = 1L;
      longArray0[1] = long0;
      long[] longArray1 = new long[2];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = longArray0[1];
      double double0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {1L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertEquals(0.15729920705028488, double0, 0.01D);
      
      boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray1, double0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {1L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[2];
      long long0 = 1L;
      longArray0[1] = long0;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, (double) longArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 1.0
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[3];
      double double0 = 0.0;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 0.0
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[2];
      long long0 = 1L;
      longArray0[1] = long0;
      long[] longArray1 = new long[2];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = longArray0[1];
      longArray1[1] = long0;
      double double0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertArrayEquals(new long[] {1L, 1L}, longArray1);
      assertEquals(0.3864762307712326, double0, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[2];
      long long0 = 1L;
      longArray0[1] = long0;
      try {
        double double0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must not both be zero
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[22];
      long long0 = (-396L);
      longArray0[13] = long0;
      try {
        double double0 = chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[4];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      try {
        double double0 = chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oberved1, observed2 array lengths incorrect
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      long[] longArray0 = new long[1];
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      try {
        double double0 = chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oberved1, observed2 array lengths incorrect
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[4][10];
      long long0 = 647L;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, (double) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 647.0
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[7][7];
      long long0 = (-555L);
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, (double) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: -555.0
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[4];
      double double0 = 1707.6527449841856;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      double double1 = 1.0E-5;
      doubleArray0[3] = double1;
      long[] longArray0 = new long[4];
      long long0 = 1178L;
      longArray0[0] = long0;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, doubleArray0[3]);
      assertArrayEquals(new long[] {1178L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new double[] {1707.6527449841856, 1707.6527449841856, 1707.6527449841856, 1.0E-5}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[4];
      double[] doubleArray0 = new double[4];
      double double0 = 4135.4;
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      double double1 = 1.0E-5;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, double1);
      assertFalse(double1 == double0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new double[] {4135.4, 4135.4, 4135.4, 4135.4}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[1];
      double double0 = 580.7415995611764;
      long[] longArray0 = new long[1];
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 580.7415995611764
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[8];
      long[] longArray0 = new long[3];
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, doubleArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 0.0
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[3];
      long long0 = 4L;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) long0;
      doubleArray0[0] = (double) long0;
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      doubleArray0[2] = (double) long0;
      double double0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0);
      assertArrayEquals(new long[] {4L, 4L, 4L}, longArray0);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0}, doubleArray0, 0.01);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      double double0 = 1.0;
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0);
      assertNotNull(chiSquaredDistributionImpl0);
      assertEquals(1.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertNotNull(chiSquareTestImpl0);
      assertEquals(1.0, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      long[] longArray0 = new long[4];
      long long0 = (-2144L);
      longArray0[1] = long0;
      try {
        double double1 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative and expected counts must be postive
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[4];
      double[] doubleArray0 = new double[7];
      try {
        double double0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed, expected array lengths incorrect
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[4];
      try {
        double double0 = chiSquareTestImpl0.chiSquare(doubleArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed, expected array lengths incorrect
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[7];
      double double0 = 0.11685595543116231;
      long[] longArray0 = new long[7];
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative and expected counts must be postive
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[11][7];
      double double0 = 0.5;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, double0);
      assertFalse(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      DistributionFactoryImpl distributionFactoryImpl0 = (DistributionFactoryImpl)chiSquareTestImpl0.getDistributionFactory();
      assertNotNull(distributionFactoryImpl0);
  }

  @Test
  public void test25()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[2];
      try {
        double double0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts cannot all be 0
         //
      }
  }
}
