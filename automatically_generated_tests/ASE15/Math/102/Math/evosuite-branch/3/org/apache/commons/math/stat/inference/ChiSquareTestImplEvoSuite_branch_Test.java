/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:53:37 GMT 2014
 */

package org.apache.commons.math.stat.inference;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.distribution.ChiSquaredDistribution;
import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
import org.apache.commons.math.distribution.DistributionFactoryImpl;
import org.apache.commons.math.distribution.GammaDistribution;
import org.apache.commons.math.distribution.GammaDistributionImpl;
import org.apache.commons.math.stat.inference.ChiSquareTestImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ChiSquareTestImplEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[7];
      long[][] longArray1 = new long[4][1];
      longArray1[0] = longArray0;
      assertNotNull(longArray1[0]);
      
      longArray1[1] = longArray0;
      assertNotNull(longArray1[1]);
      
      longArray1[2] = longArray0;
      assertNotNull(longArray1[2]);
      
      longArray1[3] = longArray0;
      assertNotNull(longArray1[3]);
      
      long long0 = (-14L);
      longArray0[0] = long0;
      try {
        double double0 = chiSquareTestImpl0.chiSquareTest(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All entries in input 2-way table must be non-negative
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 1559.1023123676534;
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0);
      assertEquals(1559.1023123676534, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(1559.1023123676534, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[9][7];
      long[] longArray1 = new long[1];
      longArray0[8] = longArray1;
      assertNotNull(longArray0[8]);
      
      double double1 = 1.580887032249125E-4;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input table must be rectangular
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[1][7];
      try {
        double double0 = chiSquareTestImpl0.chiSquare(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input table must have at least two rows
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[7];
      double double0 = 642.179204923797;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 642.179204923797
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[62];
      long long0 = (-29L);
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, (double) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: -29.0
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long long0 = 6L;
      long[] longArray0 = new long[10];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = longArray0[4];
      longArray0[6] = longArray0[3];
      longArray0[7] = longArray0[4];
      longArray0[8] = long0;
      longArray0[9] = long0;
      double double0 = 0.5;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, double0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L}, longArray0);
  }

  @Test
  public void test06()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[9];
      long long0 = 1L;
      longArray0[0] = long0;
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      longArray1[1] = long0;
      longArray1[7] = longArray0[0];
      try {
        double double0 = chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must not both be zero
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[8];
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      long long0 = (-606L);
      longArray1[4] = long0;
      try {
        double double0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 1459.366924;
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(double0, double0);
      assertEquals(1459.366924, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(1459.366924, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertNotNull(gammaDistributionImpl0);
      
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0, (GammaDistribution) gammaDistributionImpl0);
      assertEquals(729.683462, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(1459.366924, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(1459.366924, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(729.683462, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(1459.366924, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(1459.366924, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[6];
      long long0 = (-8L);
      longArray0[0] = long0;
      try {
        double double1 = chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[11];
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      try {
        double double0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oberved1, observed2 array lengths incorrect
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      long[] longArray0 = new long[1];
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      try {
        double double0 = chiSquareTestImpl0.chiSquareDataSetsComparison(longArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // oberved1, observed2 array lengths incorrect
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[35][1];
      long long0 = 1779L;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, (double) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 1779.0
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[15][1];
      double double0 = 0.0;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 0.0
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[7];
      long[][] longArray1 = new long[4][1];
      longArray1[0] = longArray0;
      assertNotNull(longArray1[0]);
      
      longArray1[1] = longArray0;
      assertNotNull(longArray1[1]);
      
      longArray1[2] = longArray0;
      assertNotNull(longArray1[2]);
      
      longArray1[3] = longArray0;
      assertNotNull(longArray1[3]);
      
      double double0 = 1.580887032249125E-4;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray1, double0);
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[2];
      double double0 = 1.0E-5;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      long[] longArray0 = new long[2];
      long long0 = 21L;
      longArray0[0] = long0;
      boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, double0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {21L, 0L}, longArray0);
      assertArrayEquals(new double[] {1.0E-5, 1.0E-5}, doubleArray0, 0.01);
  }

  @Test
  public void test15()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[2];
      double double0 = 1.0E-5;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      long[] longArray0 = new long[2];
      boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, doubleArray0[0]);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0E-5, 1.0E-5}, doubleArray0, 0.01);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      ChiSquaredDistribution chiSquaredDistribution0 = null;
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl(chiSquaredDistribution0);
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[4];
      long[] longArray0 = new long[1];
      long long0 = 464L;
      longArray0[0] = long0;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, (double) longArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 464.0
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[10];
      double double0 = 1.0E-6;
      doubleArray0[5] = double0;
      long[] longArray0 = new long[7];
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, doubleArray0[5]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed, expected array lengths incorrect
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[10];
      double double0 = 0.0;
      long[] longArray0 = new long[9];
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bad significance level: 0.0
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[2];
      long long0 = 2993L;
      double[] doubleArray0 = new double[5];
      longArray0[1] = long0;
      doubleArray0[0] = (double) long0;
      doubleArray0[1] = (double) longArray0[1];
      doubleArray0[2] = (double) long0;
      doubleArray0[3] = (double) long0;
      doubleArray0[4] = (double) long0;
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      longArray1[0] = long0;
      longArray1[1] = long0;
      longArray1[2] = long0;
      longArray1[3] = longArray1[1];
      longArray1[4] = long0;
      double double0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1.0, double0, 0.01D);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {2993L, 2993L, 2993L, 2993L, 2993L}, longArray1);
      assertArrayEquals(new double[] {2993.0, 2993.0, 2993.0, 2993.0, 2993.0}, doubleArray0, 0.01);
  }

  @Test
  public void test20()  throws Throwable  {
      double double0 = 1795.698;
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double0);
      assertEquals(1795.698, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl((ChiSquaredDistribution) chiSquaredDistributionImpl0);
      assertEquals(1795.698, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = doubleArray0[4];
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      doubleArray0[9] = double0;
      long[] longArray0 = new long[10];
      long long0 = 809L;
      doubleArray0[8] = (double) long0;
      long long1 = (-2060L);
      longArray0[7] = long1;
      try {
        double double1 = chiSquareTestImpl0.chiSquare(doubleArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative and expected counts must be postive
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      double[] doubleArray0 = new double[5];
      long[] longArray0 = new long[5];
      try {
        double double0 = chiSquareTestImpl0.chiSquareTest(doubleArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts must be non-negative and expected counts must be postive
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[2];
      double[] doubleArray0 = new double[1];
      try {
        double double0 = chiSquareTestImpl0.chiSquare(doubleArray0, longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed, expected array lengths incorrect
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[][] longArray0 = new long[4][1];
      double double0 = 1.580887032249125E-4;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTest(longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input table must have at least two columns
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      DistributionFactoryImpl distributionFactoryImpl0 = (DistributionFactoryImpl)chiSquareTestImpl0.getDistributionFactory();
      assertNotNull(distributionFactoryImpl0);
  }

  @Test
  public void test25()  throws Throwable  {
      ChiSquareTestImpl chiSquareTestImpl0 = new ChiSquareTestImpl();
      assertNotNull(chiSquareTestImpl0);
      
      long[] longArray0 = new long[10];
      double double0 = 0.5;
      try {
        boolean boolean0 = chiSquareTestImpl0.chiSquareTestDataSetsComparison(longArray0, longArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // observed counts cannot all be 0
         //
      }
  }
}
