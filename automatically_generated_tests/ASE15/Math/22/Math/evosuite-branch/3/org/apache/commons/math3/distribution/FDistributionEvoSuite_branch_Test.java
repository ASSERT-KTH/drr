/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:21:41 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.BetaDistribution;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.distribution.LogNormalDistribution;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FDistributionEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 329.0;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1.0061162079510704, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(329.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(329.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertNotNull(fDistribution0);
      
      double double1 = fDistribution0.sample();
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1.0061162079510704, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(329.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(329.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(1.1538988517983209, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = fDistribution0.sample();
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1.0061162079510704, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(329.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(329.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0368541560487625, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 329.0;
      FDistribution fDistribution0 = new FDistribution(double0, double0);
      assertEquals(329.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0061162079510704, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(329.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertNotNull(fDistribution0);
      
      double double1 = fDistribution0.getNumeratorDegreesOfFreedom();
      assertEquals(329.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0061162079510704, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(329.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(329.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = (-2030.0553831394502);
      assertFalse(double2 == double1);
      
      double double3 = fDistribution0.probability(double2, double1);
      assertEquals(329.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0061162079510704, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(329.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      
      FDistribution fDistribution1 = new FDistribution(double0, double3, double0);
      assertNotSame(fDistribution1, fDistribution0);
      assertNotSame(fDistribution0, fDistribution1);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution1.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution1.isSupportLowerBoundInclusive());
      assertEquals(true, fDistribution1.isSupportConnected());
      assertEquals(false, fDistribution1.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, fDistribution1.getNumericalMean(), 0.01D);
      assertEquals(329.0, fDistribution1.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution1.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, fDistribution1.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(329.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0061162079510704, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(329.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertNotNull(fDistribution1);
      assertFalse(fDistribution1.equals((Object)fDistribution0));
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(fDistribution0.equals((Object)fDistribution1));
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      
      double double4 = fDistribution1.sample();
      assertNotSame(fDistribution1, fDistribution0);
      assertNotSame(fDistribution0, fDistribution1);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution1.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution1.isSupportLowerBoundInclusive());
      assertEquals(true, fDistribution1.isSupportConnected());
      assertEquals(false, fDistribution1.isSupportUpperBoundInclusive());
      assertEquals(Double.NaN, fDistribution1.getNumericalMean(), 0.01D);
      assertEquals(329.0, fDistribution1.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution1.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, fDistribution1.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(329.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(1.0061162079510704, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(329.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(2.0, double4, 0.01D);
      assertFalse(fDistribution1.equals((Object)fDistribution0));
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(fDistribution0.equals((Object)fDistribution1));
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertTrue(double1 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 2442;
      Well19937c well19937c0 = new Well19937c(int0);
      assertNotNull(well19937c0);
      
      FDistribution fDistribution0 = new FDistribution((RandomGenerator) well19937c0, (double) int0, (double) int0, (double) int0);
      assertEquals(2442.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(2442.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0008196721311475, fDistribution0.getNumericalMean(), 0.01D);
      assertNotNull(fDistribution0);
      
      double double0 = well19937c0.nextGaussian();
      assertEquals((-0.47781331864552656), double0, 0.01D);
      
      double double1 = fDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(2442.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(2442.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1.0008196721311475, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(2442.0, double1, 0.01D);
      assertFalse(double1 == double0);
      
      FDistribution fDistribution1 = null;
      try {
        fDistribution1 = new FDistribution(double1, double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-0.478)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = (-2391.94411799318);
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-2,391.944)
         //
      }
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 1327.0955084;
      FDistribution fDistribution0 = new FDistribution(double0, double0, double0);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1327.0955084, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0015093251673721, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1327.0955084, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertNotNull(fDistribution0);
      
      double double1 = fDistribution0.density(double0);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(1327.0955084, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0015093251673721, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1327.0955084, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test5()  throws Throwable  {
      LogNormalDistribution logNormalDistribution0 = new LogNormalDistribution();
      assertEquals(true, logNormalDistribution0.isSupportConnected());
      assertEquals(0.0, logNormalDistribution0.getScale(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, logNormalDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, logNormalDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, logNormalDistribution0.getShape(), 0.01D);
      assertEquals(false, logNormalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, logNormalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(4.670774270471604, logNormalDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.6487212707001282, logNormalDistribution0.getNumericalMean(), 0.01D);
      assertNotNull(logNormalDistribution0);
      
      Well19937c well19937c0 = (Well19937c)logNormalDistribution0.random;
      assertEquals(true, logNormalDistribution0.isSupportConnected());
      assertEquals(0.0, logNormalDistribution0.getScale(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, logNormalDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, logNormalDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, logNormalDistribution0.getShape(), 0.01D);
      assertEquals(false, logNormalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, logNormalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(4.670774270471604, logNormalDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.6487212707001282, logNormalDistribution0.getNumericalMean(), 0.01D);
      assertNotNull(well19937c0);
      
      double double0 = 1969.453349004;
      FDistribution fDistribution0 = new FDistribution((RandomGenerator) well19937c0, double0, double0, double0);
      assertEquals(true, logNormalDistribution0.isSupportConnected());
      assertEquals(0.0, logNormalDistribution0.getScale(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, logNormalDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, logNormalDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, logNormalDistribution0.getShape(), 0.01D);
      assertEquals(false, logNormalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, logNormalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(4.670774270471604, logNormalDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.6487212707001282, logNormalDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0010165425274316, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1969.453349004, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1969.453349004, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertNotNull(fDistribution0);
      
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(true, logNormalDistribution0.isSupportConnected());
      assertEquals(0.0, logNormalDistribution0.getScale(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, logNormalDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, logNormalDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1.0, logNormalDistribution0.getShape(), 0.01D);
      assertEquals(false, logNormalDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, logNormalDistribution0.isSupportLowerBoundInclusive());
      assertEquals(4.670774270471604, logNormalDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(1.6487212707001282, logNormalDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0010165425274316, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1969.453349004, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(1969.453349004, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertFalse(boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 0.0;
      BetaDistribution betaDistribution0 = new BetaDistribution(double0, double0, double0);
      assertEquals(0.0, betaDistribution0.getBeta(), 0.01D);
      assertEquals(false, betaDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NaN, betaDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, betaDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, betaDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, betaDistribution0.isSupportConnected());
      assertEquals(Double.NaN, betaDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(false, betaDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, betaDistribution0.getAlpha(), 0.01D);
      assertNotNull(betaDistribution0);
      
      Well19937c well19937c0 = (Well19937c)betaDistribution0.random;
      assertEquals(0.0, betaDistribution0.getBeta(), 0.01D);
      assertEquals(false, betaDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NaN, betaDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, betaDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, betaDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, betaDistribution0.isSupportConnected());
      assertEquals(Double.NaN, betaDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(false, betaDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, betaDistribution0.getAlpha(), 0.01D);
      assertNotNull(well19937c0);
      
      double double1 = 1320.829472467895;
      FDistribution fDistribution0 = new FDistribution((RandomGenerator) well19937c0, double1, double1, double1);
      assertEquals(1320.829472467895, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1320.829472467895, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0015164962883771, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(0.0, betaDistribution0.getBeta(), 0.01D);
      assertEquals(false, betaDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NaN, betaDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, betaDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, betaDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, betaDistribution0.isSupportConnected());
      assertEquals(Double.NaN, betaDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(false, betaDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, betaDistribution0.getAlpha(), 0.01D);
      assertNotNull(fDistribution0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(1320.829472467895, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01D);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(false, fDistribution0.isSupportLowerBoundInclusive());
      assertEquals(1320.829472467895, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01D);
      assertEquals(1.0015164962883771, fDistribution0.getNumericalMean(), 0.01D);
      assertEquals(false, fDistribution0.isSupportUpperBoundInclusive());
      assertEquals(true, fDistribution0.isSupportConnected());
      assertEquals(0.0, betaDistribution0.getBeta(), 0.01D);
      assertEquals(false, betaDistribution0.isSupportLowerBoundInclusive());
      assertEquals(Double.NaN, betaDistribution0.getNumericalMean(), 0.01D);
      assertEquals(1.0, betaDistribution0.getSupportUpperBound(), 0.01D);
      assertEquals(0.0, betaDistribution0.getSupportLowerBound(), 0.01D);
      assertEquals(true, betaDistribution0.isSupportConnected());
      assertEquals(Double.NaN, betaDistribution0.getNumericalVariance(), 0.01D);
      assertEquals(false, betaDistribution0.isSupportUpperBoundInclusive());
      assertEquals(0.0, betaDistribution0.getAlpha(), 0.01D);
      assertFalse(boolean0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }
}
