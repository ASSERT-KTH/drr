/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:06:56 GMT 2014
 */

package org.apache.commons.math3.optimization.direct;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.ConvergenceChecker;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.SimplePointChecker;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CMAESOptimizerEvoSuite_branch_Test   {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       int int0 = 1052;
//       double[] doubleArray0 = new double[10];
//       CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
//       assertNotNull(cMAESOptimizer0);
//       assertNull(cMAESOptimizer0.getGoalType());
//       assertEquals(0, cMAESOptimizer0.getEvaluations());
//       assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
//       assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       
//       int int1 = cMAESOptimizer0.getMaxEvaluations();
//       assertEquals(0, int1);
//       assertNull(cMAESOptimizer0.getGoalType());
//       assertEquals(0, cMAESOptimizer0.getEvaluations());
//       assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
//       assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       
//       doubleArray0[1] = (double) int0;
//       boolean boolean0 = true;
//       Well1024a well1024a0 = new Well1024a();
//       assertNotNull(well1024a0);
//       
//       SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(doubleArray0[0], (double) int0);
//       assertNotNull(simplePointChecker0);
//       assertEquals(1052.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
//       assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
//       assertArrayEquals(new double[] {0.0, 1052.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       assertFalse(int0 == int1);
//       
//       CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int1, doubleArray0, int0, doubleArray0[8], boolean0, int1, int0, (RandomGenerator) well1024a0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
//       assertNotNull(cMAESOptimizer1);
//       assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
//       assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
//       assertNull(cMAESOptimizer1.getGoalType());
//       assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
//       assertEquals(0, cMAESOptimizer1.getEvaluations());
//       assertEquals(1052.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
//       assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
//       assertNull(cMAESOptimizer0.getGoalType());
//       assertEquals(0, cMAESOptimizer0.getEvaluations());
//       assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
//       assertArrayEquals(new double[] {0.0, 1052.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
//       assertFalse(int0 == int1);
//       assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
//       assertFalse(int1 == int0);
//       
//       double[][] doubleArray1 = new double[10][9];
//       doubleArray1[0] = doubleArray0;
//       assertNotNull(doubleArray1[0]);
//       
//       doubleArray1[1] = doubleArray0;
//       assertNotNull(doubleArray1[1]);
//       
//       doubleArray1[2] = doubleArray0;
//       assertNotNull(doubleArray1[2]);
//       
//       doubleArray1[3] = doubleArray0;
//       assertNotNull(doubleArray1[3]);
//       
//       doubleArray1[4] = doubleArray0;
//       assertNotNull(doubleArray1[4]);
//       
//       doubleArray1[5] = doubleArray0;
//       assertNotNull(doubleArray1[5]);
//       
//       doubleArray1[6] = doubleArray0;
//       assertNotNull(doubleArray1[6]);
//       
//       doubleArray1[7] = doubleArray0;
//       assertNotNull(doubleArray1[7]);
//       
//       doubleArray1[8] = doubleArray0;
//       assertNotNull(doubleArray1[8]);
//       
//       doubleArray1[9] = doubleArray0;
//       assertNotNull(doubleArray1[9]);
//       
//       UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
//       assertNotNull(unitSphereRandomVectorGenerator0);
//       assertFalse(int0 == int1);
//       
//       MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, int1, int1, unitSphereRandomVectorGenerator0);
//       assertNotNull(microsphereInterpolatingFunction0);
//       assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
//       assertNull(cMAESOptimizer0.getGoalType());
//       assertEquals(0, cMAESOptimizer0.getEvaluations());
//       assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
//       assertArrayEquals(new double[] {0.0, 1052.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       assertFalse(int0 == int1);
//       assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
//       assertFalse(int1 == int0);
//       
//       GoalType goalType0 = GoalType.MINIMIZE;
//       PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[1]);
//       assertNotNull(pointValuePair0);
//       assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
//       assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
//       assertEquals(1052, cMAESOptimizer1.getMaxEvaluations());
//       assertEquals(1053, cMAESOptimizer1.getEvaluations());
//       assertEquals(GoalType.MINIMIZE, cMAESOptimizer1.getGoalType());
//       assertEquals(1052.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
//       assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
//       assertNull(cMAESOptimizer0.getGoalType());
//       assertEquals(0, cMAESOptimizer0.getEvaluations());
//       assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
//       assertArrayEquals(new double[] {0.0, 1052.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
//       assertFalse(int0 == int1);
//       assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
//       assertFalse(int1 == int0);
//   }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 1050;
      double[] doubleArray0 = new double[10];
      doubleArray0[8] = (double) int0;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1050.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = 0;
      Well1024a well1024a0 = new Well1024a();
      //  // Unstable assertion: assertNotNull(well1024a0);
      
      double[][] doubleArray1 = new double[10][9];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[8]);
      
      doubleArray1[9] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[9]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0, (RandomGenerator) well1024a0);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[2], int1, int1, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[5], doubleArray0, doubleArray1[4]);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // 1,050 out of [0, 0] range
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 1050;
      double[] doubleArray0 = new double[10];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = cMAESOptimizer0.getMaxEvaluations();
      assertEquals(0, int1);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = (-924.1572228);
      doubleArray0[4] = double0;
      boolean boolean0 = true;
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(doubleArray0[0], (double) int1);
      assertNotNull(simplePointChecker0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-924.1572228), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int0, doubleArray0, int0, doubleArray0[8], boolean0, int0, int0, (RandomGenerator) well1024a0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotNull(cMAESOptimizer1);
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(0.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertNull(cMAESOptimizer1.getGoalType());
      assertEquals(0, cMAESOptimizer1.getEvaluations());
      assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-924.1572228), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(int1 == int0);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertFalse(int0 == int1);
      
      double[][] doubleArray1 = new double[10][9];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      doubleArray1[9] = doubleArray0;
      assertNotNull(doubleArray1[9]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, int0, int1, unitSphereRandomVectorGenerator0);
      assertNotNull(microsphereInterpolatingFunction0);
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-924.1572228), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -924.157 is smaller than the minimum (0)
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 498;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0);
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      
      int int1 = 0;
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[8][5];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[7]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[7], int1, int0, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[4]);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
      }
  }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       int int0 = 111;
//       double[] doubleArray0 = new double[4];
//       doubleArray0[0] = (double) int0;
//       CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
//       assertNotNull(cMAESOptimizer0);
//       assertNull(cMAESOptimizer0.getGoalType());
//       assertEquals(0, cMAESOptimizer0.getEvaluations());
//       assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
//       assertArrayEquals(new double[] {111.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       
//       int int1 = 2190;
//       double[][] doubleArray1 = new double[4][10];
//       doubleArray1[0] = doubleArray0;
//       assertNotNull(doubleArray1[0]);
//       
//       doubleArray1[1] = doubleArray0;
//       assertNotNull(doubleArray1[1]);
//       
//       doubleArray1[2] = doubleArray0;
//       assertNotNull(doubleArray1[2]);
//       
//       doubleArray1[3] = doubleArray0;
//       assertNotNull(doubleArray1[3]);
//       
//       int int2 = 0;
//       UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
//       assertNotNull(unitSphereRandomVectorGenerator0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       
//       MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[1], int2, int2, unitSphereRandomVectorGenerator0);
//       assertNotNull(microsphereInterpolatingFunction0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       
//       GoalType goalType0 = GoalType.MAXIMIZE;
//       PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[3]);
//       assertNotNull(pointValuePair0);
//       assertEquals(2191, cMAESOptimizer0.getEvaluations());
//       assertEquals(2190, cMAESOptimizer0.getMaxEvaluations());
//       assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
//       assertArrayEquals(new double[] {111.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//   }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 425;
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) int0;
      int int1 = 1156;
      boolean boolean0 = false;
      int int2 = 0;
      int[] intArray0 = new int[4];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      //  // Unstable assertion: assertNotNull(mersenneTwister0);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((double) intArray0[1], (double) int2);
      //  // Unstable assertion: assertNotNull(simplePointChecker0);
      //  // Unstable assertion: assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int1, (double) int1, boolean0, int1, int2, (RandomGenerator) mersenneTwister0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 425.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      
      double[][] doubleArray1 = new double[8][10];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray1[1];
      //  // Unstable assertion: assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[7]);
      
      double[] doubleArray2 = new double[8];
      //  // Unstable assertion: assertNotSame(doubleArray2, doubleArray0);
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray2, int2, int2, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      //  // Unstable assertion: assertNotSame(doubleArray2, doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[2]);
      //  // Unstable assertion: assertNotNull(pointValuePair0);
      //  // Unstable assertion: assertNotSame(doubleArray0, doubleArray2);
      //  // Unstable assertion: assertNotSame(doubleArray2, doubleArray0);
      //  // Unstable assertion: assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(426, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(1156, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 425.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(doubleArray2.equals((Object)doubleArray0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(doubleArray0.equals((Object)doubleArray2));
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[10];
      doubleArray0[8] = (double) int0;
      boolean boolean0 = false;
      int int1 = 0;
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(doubleArray0[0], (double) int0);
      assertNotNull(simplePointChecker0);
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(1.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int1, doubleArray0, int0, doubleArray0[8], boolean0, int1, int0, (RandomGenerator) well1024a0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(1.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = 222;
      double[][] doubleArray1 = new double[10][9];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      doubleArray1[9] = doubleArray1[6];
      assertNotNull(doubleArray1[9]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int2);
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, int0, int1, unitSphereRandomVectorGenerator0);
      assertNotNull(microsphereInterpolatingFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int2, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[1]);
      assertNotNull(pointValuePair0);
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(11, cMAESOptimizer0.getEvaluations());
      assertEquals(222, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(1.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 425;
      double[] doubleArray0 = new double[2];
      int int1 = 1156;
      boolean boolean0 = false;
      int int2 = 0;
      int[] intArray0 = new int[4];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertNotNull(mersenneTwister0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((double) intArray0[1], (double) int2);
      assertNotNull(simplePointChecker0);
      assertEquals(0.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int1, doubleArray0[0], boolean0, int1, int2, (RandomGenerator) mersenneTwister0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotNull(cMAESOptimizer0);
      assertEquals(0.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      double[][] doubleArray1 = new double[8][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray1[1];
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      double[] doubleArray2 = new double[8];
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray2, intArray0[1], int2, unitSphereRandomVectorGenerator0);
      assertNotNull(microsphereInterpolatingFunction0);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[2]);
      assertNotNull(pointValuePair0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(426, cMAESOptimizer0.getEvaluations());
      assertEquals(1156, cMAESOptimizer0.getMaxEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 1052;
      double[] doubleArray0 = new double[10];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = cMAESOptimizer0.getMaxEvaluations();
      assertEquals(0, int1);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      doubleArray0[3] = (double) int0;
      boolean boolean0 = true;
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(doubleArray0[0], (double) int0);
      assertNotNull(simplePointChecker0);
      assertEquals(1052.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1052.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(int0 == int1);
      
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(int1, doubleArray0, int0, doubleArray0[8], boolean0, int1, int0, (RandomGenerator) well1024a0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotNull(cMAESOptimizer1);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertEquals(0, cMAESOptimizer1.getEvaluations());
      assertEquals(0, cMAESOptimizer1.getMaxEvaluations());
      assertNull(cMAESOptimizer1.getGoalType());
      assertEquals(1052.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1052.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double[][] doubleArray1 = new double[10][9];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      doubleArray1[9] = doubleArray0;
      assertNotNull(doubleArray1[9]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1);
      assertNotNull(unitSphereRandomVectorGenerator0);
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1052.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, int1, int1, unitSphereRandomVectorGenerator0);
      assertNotNull(microsphereInterpolatingFunction0);
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1052.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer1.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[1]);
      assertNotNull(pointValuePair0);
      assertNotSame(cMAESOptimizer1, cMAESOptimizer0);
      assertNotSame(cMAESOptimizer0, cMAESOptimizer1);
      assertEquals(1052, cMAESOptimizer1.getMaxEvaluations());
      assertEquals(131, cMAESOptimizer1.getEvaluations());
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer1.getGoalType());
      assertEquals(1052.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1052.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
      assertFalse(cMAESOptimizer0.equals((Object)cMAESOptimizer1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 425;
      double[] doubleArray0 = new double[2];
      boolean boolean0 = false;
      int[] intArray0 = new int[4];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertNotNull(mersenneTwister0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((double) intArray0[1], (double) int0);
      assertNotNull(simplePointChecker0);
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(425.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int0, (double) int0, boolean0, int0, int0, (RandomGenerator) mersenneTwister0, boolean0, (ConvergenceChecker<PointValuePair>) simplePointChecker0);
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(425.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertNotNull(list0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0.0, simplePointChecker0.getRelativeThreshold(), 0.01D);
      assertEquals(425.0, simplePointChecker0.getAbsoluteThreshold(), 0.01D);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1052;
      double[] doubleArray0 = new double[10];
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertNotNull(cMAESOptimizer0);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertNotNull(list0);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 498;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 498;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0);
      assertNotNull(cMAESOptimizer0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertNotNull(list0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }
}
