/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:09:19 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FastMathEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      float float0 = (-1160.151F);
      double double0 = 0.0;
      double double1 = FastMath.atan2(double0, (double) float0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(3.141592653589793, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1.2246467991473532E-16, double2, 0.01D);
  }

  @Test
  public void test001()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.abs(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      int int0 = 0;
      int int1 = FastMath.getExponent(double1);
      assertTrue(double1 == double0);
      assertFalse(int1 == int0);
      assertTrue(double0 == double1);
      assertEquals((-1023), int1);
      
      float float0 = FastMath.copySign((float) int1, (float) int0);
      assertFalse(int0 == int1);
      assertTrue(double1 == double0);
      assertFalse(int1 == int0);
      assertTrue(double0 == double1);
      assertEquals(1023.0F, float0, 0.01F);
  }

  @Test
  public void test002()  throws Throwable  {
      int int0 = 276;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(276, int1);
      
      float float0 = FastMath.copySign((float) int1, (float) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(276.0F, float0, 0.01F);
  }

  @Test
  public void test003()  throws Throwable  {
      double double0 = (-5080.6338);
      double double1 = 2.1775261204E-314;
      double double2 = FastMath.copySign(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(5080.6338, double2, 0.01D);
  }

  @Test
  public void test004()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1922.958176272552);
      double double2 = FastMath.copySign(double0, double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test005()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.hypot(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test006()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 276;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(276, int1);
      
      double double1 = FastMath.hypot((double) int1, double0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(276.0, double1, 0.01D);
  }

  @Test
  public void test007()  throws Throwable  {
      float float0 = (-3888.0F);
      double double0 = FastMath.log10((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.hypot(double0, double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test008()  throws Throwable  {
      double double0 = 2.979288529962515E274;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.hypot(double0, double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test009()  throws Throwable  {
      double double0 = 2.979288529962515E274;
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.hypot(double1, double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test010()  throws Throwable  {
      int int0 = (-1);
      float float0 = 43.880257F;
      float float1 = FastMath.copySign(float0, (float) int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-43.880257F), float1, 0.01F);
      
      double double0 = FastMath.max((double) float1, (double) int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test011()  throws Throwable  {
      int int0 = (-1);
      int int1 = 0;
      int int2 = FastMath.min(int0, int1);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals((-1), int2);
      
      double double0 = FastMath.max((double) int1, (double) int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test012()  throws Throwable  {
      int int0 = (-1);
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = FastMath.max((double) int1, (double) int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test013()  throws Throwable  {
      int int0 = (-1);
      float float0 = FastMath.max((float) int0, (float) int0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test014()  throws Throwable  {
      float float0 = 1439.6897F;
      float float1 = FastMath.nextUp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1439.6898F, float1, 0.01F);
      
      int int0 = FastMath.round(float1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1440, int0);
      
      int int1 = (-898);
      assertFalse(int1 == int0);
      
      float float2 = FastMath.max((float) int1, (float) int0);
      assertFalse(int1 == int0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(int0 == int1);
      assertEquals(1440.0F, float2, 0.01F);
  }

  @Test
  public void test015()  throws Throwable  {
      int int0 = (-1);
      int int1 = 0;
      int int2 = FastMath.min(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals((-1), int2);
      
      float float0 = FastMath.max((float) int1, (float) int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test016()  throws Throwable  {
      double double0 = 1.7069074829463731E180;
      long long0 = FastMath.round(double0);
      assertEquals(9223372036854775807L, long0);
      
      int int0 = 0;
      long long1 = FastMath.max(long0, (long) int0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(9223372036854775807L, long1);
  }

  @Test
  public void test017()  throws Throwable  {
      float float0 = 1439.6897F;
      int int0 = FastMath.round(float0);
      assertEquals(1440, int0);
      
      int int1 = (-898);
      assertFalse(int1 == int0);
      
      int int2 = FastMath.max(int0, int1);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1440, int2);
  }

  @Test
  public void test018()  throws Throwable  {
      float float0 = -0.0F;
      double double0 = FastMath.min((double) float0, (double) float0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test019()  throws Throwable  {
      long long0 = 551L;
      int int0 = (-3567);
      int int1 = FastMath.round((float) long0);
      assertFalse(int1 == int0);
      assertEquals(551, int1);
      
      double double0 = FastMath.min((double) int0, (double) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-3567.0), double0, 0.01D);
  }

  @Test
  public void test020()  throws Throwable  {
      int int0 = (-1388);
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(-0.0F, float0, 0.01F);
      
      float float1 = FastMath.min(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(-0.0F, float1, 0.01F);
  }

  @Test
  public void test021()  throws Throwable  {
      float float0 = (-2354.3823F);
      float float1 = (-3593.88F);
      float float2 = FastMath.min(float1, float0);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertEquals((-3593.88F), float2, 0.01F);
  }

  @Test
  public void test022()  throws Throwable  {
      long long0 = 1854L;
      float float0 = 1863.6344F;
      float float1 = FastMath.min(float0, (float) long0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1854.0F, float1, 0.01F);
  }

  @Test
  public void test023()  throws Throwable  {
      float float0 = (-2354.3823F);
      float float1 = FastMath.min(float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals((-2354.3823F), float1, 0.01F);
  }

  @Test
  public void test024()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-3263L);
      long long2 = FastMath.min(long0, long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals((-3263L), long2);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = 885;
      int int1 = 0;
      int int2 = FastMath.min(int0, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test
  public void test026()  throws Throwable  {
      float float0 = 338.5F;
      double double0 = FastMath.rint((double) float0);
      assertEquals(338.0, double0, 0.01D);
  }

  @Test
  public void test027()  throws Throwable  {
      double double0 = (-2.2253590346826743E-8);
      double double1 = FastMath.rint(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test028()  throws Throwable  {
      double double0 = 0.8775825500488281;
      double double1 = FastMath.rint(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test029()  throws Throwable  {
      double double0 = (-1.8349670703969982E-34);
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test030()  throws Throwable  {
      double double0 = (-5080.6338);
      long long0 = FastMath.round(double0);
      assertEquals((-5081L), long0);
      
      double double1 = FastMath.ceil((double) long0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-5081.0), double1, 0.01D);
  }

  @Test
  public void test031()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextUp(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      
      double double0 = FastMath.floor((double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-3.4028234663852886E38), double0, 0.01D);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = 7.358873642076596E195;
      int int0 = 1245;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1245, int1);
      
      float float0 = FastMath.nextAfter((float) int1, double0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1245.0001F, float0, 0.01F);
  }

  @Test
  public void test033()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.rint(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      long long0 = 1L;
      long long1 = FastMath.max(long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(1L, long1);
      
      float float0 = FastMath.nextAfter((float) long1, double1);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(0.99999994F, float0, 0.01F);
  }

  @Test
  public void test034()  throws Throwable  {
      float float0 = (-2354.3823F);
      int int0 = (-183);
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(-0.0F, float1, 0.01F);
      
      float float2 = FastMath.nextAfter(float1, (double) int0);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertEquals((-1.4E-45F), float2, 0.01F);
  }

  @Test
  public void test035()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.min(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(0L, long1);
      
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, (double) long1);
      assertTrue(long1 == long0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertTrue(long0 == long1);
      assertEquals(3.4028235E38F, float1, 0.01F);
  }

  @Test
  public void test036()  throws Throwable  {
      double double0 = 1771.015026779753;
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
      
      int int0 = FastMath.getExponent(double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1024, int0);
      
      float float0 = FastMath.nextAfter((float) int0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test
  public void test037()  throws Throwable  {
      double double0 = (-1771.7);
      double double1 = FastMath.toDegrees(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals((-101510.93256332795), double1, 0.01D);
      
      float float0 = Float.NaN;
      float float1 = FastMath.nextAfter(float0, double1);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      double double0 = 1.3944901709366118E-206;
      double double1 = FastMath.nextUp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.394490170936612E-206, double1, 0.01D);
  }

  @Test
  public void test039()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.round(float0);
      assertEquals(0, int0);
      
      double double0 = FastMath.nextUp((double) float0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      double double1 = FastMath.nextAfter(double0, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test040()  throws Throwable  {
      double double0 = (-6.663542893624021E-14);
      double double1 = 0.0;
      double double2 = FastMath.nextAfter(double1, double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-4.9E-324), double2, 0.01D);
  }

  @Test
  public void test041()  throws Throwable  {
      double double0 = (-3330.8956513462854);
      double double1 = FastMath.nextUp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-3330.895651346285), double1, 0.01D);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = 2.979288529962515E274;
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.nextAfter(double1, double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.7976931348623157E308, double2, 0.01D);
  }

  @Test
  public void test043()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = (-620);
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
      
      double double0 = FastMath.log10((double) float1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.nextUp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.7976931348623157E308), double1, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      double double0 = 3.7730204737910044E260;
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.tan(double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals((-2.496387184897271), double2, 0.01D);
      
      double double3 = FastMath.nextAfter(double2, double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertTrue(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      float float0 = (-1160.151F);
      double double0 = FastMath.abs((double) float0);
      //  // Unstable assertion: assertEquals(1160.1510009765625, double0, 0.01D);
      
      float float1 = FastMath.copySign(float0, float0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals((-1160.151F), float1, 0.01F);
      
      double double1 = FastMath.asin(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.nextAfter(double1, (double) float1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test046()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = 276;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test047()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.getExponent((float) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-127), int1);
      
      float float0 = FastMath.nextUp((float) int0);
      assertFalse(int0 == int1);
      assertEquals(1.4E-45F, float0, 0.01F);
      
      float float1 = FastMath.scalb(float0, int1);
      assertFalse(int1 == int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(int0 == int1);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test048()  throws Throwable  {
      int int0 = (-1);
      int int1 = 0;
      int int2 = FastMath.min(int0, int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-1), int2);
      
      int int3 = FastMath.getExponent((float) int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-127), int3);
      
      float float0 = FastMath.nextUp((float) int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int0 == int3);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-0.99999994F), float0, 0.01F);
      
      float float1 = FastMath.scalb(float0, int3);
      assertFalse(float1 == float0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int0 == int3);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
      assertEquals((-5.877472E-39F), float1, 0.01F);
  }

  @Test
  public void test049()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = FastMath.scalb((float) int0, int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-7.464389E-37F), float1, 0.01F);
  }

  @Test
  public void test050()  throws Throwable  {
      int int0 = 276;
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(276, int1);
      
      float float0 = FastMath.scalb((float) int0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test
  public void test051()  throws Throwable  {
      float float0 = (-1101.609F);
      int int0 = 2047;
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      int int0 = (-1);
      int int1 = 0;
      int int2 = FastMath.min(int0, int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals((-1), int2);
      
      int int3 = FastMath.getExponent((float) int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-127), int3);
      
      float float0 = FastMath.scalb((float) int2, int3);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertTrue(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-5.877472E-39F), float0, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.signum(float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
      
      int int0 = 447;
      float float2 = FastMath.scalb(float1, int0);
      assertTrue(float1 == float0);
      assertTrue(float1 == float2);
      assertTrue(float0 == float2);
      assertTrue(float0 == float1);
      assertTrue(float2 == float1);
      assertTrue(float2 == float0);
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test
  public void test054()  throws Throwable  {
      int int0 = (-465);
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.scalb(float0, int0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
  }

  @Test
  public void test055()  throws Throwable  {
      int int0 = 885;
      float float0 = Float.NaN;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test056()  throws Throwable  {
      int int0 = 1154;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1154, int1);
      
      double double0 = FastMath.scalb((double) int1, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test057()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      int int0 = FastMath.getExponent(double0);
      assertEquals(1024, int0);
      
      double double1 = (-0.5433573497117696);
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals((-9.767897773538308E307), double2, 0.01D);
  }

  @Test
  public void test058()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.9E-324, double1, 0.01D);
      
      int int0 = 1500;
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.7329185588255093E128, double2, 0.01D);
  }

  @Test
  public void test059()  throws Throwable  {
      double double0 = (-1577.87816657);
      int int0 = (-1879);
      double double1 = FastMath.scalb(double0, int0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.hypot(double1, (double) int0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(1879.0, double2, 0.01D);
      
      int int1 = FastMath.max(int0, int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals((-1879), int1);
      
      double double3 = FastMath.scalb(double2, int1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test060()  throws Throwable  {
      double double0 = 1.7069074829463731E180;
      double double1 = 1.7809526920318604;
      double double2 = FastMath.min(double0, double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.7809526920318604, double2, 0.01D);
      
      int int0 = (-1037);
      double double3 = FastMath.scalb(double2, int0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertEquals(1.20933571725E-312, double3, 0.01D);
  }

  @Test
  public void test061()  throws Throwable  {
      double double0 = (-1157.09804799);
      double double1 = FastMath.copySign(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1157.09804799), double1, 0.01D);
      
      int int0 = (-1037);
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals((-7.85714300022054E-310), double2, 0.01D);
  }

  @Test
  public void test062()  throws Throwable  {
      double double0 = 1128.61;
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      int int0 = FastMath.getExponent(double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1023), int0);
      
      double double2 = FastMath.scalb((double) int0, int0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-1.1381252786264335E-305), double2, 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      double double0 = (-1577.87816657);
      int int0 = 1154;
      double double1 = FastMath.floor(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1578.0), double1, 0.01D);
      
      int int1 = FastMath.max(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(1154, int1);
      
      double double2 = FastMath.scalb(double1, int1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test064()  throws Throwable  {
      float float0 = 2021.49F;
      int int0 = 2811;
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test065()  throws Throwable  {
      double double0 = (-130.2168318399);
      int int0 = (-3567);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double1, 0.01D);
  }

  @Test
  public void test066()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.5707963267948966, double1, 0.01D);
      
      int int0 = (-3567);
      double double2 = FastMath.scalb(double1, int0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = FastMath.scalb(double2, int0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertTrue(double3 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertTrue(double0 == double3);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test
  public void test067()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      int int0 = 1096;
      double double2 = FastMath.scalb(double1, int0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test068()  throws Throwable  {
      double double0 = 1771.015026779753;
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      int int0 = 1783;
      double double2 = FastMath.scalb(double1, int0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test069()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.ulp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test070()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.abs(float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test071()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.abs(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      int int0 = FastMath.getExponent(double1);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1023), int0);
      
      float float0 = FastMath.ulp((float) int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(6.1035156E-5F, float0, 0.01F);
  }

  @Test
  public void test072()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = FastMath.abs(long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-9223372036854775808L), long1);
  }

  @Test
  public void test073()  throws Throwable  {
      int int0 = (-1);
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = FastMath.getExponent((float) int1);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      long long0 = FastMath.abs((long) int2);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test074()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.abs(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      int int0 = FastMath.getExponent(double1);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-1023), int0);
      
      int int1 = FastMath.abs(int0);
      assertFalse(int0 == int1);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(int1 == int0);
      assertEquals(1023, int1);
  }

  @Test
  public void test075()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toDegrees(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test076()  throws Throwable  {
      long long0 = 1L;
      long long1 = FastMath.max(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(1L, long1);
      
      int int0 = FastMath.getExponent((float) long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(0, int0);
      
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.scalb(float0, int0);
      assertTrue(float0 == float1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertTrue(float1 == float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      double double0 = FastMath.toDegrees((double) float1);
      assertTrue(float0 == float1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertTrue(float1 == float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test077()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toRadians(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test078()  throws Throwable  {
      double double0 = (-3330.8956513462854);
      double double1 = FastMath.abs(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3330.8956513462854, double1, 0.01D);
      
      double double2 = FastMath.toRadians(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(58.135096156353775, double2, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.toRadians((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      int int0 = 1245;
      double double0 = FastMath.cbrt((double) int0);
      assertEquals(10.757791359024742, double0, 0.01D);
  }

  @Test
  public void test081()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test082()  throws Throwable  {
      double double0 = 0.9985313415527344;
      double double1 = FastMath.sqrt(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.9992654009584913, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.038332466615738504, double2, 0.01D);
  }

  @Test
  public void test083()  throws Throwable  {
      double double0 = (-0.42872856954916216);
      double double1 = FastMath.acos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.013881301235435, double1, 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      float float0 = 1529.7F;
      float float1 = FastMath.signum(float0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1.0F, float1, 0.01F);
      
      double double0 = FastMath.acos((double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test085()  throws Throwable  {
      double double0 = (-546.7);
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(3.141592653589793, double2, 0.01D);
  }

  @Test
  public void test086()  throws Throwable  {
      int int0 = (-3567);
      double double0 = FastMath.acos((double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test087()  throws Throwable  {
      double double0 = (-0.1594306472996514);
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.1601138964865665), double1, 0.01D);
  }

  @Test
  public void test088()  throws Throwable  {
      double double0 = (-1.5707963267948966);
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.asin(double1);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test
  public void test089()  throws Throwable  {
      long long0 = 1854L;
      long long1 = FastMath.min(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(1854L, long1);
      
      int int0 = 0;
      double double0 = FastMath.pow((double) long1, int0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(double0 == double1);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test
  public void test090()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.asin((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      double double0 = (-1732.468);
      double double1 = FastMath.asin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      double double0 = (-3330.8956513462854);
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0450816726419803), double1, 0.01D);
      
      float float0 = 2223.17F;
      double double2 = FastMath.atan2(double1, (double) float0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-4.7008624279131877E-4), double2, 0.01D);
  }

  @Test
  public void test093()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      double double1 = FastMath.pow((double) long0, (double) long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(4.9E-324, double2, 0.01D);
      
      double double3 = FastMath.atan2(double1, double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(1.5707963267948966, double3, 0.01D);
  }

  @Test
  public void test094()  throws Throwable  {
      float float0 = (-1319.047F);
      float float1 = FastMath.ulp(float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.2207031E-4F, float1, 0.01F);
      
      long long0 = 0L;
      double double0 = FastMath.atan2((double) float1, (double) long0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(1.5707963267948966, double0, 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = 4.589506477601956E-9;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-19.199493339874394), double1, 0.01D);
      
      double double2 = Double.NEGATIVE_INFINITY;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double1, double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertEquals((-3.141592653589793), double3, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      float float0 = 775.0F;
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.atan2((double) float0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.141592653589793, double1, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      double double0 = 7.358873642076596E195;
      int int0 = 1245;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1245, int1);
      
      float float0 = FastMath.scalb((float) int0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double1 = FastMath.atan2(double0, (double) float0);
      assertFalse(double1 == double0);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
      assertTrue(int1 == int0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = (-1771.7);
      double double1 = FastMath.toDegrees(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-101510.93256332795), double1, 0.01D);
      
      int int0 = 1245;
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1245, int1);
      
      float float0 = FastMath.scalb((float) int0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double2 = FastMath.atan2(double1, (double) float0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(int0 == int1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(int1 == int0);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-2.356194490192345), double2, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.round(float0);
      assertEquals(0, int0);
      
      float float1 = Float.POSITIVE_INFINITY;
      float float2 = FastMath.ulp(float1);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
      
      double double0 = FastMath.atan2((double) float2, (double) int0);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertEquals(1.5707963267948966, double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.ceil(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.7853981633974483, double2, 0.01D);
  }

  @Test
  public void test102()  throws Throwable  {
      float float0 = (-2987.0F);
      int int0 = (-676);
      float float1 = FastMath.scalb(float0, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(-0.0F, float1, 0.01F);
      
      double double0 = FastMath.atan2((double) float1, (double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-3.141592653589793), double0, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan2(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      double double1 = FastMath.atan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.cbrt((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = (-179.0F);
      float float2 = FastMath.copySign(float0, float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertEquals(-0.0F, float2, 0.01F);
      
      double double0 = FastMath.tan((double) float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      int int0 = (-3567);
      double double0 = FastMath.cos((double) int0);
      assertEquals((-0.2748735184970016), double0, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test110()  throws Throwable  {
      float float0 = (-1160.151F);
      int int0 = 0;
      double double0 = FastMath.pow((double) float0, int0);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = FastMath.atan2(double0, (double) float0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(3.140730697041463, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(8.619564415959369E-4, double2, 0.01D);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = (-3330.8956513462854);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test112()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.sin((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test113()  throws Throwable  {
      double double0 = 9.286532888251822E105;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.9531450632285466, double1, 0.01D);
  }

  @Test
  public void test114()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      double double0 = FastMath.tan((double) long0);
      assertEquals((-84.73931296875567), double0, 0.01D);
  }

  @Test
  public void test115()  throws Throwable  {
      double double0 = (-3.0399439534134115E97);
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.7705642948921955, double1, 0.01D);
  }

  @Test
  public void test116()  throws Throwable  {
      double double0 = (-4.996854125490041E297);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.99338790012512), double1, 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      double double0 = 9.007199254740985E15;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.29278203901998023), double1, 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = (-7.049068240916723E166);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.9990271588391555, double1, 0.01D);
  }

  @Test
  public void test119()  throws Throwable  {
      long long0 = 6722166367014452318L;
      double double0 = FastMath.cos((double) long0);
      assertEquals((-0.17523241614880347), double0, 0.01D);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.5574077246549023, double2, 0.01D);
  }

  @Test
  public void test121()  throws Throwable  {
      int int0 = (-1);
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = FastMath.sin((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-0.8414709848078965), double0, 0.01D);
  }

  @Test
  public void test122()  throws Throwable  {
      double double0 = (-4.503599627370496E15);
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      int int0 = 447;
      double double2 = FastMath.pow(double1, int0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test123()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.signum(float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
      
      int int0 = FastMath.getExponent(float0);
      assertTrue(float0 == float1);
      assertEquals((-127), int0);
      
      double double0 = FastMath.pow((double) float1, int0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test124()  throws Throwable  {
      float float0 = (-2987.0F);
      int int0 = (-676);
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-676), int1);
      
      double double0 = FastMath.pow((double) int1, (double) float0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = (-2429.067);
      double double1 = FastMath.pow(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test126()  throws Throwable  {
      float float0 = (-476.0F);
      float float1 = FastMath.nextUp(float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertEquals((-475.99997F), float1, 0.01F);
      
      double double0 = FastMath.atanh((double) float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.pow((double) float1, double0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test127()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = (-3672.62193);
      double double1 = FastMath.pow(double0, (double) float0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test128()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.min(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = (-2039.2);
      assertFalse(double2 == double1);
      
      int int0 = 2856;
      double double3 = FastMath.scalb(double2, int0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.acos(double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertEquals(1.5707963267948966, double4, 0.01D);
      
      double double5 = FastMath.pow(double3, double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double5);
      assertFalse(double2 == double3);
      assertFalse(double5 == double2);
      assertFalse(double5 == double1);
      assertFalse(double5 == double3);
      assertFalse(double5 == double4);
      assertFalse(double5 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double5);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double5);
      assertFalse(double4 == double5);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double5);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertEquals(Double.POSITIVE_INFINITY, double5, 0.01D);
  }

  @Test
  public void test129()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.pow((double) float0, (double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test130()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = 3.5471180281159325E-219;
      double double1 = FastMath.pow(double0, (double) float0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test131()  throws Throwable  {
      double double0 = (-515.67784937874);
      float float0 = Float.POSITIVE_INFINITY;
      double double1 = FastMath.pow(double0, (double) float0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test132()  throws Throwable  {
      int int0 = 1154;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(1154, int1);
      
      double double0 = FastMath.expm1((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow(double0, double0);
      assertTrue(int0 == int1);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertTrue(int1 == int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test133()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 5.669184079525E-24;
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test134()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = (-179.0F);
      float float2 = FastMath.copySign(float0, float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertEquals(-0.0F, float2, 0.01F);
      
      double double0 = (-182.0);
      double double1 = FastMath.pow((double) float2, double0);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test135()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = (-179.0F);
      float float2 = FastMath.copySign(float0, float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(-0.0F, float2, 0.01F);
      
      double double0 = FastMath.pow((double) float2, (double) float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test136()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = (-510.3409269325);
      float float1 = (-179.0F);
      float float2 = FastMath.copySign(float0, float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertEquals(-0.0F, float2, 0.01F);
      
      double double1 = FastMath.atan(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals((-1.5688368548666565), double1, 0.01D);
      
      double double2 = FastMath.pow((double) float2, double1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test137()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = (-179.0F);
      float float2 = FastMath.copySign(float0, float1);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(-0.0F, float2, 0.01F);
      
      int int0 = 1883;
      double double0 = FastMath.pow((double) float2, (double) int0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test138()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-871.75576053);
      double double2 = FastMath.atan2(double1, double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      
      double double3 = FastMath.pow(double0, double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test139()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.abs(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test140()  throws Throwable  {
      long long0 = 0L;
      double double0 = FastMath.acos((double) long0);
      assertEquals(1.5707963267948966, double0, 0.01D);
      
      double double1 = FastMath.log1p(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.9442157056960554, double1, 0.01D);
  }

  @Test
  public void test141()  throws Throwable  {
      double double0 = (-3330.8956513462854);
      double double1 = FastMath.log1p(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test142()  throws Throwable  {
      int int0 = (-1);
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = FastMath.log1p((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test143()  throws Throwable  {
      double double0 = (-3330.8956513462854);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test144()  throws Throwable  {
      long long0 = 1L;
      double double0 = FastMath.log10((double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test145()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.exp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.log(double1);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test146()  throws Throwable  {
      double double0 = 544.9741929538019;
      double double1 = FastMath.min(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(544.9741929538019, double1, 0.01D);
      
      double double2 = FastMath.atan(double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.5689613795798076, double2, 0.01D);
      
      double double3 = FastMath.log10(double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertEquals(0.19561225343919406, double3, 0.01D);
  }

  @Test
  public void test147()  throws Throwable  {
      long long0 = 551L;
      long long1 = FastMath.max(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(551L, long1);
      
      double double0 = 0.678390383720398;
      double double1 = FastMath.pow(double0, (double) long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.3973506192949163E-93, double1, 0.01D);
  }

  @Test
  public void test148()  throws Throwable  {
      double double0 = 2.1775261204E-314;
      double double1 = 0.0;
      double double2 = FastMath.log(double0, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.log10(double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test
  public void test149()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.max(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(-0.0F, float1, 0.01F);
      
      double double0 = 2.1775261204E-314;
      double double1 = FastMath.log(double0, (double) float1);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log(double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test150()  throws Throwable  {
      double double0 = (-420.258948699793);
      double double1 = FastMath.signum(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
      
      float float0 = 0.0F;
      int int0 = FastMath.round(float0);
      assertEquals(0, int0);
      
      double double2 = FastMath.log((double) int0, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test
  public void test151()  throws Throwable  {
      double double0 = (-0.05786382363683538);
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.05622154099533868), double1, 0.01D);
  }

  @Test
  public void test152()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.expm1((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test153()  throws Throwable  {
      float float0 = (-709.56866F);
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals((-709.56866F), float1, 0.01F);
      
      double double0 = FastMath.expm1((double) float1);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test154()  throws Throwable  {
      double double0 = (-716.985);
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.143533864283E-312, double1, 0.01D);
  }

  @Test
  public void test155()  throws Throwable  {
      float float0 = (-711.1F);
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals((-711.1F), float1, 0.01F);
      
      double double0 = FastMath.expm1((double) float1);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test
  public void test156()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      assertEquals((-1023), int0);
      
      double double1 = FastMath.expm1((double) int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test157()  throws Throwable  {
      int int0 = (-1449);
      float float0 = FastMath.signum((float) int0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test158()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.signum((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test159()  throws Throwable  {
      double double0 = 1232.387234159;
      double double1 = FastMath.signum(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test160()  throws Throwable  {
      double double0 = 0.008333333333329196;
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.008333526242601714, double1, 0.01D);
  }

  @Test
  public void test161()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.03601556410444137, double1, 0.01D);
  }

  @Test
  public void test162()  throws Throwable  {
      double double0 = 0.125;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.12467674692144275, double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.1253288435278061, double2, 0.01D);
  }

  @Test
  public void test163()  throws Throwable  {
      double double0 = 2581.0;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.9835496508227513), double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-2.3961482839996378), double2, 0.01D);
  }

  @Test
  public void test164()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.atanh((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test165()  throws Throwable  {
      double double0 = 0.031;
      double double1 = FastMath.asinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.03099503697929222, double1, 0.01D);
  }

  @Test
  public void test166()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.asinh(double1);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test167()  throws Throwable  {
      float float0 = (-2354.3823F);
      int int0 = (-183);
      float float1 = FastMath.nextAfter(float0, (double) int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-2354.382F), float1, 0.01F);
      
      double double0 = FastMath.asinh((double) float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-8.457180811303411), double0, 0.01D);
  }

  @Test
  public void test168()  throws Throwable  {
      double double0 = (-2.2253590346826743E-8);
      double double1 = FastMath.tanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-2.225359034682674E-8), double1, 0.01D);
  }

  @Test
  public void test169()  throws Throwable  {
      double double0 = 0.8775825500488281;
      double double1 = FastMath.tanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.7052061769173689, double1, 0.01D);
  }

  @Test
  public void test170()  throws Throwable  {
      double double0 = (-1724.649);
      double double1 = FastMath.tanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test171()  throws Throwable  {
      int int0 = 2298;
      double double0 = FastMath.tanh((double) int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test172()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.copySign(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test
  public void test173()  throws Throwable  {
      double double0 = 3.5471180281159325E-219;
      double double1 = FastMath.sinh(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(3.5471180281159325E-219, double1, 0.01D);
  }

  @Test
  public void test174()  throws Throwable  {
      double double0 = 1.107980489730835;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.3490057393784511, double1, 0.01D);
  }

  @Test
  public void test175()  throws Throwable  {
      double double0 = 3591.24198802427;
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.39087770765246693), double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-0.4009074215457337), double2, 0.01D);
  }

  @Test
  public void test176()  throws Throwable  {
      int int0 = (-676);
      int int1 = FastMath.min(int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-676), int1);
      
      double double0 = FastMath.sinh((double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1.914431232872642E293), double0, 0.01D);
  }

  @Test
  public void test177()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sinh(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test178()  throws Throwable  {
      double double0 = 544.9741929538019;
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2.3892125308400896E236, double1, 0.01D);
  }

  @Test
  public void test179()  throws Throwable  {
      double double0 = 7.358873642076596E195;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test180()  throws Throwable  {
      double double0 = (-1771.7);
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test181()  throws Throwable  {
      double double0 = (-6.405698101518564);
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(302.6429265789534, double1, 0.01D);
  }

  @Test
  public void test182()  throws Throwable  {
      double double0 = (-515.67784937874);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4.518709573558728E223, double1, 0.01D);
  }

  @Test
  public void test183()  throws Throwable  {
      double double0 = (-1577.87816657);
      int int0 = (-1879);
      double double1 = FastMath.scalb(double0, int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.cosh(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test
  public void test184()  throws Throwable  {
      double double0 = 3460.15683;
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test
  public void test185()  throws Throwable  {
      double double0 = 544.9741929538019;
      double double1 = FastMath.min(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(544.9741929538019, double1, 0.01D);
      
      double double2 = FastMath.cosh(double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(2.3892125308400896E236, double2, 0.01D);
  }

  @Test
  public void test186()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.nextUp((double) float0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      double double1 = FastMath.toDegrees(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2.8E-322, double1, 0.01D);
  }

  @Test
  public void test187()  throws Throwable  {
      double double0 = (-3330.8956513462854);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.nextUp(double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test
  public void test188()  throws Throwable  {
      long long0 = 551L;
      long long1 = FastMath.max(long0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(551L, long1);
      
      double double0 = FastMath.acosh((double) long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(7.004881166262645, double0, 0.01D);
  }

  @Test
  public void test189()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
  }
}
