/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:05:55 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math.exception.NullArgumentException;
import org.apache.commons.math.exception.ZeroException;
import org.apache.commons.math.fraction.BigFraction;
import org.apache.commons.math.fraction.BigFractionField;
import org.apache.commons.math.fraction.FractionConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BigFractionEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(string0);
  }

  @Test
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      String string0 = bigFraction0.toString();
      assertEquals("4 / 5", string0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(string0);
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = 687L;
      BigFraction bigFraction0 = new BigFraction(long0);
      assertEquals(-81, bigFraction0.byteValue());
      assertEquals(687, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(686, bigFraction2.shortValue());
      assertEquals(-82, bigFraction2.byteValue());
      assertEquals(-81, bigFraction0.byteValue());
      assertEquals(687, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction2);
  }

  @Test
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = 0L;
      BigFraction bigFraction1 = new BigFraction(long0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotSame(bigFraction2, bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction2);
  }

  @Test
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigInteger bigInteger0 = BigInteger.valueOf(long0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = (-1804L);
      BigFraction bigFraction1 = bigFraction0.pow(long0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.pow((long) int0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = (-3645);
      BigFraction bigFraction1 = bigFraction0.pow(int0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = 0;
      BigFraction bigFraction1 = bigFraction0.multiply((long) int0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction2);
  }

  @Test
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertSame(bigFraction1, bigFraction0);
      assertSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      float float0 = bigFraction0.floatValue();
      assertEquals(0.5F, float0, 0.01F);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bigFraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(2, bigFraction0.shortValue());
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(1, bigFraction2.shortValue());
      assertEquals(1, bigFraction2.byteValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction2);
  }

  @Test
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = 0;
      BigFraction bigFraction1 = bigFraction0.multiply(int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertEquals(0, bigFraction2.byteValue());
      assertEquals(0, bigFraction2.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertNotSame(bigFraction2, bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertSame(bigFraction0, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotNull(bigFraction2);
  }

  @Test
  public void test17()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = null;
      // Undeclared exception!
      try {
        BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.abs();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertSame(bigFraction0, bigFraction1);
      assertSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = 2588L;
      BigFraction bigFraction0 = new BigFraction(long0);
      assertEquals(2588, bigFraction0.shortValue());
      assertEquals(28, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.divide(long0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(2588, bigFraction0.shortValue());
      assertEquals(28, bigFraction0.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
      
      BigFraction bigFraction2 = bigFraction1.subtract(long0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertEquals(-2587, bigFraction2.shortValue());
      assertEquals(-27, bigFraction2.byteValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(2588, bigFraction0.shortValue());
      assertEquals(28, bigFraction0.byteValue());
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotNull(bigFraction2);
      
      BigFraction bigFraction3 = bigFraction2.abs();
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertEquals(2587, bigFraction3.shortValue());
      assertEquals(27, bigFraction3.byteValue());
      assertEquals(-2587, bigFraction2.shortValue());
      assertEquals(-27, bigFraction2.byteValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(2588, bigFraction0.shortValue());
      assertEquals(28, bigFraction0.byteValue());
      assertNotSame(bigFraction3, bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertNotSame(bigFraction3, bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertNotSame(bigFraction2, bigFraction3);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction1, bigFraction3);
      assertNotSame(bigFraction1, bigFraction2);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction0, bigFraction3);
      assertNotSame(bigFraction0, bigFraction2);
      assertNotNull(bigFraction3);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 0;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(int0, int0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test22()  throws Throwable  {
      double double0 = 901.1;
      int int0 = 848;
      BigFraction bigFraction0 = new BigFraction(double0, int0);
      assertEquals(901, bigFraction0.shortValue());
      assertEquals(-123, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-65);
      double double0 = (-1070.28085232);
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(double0, (double) byteArray0[1], (int) byte0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -1,070.281 to fraction after -65 iterations
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = 276;
      BigFraction bigFraction1 = bigFraction0.pow(int0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
      
      int int1 = bigFraction1.getNumeratorAsInt();
      assertEquals(0, int1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((double) int0, (double) int1, int1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 276 to fraction (-275/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      long long0 = 2588L;
      BigFraction bigFraction0 = new BigFraction(long0);
      assertEquals(28, bigFraction0.byteValue());
      assertEquals(2588, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.divide(long0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(28, bigFraction0.byteValue());
      assertEquals(2588, bigFraction0.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
      
      byte byte0 = bigFraction1.byteValue();
      assertEquals((byte)1, byte0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(28, bigFraction0.byteValue());
      assertEquals(2588, bigFraction0.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((double) byte0, (int) byte0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      double double0 = (-1.0);
      BigFraction bigFraction0 = new BigFraction(double0);
      assertEquals(-1, bigFraction0.byteValue());
      assertEquals(-1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-2342);
      BigFraction bigFraction0 = new BigFraction(int0, int0);
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      // Undeclared exception!
      try {
        BigFraction bigFraction1 = bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = 2034;
      BigFraction bigFraction1 = bigFraction0.divide(int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(1, bigFraction0.shortValue());
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test30()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      assertEquals(4, bigInteger0.byteValue());
      assertEquals(4, bigInteger0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigInteger0);
  }

  @Test
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = (-3129);
      BigFraction bigFraction1 = bigFraction0.add(int0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(-3128, bigFraction1.shortValue());
      assertEquals(-56, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = (-820.145482906388);
      int int0 = 0;
      BigFraction bigFraction0 = new BigFraction(double0, int0);
      assertEquals(-821, bigFraction0.shortValue());
      assertEquals(-53, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      assertEquals(2, bigInteger0.byteValue());
      assertEquals(2, bigInteger0.shortValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigInteger0);
  }

  @Test
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      double double0 = bigFraction0.percentageValue();
      assertEquals(50.0, double0, 0.01D);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test37()  throws Throwable  {
      double double0 = 0.0;
      BigFraction bigFraction0 = new BigFraction(double0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte[] byteArray0 = new byte[5];
      double double1 = bigFraction0.pow((double) byteArray0[0]);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(2, int0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = BigFraction.getReducedFraction(int0, int0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(1, bigFraction1.byteValue());
      assertEquals(1, bigFraction1.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFractionField bigFractionField0 = bigFraction0.getField();
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFractionField0);
  }

  @Test
  public void test40()  throws Throwable  {
      double double0 = 13.522013718131113;
      int int0 = 2034;
      BigFraction bigFraction0 = new BigFraction(double0, double0, int0);
      assertEquals(13, bigFraction0.shortValue());
      assertEquals(13, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      byte byte0 = bigFraction0.byteValue();
      assertEquals((byte)0, byte0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue((int) byte0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(0, bigFraction1.shortValue());
      assertEquals(0, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.hashCode();
      assertEquals(23313, int0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test44()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = 276;
      BigFraction bigFraction1 = bigFraction0.subtract(int0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals(-275, bigFraction1.shortValue());
      assertEquals(-19, bigFraction1.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotSame(bigFraction1, bigFraction0);
      assertNotSame(bigFraction0, bigFraction1);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(5L, long0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
  }

  @Test
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(3L, long0);
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = (-2342);
      BigFraction bigFraction0 = new BigFraction(int0);
      assertEquals(-38, bigFraction0.byteValue());
      assertEquals(-2342, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertNotNull(bigFraction0);
      
      int int0 = 276;
      BigFraction bigFraction1 = bigFraction0.add((long) int0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals(0, bigFraction0.shortValue());
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(276, bigFraction1.shortValue());
      assertEquals(20, bigFraction1.byteValue());
      assertNotSame(bigFraction0, bigFraction1);
      assertNotSame(bigFraction1, bigFraction0);
      assertNotNull(bigFraction1);
  }

  @Test
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      assertEquals(2, bigFraction0.byteValue());
      assertEquals(2, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = 1346;
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      long long0 = 2588L;
      BigFraction bigFraction0 = new BigFraction(long0, long0);
      assertEquals(1, bigFraction0.byteValue());
      assertEquals(1, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
  }

  @Test
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
      assertNotNull(bigFraction0);
      
      int int0 = bigFraction0.compareTo(bigFraction0);
      assertEquals(0, int0);
      assertEquals(0, bigFraction0.byteValue());
      assertEquals(0, bigFraction0.shortValue());
  }
}
