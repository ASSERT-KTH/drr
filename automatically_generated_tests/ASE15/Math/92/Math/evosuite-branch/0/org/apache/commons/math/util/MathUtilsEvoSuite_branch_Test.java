/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:08:02 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.junit.runner.RunWith;

 
public class MathUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 3696;
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.subAndCheck((long) int0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      long long0 = (-2577L);
      long long1 = (-9223372036854775808L);
      long long2 = MathUtils.subAndCheck(long0, long1);
      assertEquals(9223372036854773231L, long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
  }

  @Test
  public void test02()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)0, short1);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = (-1989);
      long long0 = MathUtils.sign((long) int0);
      assertEquals((-1L), long0);
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.sign(long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 3447;
      long long0 = MathUtils.sign((long) int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 1;
      float float0 = MathUtils.sign((float) int0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test07()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = MathUtils.sign(float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test08()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test
  public void test09()  throws Throwable  {
      float float0 = (-1690.6782F);
      float float1 = MathUtils.sign(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 7;
      double double0 = MathUtils.sign((double) int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.sign((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      float float0 = Float.NaN;
      double double0 = MathUtils.sign((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      byte byte0 = (byte)3;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test14()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
  }

  @Test
  public void test15()  throws Throwable  {
      byte byte0 = (byte) (-50);
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test16()  throws Throwable  {
      float float0 = (-1690.6782F);
      int int0 = 20;
      float float1 = MathUtils.round(float0, int0);
      assertEquals((-1690.6783F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 276;
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertEquals(552, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = 6;
      assertFalse(int2 == int1);
      
      float float0 = MathUtils.round((float) int0, int1, int2);
      assertEquals(Float.NaN, float0, 0.01F);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 5;
      int int1 = (-10);
      float float0 = MathUtils.round((float) int0, int1, int0);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = (-4885L);
      int int0 = (-1989);
      byte byte0 = (byte)3;
      float float0 = MathUtils.round((float) long0, int0, (int) byte0);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 11;
      int int1 = 12;
      int int2 = 2158;
      int int3 = MathUtils.gcd(int1, int2);
      assertEquals(2, int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      float float0 = MathUtils.round((float) int3, int0, int3);
      assertEquals(2.0F, float0, 0.01F);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
  }

  @Test
  public void test21()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = 1555;
      // Undeclared exception!
      try {
        float float0 = MathUtils.round((float) byte0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 0;
      int int1 = 7;
      float float0 = MathUtils.round((float) int0, int1, int1);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = (-3578);
      int int1 = 6;
      float float0 = MathUtils.round((float) int0, int1, int1);
      assertEquals((-3577.9998F), float0, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 5;
      int int1 = 3;
      float float0 = MathUtils.round((float) int0, int1, int1);
      assertEquals(4.999F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test25()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator(short0);
      assertEquals((short)1, short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      float float0 = MathUtils.round((float) short0, (int) short1, (int) short1);
      assertEquals((-0.1F), float0, 0.01F);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 4;
      int int1 = MathUtils.subAndCheck(int0, int0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      float float0 = MathUtils.round((float) int0, int0, int1);
      assertEquals(4.0001F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 1;
      int int1 = 2110;
      double double0 = MathUtils.factorialDouble(int1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(int1 == int0);
      
      double double1 = MathUtils.round(double0, int1, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 3927;
      int int1 = MathUtils.sign(int0);
      //  // Unstable assertion: assertEquals(1, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      double double0 = Double.NaN;
      double double1 = MathUtils.round(double0, int1, int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(int0 == int1);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1312);
      int int2 = MathUtils.addAndCheck(int0, int1);
      assertEquals((-1312), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      
      double double0 = MathUtils.scalb((double) int2, int0);
      assertEquals((-1312.0), double0, 0.01D);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test30()  throws Throwable  {
      float float0 = (-1134.3358F);
      int int0 = 1348;
      float float1 = MathUtils.round(float0, int0);
      assertEquals(Float.NaN, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = MathUtils.scalb((double) float1, int0);
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test31()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      int int0 = 0;
      double double1 = MathUtils.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test32()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 4;
      double double1 = MathUtils.scalb(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      int int2 = MathUtils.hash((double) int0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      
      double double0 = MathUtils.sign((double) int1);
      assertEquals((-1.0), double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      double double1 = MathUtils.nextAfter(double0, (double) int2);
      assertEquals((-0.9999999999999999), double1, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(double0 == double1);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 3927;
      int int1 = MathUtils.sign(int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      int int3 = MathUtils.sign(int2);
      assertEquals(0, int3);
      assertTrue(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      long long0 = MathUtils.mulAndCheck((long) int1, (long) int3);
      assertEquals(0L, long0);
      assertTrue(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
  }

  @Test
  public void test35()  throws Throwable  {
      long long0 = 6402373705727981L;
      long long1 = (-3718L);
      // Undeclared exception!
      try {
        long long2 = MathUtils.mulAndCheck(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 3927;
      int int1 = MathUtils.sign(int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      long long0 = (-2164L);
      long long1 = MathUtils.indicator(long0);
      assertEquals((-1L), long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      
      long long2 = MathUtils.mulAndCheck((long) int1, long1);
      assertEquals((-1L), long2);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = (-1407);
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.mulAndCheck((long) int0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = 0;
      long long0 = (-1179L);
      long long1 = MathUtils.mulAndCheck((long) int0, long0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals((-1807454463), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long long0 = MathUtils.mulAndCheck((long) int0, (long) int0);
      assertEquals(3266891635818618369L, long0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 1185;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      int int1 = MathUtils.hash(double0);
      assertEquals(2146435072, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        int int2 = MathUtils.lcm(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 1348;
      int int1 = (-2760);
      int int2 = MathUtils.hash((double) int0);
      assertEquals(1083510784, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try {
        int int3 = MathUtils.lcm(int1, int2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      short short0 = (short) (-1580);
      short short1 = MathUtils.indicator(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.indicator((long) int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test44()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.indicator(short0);
      assertEquals((short)1, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      
      int int0 = MathUtils.indicator((int) short1);
      assertEquals(1, int0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = (-1);
      int int1 = MathUtils.indicator(int0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = 5;
      float float0 = Float.NaN;
      float float1 = MathUtils.round(float0, int0, int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test47()  throws Throwable  {
      double double0 = (-5254.51777672);
      double double1 = MathUtils.indicator(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test48()  throws Throwable  {
      double double0 = 27.349464249993;
      double double1 = (-1.0);
      double double2 = MathUtils.log(double0, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double3 = MathUtils.indicator(double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathUtils.indicator(doubleArray0[4]);
      assertEquals(1.0, double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test50()  throws Throwable  {
      byte byte0 = (byte) (-104);
      byte byte1 = MathUtils.indicator(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test51()  throws Throwable  {
      int int0 = 31;
      int int1 = 0;
      int int2 = MathUtils.lcm(int0, int1);
      assertEquals(0, int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test52()  throws Throwable  {
      int int0 = 4;
      double double0 = MathUtils.factorialLog(int0);
      assertEquals(3.1780538303479458, double0, 0.01D);
  }

  @Test
  public void test53()  throws Throwable  {
      int int0 = (-1312);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialLog(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      int int0 = 5;
      double double0 = MathUtils.factorialDouble(int0);
      assertEquals(120.0, double0, 0.01D);
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = (-10);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialDouble(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = (-833);
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = 1185;
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[8];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = 3.141592653589793;
      doubleArray1[0] = double0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.141592653589793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test60()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test63()  throws Throwable  {
      float float0 = Float.NaN;
      double double0 = 0.0;
      double double1 = MathUtils.nextAfter((double) float0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      boolean boolean0 = MathUtils.equals(double1, double0);
      assertFalse(boolean0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test64()  throws Throwable  {
      double double0 = Double.NaN;
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = double0;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test65()  throws Throwable  {
      short short0 = (short)35;
      int int0 = 1312;
      double double0 = MathUtils.binomialCoefficientLog(int0, (int) short0);
      assertEquals(158.68206904794573, double0, 0.01D);
  }

  @Test
  public void test66()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1312);
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test67()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test68()  throws Throwable  {
      int int0 = 11;
      int int1 = 1;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(2.3978952727983707, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test69()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test70()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientLog(int0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test71()  throws Throwable  {
      int int0 = (-567);
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientLog(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test72()  throws Throwable  {
      int int0 = 523;
      int int1 = 532;
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientLog(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test73()  throws Throwable  {
      int int0 = 523;
      int int1 = 5;
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(26.491240045660245, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test74()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test75()  throws Throwable  {
      int int0 = 1;
      int int1 = 2830;
      double double0 = MathUtils.binomialCoefficientDouble(int1, int0);
      assertEquals(2830.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test76()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test77()  throws Throwable  {
      int int0 = 1;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test78()  throws Throwable  {
      short short0 = (short)35;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)1, short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      
      int int0 = (-693);
      int int1 = MathUtils.subAndCheck(int0, (int) short1);
      assertEquals((-694), int1);
      assertFalse(int1 == int0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble(int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test79()  throws Throwable  {
      int int0 = 31;
      int int1 = MathUtils.hash((double) int0);
      assertEquals(1077870592, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test80()  throws Throwable  {
      int int0 = (-1);
      int int1 = 2979;
      long long0 = MathUtils.binomialCoefficient(int1, int0);
      assertEquals(1L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test81()  throws Throwable  {
      int int0 = 3;
      int int1 = 66;
      long long0 = MathUtils.binomialCoefficient(int1, int0);
      assertEquals(45760L, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test82()  throws Throwable  {
      int int0 = 5;
      int int1 = 3;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertEquals(10.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test83()  throws Throwable  {
      int int0 = 1552;
      int int1 = 935;
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test84()  throws Throwable  {
      int int0 = 0;
      short short0 = (short) (-623);
      short short1 = MathUtils.sign(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      long long0 = MathUtils.binomialCoefficient(int0, (int) short1);
      assertEquals(0L, long0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test85()  throws Throwable  {
      int int0 = 1;
      int int1 = 2534;
      long long0 = MathUtils.binomialCoefficient(int1, int0);
      assertEquals(2534L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test86()  throws Throwable  {
      int int0 = (-3578);
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(3578, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      long long0 = MathUtils.binomialCoefficient(int1, int2);
      assertEquals(1L, long0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test
  public void test87()  throws Throwable  {
      int int0 = (-1535);
      byte byte0 = (byte) (-104);
      int int1 = MathUtils.sign(int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int1, (int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test88()  throws Throwable  {
      int int0 = (-1752);
      int int1 = (-2172);
      // Undeclared exception!
      try {
        long long0 = MathUtils.binomialCoefficient(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
      }
  }

  @Test
  public void test89()  throws Throwable  {
      int int0 = 2;
      long long0 = MathUtils.binomialCoefficient(int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test90()  throws Throwable  {
      long long0 = 2147483647L;
      long long1 = 9223372036854775807L;
      // Undeclared exception!
      try {
        long long2 = MathUtils.addAndCheck(long1, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
      }
  }

  @Test
  public void test91()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = (-853L);
      // Undeclared exception!
      try {
        long long2 = MathUtils.addAndCheck(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
      }
  }

  @Test
  public void test92()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.indicator(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      
      long long0 = MathUtils.subAndCheck((long) byte1, (long) byte1);
      assertEquals(0L, long0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test93()  throws Throwable  {
      int int0 = 0;
      long long0 = 9223372036854775807L;
      long long1 = MathUtils.addAndCheck(long0, (long) int0);
      assertEquals(9223372036854775807L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test94()  throws Throwable  {
      int int0 = 0;
      short short0 = (short) (-623);
      short short1 = MathUtils.sign(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      
      double double0 = MathUtils.round((double) short1, int0);
      assertEquals((-1.0), double0, 0.01D);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test95()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = MathUtils.cosh(double0);
      assertEquals(1.5430806348152437, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test96()  throws Throwable  {
      int int0 = 1;
      int int1 = MathUtils.mulAndCheck(int0, int0);
      assertEquals(1, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = MathUtils.sinh((double) int1);
      assertEquals(1.1752011936438014, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test97()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = MathUtils.addAndCheck((int) byte0, (int) byte0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try {
        int int1 = MathUtils.lcm(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
      }
  }

  @Test
  public void test98()  throws Throwable  {
      int int0 = 11;
      double double0 = MathUtils.normalizeAngle((double) int0, (double) int0);
      assertEquals(11.0, double0, 0.01D);
  }

  @Test
  public void test99()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = 2;
      float float1 = MathUtils.round(float0, int0, int0);
      assertEquals((-0.99F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }
}
