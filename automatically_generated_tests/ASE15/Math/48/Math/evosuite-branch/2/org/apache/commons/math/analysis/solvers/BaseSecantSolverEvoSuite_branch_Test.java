/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:03:25 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sqrt;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.ConvergenceException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BaseSecantSolverEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 0.222222208977;
      double double1 = 0.031;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double1);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.031, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.222222208977, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = illinoisSolver0.getFunctionValueAccuracy();
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.031, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.222222208977, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.031, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      int int0 = 786;
      double[] doubleArray0 = new double[10];
      double double3 = (-274.7348274226826);
      assertFalse(double3 == double2);
      
      doubleArray0[1] = double3;
      doubleArray0[2] = (double) int0;
      doubleArray0[4] = double1;
      doubleArray0[0] = double2;
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.031, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.222222208977, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.031, (-274.7348274226826), 786.0, 0.0, 0.031, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double4 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[4], doubleArray0[2], doubleArray0[4], allowedSolution0);
      assertArrayEquals(new double[] {0.031, (-274.7348274226826), 786.0, 0.0, 0.031, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction0.degree());
      assertEquals(0.031, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.031, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(24, illinoisSolver0.getEvaluations());
      assertEquals(0.222222208977, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(786.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(786, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.031, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.5536547320274027, double4, 0.01D);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(doubleArray0[0]);
      assertArrayEquals(new double[] {0.031, (-274.7348274226826), 786.0, 0.0, 0.031, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.031, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      AllowedSolution allowedSolution1 = AllowedSolution.ABOVE_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double5 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double0, double4, allowedSolution1);
      assertArrayEquals(new double[] {0.031, (-274.7348274226826), 786.0, 0.0, 0.031, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.222222208977, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.5536547320274027, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.3879384705022013, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(786, pegasusSolver0.getMaxEvaluations());
      assertEquals(6, pegasusSolver0.getEvaluations());
      assertEquals(0.031, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(4, polynomialFunction0.degree());
      assertEquals(0.031, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.031, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(24, illinoisSolver0.getEvaluations());
      assertEquals(0.222222208977, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(786.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(786, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.031, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertNotSame(allowedSolution0, allowedSolution1);
      assertEquals(0.3495546589507899, double5, 0.01D);
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double5);
      assertTrue(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double5);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double5);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double5 == double0);
      assertFalse(double5 == double2);
      assertFalse(double5 == double3);
      assertFalse(double5 == double4);
      assertFalse(double5 == double1);
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 0.23819740510067586;
      double double1 = 0.031;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double1);
      assertEquals(0.031, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.23819740510067586, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.23819740510067586, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 766;
      double[] doubleArray0 = new double[28];
      double double2 = (-274.326812546);
      doubleArray0[18] = double2;
      doubleArray0[4] = double1;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.031, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-274.326812546), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(18, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[4], (double) int0, doubleArray0[4], allowedSolution0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.031, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-274.326812546), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(18, polynomialFunction0.degree());
      assertEquals(0.031, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(766.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.23819740510067586, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.031, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(766, illinoisSolver0.getMaxEvaluations());
      assertEquals(469, illinoisSolver0.getEvaluations());
      assertEquals(0.031, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.23819740510067586, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.6763196398967708, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 0.222222209;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.222222209, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.222222209, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.222222209, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 786;
      double[] doubleArray0 = new double[39];
      double double1 = (-274.91719147559684);
      doubleArray0[1] = double1;
      doubleArray0[4] = double0;
      doubleArray0[8] = (double) int0;
      doubleArray0[6] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-274.91719147559684), 0.0, 0.0, 0.222222209, 0.0, 786.0, 0.0, 786.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = 848.045252931;
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[4], double2, double0, allowedSolution0);
      assertArrayEquals(new double[] {0.0, (-274.91719147559684), 0.0, 0.0, 0.222222209, 0.0, 786.0, 0.0, 786.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction0.degree());
      assertEquals(0.222222209, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.222222209, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.222222209, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(848.045252931, illinoisSolver0.getMax(), 0.01D);
      assertEquals(786, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.222222209, illinoisSolver0.getMin(), 0.01D);
      assertEquals(74, illinoisSolver0.getEvaluations());
      assertEquals(0.222222209, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.6259073432442381, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 0.222222208977;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      double double1 = illinoisSolver0.getFunctionValueAccuracy();
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.222222208977, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      int int0 = 786;
      double[] doubleArray0 = new double[10];
      double double2 = (-274.7348274226826);
      assertFalse(double2 == double1);
      
      doubleArray0[1] = double2;
      doubleArray0[2] = (double) int0;
      doubleArray0[4] = double0;
      doubleArray0[0] = double1;
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.222222208977, (-274.7348274226826), 786.0, 0.0, 0.222222208977, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[4], doubleArray0[2], doubleArray0[4], allowedSolution0);
      assertArrayEquals(new double[] {0.222222208977, (-274.7348274226826), 786.0, 0.0, 0.222222208977, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(786.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(786, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.222222208977, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getMin(), 0.01D);
      assertEquals(24, illinoisSolver0.getEvaluations());
      assertEquals(4, polynomialFunction0.degree());
      assertEquals(0.3495046937870624, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver(doubleArray0[0]);
      assertArrayEquals(new double[] {0.222222208977, (-274.7348274226826), 786.0, 0.0, 0.222222208977, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.222222208977, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertNotNull(pegasusSolver0);
      
      AllowedSolution allowedSolution1 = AllowedSolution.ABOVE_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double4 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double0, double3, allowedSolution1);
      assertArrayEquals(new double[] {0.222222208977, (-274.7348274226826), 786.0, 0.0, 0.222222208977, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(786.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(786, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.222222208977, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getMin(), 0.01D);
      assertEquals(24, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(786, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.2858634513820312, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.222222208977, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.222222208977, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.3495046937870624, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(4, polynomialFunction0.degree());
      assertNotSame(allowedSolution0, allowedSolution1);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertEquals(0.3495046937870624, double4, 0.01D);
      assertTrue(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertTrue(double4 == double3);
      assertFalse(double4 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 0.22222;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.22222, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.22222, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.22222, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertNotNull(illinoisSolver0);
      
      int int0 = 818;
      double[] doubleArray0 = new double[14];
      double double1 = (-274.3268125);
      doubleArray0[4] = double1;
      doubleArray0[9] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-274.3268125), 0.0, 0.0, 0.0, 0.0, 818.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[4], (double) int0, doubleArray0[9], allowedSolution0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-274.3268125), 0.0, 0.0, 0.0, 0.0, 818.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, polynomialFunction0.degree());
      assertEquals(0.22222, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.22222, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(818.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(818, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.22222, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(818.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(124, illinoisSolver0.getEvaluations());
      assertEquals((-274.3268125), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-0.16321095366593147), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 0.222222208977;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.222222208977, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.222222208977, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertNotNull(illinoisSolver0);
      
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 786;
      double[] doubleArray0 = new double[24];
      double double1 = (-274.326812546);
      doubleArray0[1] = double1;
      doubleArray0[2] = (double) int0;
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) inverse0, doubleArray0[1], doubleArray0[2]);
      assertArrayEquals(new double[] {0.0, (-274.326812546), 786.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(786.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-274.326812546), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(255.83659372699998, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(77, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(786, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(7.495861950048188E-7, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      doubleArray0[4] = double2;
      assertEquals(786.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-274.326812546), regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(255.83659372699998, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(77, regulaFalsiSolver0.getEvaluations());
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(786, regulaFalsiSolver0.getMaxEvaluations());
      
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-274.326812546), 786.0, 0.0, 7.495861950048188E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[4], doubleArray0[2], double1, allowedSolution0);
      assertArrayEquals(new double[] {0.0, (-274.326812546), 786.0, 0.0, 7.495861950048188E-7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-274.326812546), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(786.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(29, illinoisSolver0.getEvaluations());
      assertEquals(786, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.222222208977, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(7.495861950048188E-7, illinoisSolver0.getMin(), 0.01D);
      assertEquals(4, polynomialFunction0.degree());
      assertEquals(0.35250013996404067, double3, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
  }

  @Test
  public void test06()  throws Throwable  {
      double double0 = 0.2222222089767456;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.2222222089767456, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.2222222089767456, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.2222222089767456, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 2815;
      double[] doubleArray0 = new double[8];
      double double1 = (-274.326812546);
      doubleArray0[5] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 2815.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      doubleArray0[4] = double1;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[4], (double) int0, (double) int0, allowedSolution0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-274.326812546), 2815.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals(0.2222222089767456, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2815, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.2222222089767456, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(80, illinoisSolver0.getEvaluations());
      assertEquals((-274.326812546), illinoisSolver0.getMin(), 0.01D);
      assertEquals(2815.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2815.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.2222222089767456, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-0.14917511907532827), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 0.222222208977;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.222222208977, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 780;
      double[] doubleArray0 = new double[23];
      double double1 = (-274.326812546);
      doubleArray0[1] = double1;
      doubleArray0[2] = (double) int0;
      doubleArray0[5] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-274.326812546), 780.0, 0.0, 0.0, 780.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      doubleArray0[4] = doubleArray0[1];
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[4], doubleArray0[2], doubleArray0[7], allowedSolution0);
      assertArrayEquals(new double[] {0.0, (-274.326812546), 780.0, 0.0, (-274.326812546), 780.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-274.326812546), illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(780, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.222222208977, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(65, illinoisSolver0.getEvaluations());
      assertEquals(780.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.222222208977, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, polynomialFunction0.degree());
      assertEquals((-1.0971186104182629), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 0.22222221;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.22222221, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.22222221, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.22222221, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 786;
      double[] doubleArray0 = new double[23];
      double double1 = (-310.29520223475186);
      doubleArray0[1] = double1;
      doubleArray0[2] = (double) int0;
      doubleArray0[4] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-310.29520223475186), 786.0, 0.0, 0.22222221, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[4], (double) int0, double0, allowedSolution0);
      assertArrayEquals(new double[] {0.0, (-310.29520223475186), 786.0, 0.0, 0.22222221, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.22222221, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.22222221, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.22222221, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.22222221, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(786, illinoisSolver0.getMaxEvaluations());
      assertEquals(24, illinoisSolver0.getEvaluations());
      assertEquals(786.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.22222221, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(4, polynomialFunction0.degree());
      assertEquals(0.39080018593394883, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 0.222222209;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.222222209, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.222222209, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.222222209, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertNotNull(illinoisSolver0);
      
      int int0 = 786;
      double[] doubleArray0 = new double[39];
      double double1 = (-274.91719147559684);
      doubleArray0[1] = double1;
      doubleArray0[4] = double0;
      doubleArray0[8] = (double) int0;
      doubleArray0[6] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-274.91719147559684), 0.0, 0.0, 0.222222209, 0.0, 786.0, 0.0, 786.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[4], doubleArray0[6], allowedSolution0);
      assertArrayEquals(new double[] {0.0, (-274.91719147559684), 0.0, 0.0, 0.222222209, 0.0, 786.0, 0.0, 786.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.222222209, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.222222209, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(786, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.222222209, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(393.11111110449997, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(786.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(79, illinoisSolver0.getEvaluations());
      assertEquals(0.222222209, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(8, polynomialFunction0.degree());
      assertEquals(0.7411913815295366, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 0.22222221;
      int int0 = 786;
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = double0;
      double double1 = (-310.29520223475186);
      doubleArray0[1] = double1;
      doubleArray0[4] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.22222221, (-310.29520223475186), 0.0, 0.0, 0.22222221, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      double double2 = 0.0;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(doubleArray0[1], double1);
      assertArrayEquals(new double[] {0.22222221, (-310.29520223475186), 0.0, 0.0, 0.22222221, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-310.29520223475186), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-310.29520223475186), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      double double3 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double2, doubleArray0[0]);
      assertArrayEquals(new double[] {0.22222221, (-310.29520223475186), 0.0, 0.0, 0.22222221, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction0.degree());
      assertEquals(0.22222221, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(4, regulaFalsiSolver0.getEvaluations());
      assertEquals(786, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-310.29520223475186), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0.111111105, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals((-310.29520223475186), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(7.161638607352287E-4, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      assertEquals(1.0E-6, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertNotNull(regulaFalsiSolver0);
      
      int int0 = 786;
      double[] doubleArray0 = new double[24];
      double double0 = (-274.326812546);
      doubleArray0[1] = double0;
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      // Undeclared exception!
      try {
        double double1 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) inverse0, doubleArray0[1], doubleArray0[2]);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = (-795.7117913536505);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals((-795.7117913536505), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertNotNull(illinoisSolver0);
      
      int int0 = 80;
      Sigmoid sigmoid0 = new Sigmoid((double) int0, double0);
      assertNotNull(sigmoid0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sigmoid0, double0, (double) int0, double0, allowedSolution0);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-795.7117913536505), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(80.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-795.7117913536505), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-795.7117913536505), illinoisSolver0.getMin(), 0.01D);
      assertEquals(80, illinoisSolver0.getMaxEvaluations());
      assertEquals(22, illinoisSolver0.getEvaluations());
      assertEquals((-2.2972104144431555), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 786;
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, (double) int0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(786.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(786.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertNotNull(pegasusSolver0);
      
      Sqrt sqrt0 = new Sqrt();
      assertNotNull(sqrt0);
      
      double double0 = 0.0;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) sqrt0, (double) int0, double0);
      assertEquals(786.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(393.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(786, pegasusSolver0.getMaxEvaluations());
      assertEquals(2, pegasusSolver0.getEvaluations());
      assertEquals(786.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(786.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = 0.222222208977;
      int int0 = 786;
      double[] doubleArray0 = new double[10];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction0.degree());
      assertNotNull(polynomialFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      PegasusSolver pegasusSolver0 = new PegasusSolver(doubleArray0[0]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertNotNull(pegasusSolver0);
      
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double0, doubleArray0[1], allowedSolution0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.222222208977, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.1111111044885, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(786, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(0.222222208977, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }
}
