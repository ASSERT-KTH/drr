/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:41:30 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.ConvergenceException;
import org.apache.commons.math.exception.TooManyEvaluationsException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BaseSecantSolverEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 0.684543646028732;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.684543646028732, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      
      int int0 = 2297;
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[1] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(3, polynomialFunction0.degree());
      assertArrayEquals(new double[] {2297.0, 2297.0, 0.0, 2297.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(3, polynomialFunction0.degree());
      assertArrayEquals(new double[] {2297.0, 2297.0, 0.0, 2297.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      PolynomialFunction polynomialFunction2 = polynomialFunction0.multiply(polynomialFunction1);
      assertNotNull(polynomialFunction2);
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(5, polynomialFunction2.degree());
      assertEquals(3, polynomialFunction0.degree());
      assertArrayEquals(new double[] {2297.0, 2297.0, 0.0, 2297.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      
      PolynomialFunction polynomialFunction3 = polynomialFunction0.subtract(polynomialFunction2);
      assertNotNull(polynomialFunction3);
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(5, polynomialFunction3.degree());
      assertEquals(5, polynomialFunction2.degree());
      assertEquals(3, polynomialFunction0.degree());
      assertArrayEquals(new double[] {2297.0, 2297.0, 0.0, 2297.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      
      double double1 = (-131.387079099832);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction3, double1, doubleArray0[9], doubleArray0[8], allowedSolution0);
      assertEquals((-0.8159654998314365), double2, 0.01D);
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(5, polynomialFunction3.degree());
      assertEquals(5, polynomialFunction2.degree());
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.684543646028732, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-131.387079099832), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2297, pegasusSolver0.getMaxEvaluations());
      assertEquals(32, pegasusSolver0.getEvaluations());
      assertArrayEquals(new double[] {2297.0, 2297.0, 0.0, 2297.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 0.3106;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.3106, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      
      int int0 = 2326;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = double0;
      doubleArray0[3] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(3, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.3106, 0.0, 0.0, 2326.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = (-131.387079099832);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, doubleArray0[0], (double) int0, allowedSolution0);
      assertEquals((-0.05599585995994957), double2, 0.01D);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2326.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.3106, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-131.387079099832), pegasusSolver0.getMin(), 0.01D);
      assertEquals(29, pegasusSolver0.getEvaluations());
      assertEquals(0.3106, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2326, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertArrayEquals(new double[] {0.3106, 0.0, 0.0, 2326.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 2248;
      double[] doubleArray0 = new double[10];
      doubleArray0[6] = (double) int0;
      doubleArray0[1] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(6, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 2248.0, 0.0, 0.0, 0.0, 0.0, 2248.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertEquals(6, polynomialFunction0.degree());
      assertEquals(5, polynomialFunction1.degree());
      assertArrayEquals(new double[] {0.0, 2248.0, 0.0, 0.0, 0.0, 0.0, 2248.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(doubleArray0[1]);
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(2248.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertArrayEquals(new double[] {0.0, 2248.0, 0.0, 0.0, 0.0, 0.0, 2248.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = (-1324.55243);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction1, double1, double0, double1, allowedSolution0);
      assertEquals((-5.414671760907236E-14), double2, 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1324.55243), illinoisSolver0.getMin(), 0.01D);
      assertEquals(3, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2248, illinoisSolver0.getMaxEvaluations());
      assertEquals((-1324.55243), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2248.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(6, polynomialFunction0.degree());
      assertEquals(5, polynomialFunction1.degree());
      assertArrayEquals(new double[] {0.0, 2248.0, 0.0, 0.0, 0.0, 0.0, 2248.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
  }

  @Test
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 2821;
      Identity identity0 = new Identity();
      assertNotNull(identity0);
      
      double double0 = (-204.31);
      double double1 = 997.6308617842926;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) identity0, double0, double1, (double) int0, allowedSolution0);
      assertEquals((-1.136868377216159E-13), double2, 0.01D);
      assertEquals(997.6308617842926, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-204.31), illinoisSolver0.getMin(), 0.01D);
      assertEquals(2821.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(2821, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(4, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 0.23479218582465788;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.23479218582465788, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      int int0 = 2292;
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = double0;
      doubleArray0[3] = doubleArray0[0];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(3, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.23479218582465788, 0.0, 0.0, 0.23479218582465788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = (-132.64770939838624);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double1, doubleArray0[9], doubleArray0[7], allowedSolution0);
      assertEquals((-0.8569976585691422), double2, 0.01D);
      assertEquals(0.23479218582465788, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-132.64770939838624), pegasusSolver0.getMin(), 0.01D);
      assertEquals(17, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2292, pegasusSolver0.getMaxEvaluations());
      assertEquals(3, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.23479218582465788, 0.0, 0.0, 0.23479218582465788, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 0.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      int int0 = 2248;
      double[] doubleArray0 = new double[10];
      doubleArray0[3] = (double) int0;
      doubleArray0[6] = (double) int0;
      doubleArray0[1] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(6, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 2248.0, 0.0, 2248.0, 0.0, 0.0, 2248.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertEquals(6, polynomialFunction0.degree());
      assertEquals(5, polynomialFunction1.degree());
      assertArrayEquals(new double[] {0.0, 2248.0, 0.0, 2248.0, 0.0, 0.0, 2248.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      
      double double1 = (-1324.55243);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction1, double1, doubleArray0[9], doubleArray0[8], allowedSolution0);
      assertEquals((-0.891907706444623), double2, 0.01D);
      assertEquals(6, polynomialFunction0.degree());
      assertEquals(2248, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-1324.55243), pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(59, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(5, polynomialFunction1.degree());
      assertArrayEquals(new double[] {0.0, 2248.0, 0.0, 2248.0, 0.0, 0.0, 2248.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 147;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      Identity identity0 = new Identity();
      assertNotNull(identity0);
      
      double double0 = (-204.31);
      double double1 = 997.6308617842926;
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) identity0, double0, double1, (double) int0, allowedSolution0);
      assertEquals(1.1368683772161603E-13, double2, 0.01D);
      assertEquals(147.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-204.31), illinoisSolver0.getMin(), 0.01D);
      assertEquals(997.6308617842926, illinoisSolver0.getMax(), 0.01D);
      assertEquals(147, illinoisSolver0.getMaxEvaluations());
      assertEquals(4, illinoisSolver0.getEvaluations());
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test07()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = 3762;
      double[] doubleArray0 = new double[20];
      doubleArray0[10] = (double) int0;
      doubleArray0[1] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(10, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 3762.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3762.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertEquals(10, polynomialFunction0.degree());
      assertEquals(9, polynomialFunction1.degree());
      assertArrayEquals(new double[] {0.0, 3762.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3762.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      
      double double0 = (-1082.5880304527695);
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction1, double0, doubleArray0[1]);
      assertEquals((-0.774263682681127), double1, 0.01D);
      assertEquals(10, polynomialFunction0.degree());
      assertEquals((-1082.5880304527695), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3762.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1339.705984773615, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(3762, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(147, pegasusSolver0.getEvaluations());
      assertEquals(9, polynomialFunction1.degree());
      assertArrayEquals(new double[] {0.0, 3762.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3762.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-1.6455455036760558);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-1.6455455036760558), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      
      double double1 = 0.5;
      int int0 = 2295;
      double[] doubleArray0 = new double[10];
      doubleArray0[4] = double1;
      doubleArray0[9] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(9, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 2295.0}, doubleArray0, 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double0, doubleArray0[9], double1, allowedSolution0);
      assertEquals((-0.18519849917475392), double2, 0.01D);
      assertEquals(9, polynomialFunction0.degree());
      assertEquals((-1.6455455036760558), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2295.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-1.6455455036760558), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.5, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(130, pegasusSolver0.getEvaluations());
      assertEquals(2295, pegasusSolver0.getMaxEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 2295.0}, doubleArray0, 0.01);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = 0.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      
      int int0 = 2317;
      double[] doubleArray0 = new double[10];
      doubleArray0[8] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(8, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2317.0, 0.0}, doubleArray0, 0.01);
      
      doubleArray0[9] = (double) int0;
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertEquals(7, polynomialFunction1.degree());
      assertEquals(8, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2317.0, 2317.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      PolynomialFunction polynomialFunction2 = polynomialFunction0.multiply(polynomialFunction1);
      assertNotNull(polynomialFunction2);
      assertEquals(15, polynomialFunction2.degree());
      assertEquals(7, polynomialFunction1.degree());
      assertEquals(8, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2317.0, 2317.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      PolynomialFunction polynomialFunction3 = polynomialFunction2.add(polynomialFunction0);
      assertNotNull(polynomialFunction3);
      assertEquals(15, polynomialFunction2.degree());
      assertEquals(7, polynomialFunction1.degree());
      assertEquals(8, polynomialFunction0.degree());
      assertEquals(15, polynomialFunction3.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2317.0, 2317.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      
      double double1 = (-131.387079099832);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction3, double1, doubleArray0[9], doubleArray0[3], allowedSolution0);
      assertEquals((-0.24563114099644803), double2, 0.01D);
      assertEquals(15, polynomialFunction2.degree());
      assertEquals(7, polynomialFunction1.degree());
      assertEquals(8, polynomialFunction0.degree());
      assertEquals(15, polynomialFunction3.degree());
      assertEquals((-131.387079099832), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(2317.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(255, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2317, pegasusSolver0.getMaxEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2317.0, 2317.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 0.0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      double double1 = 1.0E-6;
      int int0 = 2294;
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = (double) int0;
      doubleArray0[9] = double1;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(9, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 2294.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0E-6}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.multiply(polynomialFunction0);
      assertNotNull(polynomialFunction1);
      assertEquals(18, polynomialFunction1.degree());
      assertEquals(9, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 2294.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0E-6}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      PolynomialFunction polynomialFunction2 = polynomialFunction0.subtract(polynomialFunction1);
      assertNotNull(polynomialFunction2);
      assertEquals(18, polynomialFunction1.degree());
      assertEquals(9, polynomialFunction0.degree());
      assertEquals(18, polynomialFunction2.degree());
      assertArrayEquals(new double[] {0.0, 2294.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0E-6}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      
      double double2 = (-149.8941714904926);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction2, double2, doubleArray0[9], double0, allowedSolution0);
      assertEquals(1.1352529474139776E-31, double3, 0.01D);
      assertEquals(18, polynomialFunction1.degree());
      assertEquals(9, polynomialFunction0.degree());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(2294, pegasusSolver0.getMaxEvaluations());
      assertEquals((-149.8941714904926), pegasusSolver0.getMin(), 0.01D);
      assertEquals(80, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-6, pegasusSolver0.getMax(), 0.01D);
      assertEquals(18, polynomialFunction2.degree());
      assertArrayEquals(new double[] {0.0, 2294.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0E-6}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test11()  throws Throwable  {
      double double0 = (-1.6455455036760558);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.6455455036760558), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      
      int int0 = 2295;
      double[] doubleArray0 = new double[10];
      doubleArray0[9] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(9, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2295.0}, doubleArray0, 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, double0, doubleArray0[9], double0, allowedSolution0);
      assertEquals((-4.657822985419723E-37), double1, 0.01D);
      assertEquals(9, polynomialFunction0.degree());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-1.6455455036760558), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-1.6455455036760558), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1.6455455036760558), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(2295, pegasusSolver0.getMaxEvaluations());
      assertEquals(2295.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1529, pegasusSolver0.getEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2295.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      int int0 = 3704;
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(2, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 3704.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 3704.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      
      double double0 = (-1109.3927968935304);
      double double1 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction1, double0, (double) int0);
      assertEquals((-1.0097419586828951E-28), double1, 0.01D);
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction0.degree());
      assertEquals(1297.3036015532348, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals((-1109.3927968935304), pegasusSolver0.getMin(), 0.01D);
      assertEquals(4, pegasusSolver0.getEvaluations());
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(3704.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(3704, pegasusSolver0.getMaxEvaluations());
      assertArrayEquals(new double[] {0.0, 0.0, 3704.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertFalse(double0 == double1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double1 == double0);
  }

  @Test
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      int int0 = 2845;
      Identity identity0 = new Identity();
      assertNotNull(identity0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = (-1324.6199376673699);
      double double1 = 1.1921056801463227E-8;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) identity0, double0, double1, double0, allowedSolution0);
      assertEquals((-1.6543612251060553E-24), double2, 0.01D);
      assertEquals((-1324.6199376673699), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-1324.6199376673699), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2845, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.1921056801463227E-8, illinoisSolver0.getMax(), 0.01D);
      assertEquals(4, illinoisSolver0.getEvaluations());
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = (-389.0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-389.0), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals((-389.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-389.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      
      int int0 = 93;
      Logit logit0 = new Logit();
      assertNotNull(logit0);
      
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      assertNotNull(univariateRealFunction0);
      
      double double1 = 0.0;
      // Undeclared exception!
      try {
        double double2 = regulaFalsiSolver0.solve(int0, univariateRealFunction0, double1, (double) int0, double1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = (-384.9442231074506);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals((-384.9442231074506), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-384.9442231074506), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals((-384.9442231074506), regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      
      int int0 = 234;
      Logit logit0 = new Logit();
      assertNotNull(logit0);
      
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      assertNotNull(univariateRealFunction0);
      
      double double1 = 0.39161421823232156;
      // Undeclared exception!
      try {
        double double2 = regulaFalsiSolver0.solve(int0, univariateRealFunction0, double1, (double) int0, double1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (234) exceeded: evaluations
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = 761.4316477159291;
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(761.4316477159291, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(761.4316477159291, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(761.4316477159291, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      int int0 = 147;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      doubleArray0[4] = (double) int0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(4, polynomialFunction0.degree());
      assertArrayEquals(new double[] {147.0, 0.0, 0.0, 0.0, 147.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertEquals(4, polynomialFunction0.degree());
      assertEquals(3, polynomialFunction1.degree());
      assertArrayEquals(new double[] {147.0, 0.0, 0.0, 0.0, 147.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      
      double double1 = (-5148.591800977509);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction1, double1, doubleArray0[0], allowedSolution0);
      assertEquals((-5148.591800977509), double2, 0.01D);
      assertEquals(761.4316477159291, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals((-5148.591800977509), pegasusSolver0.getMin(), 0.01D);
      assertEquals(761.4316477159291, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(147.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-2500.7959004887543), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(761.4316477159291, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(147, pegasusSolver0.getMaxEvaluations());
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(4, polynomialFunction0.degree());
      assertEquals(3, polynomialFunction1.degree());
      assertArrayEquals(new double[] {147.0, 0.0, 0.0, 0.0, 147.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
  }

  @Test
  public void test17()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      
      int int0 = 2875;
      Identity identity0 = new Identity();
      assertNotNull(identity0);
      
      double double0 = 0.0;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) identity0, (double) int0, double0, (double) int0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(2875.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2875, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2875.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test18()  throws Throwable  {
      double double0 = (-1369.5739437950015);
      double double1 = 0.0;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals((-1369.5739437950015), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertFalse(double0 == double1);
      
      int int0 = 2315;
      Signum signum0 = new Signum();
      assertNotNull(signum0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) signum0, double1, (double) int0, allowedSolution0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(2315, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2315.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals((-1369.5739437950015), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1157.5, illinoisSolver0.getStartValue(), 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test19()  throws Throwable  {
      double double0 = (-1369.5739437950015);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double0);
      assertNotNull(pegasusSolver0);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals((-1369.5739437950015), pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1369.5739437950015), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
  }
}
