/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:11:02 GMT 2014
 */

package org.apache.commons.math3.geometry.euclidean.twod;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.exception.MathInternalError;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class PolygonsSetEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      double double0 = 21.656788810843317;
      double double1 = 0.11113807559013367;
      double double2 = 0.0;
      double double3 = (-1.0E-10);
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double2, double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      
      // Undeclared exception!
      try {
        Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = (-4.813899778443457E-9);
      double double1 = (-4715.147882605747);
      double double2 = 0.0;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double2, double1, double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertNotNull(vector0);
      assertEquals(false, vector0.isNaN());
      assertEquals(5558377.11571497, vector0.getNormSq(), 0.01D);
      assertEquals(2357.621071273959, vector0.getNorm(), 0.01D);
      assertEquals(2357.621071273959, vector0.getNormInf(), 0.01D);
      assertEquals(2357.6210712763664, vector0.getNorm1(), 0.01D);
      assertEquals(false, vector0.isInfinite());
      assertEquals(false, polygonsSet0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = (-1662.7886763);
      double double1 = 1.7976931348623157E308;
      double double2 = 1415.624619822502;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertNotNull(vector2DArray0);
      assertEquals(false, polygonsSet0.isEmpty());
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 6.73;
      double double1 = (-1224.998589607);
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(vector2DArray0);
      assertEquals(false, polygonsSet0.isEmpty());
      
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(vector0);
      assertEquals(742089.1782115144, vector0.getNormSq(), 0.01D);
      assertEquals(1218.268589607, vector0.getNorm1(), 0.01D);
      assertEquals(false, vector0.isNaN());
      assertEquals(false, vector0.isInfinite());
      assertEquals(861.4459810176808, vector0.getNorm(), 0.01D);
      assertEquals(609.1342948035001, vector0.getNormInf(), 0.01D);
      assertEquals(false, polygonsSet0.isEmpty());
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = 3.4028234663852886E38;
      double double1 = (-6.89601);
      double double2 = 33.6773011594917;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double2, double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      
      polygonsSet0.computeGeometricalProperties();
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(false, polygonsSet0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      assertFalse(boolean1);
      
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>((Object) boolean1);
      assertNotNull(bSPTree0);
      
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree0);
      assertNotNull(polygonsSet0);
      assertEquals(true, polygonsSet0.isEmpty());
      
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertNotNull(vector0);
      assertEquals(0.0, vector0.getNorm1(), 0.01D);
      assertEquals(0.0, vector0.getNormInf(), 0.01D);
      assertEquals(0.0, vector0.getNormSq(), 0.01D);
      assertEquals(false, vector0.isNaN());
      assertEquals(false, vector0.isInfinite());
      assertEquals(0.0, vector0.getNorm(), 0.01D);
      assertEquals(true, polygonsSet0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1.0E-10);
      double double2 = 1162.0221712463708;
      double double3 = 812.87;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double2, double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      
      polygonsSet0.computeGeometricalProperties();
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertEquals(false, polygonsSet0.isEmpty());
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      PolygonsSet polygonsSet0 = new PolygonsSet((Collection<SubHyperplane<Euclidean2D>>) linkedList0);
      assertNotNull(polygonsSet0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, polygonsSet0.isEmpty());
      
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertNotNull(vector0);
      assertEquals(Double.NaN, vector0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector0.getNorm1(), 0.01D);
      assertEquals(false, vector0.isInfinite());
      assertEquals(Double.NaN, vector0.getNormSq(), 0.01D);
      assertEquals(true, vector0.isNaN());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, polygonsSet0.isEmpty());
  }

  @Test
  public void test8()  throws Throwable  {
      double double0 = (-1662.7886763);
      double double1 = 1.7976931348623157E308;
      PolygonsSet polygonsSet0 = new PolygonsSet(double0, double1, double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(polygonsSet0);
      assertEquals(false, polygonsSet0.isEmpty());
      
      // Undeclared exception!
      try {
        Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      PolygonsSet polygonsSet0 = new PolygonsSet((Collection<SubHyperplane<Euclidean2D>>) linkedList0);
      assertNotNull(polygonsSet0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, polygonsSet0.isEmpty());
      
      AbstractRegion<Euclidean2D, Euclidean1D> abstractRegion0 = polygonsSet0.copySelf();
      assertFalse(polygonsSet0.equals((Object)abstractRegion0));
      assertNotSame(polygonsSet0, abstractRegion0);
      assertNotNull(abstractRegion0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, polygonsSet0.isEmpty());
      assertEquals(false, abstractRegion0.isEmpty());
  }
}
