/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:38:35 GMT 2014
 */

package org.apache.commons.math.stat;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.stat.Frequency;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FrequencyEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      long long0 = (-604L);
      frequency0.addValue(long0);
      Frequency frequency1 = new Frequency();
      assertFalse(frequency1.equals((Object)frequency0));
      assertNotSame(frequency1, frequency0);
      assertNotNull(frequency1);
      
      boolean boolean0 = frequency1.equals((Object) frequency0);
      assertFalse(boolean0);
      assertFalse(frequency1.equals((Object)frequency0));
      assertFalse(frequency0.equals((Object)frequency1));
      assertNotSame(frequency1, frequency0);
      assertNotSame(frequency0, frequency1);
  }

  @Test
  public void test01()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      Frequency frequency1 = new Frequency();
      assertTrue(frequency1.equals((Object)frequency0));
      assertNotSame(frequency1, frequency0);
      assertNotNull(frequency1);
      
      boolean boolean0 = frequency1.equals((Object) frequency0);
      assertTrue(boolean0);
      assertTrue(frequency1.equals((Object)frequency0));
      assertTrue(frequency0.equals((Object)frequency1));
      assertNotSame(frequency1, frequency0);
      assertNotSame(frequency0, frequency1);
  }

  @Test
  public void test02()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      Object object0 = null;
      boolean boolean0 = frequency0.equals(object0);
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = '<';
      Integer integer0 = new Integer((int) char0);
      assertEquals(60, (int)integer0);
      
      boolean boolean0 = frequency0.equals((Object) integer0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      long long0 = (-2153L);
      Long long1 = new Long(long0);
      assertEquals((-2153L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      frequency0.addValue((Object) long1);
      assertTrue(long1.equals((Object)long0));
      
      char char0 = '9';
      Integer integer0 = Integer.valueOf((int) char0);
      assertEquals(57, (int)integer0);
      
      frequency0.addValue(integer0);
      long long2 = frequency0.getCount(char0);
      assertEquals(0L, long2);
      assertFalse(long2 == long0);
      
      double double0 = frequency0.getCumPct((Comparable<?>) long2);
      assertEquals(0.5, double0, 0.01D);
      assertFalse(long2 == long0);
  }

  @Test
  public void test05()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = '9';
      Integer integer0 = Integer.valueOf((int) char0);
      assertEquals(57, (int)integer0);
      
      frequency0.addValue(integer0);
      frequency0.addValue((int) char0);
  }

  @Test
  public void test06()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = '<';
      Integer integer0 = new Integer((int) char0);
      assertEquals(60, (int)integer0);
      
      frequency0.addValue((Comparable<?>) integer0);
  }

  @Test
  public void test07()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      // Undeclared exception!
      try {
        frequency0.addValue((Object) frequency0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class (org.apache.commons.math.stat.Frequency) does not implement Comparable
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      frequency0.clear();
  }

  @Test
  public void test09()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      long long0 = (-2153L);
      Long long1 = new Long(long0);
      assertEquals((-2153L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      frequency0.addValue((Object) long1);
      assertTrue(long1.equals((Object)long0));
      
      char char0 = '9';
      Integer integer0 = Integer.valueOf((int) char0);
      assertEquals(57, (int)integer0);
      
      frequency0.addValue(integer0);
      String string0 = frequency0.toString();
      assertEquals("Value \t Freq. \t Pct. \t Cum Pct. \n-2153\t1\t50%\t50%\n57\t1\t50%\t100%\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = 'x';
      long long0 = frequency0.getCumFreq(char0);
      assertEquals(0L, long0);
      
      double double0 = frequency0.getCumPct((Object) long0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = 't';
      frequency0.addValue(char0);
  }

  @Test
  public void test12()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = 'x';
      long long0 = frequency0.getCumFreq((int) char0);
      assertEquals(0L, long0);
  }

  @Test
  public void test13()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      int int0 = (-8);
      double double0 = frequency0.getCumPct(int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = '<';
      double double0 = frequency0.getPct((int) char0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = '<';
      double double0 = frequency0.getPct(char0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = '.';
      double double0 = frequency0.getCumPct(char0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = '9';
      long long0 = frequency0.getCount(char0);
      assertEquals(0L, long0);
  }

  @Test
  public void test18()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = '<';
      Integer integer0 = new Integer((int) char0);
      assertEquals(60, (int)integer0);
      
      double double0 = frequency0.getPct((Object) integer0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      long long0 = (-604L);
      double double0 = frequency0.getPct(long0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = '<';
      Integer integer0 = new Integer((int) char0);
      assertEquals(60, (int)integer0);
      
      long long0 = frequency0.getCount((Object) integer0);
      assertEquals(0L, long0);
  }

  @Test
  public void test21()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      char char0 = '.';
      long long0 = frequency0.getCount((int) char0);
      assertEquals(0L, long0);
  }

  @Test
  public void test22()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      int int0 = frequency0.hashCode();
      assertEquals(31, int0);
      
      long long0 = frequency0.getCumFreq((Object) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test23()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      long long0 = (-2153L);
      Long long1 = new Long(long0);
      assertEquals((-2153L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      
      frequency0.addValue((Object) long1);
      assertTrue(long1.equals((Object)long0));
      
      int int0 = (-3141);
      double double0 = frequency0.getCumPct((Comparable<?>) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      Frequency frequency0 = new Frequency();
      assertNotNull(frequency0);
      
      int int0 = (-8);
      double double0 = frequency0.getCumPct((long) int0);
      assertEquals(Double.NaN, double0, 0.01D);
  }
}
