/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:57:53 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FastMathEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.tan(double0);
      assertEquals(1.2246467991473532E-16, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test001()  throws Throwable  {
      double double0 = (-296.52042);
      double double1 = FastMath.atan(double0);
      assertEquals((-1.5674238905596842), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-192);
      int int1 = FastMath.getExponent(double1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = FastMath.copySign((float) int0, (float) int1);
      assertEquals(192.0F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(int0 == int1);
  }

  @Test
  public void test002()  throws Throwable  {
      float float0 = 13.579405F;
      float float1 = (-1.4E-45F);
      float float2 = FastMath.copySign(float0, float1);
      assertEquals((-13.579405F), float2, 0.01F);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
  }

  @Test
  public void test003()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-855.184960799507);
      double double2 = FastMath.copySign(double1, double0);
      assertEquals(855.184960799507, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test004()  throws Throwable  {
      double double0 = (-538.503444);
      double double1 = FastMath.asin(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      int int0 = (-3998);
      int int1 = FastMath.abs(int0);
      //  // Unstable assertion: assertEquals(3998, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      double double2 = FastMath.copySign(double1, (double) int1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
  }

  @Test
  public void test005()  throws Throwable  {
      double double0 = (-1172.53514);
      double double1 = FastMath.min(double0, double0);
      assertEquals((-1172.53514), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.copySign(double1, double1);
      assertEquals((-1172.53514), double2, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
  }

  @Test
  public void test006()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.IEEEremainder((double) float0, (double) float0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.hypot((double) float0, double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test007()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 0;
      double double0 = FastMath.hypot((double) int0, (double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test008()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.tan(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      
      double double3 = FastMath.hypot(double2, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
  }

  @Test
  public void test009()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = (-256);
      int int1 = 2290;
      float float1 = FastMath.scalb((float) int0, int1);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = FastMath.hypot((double) float0, (double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
  }

  @Test
  public void test010()  throws Throwable  {
      double double0 = (-553.1962769034836);
      double double1 = FastMath.exp(double0);
      assertEquals(5.6222419513327484E-241, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = Float.NEGATIVE_INFINITY;
      double double2 = FastMath.hypot((double) float0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test011()  throws Throwable  {
      double double0 = (-1996.6917973462);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.abs(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.max(double0, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
  }

  @Test
  public void test012()  throws Throwable  {
      double double0 = (-1.3885660525939072E-8);
      double double1 = FastMath.rint(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = 2.0902045062932175E102;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.max(double2, double1);
      assertEquals(2.0902045062932175E102, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test013()  throws Throwable  {
      long long0 = 816L;
      long long1 = 0L;
      long long2 = FastMath.max(long0, long1);
      assertEquals(816L, long2);
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertTrue(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
  }

  @Test
  public void test014()  throws Throwable  {
      int int0 = (-2766);
      int int1 = 305;
      int int2 = FastMath.max(int1, int0);
      assertEquals(305, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test
  public void test015()  throws Throwable  {
      double double0 = 0.0;
      float float0 = Float.NaN;
      double double1 = FastMath.min(double0, (double) float0);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test
  public void test016()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      double double0 = FastMath.min((double) float0, (double) int0);
      assertEquals((-127.0), double0, 0.01D);
  }

  @Test
  public void test017()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextUp(float0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = 1774.6285F;
      assertFalse(float2 == float1);
      
      float float3 = FastMath.min(float1, float2);
      assertEquals((-3.4028235E38F), float3, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float3);
      assertTrue(float3 == float1);
      assertFalse(float3 == float2);
      assertFalse(float3 == float0);
      assertFalse(float2 == float3);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertTrue(float1 == float3);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test018()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = 0.0F;
      float float2 = FastMath.min(float0, float1);
      //  // Unstable assertion: assertEquals(0.0F, float2, 0.01F);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(float1 == float2);
  }

  @Test
  public void test019()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.round(float0);
      assertEquals(0, int0);
      
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test020()  throws Throwable  {
      long long0 = 2156L;
      long long1 = (-339L);
      long long2 = FastMath.min(long0, long1);
      assertEquals((-339L), long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
  }

  @Test
  public void test021()  throws Throwable  {
      double double0 = 1.5495175386968933;
      double double1 = FastMath.tanh(double0);
      assertEquals(0.9137058507909008, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = FastMath.getExponent(double1);
      assertEquals((-1), int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int1 = 1972;
      assertFalse(int1 == int0);
      
      int int2 = FastMath.min(int1, int0);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(double1 == double0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
  }

  @Test
  public void test022()  throws Throwable  {
      double double0 = 2223.5;
      double double1 = FastMath.rint(double0);
      assertEquals(2224.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test023()  throws Throwable  {
      double double0 = 1787.7130322;
      double double1 = FastMath.rint(double0);
      assertEquals(1788.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test024()  throws Throwable  {
      double double0 = 1416.108808561881;
      double double1 = FastMath.nextUp(double0);
      assertEquals(1416.1088085618812, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.rint(double1);
      assertEquals(1416.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test025()  throws Throwable  {
      double double0 = (-1.2322940607922115E-8);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test026()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextUp(float0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      long long0 = FastMath.round((double) float1);
      assertEquals((-9223372036854775808L), long0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test027()  throws Throwable  {
      double double0 = 3116.4746;
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.ceil(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
  }

  @Test
  public void test028()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = FastMath.nextUp(float0);
      assertEquals(1.0000001F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test029()  throws Throwable  {
      double double0 = 0.9285714285714286;
      double double1 = FastMath.ceil(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-2766);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-2766), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float0 = FastMath.nextAfter((float) int1, double1);
      assertEquals((-2765.9998F), float0, 0.01F);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
      assertTrue(int0 == int1);
  }

  @Test
  public void test030()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = (-1384.2);
      float float0 = FastMath.nextAfter((float) int1, double0);
      assertEquals((-1.4E-45F), float0, 0.01F);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test031()  throws Throwable  {
      float float0 = 199.8F;
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float1 = FastMath.max(float0, (float) int0);
      assertEquals(199.8F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertTrue(int0 == int1);
      
      float float2 = FastMath.nextAfter((float) int1, (double) float1);
      assertEquals(1.4E-45F, float2, 0.01F);
      assertFalse(float1 == float2);
      assertTrue(float1 == float0);
      assertTrue(int1 == int0);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertTrue(int0 == int1);
  }

  @Test
  public void test032()  throws Throwable  {
      double double0 = 21.84993141184958;
      float float0 = 1.0F;
      int int0 = 746;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.nextAfter(float1, double0);
      assertEquals(3.4028235E38F, float2, 0.01F);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test
  public void test033()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = 1.0F;
      float float2 = FastMath.abs(float1);
      assertEquals(1.0F, float2, 0.01F);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
      
      float float3 = FastMath.nextAfter(float2, (double) float0);
      assertEquals(0.99999994F, float3, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float3);
      assertTrue(float1 == float2);
      assertFalse(float3 == float1);
      assertFalse(float3 == float0);
      assertFalse(float3 == float2);
      assertFalse(float0 == float3);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float2 == float3);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
  }

  @Test
  public void test034()  throws Throwable  {
      float float0 = (-1169.0F);
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertEquals((-1169.0F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test035()  throws Throwable  {
      int int0 = (-1511);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-1511), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.log10((double) int1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float0 = FastMath.nextAfter((float) int1, double0);
      assertEquals(Float.NaN, float0, 0.01F);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test036()  throws Throwable  {
      double double0 = 1.5495175386968933;
      double double1 = FastMath.tanh(double0);
      //  // Unstable assertion: assertEquals(0.9137058507909008, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      float float0 = Float.NaN;
      float float1 = FastMath.nextAfter(float0, double1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test037()  throws Throwable  {
      int int0 = (-3998);
      int int1 = FastMath.abs(int0);
      assertEquals(3998, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = FastMath.min(int0, int1);
      assertEquals((-3998), int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      double double0 = FastMath.nextAfter((double) int1, (double) int2);
      assertEquals(3997.9999999999995, double0, 0.01D);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.round((float) int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = (-1991.5134600296767);
      double double1 = FastMath.nextAfter((double) int1, double0);
      assertEquals((-4.9E-324), double1, 0.01D);
      assertFalse(double0 == double1);
      assertTrue(int1 == int0);
      assertFalse(double1 == double0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test039()  throws Throwable  {
      double double0 = (-1246.70954);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextUp(double1);
      assertEquals((-1.7976931348623157E308), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test040()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.max(long0, long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int0 = 0;
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.max((float) long1, float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.nextAfter((double) float1, (double) int0);
      assertEquals(1.7976931348623157E308, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test041()  throws Throwable  {
      double double0 = (-3.9986783938944604E-8);
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.nextAfter(double0, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = (-538.503444);
      double double1 = FastMath.asin(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.nextUp(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
  }

  @Test
  public void test043()  throws Throwable  {
      float float0 = 164.05F;
      float float1 = FastMath.ulp(float0);
      assertEquals(1.5258789E-5F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      int int0 = 240;
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
  }

  @Test
  public void test044()  throws Throwable  {
      float float0 = (-3047.043F);
      int int0 = (-258);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test045()  throws Throwable  {
      double double0 = 0.041666666666621166;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      int int0 = FastMath.getExponent((float) long0);
      assertEquals((-127), int0);
      
      float float0 = 1.0F;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(5.877472E-39F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test046()  throws Throwable  {
      float float0 = 1278.5919F;
      int int0 = (-479);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test047()  throws Throwable  {
      float float0 = (-17.1F);
      int int0 = (-479);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test048()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-2766);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-2766), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      float float1 = FastMath.scalb(float0, int1);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(int0 == int1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test049()  throws Throwable  {
      float float0 = (-3360.0535F);
      int int0 = 132;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float2, 0.01F);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float0);
      assertTrue(float2 == float1);
  }

  @Test
  public void test050()  throws Throwable  {
      int int0 = 3572;
      int int1 = (-258);
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = 1236;
      double double0 = FastMath.scalb((double) int0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test052()  throws Throwable  {
      float float0 = (-1743.15F);
      int int0 = 1460;
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test053()  throws Throwable  {
      float float0 = (-4929.36F);
      int int0 = (-1802);
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test
  public void test054()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.ulp(double1);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.hypot(double2, double1);
      assertEquals(4.9E-324, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
  }

  @Test
  public void test055()  throws Throwable  {
      double double0 = (-484.146130222695);
      int int0 = (-1067);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals((-3.06177E-319), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test056()  throws Throwable  {
      int int0 = 0;
      long long0 = FastMath.abs((long) int0);
      assertEquals(0L, long0);
      
      int int1 = FastMath.getExponent((double) long0);
      assertEquals((-1023), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.scalb((double) int1, int1);
      assertEquals((-1.1381252786264335E-305), double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test057()  throws Throwable  {
      double double0 = 4.9E-324;
      int int0 = 1841;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(7.762590461503545E230, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test058()  throws Throwable  {
      int int0 = 3572;
      double double0 = FastMath.scalb((double) int0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test059()  throws Throwable  {
      double double0 = 3480.713;
      float float0 = (-1088.0F);
      int int0 = FastMath.round(float0);
      assertEquals((-1088), int0);
      
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test060()  throws Throwable  {
      long long0 = (-3310L);
      long long1 = FastMath.max(long0, long0);
      assertEquals((-3310L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int0 = FastMath.round((float) long0);
      assertEquals((-3310), int0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.scalb((double) long1, int0);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test061()  throws Throwable  {
      double double0 = 2692.476302485;
      long long0 = (-3310L);
      int int0 = FastMath.round((float) long0);
      assertEquals((-3310), int0);
      
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test062()  throws Throwable  {
      double double0 = 2479.199282425;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = (-1174);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test063()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.abs(double0);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      
      int int0 = FastMath.getExponent(double1);
      //  // Unstable assertion: assertEquals((-1023), int0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      
      double double2 = FastMath.acos((double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(double1 == double0);
      
      double double3 = FastMath.scalb(double2, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
  }

  @Test
  public void test064()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test065()  throws Throwable  {
      int int0 = 3572;
      long long0 = FastMath.round((double) int0);
      assertEquals(3572L, long0);
      
      float float0 = FastMath.ulp((float) long0);
      assertEquals(2.4414062E-4F, float0, 0.01F);
  }

  @Test
  public void test066()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      float float1 = FastMath.scalb(float0, int1);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(int0 == int1);
      assertTrue(float0 == float1);
      assertTrue(int1 == int0);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.ulp((double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(float0 == float1);
      assertTrue(int1 == int0);
      assertTrue(float1 == float0);
  }

  @Test
  public void test067()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.abs(float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.abs((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test068()  throws Throwable  {
      long long0 = (-2056L);
      long long1 = FastMath.abs(long0);
      assertEquals(2056L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test069()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toDegrees(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test070()  throws Throwable  {
      double double0 = (-1996.6917973462);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.toDegrees(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test071()  throws Throwable  {
      double double0 = (-1622.01904);
      double double1 = FastMath.toRadians(double0);
      assertEquals((-28.309572778037605), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test072()  throws Throwable  {
      int int0 = 0;
      long long0 = FastMath.abs((long) int0);
      assertEquals(0L, long0);
      
      double double0 = FastMath.toRadians((double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test073()  throws Throwable  {
      double double0 = 179.21283617177977;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test074()  throws Throwable  {
      double double0 = (-1246.70954);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test075()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.nextUp((double) float0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      double double1 = FastMath.cbrt(double0);
      assertEquals(1.7031839360032603E-108, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test076()  throws Throwable  {
      long long0 = 0L;
      double double0 = FastMath.cbrt((double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test077()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = FastMath.abs(float0);
      assertEquals(1.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.cbrt((double) float1);
      assertEquals(1.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test078()  throws Throwable  {
      double double0 = (-3.43338934259355E-8);
      double double1 = FastMath.acos(double0);
      assertEquals(1.57079636112879, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test079()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.nextUp((double) float0);
      assertEquals(4.9E-324, double0, 0.01D);
      
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test080()  throws Throwable  {
      double double0 = 3.3855429446520427E-49;
      double double1 = FastMath.toDegrees(double0);
      assertEquals(1.939773220888549E-47, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test081()  throws Throwable  {
      float float0 = (-1169.0F);
      float float1 = FastMath.max(float0, float0);
      assertEquals((-1169.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      int int0 = 0;
      double double0 = FastMath.pow((double) float1, int0);
      assertEquals(1.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.acos(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test082()  throws Throwable  {
      float float0 = (-1169.0F);
      double double0 = FastMath.signum((double) float0);
      assertEquals((-1.0), double0, 0.01D);
      
      double double1 = FastMath.acos(double0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test083()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.acos((double) float1);
      assertEquals(1.5707963267948966, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test084()  throws Throwable  {
      double double0 = 3116.4746;
      double double1 = FastMath.sin(double0);
      assertEquals(0.014687110844742588, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals(0.014687638925116904, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test085()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.asin(double0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test086()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.asin((double) float0);
      assertEquals(1.5707963267948966, double0, 0.01D);
  }

  @Test
  public void test087()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.atan2((double) float0, (double) float0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.asin(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test088()  throws Throwable  {
      double double0 = 2692.476302485;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test089()  throws Throwable  {
      double double0 = 179.21283617177977;
      double double1 = 0.0;
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test090()  throws Throwable  {
      double double0 = (-1622.01904);
      double double1 = 0.0;
      double double2 = FastMath.atan2(double0, double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test091()  throws Throwable  {
      double double0 = (-991.295722888);
      int int0 = 2548;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2((double) int0, double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test092()  throws Throwable  {
      float float0 = (-1169.0F);
      float float1 = FastMath.max(float0, float0);
      assertEquals((-1169.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.sinh((double) float0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.atan2((double) float1, double0);
      assertEquals((-3.141592653589793), double1, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      assertFalse(double0 == double1);
      assertTrue(float0 == float1);
  }

  @Test
  public void test093()  throws Throwable  {
      double double0 = 2692.476302485;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = (-3.2555596107382053E-9);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals(-0.0, double3, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test094()  throws Throwable  {
      double double0 = 2692.476302485;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test095()  throws Throwable  {
      double double0 = 0.0;
      float float0 = Float.NEGATIVE_INFINITY;
      double double1 = FastMath.atan2((double) float0, double0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test096()  throws Throwable  {
      long long0 = 1530L;
      double double0 = FastMath.exp((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2(double0, (double) long0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test097()  throws Throwable  {
      double double0 = 2692.476302485;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double1);
      assertEquals(0.7853981633974483, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-3269.182643631);
      double double2 = FastMath.hypot(double0, double0);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals(3.141592653589793, double3, 0.01D);
      assertTrue(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
  }

  @Test
  public void test099()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = 2479.199282425;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2((double) float1, double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(float0 == float1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test100()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      int int0 = (-409);
      int int1 = FastMath.max(int0, int0);
      //  // Unstable assertion: assertEquals((-409), int1);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      double double2 = FastMath.pow(double1, (double) int1);
      //  // Unstable assertion: assertEquals(-0.0, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      double double3 = FastMath.atan2(double2, double1);
      //  // Unstable assertion: assertEquals((-3.141592653589793), double3, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
  }

  @Test
  public void test101()  throws Throwable  {
      float float0 = (-17.1F);
      float float1 = FastMath.copySign(float0, float0);
      assertEquals((-17.1F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.atan2((double) float1, (double) float0);
      assertEquals((-2.356194490192345), double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = 1813.3;
      double double1 = 348.67209220425;
      double double2 = FastMath.atan2(double1, double0);
      assertEquals(0.18996730979841916, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test103()  throws Throwable  {
      double double0 = (-3.9986783938944604E-8);
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double0);
      //  // Unstable assertion: assertEquals((-1.5707963267948966), double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
  }

  @Test
  public void test104()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test105()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cos(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test106()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.round(float0);
      assertEquals(0, int0);
      
      double double0 = FastMath.log((double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.cos(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test107()  throws Throwable  {
      double double0 = 3533.570346018;
      double double1 = FastMath.sin(double0);
      assertEquals(0.6604284968399267, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test108()  throws Throwable  {
      int int0 = (-3998);
      double double0 = FastMath.sin((double) int0);
      assertEquals((-0.9481768336274045), double0, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      double double0 = 8.917559854082513E82;
      double double1 = FastMath.sin(double0);
      assertEquals((-0.243729196614788), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test110()  throws Throwable  {
      double double0 = (-991.295722888);
      double double1 = FastMath.nextAfter(double0, double0);
      assertEquals((-991.295722888), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.sinh(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.sin(double2);
      assertEquals(Double.NaN, double3, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
  }

  @Test
  public void test111()  throws Throwable  {
      double double0 = (-538.503444);
      double double1 = FastMath.signum(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sin(double1);
      assertEquals((-0.8414709848078965), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test112()  throws Throwable  {
      double double0 = 2.3525345191912968E288;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.038732338948662993), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test113()  throws Throwable  {
      double double0 = 7.016736290557636E20;
      double double1 = FastMath.nextUp(double0);
      assertEquals(7.016736290557637E20, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tan(double1);
      assertEquals((-2.1649321306524016), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test114()  throws Throwable  {
      double double0 = 5.049564425991982E302;
      double double1 = FastMath.tan(double0);
      assertEquals(20.95836986116233, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test115()  throws Throwable  {
      double double0 = 1.4615985810260016E275;
      double double1 = FastMath.cos(double0);
      assertEquals(0.8633016020040166, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test116()  throws Throwable  {
      double double0 = 2.628788218289742E129;
      double double1 = FastMath.tan(double0);
      assertEquals(0.19980037115484797, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test117()  throws Throwable  {
      double double0 = 4.186590347846346E124;
      double double1 = FastMath.tan(double0);
      assertEquals((-1.7183422112880595), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test118()  throws Throwable  {
      double double0 = 318.10450043604664;
      double double1 = FastMath.cosh(double0);
      assertEquals(7.0794450035394E137, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cos(double1);
      assertEquals(0.9120721575345615, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = 1.8014398509481984E16;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.4413505874729857), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test120()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.9999876894265599), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test121()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.tan((double) float0);
      assertEquals(1.5574077246549023, double0, 0.01D);
  }

  @Test
  public void test122()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = 2.2860509143963117E-8;
      double double1 = FastMath.hypot((double) float0, double0);
      assertEquals(2.2860509143963117E-8, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.sin(double1);
      assertEquals(2.2860509143963114E-8, double2, 0.01D);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test123()  throws Throwable  {
      float float0 = (-17.1F);
      int int0 = (-479);
      double double0 = FastMath.pow((double) float0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test124()  throws Throwable  {
      double double0 = 5234.219195794233;
      double double1 = FastMath.tanh(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 0;
      double double2 = FastMath.pow(double1, int0);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = (-1622.01904);
      double double1 = FastMath.cos(double0);
      assertEquals(0.5757863322432663, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 3572;
      double double2 = FastMath.pow(double1, int0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test126()  throws Throwable  {
      double double0 = (-553.1962769034836);
      double double1 = FastMath.exp(double0);
      assertEquals(5.6222419513327484E-241, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.exp(double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = (-8.955768055535647E-8);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      
      double double4 = FastMath.pow(double3, double2);
      assertEquals((-8.955768055535647E-8), double4, 0.01D);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertTrue(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertTrue(double3 == double4);
  }

  @Test
  public void test127()  throws Throwable  {
      double double0 = (-538.503444);
      int int0 = (-3998);
      int int1 = FastMath.abs(int0);
      assertEquals(3998, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double1 = FastMath.pow(double0, (double) int1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test128()  throws Throwable  {
      double double0 = (-1622.01904);
      double double1 = FastMath.cos(double0);
      assertEquals(0.5757863322432663, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log10(double1);
      assertEquals((-0.239738648422473), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.pow(double2, double0);
      assertEquals(Double.NaN, double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
  }

  @Test
  public void test129()  throws Throwable  {
      double double0 = (-3.9986783938944604E-8);
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test
  public void test130()  throws Throwable  {
      int int0 = (-256);
      int int1 = 2290;
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = 1.702808472925844E-8;
      double double1 = FastMath.pow(double0, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test131()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextUp(float0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.pow((double) float1, (double) float0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test
  public void test132()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.exp(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = Float.NEGATIVE_INFINITY;
      double double2 = FastMath.pow(double1, (double) float0);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test133()  throws Throwable  {
      double double0 = 179.21283617177977;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = 4.408531734441582E-71;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test
  public void test134()  throws Throwable  {
      double double0 = 179.21283617177977;
      double double1 = FastMath.sqrt(double0);
      assertEquals(13.387039858451896, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
  }

  @Test
  public void test135()  throws Throwable  {
      double double0 = 2692.476302485;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test136()  throws Throwable  {
      double double0 = (-1996.6917973462);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.abs(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test137()  throws Throwable  {
      double double0 = (-1622.01904);
      double double1 = 0.0;
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test
  public void test138()  throws Throwable  {
      double double0 = 0.01745329052209854;
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertEquals(0.017455063037776063, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      float float0 = 0.0F;
      double double2 = (-607.4283388657764);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.copySign((double) float0, double2);
      //  // Unstable assertion: assertEquals(-0.0, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      
      double double4 = FastMath.pow(double3, double1);
      //  // Unstable assertion: assertEquals(0.0, double4, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test139()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = (-607.4283388657764);
      int int0 = (-1693);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-1693), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double1 = FastMath.copySign((double) float0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double1, (double) int1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test
  public void test140()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = FastMath.atan2((double) float0, (double) float0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.pow(double0, double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test141()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.IEEEremainder((double) float0, (double) float0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.log1p(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test142()  throws Throwable  {
      double double0 = 1.5707963267948966;
      double double1 = FastMath.nextAfter(double0, double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(0.9442157056960554, double2, 0.01D);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test143()  throws Throwable  {
      int int0 = 1446;
      double double0 = FastMath.cosh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.log1p(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test144()  throws Throwable  {
      float float0 = 1278.5919F;
      double double0 = FastMath.signum((double) float0);
      assertEquals(1.0, double0, 0.01D);
      
      double double1 = FastMath.log10(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test145()  throws Throwable  {
      double double0 = 1.4219324087E-313;
      double double1 = FastMath.log10(double0);
      assertEquals((-312.8471210472277), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test146()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.log1p(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      
      double double3 = FastMath.pow(double1, double2);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      
      double double4 = FastMath.log10(double3);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertTrue(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertTrue(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double0);
  }

  @Test
  public void test147()  throws Throwable  {
      double double0 = 2692.476302485;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acosh(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test
  public void test148()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sin(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.log10(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test149()  throws Throwable  {
      double double0 = (-3.016329994276181E-8);
      double double1 = FastMath.expm1(double0);
      assertEquals((-3.016329948784948E-8), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test150()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test151()  throws Throwable  {
      double double0 = 3116.4746;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test152()  throws Throwable  {
      double double0 = (-746.8433415569567);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test153()  throws Throwable  {
      float float0 = Float.NaN;
      double double0 = FastMath.atan((double) float0);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double0, 0.01D);
      
      double double1 = (-1581.227669683);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      //  // Unstable assertion: assertEquals(7.7593236132766E-311, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
  }

  @Test
  public void test154()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.atan2((double) float0, (double) float0);
      assertEquals((-2.356194490192345), double0, 0.01D);
      
      float float1 = FastMath.nextUp(float0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double1 = FastMath.pow(double0, (double) float1);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
      assertFalse(double0 == double1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test155()  throws Throwable  {
      int int0 = 2423;
      float float0 = FastMath.signum((float) int0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test156()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test157()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test
  public void test158()  throws Throwable  {
      double double0 = 0.041666666666621166;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.041690804469479946, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test159()  throws Throwable  {
      double double0 = 0.14285714285714285;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.14384103622589045, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test160()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.atanh((double) int1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test161()  throws Throwable  {
      double double0 = (-296.52042);
      double double1 = FastMath.atanh(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test162()  throws Throwable  {
      double double0 = 0.031;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.03099503697929222, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test163()  throws Throwable  {
      double double0 = 0.07692307692307693;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.07684741718867191, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test164()  throws Throwable  {
      double double0 = 0.16666666666666666;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.16590455026930118, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test165()  throws Throwable  {
      double double0 = (-1622.01904);
      double double1 = FastMath.ulp(double0);
      assertEquals(2.2737367544323206E-13, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.asinh(double1);
      assertEquals(2.2737367544323206E-13, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test
  public void test166()  throws Throwable  {
      int int0 = (-258);
      double double0 = FastMath.asinh((double) int0);
      assertEquals((-6.2461105212443115), double0, 0.01D);
  }

  @Test
  public void test167()  throws Throwable  {
      float float0 = (-1.4E-45F);
      float float1 = FastMath.signum(float0);
      //  // Unstable assertion: assertEquals((-1.4E-45F), float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double0 = FastMath.tanh((double) float1);
      //  // Unstable assertion: assertEquals((-1.401298464324817E-45), double0, 0.01D);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test
  public void test168()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.max(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test
  public void test169()  throws Throwable  {
      double double0 = (-484.146130222695);
      double double1 = FastMath.tanh(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test170()  throws Throwable  {
      float float0 = (-1.4E-45F);
      float float1 = FastMath.max(float0, float0);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.sinh((double) float1);
      assertEquals((-1.401298464324817E-45), double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test171()  throws Throwable  {
      double double0 = 0.9285714285714286;
      double double1 = (-1880.2945);
      double double2 = FastMath.copySign(double0, double1);
      assertEquals((-0.9285714285714286), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.sinh(double2);
      assertEquals((-1.0678866369485625), double3, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
  }

  @Test
  public void test172()  throws Throwable  {
      double double0 = 0.9285714285714286;
      double double1 = FastMath.ceil(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sinh(double1);
      assertEquals(1.1752011936438014, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test173()  throws Throwable  {
      double double0 = (-607.4283388657764);
      double double1 = FastMath.sinh(double0);
      assertEquals((-3.1750145905483905E263), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test174()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.sinh((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test
  public void test175()  throws Throwable  {
      double double0 = 140.718877;
      double double1 = FastMath.sinh(double0);
      assertEquals(6.492347916543451E60, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test176()  throws Throwable  {
      double double0 = (-538.503444);
      double double1 = FastMath.asin(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.sinh(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test
  public void test177()  throws Throwable  {
      double double0 = (-2.6157563728873715E-8);
      double double1 = FastMath.cosh(double0);
      assertEquals(1.0000000000000004, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test178()  throws Throwable  {
      int int0 = (-192);
      double double0 = FastMath.floor((double) int0);
      assertEquals((-192.0), double0, 0.01D);
      
      double double1 = FastMath.cosh(double0);
      assertEquals(1.2120220747050398E83, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test179()  throws Throwable  {
      double double0 = 2.893485277253286E-8;
      double double1 = FastMath.cosh(double0);
      assertEquals(1.0000000000000004, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test180()  throws Throwable  {
      double double0 = (-1996.6917973462);
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test181()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test
  public void test182()  throws Throwable  {
      double double0 = (-1996.6917973462);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test183()  throws Throwable  {
      double double0 = (-538.503444);
      double double1 = FastMath.signum(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextUp(double1);
      assertEquals((-0.9999999999999999), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test
  public void test184()  throws Throwable  {
      double double0 = 0.9285714285714286;
      double double1 = FastMath.ceil(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log(double1, double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test
  public void test185()  throws Throwable  {
      float float0 = 1211.0F;
      double double0 = FastMath.cos((double) float0);
      assertEquals((-0.08386932264204244), double0, 0.01D);
  }
}
