/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:18:46 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.BlockRealMatrix;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.InvalidMatrixException;
import org.apache.commons.math.linear.NonSquareMatrixException;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class EigenDecompositionImplEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-6.12);
      doubleArray0[0] = double0;
      double double1 = (-124.0094022249222);
      doubleArray0[1] = double1;
      double double2 = (-1848.0);
      doubleArray0[2] = double2;
      double double3 = Double.POSITIVE_INFINITY;
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 181.08;
      doubleArray0[5] = double5;
      double double6 = (-184.85);
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray0, double6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      double double0 = 1176.76847154;
      double double1 = 198.5890679619182;
      double double2 = (-2413.471764503);
      double double3 = 0.0;
      double double4 = 0.0;
      double double5 = (-3426.54764407438);
      double double6 = 1162.553807277;
      int int0 = 4;
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 2090.4;
      doubleArray0[0] = double0;
      double double1 = 1497.3459447606488;
      doubleArray0[1] = double1;
      int int0 = 0;
      double[][] doubleArray1 = new double[6][1];
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      
      doubleArray2[0] = double1;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = double1;
      doubleArray2[4] = (double) int0;
      doubleArray1[0] = doubleArray2;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      double double2 = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray2, doubleArray1[1], double1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1497.3459447606488, 0.0, 0.0, 1497.3459447606488, 0.0}, doubleArray2, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(5, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1497.3459447606488, 0.0, 0.0, 1497.3459447606488, 0.0}, doubleArray2, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      double double3 = 0.0;
      EigenDecompositionImpl eigenDecompositionImpl1 = null;
      try {
        eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-992.719376945159);
      doubleArray0[0] = double0;
      double double1 = (-2505.901065151);
      double double2 = 0.0;
      doubleArray0[2] = double2;
      double double3 = 3865.78957;
      double double4 = (-1124.6196877262441);
      doubleArray0[4] = double4;
      double double5 = 1026.52811671;
      doubleArray0[5] = double5;
      double double6 = (-1367.0);
      doubleArray0[6] = double6;
      double double7 = 0.0;
      doubleArray0[7] = double7;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double1;
      doubleArray1[1] = double3;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-992.719376945159), 0.0, 0.0, 0.0, (-1124.6196877262441), 1026.52811671, (-1367.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2505.901065151), 3865.78957, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-992.719376945159), 0.0, 0.0, 0.0, (-1124.6196877262441), 1026.52811671, (-1367.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2505.901065151), 3865.78957, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      
      doubleArray1[2] = double6;
      doubleArray1[3] = double4;
      doubleArray0[7] = double6;
      doubleArray1[5] = double3;
      doubleArray1[6] = double6;
      double double8 = (-2.874446451335);
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double8);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double8 == double3);
      assertFalse(double8 == double5);
      assertFalse(double8 == double6);
      assertFalse(double8 == double0);
      assertFalse(double8 == double2);
      assertFalse(double8 == double1);
      assertFalse(double8 == double7);
      assertFalse(double8 == double4);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertEquals((-6.529152718141801E26), eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertArrayEquals(new double[] {(-992.719376945159), 0.0, 0.0, 0.0, (-1124.6196877262441), 1026.52811671, (-1367.0), (-1367.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2505.901065151), 3865.78957, (-1367.0), (-1124.6196877262441), 0.0, 3865.78957, (-1367.0)}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl1);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 12.566370614359172;
      doubleArray0[0] = double0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertArrayEquals(new double[] {12.566370614359172}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      double double1 = (-300.5202578);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double1);
      assertFalse(double1 == double0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(12.566370614359172, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {12.566370614359172}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(double1 == double0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(12.566370614359172, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {12.566370614359172}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix1);
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertTrue(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(double1 == double0);
      assertEquals(true, array2DRowRealMatrix2.isSquare());
      assertEquals(1, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix2.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(12.566370614359172, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertArrayEquals(new double[] {12.566370614359172}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix2);
      
      int int0 = 0;
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(double1 == double0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, decompositionSolver0.isNonSingular());
      assertEquals(12.566370614359172, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertArrayEquals(new double[] {12.566370614359172}, doubleArray0, 0.01);
      assertNotNull(decompositionSolver0);
      
      double double2 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(12.566370614359172, double2, 0.01D);
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(12.566370614359172, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertArrayEquals(new double[] {12.566370614359172}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double1);
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(12.566370614359172, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertArrayEquals(new double[] {12.566370614359172}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl1);
      
      DecompositionSolver decompositionSolver1 = eigenDecompositionImpl1.getSolver();
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(decompositionSolver1.equals((Object)decompositionSolver0));
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(12.566370614359172, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(true, decompositionSolver1.isNonSingular());
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertNotSame(decompositionSolver1, decompositionSolver0);
      assertArrayEquals(new double[] {12.566370614359172}, doubleArray0, 0.01);
      assertNotNull(decompositionSolver1);
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      double double0 = (-300.5202578);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix1);
      
      double[] doubleArray1 = array2DRowRealMatrix0.preMultiply(doubleArray0);
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertTrue(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix2.isSquare());
      assertEquals(1, array2DRowRealMatrix2.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix2);
      
      Array2DRowRealMatrix array2DRowRealMatrix3 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix3));
      assertTrue(array2DRowRealMatrix3.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix3.equals((Object)array2DRowRealMatrix0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix3.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix3.isSquare());
      assertEquals(1, array2DRowRealMatrix3.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix3);
      assertNotSame(array2DRowRealMatrix3, array2DRowRealMatrix2);
      assertSame(array2DRowRealMatrix3, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix3, array2DRowRealMatrix0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix3);
      
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl0.getEigenvector(int0);
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix3);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix4 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix4));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix3));
      assertFalse(array2DRowRealMatrix4.equals((Object)array2DRowRealMatrix0));
      assertTrue(array2DRowRealMatrix4.equals((Object)array2DRowRealMatrix3));
      assertTrue(array2DRowRealMatrix4.equals((Object)array2DRowRealMatrix1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix4.getRowDimension());
      assertEquals(1, array2DRowRealMatrix4.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix4.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix4);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix3);
      assertNotSame(array2DRowRealMatrix4, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix4, array2DRowRealMatrix1);
      assertSame(array2DRowRealMatrix4, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix4, array2DRowRealMatrix3);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix4);
      
      double double1 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double1, 0.01D);
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix4));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix3));
      assertFalse(double0 == double1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double1 == double0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix4);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix3);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double2 = eigenDecompositionImpl0.getImagEigenvalue(int0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix4));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix3));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix4);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix3);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix4));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix3));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix4);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl1);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl1.getSolver();
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix4));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix3));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix4);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(decompositionSolver0);
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      double double0 = 2990.8523;
      doubleArray0[0] = double0;
      double double1 = (-300.5202578);
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double1);
      assertFalse(double1 == double0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {2990.8523}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double[] doubleArray1 = eigenDecompositionImpl0.getRealEigenvalues();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double1 == double0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2990.8523}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      EigenDecompositionImpl eigenDecompositionImpl1 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double1 == double0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertArrayEquals(new double[] {2990.8523}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl1);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getV();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double1 == double0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertArrayEquals(new double[] {2990.8523}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix1);
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getVT();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertTrue(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix1));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double1 == double0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix2.getRowDimension());
      assertEquals(true, array2DRowRealMatrix2.isSquare());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertArrayEquals(new double[] {2990.8523}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix2);
      
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)eigenDecompositionImpl1.getEigenvector(int0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double1 == double0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertArrayEquals(new double[] {2990.8523}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      double double2 = eigenDecompositionImpl1.getDeterminant();
      assertEquals(0.0, double2, 0.01D);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertArrayEquals(new double[] {2990.8523}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix3 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getVT();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix3));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertTrue(array2DRowRealMatrix3.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix3.equals((Object)array2DRowRealMatrix0));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix3.isSquare());
      assertEquals(1, array2DRowRealMatrix3.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix3.getRowDimension());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix3);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertSame(array2DRowRealMatrix3, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix3, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix3, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {2990.8523}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix3);
      
      double double3 = eigenDecompositionImpl1.getImagEigenvalue(int0);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix3));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix3);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertArrayEquals(new double[] {2990.8523}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix4 = (Array2DRowRealMatrix)eigenDecompositionImpl1.getVT();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix4));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix3));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertTrue(array2DRowRealMatrix4.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix4.equals((Object)array2DRowRealMatrix0));
      assertFalse(eigenDecompositionImpl1.equals((Object)eigenDecompositionImpl0));
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix4.getRowDimension());
      assertEquals(1, array2DRowRealMatrix4.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix4.isSquare());
      assertEquals(0.0, eigenDecompositionImpl1.getDeterminant(), 0.01D);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix4);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix3);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertSame(array2DRowRealMatrix4, array2DRowRealMatrix3);
      assertSame(array2DRowRealMatrix4, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix4, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix4, array2DRowRealMatrix0);
      assertNotSame(eigenDecompositionImpl1, eigenDecompositionImpl0);
      assertArrayEquals(new double[] {2990.8523}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix4);
      
      EigenDecompositionImpl eigenDecompositionImpl2 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double1);
      assertFalse(eigenDecompositionImpl2.equals((Object)eigenDecompositionImpl0));
      assertFalse(eigenDecompositionImpl2.equals((Object)eigenDecompositionImpl1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix4));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix3));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, eigenDecompositionImpl2.getDeterminant(), 0.01D);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertNotSame(eigenDecompositionImpl2, eigenDecompositionImpl0);
      assertNotSame(eigenDecompositionImpl2, eigenDecompositionImpl1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix4);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix3);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertArrayEquals(new double[] {2990.8523}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl2);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl2.getSolver();
      assertFalse(eigenDecompositionImpl2.equals((Object)eigenDecompositionImpl0));
      assertFalse(eigenDecompositionImpl2.equals((Object)eigenDecompositionImpl1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix4));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix3));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, eigenDecompositionImpl2.getDeterminant(), 0.01D);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertNotSame(eigenDecompositionImpl2, eigenDecompositionImpl0);
      assertNotSame(eigenDecompositionImpl2, eigenDecompositionImpl1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix4);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix3);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertArrayEquals(new double[] {2990.8523}, doubleArray0, 0.01);
      assertNotNull(decompositionSolver0);
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.5;
      doubleArray0[0] = double0;
      int int0 = 271;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(int0, int0);
      assertEquals(271, realMatrixImpl0.getColumnDimension());
      assertEquals(271, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertNotNull(realMatrixImpl0);
      
      double double1 = 2084.2379148469;
      RealMatrixImpl realMatrixImpl1 = (RealMatrixImpl)realMatrixImpl0.scalarAdd(double1);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(double1 == double0);
      assertEquals(271, realMatrixImpl0.getColumnDimension());
      assertEquals(271, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(271, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(271, realMatrixImpl1.getColumnDimension());
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertNotNull(realMatrixImpl1);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) realMatrixImpl1, doubleArray0[0]);
      assertFalse(realMatrixImpl0.equals((Object)realMatrixImpl1));
      assertFalse(realMatrixImpl1.equals((Object)realMatrixImpl0));
      assertFalse(double1 == double0);
      assertEquals(271, realMatrixImpl0.getColumnDimension());
      assertEquals(271, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(271, realMatrixImpl1.getRowDimension());
      assertEquals(true, realMatrixImpl1.isSquare());
      assertEquals(271, realMatrixImpl1.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(realMatrixImpl0, realMatrixImpl1);
      assertNotSame(realMatrixImpl1, realMatrixImpl0);
      assertArrayEquals(new double[] {0.5}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      int int1 = (-851);
      try {
        double double2 = eigenDecompositionImpl0.getRealEigenvalue(int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -851
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = (-30);
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      doubleArray0[2] = double0;
      double double1 = (-307.4574653021696);
      int int0 = 669;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(int0, int0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(669, array2DRowRealMatrix0.getRowDimension());
      assertEquals(669, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(669, array2DRowRealMatrix0.getRowDimension());
      assertEquals(669, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(eigenDecompositionImpl0);
      
      BlockRealMatrix blockRealMatrix0 = (BlockRealMatrix)eigenDecompositionImpl0.getD();
      assertFalse(double1 == double0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, blockRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, blockRealMatrix0.isSquare());
      assertEquals(669, blockRealMatrix0.getRowDimension());
      assertEquals(669, blockRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(669, array2DRowRealMatrix0.getRowDimension());
      assertEquals(669, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(blockRealMatrix0);
      
      doubleArray0[3] = double1;
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double1;
      doubleArray0[5] = double0;
      doubleArray0[6] = double1;
      doubleArray0[7] = (double) int0;
      double double2 = 0.0;
      BlockRealMatrix blockRealMatrix1 = (BlockRealMatrix)eigenDecompositionImpl0.getD();
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, blockRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(669, blockRealMatrix1.getRowDimension());
      assertEquals(true, blockRealMatrix1.isSquare());
      assertEquals(669, blockRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(669, array2DRowRealMatrix0.getRowDimension());
      assertEquals(669, array2DRowRealMatrix0.getColumnDimension());
      assertSame(blockRealMatrix1, blockRealMatrix0);
      assertNotNull(blockRealMatrix1);
      
      doubleArray0[4] = double2;
      double double3 = 1436.875;
      doubleArray0[5] = double3;
      double double4 = 1587.391687;
      doubleArray0[6] = double4;
      BlockRealMatrix blockRealMatrix2 = (BlockRealMatrix)eigenDecompositionImpl0.getD();
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(0.0, blockRealMatrix2.getFrobeniusNorm(), 0.01D);
      assertEquals(true, blockRealMatrix2.isSquare());
      assertEquals(669, blockRealMatrix2.getRowDimension());
      assertEquals(669, blockRealMatrix2.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(669, array2DRowRealMatrix0.getRowDimension());
      assertEquals(669, array2DRowRealMatrix0.getColumnDimension());
      assertSame(blockRealMatrix2, blockRealMatrix1);
      assertSame(blockRealMatrix2, blockRealMatrix0);
      assertNotNull(blockRealMatrix2);
      
      double double5 = (-3112.33);
      doubleArray0[7] = double5;
      Array2DRowRealMatrix array2DRowRealMatrix1 = new Array2DRowRealMatrix(doubleArray0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix1.isSquare());
      assertEquals(8, array2DRowRealMatrix1.getRowDimension());
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertArrayEquals(new double[] {669.0, (-307.4574653021696), 0.0, 0.0, 0.0, 1436.875, 1587.391687, (-3112.33)}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix1);
      
      try {
        RealMatrix realMatrix0 = array2DRowRealMatrix1.inverse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 8x1 matrix was provided instead of a square matrix
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1794.9041025539;
      double double1 = 0.9999999999999998;
      doubleArray0[2] = double1;
      double double2 = (-1263.6228870487);
      doubleArray0[3] = double2;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      doubleArray1[0] = double1;
      doubleArray1[1] = double1;
      doubleArray0[0] = double1;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.9999999999999998, 0.9999999999999998, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.9999999999999998, 0.0, 0.9999999999999998, (-1263.6228870487)}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }
}
