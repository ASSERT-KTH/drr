/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:32:13 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.EigenDecompositionImpl;
import org.apache.commons.math.linear.InvalidMatrixException;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class EigenDecompositionImplEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      double double0 = (-1623.87908985);
      doubleArray0[0] = double0;
      double double1 = 1.1102230246251565E-14;
      double double2 = (-235.11735136);
      double double3 = (-1.0);
      doubleArray0[6] = double3;
      doubleArray0[7] = double2;
      doubleArray0[8] = double0;
      doubleArray0[11] = double0;
      doubleArray0[13] = double3;
      doubleArray0[14] = double0;
      doubleArray0[15] = double0;
      doubleArray0[16] = doubleArray0[15];
      doubleArray0[17] = double0;
      doubleArray0[16] = double3;
      doubleArray0[1] = double1;
      double double4 = (-2650.288045);
      doubleArray0[2] = double4;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(1.7027606405185535E9, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(12631.679935459997, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4785.520836971964, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {(-1623.87908985), 1.1102230246251565E-14, (-2650.288045), 0.0, 0.0, 0.0, (-1.0), (-235.11735136), (-1623.87908985), 0.0, 0.0, (-1623.87908985), 0.0, (-1.0), (-1623.87908985), (-1623.87908985), (-1.0), (-1623.87908985), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(1.7027606405185535E9, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(12631.679935459997, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4785.520836971964, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(21, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {(-1623.87908985), 1.1102230246251565E-14, (-2650.288045), 0.0, 0.0, 0.0, (-1.0), (-235.11735136), (-1623.87908985), 0.0, 0.0, (-1623.87908985), 0.0, (-1.0), (-1623.87908985), (-1623.87908985), (-1.0), (-1623.87908985), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[0]);
      assertEquals(1.7027606405185535E9, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(12631.679935459997, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(4785.520836971964, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(21, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {(-1623.87908985), 1.1102230246251565E-14, (-2650.288045), 0.0, 0.0, 0.0, (-1.0), (-235.11735136), (-1623.87908985), 0.0, 0.0, (-1623.87908985), 0.0, (-1.0), (-1623.87908985), (-1623.87908985), (-1.0), (-1623.87908985), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      double double0 = (-1623.87908985);
      doubleArray0[0] = double0;
      double double1 = 1.1102230246251565E-14;
      double double2 = (-235.11735136);
      double double3 = (-1.0);
      doubleArray0[6] = double3;
      doubleArray0[7] = double2;
      doubleArray0[8] = double0;
      doubleArray0[13] = double3;
      doubleArray0[14] = double0;
      doubleArray0[15] = double0;
      double double4 = 0.08325;
      doubleArray0[16] = double4;
      doubleArray0[17] = double0;
      doubleArray0[18] = double4;
      doubleArray0[19] = double1;
      doubleArray0[1] = double1;
      double double5 = (-2650.288045);
      doubleArray0[2] = double5;
      doubleArray0[3] = doubleArray0[14];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.7027606405185535E9, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(12630.846435459996, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4785.520733938363, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {(-1623.87908985), 1.1102230246251565E-14, (-2650.288045), (-1623.87908985), 0.0, 0.0, (-1.0), (-235.11735136), (-1623.87908985), 0.0, 0.0, 0.0, 0.0, (-1.0), (-1623.87908985), (-1623.87908985), 0.08325, (-1623.87908985), 0.08325, 1.1102230246251565E-14, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(21, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.7027606405185535E9, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(12630.846435459996, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4785.520733938363, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {(-1623.87908985), 1.1102230246251565E-14, (-2650.288045), (-1623.87908985), 0.0, 0.0, (-1.0), (-235.11735136), (-1623.87908985), 0.0, 0.0, 0.0, 0.0, (-1.0), (-1623.87908985), (-1623.87908985), 0.08325, (-1623.87908985), 0.08325, 1.1102230246251565E-14, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[0]);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(21, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.7027606405185535E9, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(12630.846435459996, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(4785.520733938363, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {(-1623.87908985), 1.1102230246251565E-14, (-2650.288045), (-1623.87908985), 0.0, 0.0, (-1.0), (-235.11735136), (-1623.87908985), 0.0, 0.0, 0.0, 0.0, (-1.0), (-1623.87908985), (-1623.87908985), 0.08325, (-1623.87908985), 0.08325, 1.1102230246251565E-14, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      double double0 = (-455.3855343572829);
      doubleArray0[0] = double0;
      double double1 = 57.118;
      doubleArray0[1] = double1;
      double double2 = 4.0;
      doubleArray0[3] = double2;
      doubleArray0[0] = double2;
      double double3 = (-871.675471241775);
      doubleArray0[5] = double3;
      double double4 = (-1771.9846);
      doubleArray0[6] = double4;
      doubleArray0[7] = double3;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1603893.284475789, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2159.365680678078, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(3580.4535424835503, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {4.0, 57.118, 0.0, 4.0, 0.0, (-871.675471241775), (-1771.9846), (-871.675471241775), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1603893.284475789, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2159.365680678078, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(3580.4535424835503, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(16, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(16, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {4.0, 57.118, 0.0, 4.0, 0.0, (-871.675471241775), (-1771.9846), (-871.675471241775), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[7]);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1603893.284475789, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2159.365680678078, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(3580.4535424835503, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(16, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(16, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {4.0, 57.118, 0.0, 4.0, 0.0, (-871.675471241775), (-1771.9846), (-871.675471241775), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 332.0523977549172;
      double double1 = (-3253.694774430126);
      doubleArray0[2] = double1;
      double double2 = 1890.434865499118;
      double double3 = 0.0;
      doubleArray0[6] = double2;
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = double0;
      doubleArray1[5] = doubleArray0[2];
      doubleArray1[4] = double0;
      doubleArray0[2] = double3;
      doubleArray0[4] = double0;
      doubleArray1[2] = double2;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 1890.434865499118, 332.0523977549172, 332.0523977549172, (-3253.694774430126)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 332.0523977549172, 0.0, 1890.434865499118}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 332.0523977549172;
      double double1 = (-3253.694774430126);
      doubleArray0[2] = double1;
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = double0;
      doubleArray1[5] = doubleArray0[2];
      doubleArray1[4] = double0;
      doubleArray0[2] = double0;
      doubleArray1[2] = doubleArray0[2];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[1]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 332.0523977549172, 332.0523977549172, 332.0523977549172, (-3253.694774430126)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 332.0523977549172, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 332.0523977549172;
      doubleArray0[0] = double0;
      doubleArray0[4] = double0;
      double double1 = 1877.299437550002;
      double double2 = 0.08325;
      doubleArray0[4] = double2;
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double2;
      doubleArray1[2] = double0;
      doubleArray1[1] = double2;
      doubleArray1[3] = double1;
      doubleArray1[4] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[2]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.08325, 0.08325, 332.0523977549172, 1877.299437550002, 332.0523977549172, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {332.0523977549172, 0.0, 0.0, 0.0, 0.08325, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 332.0523977549172;
      doubleArray0[4] = double0;
      double double1 = (-3253.694774430126);
      doubleArray0[2] = double1;
      doubleArray0[3] = double0;
      double double2 = 0.08325;
      double double3 = 3805.399424117325;
      doubleArray0[6] = double3;
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double2;
      doubleArray1[2] = doubleArray0[2];
      doubleArray1[1] = double1;
      doubleArray1[4] = double3;
      doubleArray1[5] = double3;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[2]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-4.844605421556215E15), eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, (-3253.694774430126), 332.0523977549172, 332.0523977549172, 0.0, 3805.399424117325}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.08325, (-3253.694774430126), (-3253.694774430126), 0.0, 3805.399424117325, 3805.399424117325}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-3253.694774430126);
      doubleArray0[2] = double0;
      double double1 = 1890.434865499118;
      doubleArray0[3] = doubleArray0[2];
      double double2 = 0.9590271442816461;
      double double3 = 0.08325;
      doubleArray0[5] = double0;
      double double4 = 3805.399424117325;
      doubleArray0[6] = double4;
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double3;
      doubleArray1[1] = double2;
      doubleArray1[2] = double0;
      doubleArray1[3] = double1;
      doubleArray1[4] = double4;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[2]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9.9780525992969E14, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, (-3253.694774430126), (-3253.694774430126), 0.0, (-3253.694774430126), 3805.399424117325}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.08325, 0.9590271442816461, (-3253.694774430126), 1890.434865499118, 3805.399424117325, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 332.0523977549172;
      double double1 = (-3253.694774430126);
      double double2 = 1890.43487;
      doubleArray0[3] = double2;
      double double3 = 0.08325;
      double double4 = 3805.399424117325;
      doubleArray0[2] = double4;
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = double3;
      doubleArray1[1] = double3;
      doubleArray1[2] = double2;
      doubleArray1[3] = double2;
      doubleArray1[4] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.08325, 0.08325, 1890.43487, 1890.43487, 332.0523977549172, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 3805.399424117325, 1890.43487, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      double double0 = (-1623.87908985);
      doubleArray0[0] = double0;
      double double1 = (-235.11735136);
      double double2 = (-1.2933875131827526);
      doubleArray0[6] = double2;
      doubleArray0[7] = double1;
      doubleArray0[8] = double0;
      doubleArray0[11] = double0;
      doubleArray0[13] = double2;
      doubleArray0[14] = double0;
      doubleArray0[15] = double0;
      double double3 = 0.08325;
      doubleArray0[16] = double3;
      doubleArray0[17] = double0;
      doubleArray0[18] = double3;
      doubleArray0[16] = double2;
      double double4 = (-2650.288045);
      doubleArray0[2] = double4;
      doubleArray0[3] = doubleArray0[14];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(14256.522437849544, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5053.532923117179, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.7027606405185535E9, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {(-1623.87908985), 0.0, (-2650.288045), (-1623.87908985), 0.0, 0.0, (-1.2933875131827526), (-235.11735136), (-1623.87908985), 0.0, 0.0, (-1623.87908985), 0.0, (-1.2933875131827526), (-1623.87908985), (-1623.87908985), (-1.2933875131827526), (-1623.87908985), 0.08325, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(21, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(14256.522437849544, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5053.532923117179, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.7027606405185535E9, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {(-1623.87908985), 0.0, (-2650.288045), (-1623.87908985), 0.0, 0.0, (-1.2933875131827526), (-235.11735136), (-1623.87908985), 0.0, 0.0, (-1623.87908985), 0.0, (-1.2933875131827526), (-1623.87908985), (-1623.87908985), (-1.2933875131827526), (-1623.87908985), 0.08325, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[0]);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(21, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(14256.522437849544, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(5053.532923117179, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.7027606405185535E9, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {(-1623.87908985), 0.0, (-2650.288045), (-1623.87908985), 0.0, 0.0, (-1.2933875131827526), (-235.11735136), (-1623.87908985), 0.0, 0.0, (-1623.87908985), 0.0, (-1.2933875131827526), (-1623.87908985), (-1623.87908985), (-1.2933875131827526), (-1623.87908985), 0.08325, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 57.118;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double double1 = 4.0;
      doubleArray0[3] = doubleArray0[1];
      doubleArray0[0] = double1;
      double double2 = (-871.67547124177);
      doubleArray0[5] = double2;
      double double3 = (-1771.9846);
      doubleArray0[6] = double3;
      double double4 = (-955.860973525);
      doubleArray0[7] = double4;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(3774.87504476677, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(25060.83256993416, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2196.1833139066243, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {4.0, 57.118, 57.118, 57.118, 0.0, (-871.67547124177), (-1771.9846), (-955.860973525), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(3774.87504476677, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(25060.83256993416, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2196.1833139066243, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {4.0, 57.118, 57.118, 57.118, 0.0, (-871.67547124177), (-1771.9846), (-955.860973525), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[7]);
      assertEquals(3774.87504476677, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(25060.83256993416, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2196.1833139066243, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {4.0, 57.118, 57.118, 57.118, 0.0, (-871.67547124177), (-1771.9846), (-955.860973525), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 57.118;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double double1 = 4.0;
      doubleArray0[0] = double1;
      doubleArray0[5] = double1;
      double double2 = (-955.860973525);
      doubleArray0[7] = double2;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(15646.208, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(959.284698385292, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1078.096973525, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {4.0, 57.118, 57.118, 0.0, 0.0, 4.0, 0.0, (-955.860973525), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(15646.208, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(959.284698385292, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1078.096973525, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {4.0, 57.118, 57.118, 0.0, 0.0, 4.0, 0.0, (-955.860973525), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[7]);
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(15646.208, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(959.284698385292, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1078.096973525, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {4.0, 57.118, 57.118, 0.0, 0.0, 4.0, 0.0, (-955.860973525), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = doubleArray0[3];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[2]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 57.118;
      double double1 = 456.24679;
      doubleArray0[3] = double0;
      doubleArray0[4] = double1;
      double double2 = (-2187.278);
      doubleArray0[5] = double2;
      doubleArray0[9] = double2;
      doubleArray0[0] = double0;
      doubleArray0[1] = double2;
      doubleArray0[2] = double0;
      doubleArray0[8] = double0;
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(574565.3759999999, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3817.560234617563, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(7246.55279, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {57.118, (-2187.278), 57.118, 57.118, 456.24679, (-2187.278), 0.0, 0.0, 57.118, (-2187.278)}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(574565.3759999999, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3817.560234617563, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(7246.55279, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertArrayEquals(new double[] {57.118, (-2187.278), 57.118, 57.118, 456.24679, (-2187.278), 0.0, 0.0, 57.118, (-2187.278)}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[7]);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(574565.3759999999, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(3817.560234617563, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(7246.55279, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {57.118, (-2187.278), 57.118, 57.118, 456.24679, (-2187.278), 0.0, 0.0, 57.118, (-2187.278)}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[3] = doubleArray0[0];
      doubleArray0[5] = double0;
      doubleArray0[2] = doubleArray0[1];
      double double1 = 1890.434865499118;
      doubleArray0[6] = double1;
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = double1;
      doubleArray1[4] = doubleArray0[3];
      doubleArray0[0] = doubleArray0[6];
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[2]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.68874985527256E17, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {1890.434865499118, (-1.0), (-1.0), (-1.0), 0.0, (-1.0), 1890.434865499118}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1890.434865499118, (-1.0), 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 332.0523977549172;
      double double1 = (-3253.694774430126);
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[6] = double1;
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[3] = double0;
      doubleArray1[1] = double1;
      doubleArray1[4] = double0;
      doubleArray1[5] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, double1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, (-3253.694774430126), 0.0, 332.0523977549172, 332.0523977549172, 332.0523977549172}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-3253.694774430126), (-3253.694774430126), 0.0, 0.0, (-3253.694774430126)}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double1 == double0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      double double0 = 1.1102230246251565E-14;
      double double1 = (-235.11735136);
      doubleArray0[17] = double1;
      double double2 = (-1.0);
      doubleArray0[6] = double2;
      doubleArray0[7] = double1;
      doubleArray0[10] = double0;
      doubleArray0[13] = double2;
      double double3 = 0.08325;
      doubleArray0[16] = double3;
      doubleArray0[18] = double3;
      doubleArray0[19] = double0;
      doubleArray0[1] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(472.40120272, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(1934273.3423411213, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(332.5091753353708, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 1.1102230246251565E-14, 0.0, 0.0, 0.0, 0.0, (-1.0), (-235.11735136), 0.0, 0.0, 1.1102230246251565E-14, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.08325, (-235.11735136), 0.08325, 1.1102230246251565E-14, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(472.40120272, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(1934273.3423411213, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(332.5091753353708, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(21, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 1.1102230246251565E-14, 0.0, 0.0, 0.0, 0.0, (-1.0), (-235.11735136), 0.0, 0.0, 1.1102230246251565E-14, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.08325, (-235.11735136), 0.08325, 1.1102230246251565E-14, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[0]);
      assertEquals(472.40120272, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(1934273.3423411213, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(332.5091753353708, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(21, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 1.1102230246251565E-14, 0.0, 0.0, 0.0, 0.0, (-1.0), (-235.11735136), 0.0, 0.0, 1.1102230246251565E-14, 0.0, 0.0, (-1.0), 0.0, 0.0, 0.08325, (-235.11735136), 0.08325, 1.1102230246251565E-14, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      //  // Unstable assertion: assertNotSame(doubleArray1, doubleArray0);
      //  // Unstable assertion: assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = Double.NaN;
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // cannot solve degree 3 equation
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      double double0 = (-235.11735136);
      doubleArray0[2] = double0;
      doubleArray0[17] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(470.23470272, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(332.50614704255224, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6.163460295491584E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, (-235.11735136), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-235.11735136), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(470.23470272, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(332.50614704255224, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6.163460295491584E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(21, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, (-235.11735136), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-235.11735136), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[0]);
      assertEquals(470.23470272, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(332.50614704255224, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(6.163460295491584E7, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(-0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(21, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, (-235.11735136), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-235.11735136), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
  }

  @Test
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 2819.784042233;
      double[] doubleArray1 = new double[4];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, double0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(decompositionSolver0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(21, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[0]);
      assertEquals(21, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      double double0 = eigenDecompositionImpl0.getDeterminant();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(21, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(21, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(21, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray1[0];
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      boolean boolean0 = true;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, boolean0);
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      double double0 = 3059.57808426;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(decompositionSolver0);
      
      int int0 = 1109;
      try {
        RealVector realVector0 = eigenDecompositionImpl0.getEigenvector(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1109
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(decompositionSolver0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 2819.784042233;
      double[] doubleArray1 = new double[4];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray1, doubleArray0, double0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getVT();
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[2]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(7, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getD();
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(7, array2DRowRealMatrix1.getRowDimension());
      assertEquals(7, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(array2DRowRealMatrix1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DecompositionSolver decompositionSolver0 = eigenDecompositionImpl0.getSolver();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(decompositionSolver0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray1[2]);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(4, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)eigenDecompositionImpl0.getV();
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(4, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(4, array2DRowRealMatrix1.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(array2DRowRealMatrix1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = double0;
      doubleArray0[2] = double0;
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray1[0];
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray1[1];
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      boolean boolean0 = true;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, boolean0);
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(5, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = null;
      try {
        eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // eigen decomposition of assymetric matrices not supported yet
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[7]);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(10, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(10, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      int int0 = 2710;
      try {
        double double0 = eigenDecompositionImpl0.getRealEigenvalue(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2710
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl(doubleArray0, doubleArray1, doubleArray0[2]);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = eigenDecompositionImpl0.getRealEigenvalues();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
  }

  @Test
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct(doubleArray0);
      assertEquals(20, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(20, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, doubleArray0[0]);
      assertEquals(20, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(20, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(eigenDecompositionImpl0);
      
      int int0 = 0;
      double double0 = eigenDecompositionImpl0.getImagEigenvalue(int0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(20, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(20, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(20, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray1[0];
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      boolean boolean0 = true;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, boolean0);
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      double double0 = 3059.57808426;
      EigenDecompositionImpl eigenDecompositionImpl0 = new EigenDecompositionImpl((RealMatrix) array2DRowRealMatrix0, double0);
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(eigenDecompositionImpl0);
      
      double[] doubleArray2 = eigenDecompositionImpl0.getImagEigenvalues();
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(9, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(9, array2DRowRealMatrix0.getRowDimension());
      assertEquals(0.0, eigenDecompositionImpl0.getDeterminant(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }
}
