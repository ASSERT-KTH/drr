/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:05:42 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigInteger;
import java.util.Random;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.NonMonotonousSequenceException;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

 
public class MathUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      double double0 = 0.0;
      double double1 = MathUtils.log(double0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = double1;
      doubleArray0[2] = double1;
      double double2 = MathUtils.safeNorm(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
  }

  @Test
  public void test001()  throws Throwable  {
      long long0 = (-302932621132653753L);
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) long0;
      double double0 = MathUtils.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-3.0293262113265376E17), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3.0293262113265376E17, double0, 0.01D);
  }

  @Test
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathUtils.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test003()  throws Throwable  {
      int int0 = (-1140);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) int0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-1,140 < 0)
         //
      }
  }

  @Test
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 3017;
      intArray0[1] = int0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) intArray0[1];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
      }
  }

  @Test
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      boolean boolean0 = false;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 527.0;
      doubleArray0[0] = double0;
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (527 > 0)
         //
      }
  }

  @Test
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test008()  throws Throwable  {
      double double0 = 2532.5887842;
      boolean boolean0 = MathUtils.equalsIncludingNaN(double0, double0, double0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.DECREASING;
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
      }
  }

  @Test
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-2.6033824355191673E-8);
      float float0 = (-181.6F);
      float float1 = MathUtils.sign(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      doubleArray0[0] = (double) float1;
      doubleArray0[1] = double0;
      double double1 = 0.097;
      doubleArray0[3] = double1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-2.6033824355191673E-8), 0.0, 0.097}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathUtils.OrderDirection mathUtils_OrderDirection0 = MathUtils.OrderDirection.INCREASING;
      MathUtils.checkOrder(doubleArray0, mathUtils_OrderDirection0, boolean0);
      assertArrayEquals(new double[] {(-1.0), (-2.6033824355191673E-8), 0.0, 0.097}, doubleArray0, 0.01);
  }

  @Test
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = MathUtils.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathUtils.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[10];
      double double0 = MathUtils.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathUtils.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = MathUtils.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathUtils.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals(0, bigInteger1.byteValue());
      assertEquals(-7168, bigInteger1.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
  }

  @Test
  public void test017()  throws Throwable  {
      int int0 = (-2453);
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-2,453)
         //
      }
  }

  @Test
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      int int0 = 2930;
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, (long) int0);
      assertNotNull(bigInteger1);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertEquals(0, bigInteger1.byteValue());
      assertEquals(0, bigInteger1.shortValue());
      assertSame(bigInteger0, bigInteger1);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      int int0 = (-4388);
      try {
        BigInteger bigInteger1 = MathUtils.pow(bigInteger0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (0^-4,388)
         //
      }
  }

  @Test
  public void test020()  throws Throwable  {
      int int0 = 5;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = BigInteger.probablePrime(int0, (Random) mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals(17, bigInteger0.shortValue());
      assertEquals(17, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = MathUtils.pow(bigInteger0, int0);
      assertNotNull(bigInteger1);
      assertEquals(17, bigInteger0.shortValue());
      assertEquals(17, bigInteger0.byteValue());
      assertEquals(81, bigInteger1.byteValue());
      assertEquals(-21935, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test
  public void test021()  throws Throwable  {
      int int0 = 406;
      long long0 = MathUtils.pow((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test022()  throws Throwable  {
      int int0 = (-1458);
      try {
        long long0 = MathUtils.pow((long) int0, (long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,458^-1,458)
         //
      }
  }

  @Test
  public void test023()  throws Throwable  {
      int int0 = 406;
      int int1 = MathUtils.sign(int0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      long long0 = MathUtils.pow((long) int1, (long) int1);
      assertEquals(1L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test024()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      int int0 = (-3031);
      try {
        long long1 = MathUtils.pow(long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-9,223,372,036,854,775,808^-3,031)
         //
      }
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = 11;
      int int1 = (-2034);
      try {
        int int2 = MathUtils.pow(int0, (long) int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (11^-2,034)
         //
      }
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = (-1525);
      try {
        int int1 = MathUtils.pow(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot raise an integral value to a negative power (-1,525^-1,525)
         //
      }
  }

  @Test
  public void test027()  throws Throwable  {
      byte byte0 = (byte)126;
      int int0 = MathUtils.subAndCheck((int) byte0, (int) byte0);
      assertEquals(0, int0);
  }

  @Test
  public void test028()  throws Throwable  {
      short short0 = (short)1283;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)1, short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test029()  throws Throwable  {
      short short0 = (short)0;
      short short1 = MathUtils.sign(short0);
      assertEquals((short)0, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test030()  throws Throwable  {
      int int0 = 20;
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertEquals(40, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      long long0 = MathUtils.sign((long) int1);
      assertEquals(1L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test031()  throws Throwable  {
      long long0 = 0L;
      long long1 = MathUtils.sign(long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte) (-49);
      long long0 = MathUtils.sign((long) byte0);
      assertEquals((-1L), long0);
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = (-39);
      int int1 = MathUtils.sign(int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test034()  throws Throwable  {
      int int0 = 0;
      float float0 = MathUtils.sign((float) int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test035()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = MathUtils.sign(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      
      int int0 = bigInteger0.bitCount();
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(2, int0);
      
      float float0 = MathUtils.sign((float) int0);
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test
  public void test037()  throws Throwable  {
      double double0 = (-2867.28);
      double double1 = MathUtils.sign(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = 808;
      double double0 = MathUtils.binomialCoefficientLog(int0, int0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = MathUtils.sign(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test039()  throws Throwable  {
      double double0 = 3665.73111158;
      double double1 = MathUtils.sign(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test040()  throws Throwable  {
      byte byte0 = (byte)126;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test041()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test042()  throws Throwable  {
      byte byte0 = (byte) (-25);
      byte byte1 = MathUtils.sign(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test043()  throws Throwable  {
      float float0 = (-1164.3649F);
      int int0 = 3453;
      float float1 = MathUtils.round(float0, int0);
      assertEquals(Float.NaN, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test044()  throws Throwable  {
      int int0 = (-1492);
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(1492, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        float float0 = MathUtils.round((float) int1, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid rounding method 1,492, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)
         //
      }
  }

  @Test
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      
      int int0 = bigInteger0.bitCount();
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(2, int0);
      
      int int1 = 5;
      assertFalse(int1 == int0);
      
      float float0 = MathUtils.round((float) int0, int0, int1);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(2.0F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test046()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(int0, (long) int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      float float0 = MathUtils.round((float) int1, int1, int1);
      assertEquals(0.9F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test047()  throws Throwable  {
      int int0 = (-692);
      int int1 = MathUtils.indicator(int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = MathUtils.round(double0, int1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(int1 == int0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertFalse(int0 == int1);
  }

  @Test
  public void test048()  throws Throwable  {
      int int0 = 808;
      double double0 = (-3848.693849587428);
      double double1 = MathUtils.log((double) int0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int1 = MathUtils.indicator(int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = double1;
      double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, double0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3848.693849587428), Double.NaN, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(double0 == double1);
  }

  @Test
  public void test049()  throws Throwable  {
      int int0 = 808;
      double double0 = (-3848.693849587428);
      double double1 = MathUtils.log((double) int0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = double1;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, (double) int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = double0;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, doubleArray0[0]);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.POSITIVE_INFINITY;
      try {
        double[] doubleArray1 = MathUtils.normalizeArray(doubleArray0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      double double0 = 2.4384203044354907E-8;
      int int0 = MathUtils.compareTo(double0, double0, double0);
      assertEquals(0, int0);
      
      double double1 = MathUtils.scalb(double0, int0);
      assertEquals(2.4384203044354907E-8, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test
  public void test053()  throws Throwable  {
      int int0 = 1729;
      long long0 = 0L;
      double double0 = MathUtils.scalb((double) long0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test054()  throws Throwable  {
      int int0 = 0;
      long long0 = MathUtils.mulAndCheck((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test055()  throws Throwable  {
      long long0 = (-4572L);
      long long1 = 9193070505571053912L;
      // Undeclared exception!
      try {
        long long2 = MathUtils.mulAndCheck(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      long long0 = (-2071L);
      long long1 = 0L;
      long long2 = MathUtils.mulAndCheck(long1, long0);
      assertEquals(0L, long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
  }

  @Test
  public void test057()  throws Throwable  {
      long long0 = (-3183605296591799669L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.mulAndCheck(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test058()  throws Throwable  {
      int int0 = 35;
      int int1 = MathUtils.pow(int0, int0);
      assertEquals(618402555, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        int int2 = MathUtils.mulAndCheck(int1, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      int int0 = 20;
      long long0 = 0L;
      long long1 = MathUtils.lcm((long) int0, long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test060()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(int0, (long) int0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      long long0 = MathUtils.lcm((long) int0, (long) int1);
      assertEquals(0L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test061()  throws Throwable  {
      long long0 = 4398046511103L;
      double double0 = 0.0;
      int int0 = 1;
      int int1 = MathUtils.pow(int0, long0);
      assertEquals(1, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      int int2 = MathUtils.hash(double0);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = MathUtils.lcm(int1, int2);
      assertEquals(0, int3);
      assertFalse(int0 == int3);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int3);
      assertFalse(int1 == int3);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
  }

  @Test
  public void test062()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test063()  throws Throwable  {
      short short0 = (short)1496;
      short short1 = MathUtils.indicator(short0);
      assertEquals((short)1, short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test064()  throws Throwable  {
      int int0 = 20;
      long long0 = MathUtils.indicator((long) int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test065()  throws Throwable  {
      int int0 = (-692);
      long long0 = MathUtils.indicator((long) int0);
      assertEquals((-1L), long0);
  }

  @Test
  public void test066()  throws Throwable  {
      int int0 = 0;
      int int1 = (-39);
      float float0 = MathUtils.round((float) int1, int0);
      assertEquals((-39.0F), float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test067()  throws Throwable  {
      int int0 = 0;
      float float0 = Float.NaN;
      float float1 = MathUtils.round(float0, int0, int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test
  public void test068()  throws Throwable  {
      short short0 = (short) (-4149);
      short short1 = MathUtils.indicator(short0);
      assertEquals((short) (-1), short1);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      
      double double0 = MathUtils.indicator((double) short1);
      assertEquals((-1.0), double0, 0.01D);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test069()  throws Throwable  {
      double double0 = Double.NaN;
      double double1 = MathUtils.indicator(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test
  public void test070()  throws Throwable  {
      double double0 = 2961.057364787;
      double double1 = MathUtils.indicator(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test071()  throws Throwable  {
      byte byte0 = (byte)52;
      byte byte1 = MathUtils.indicator(byte0);
      assertEquals((byte)1, byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test072()  throws Throwable  {
      byte byte0 = (byte) (-49);
      byte byte1 = MathUtils.indicator(byte0);
      assertEquals((byte) (-1), byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test073()  throws Throwable  {
      int int0 = (-39);
      long long0 = 2935890503282001226L;
      long long1 = MathUtils.lcm(long0, (long) int0);
      assertEquals(8807671509846003678L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      
      int int0 = bigInteger0.bitCount();
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(2, int0);
      
      long long0 = MathUtils.lcm((long) int0, (long) int0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(2L, long0);
  }

  @Test
  public void test075()  throws Throwable  {
      byte byte0 = (byte) (-49);
      short short0 = MathUtils.sign((short) byte0);
      assertEquals((short) (-1), short0);
      
      long long0 = 0L;
      long long1 = MathUtils.gcd((long) short0, long0);
      assertEquals(1L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test076()  throws Throwable  {
      long long0 = (-3681L);
      long long1 = MathUtils.lcm(long0, long0);
      assertEquals(3681L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 0;
      long long0 = MathUtils.gcd((long) int0, (long) intArray0[0]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test078()  throws Throwable  {
      int int0 = 678;
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(678, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test079()  throws Throwable  {
      int int0 = (-1031);
      int int1 = 0;
      int int2 = MathUtils.gcd(int0, int1);
      assertEquals(1031, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test080()  throws Throwable  {
      int int0 = 69;
      double double0 = 0.0;
      int int1 = MathUtils.hash(double0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = MathUtils.gcd(int1, int0);
      assertEquals(69, int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test
  public void test081()  throws Throwable  {
      int int0 = 20;
      double double0 = MathUtils.factorialLog(int0);
      assertEquals(42.335616460753485, double0, 0.01D);
  }

  @Test
  public void test082()  throws Throwable  {
      int int0 = (-3457);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialLog(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -3,457
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      int int0 = 20;
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertEquals(40, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = MathUtils.factorialDouble(int1);
      assertEquals(8.159152832479056E47, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test084()  throws Throwable  {
      byte byte0 = (byte) (-25);
      // Undeclared exception!
      try {
        double double0 = MathUtils.factorialDouble((int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -25
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(int0, (long) int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = MathUtils.factorialDouble(int1);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test086()  throws Throwable  {
      int int0 = 57;
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = (-1457);
      // Undeclared exception!
      try {
        long long0 = MathUtils.factorial(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!, got n = -1,457
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test
  public void test089()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test092()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = null;
      boolean boolean0 = MathUtils.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test095()  throws Throwable  {
      int int0 = 20;
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) int0, (double) int0, int0);
      assertTrue(boolean0);
  }

  @Test
  public void test096()  throws Throwable  {
      int int0 = 21;
      long long0 = MathUtils.pow((long) int0, int0);
      assertEquals((-1595931050845505211L), long0);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) long0, (double) int0, int0);
      assertFalse(boolean0);
  }

  @Test
  public void test097()  throws Throwable  {
      int int0 = 808;
      double double0 = (-3848.693849587428);
      double double1 = MathUtils.log((double) int0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = double1;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 3094.329034;
      long long0 = (-54L);
      long long1 = MathUtils.subAndCheck(long0, long0);
      assertEquals(0L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      doubleArray0[2] = double0;
      int int0 = MathUtils.hash(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3094.329034}, doubleArray0, 0.01);
      assertEquals(932006530, int0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = MathUtils.equals(doubleArray0[0], (double) long1, int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test099()  throws Throwable  {
      double double0 = 2.4384203044354907E-8;
      int int0 = MathUtils.compareTo(double0, double0, double0);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = MathUtils.equalsIncludingNaN((double) int0, (double) int0, int0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test100()  throws Throwable  {
      int int0 = 21;
      int int1 = 0;
      double double0 = MathUtils.round((double) int0, int1);
      assertEquals(21.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      boolean boolean0 = MathUtils.equalsIncludingNaN((double) int1, double0, (double) int0);
      assertTrue(boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test101()  throws Throwable  {
      byte byte0 = (byte) (-49);
      long long0 = 1027L;
      short short0 = MathUtils.sign((short) byte0);
      assertEquals((short) (-1), short0);
      
      int int0 = MathUtils.compareTo((double) byte0, (double) short0, (double) long0);
      assertEquals(0, int0);
  }

  @Test
  public void test102()  throws Throwable  {
      double double0 = 10.0;
      double double1 = (-1417.549);
      boolean boolean0 = MathUtils.equalsIncludingNaN(double0, double1, double0);
      assertFalse(boolean0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = Double.NaN;
      doubleArray0[1] = double0;
      boolean boolean0 = MathUtils.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test
  public void test104()  throws Throwable  {
      int int0 = 0;
      int int1 = MathUtils.pow(int0, (long) int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = 2720.8123857709;
      int int2 = MathUtils.compareTo((double) int1, double0, (double) int1);
      assertEquals((-1), int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test
  public void test105()  throws Throwable  {
      int int0 = (-1031);
      int int1 = 678;
      double double0 = MathUtils.factorialLog(int1);
      assertEquals(3746.1604963112786, double0, 0.01D);
      assertFalse(int1 == int0);
      
      int int2 = MathUtils.gcd(int0, int0);
      assertEquals(1031, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = MathUtils.compareTo(double0, (double) int0, (double) int2);
      assertEquals(1, int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
  }

  @Test
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-58);
      intArray0[1] = int0;
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble(intArray0[1], intArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k), got n = -58
         //
      }
  }

  @Test
  public void test107()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      
      int int0 = bigInteger0.bitCount();
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(2, int0);
      
      int int1 = MathUtils.addAndCheck(int0, int0);
      assertEquals(10, bigInteger0.byteValue());
      assertEquals(10, bigInteger0.shortValue());
      assertEquals(4, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k), got n = 2, k = 4
         //
      }
  }

  @Test
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 651;
      int int1 = 1945;
      intArray0[2] = int1;
      double double0 = MathUtils.binomialCoefficientLog(intArray0[2], int0);
      assertArrayEquals(new int[] {0, 0, 1945, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1235.9056481888038, double0, 0.01D);
      assertFalse(int0 == int1);
  }

  @Test
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 651;
      int int1 = (-2416);
      intArray0[1] = int1;
      intArray0[2] = int0;
      double double0 = MathUtils.binomialCoefficientLog(intArray0[2], intArray0[1]);
      assertArrayEquals(new int[] {0, (-2416), 651, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test110()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      double double0 = MathUtils.binomialCoefficientLog(int0, int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test111()  throws Throwable  {
      int int0 = 69;
      int int1 = MathUtils.lcm(int0, int0);
      assertEquals(69, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = 0.0;
      int int2 = MathUtils.hash(double0);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double double1 = MathUtils.binomialCoefficientLog(int1, int2);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(double0 == double1);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertTrue(double1 == double0);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
  }

  @Test
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = (-2416);
      intArray0[1] = int0;
      double double0 = MathUtils.binomialCoefficientLog(intArray0[2], intArray0[1]);
      assertArrayEquals(new int[] {0, (-2416), 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test113()  throws Throwable  {
      int int0 = 20;
      int int1 = 4194304;
      double double0 = MathUtils.binomialCoefficientDouble(int1, int0);
      assertEquals(1.1669541744395831E114, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test114()  throws Throwable  {
      int int0 = 12;
      int int1 = 9;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int1);
      assertEquals(220.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test115()  throws Throwable  {
      long long0 = 4398046511103L;
      double double0 = 0.0;
      int int0 = 1;
      int int1 = MathUtils.pow(int0, long0);
      assertEquals(1, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      int int2 = MathUtils.hash(double0);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double double1 = MathUtils.binomialCoefficientDouble(int1, int2);
      assertEquals(1.0, double1, 0.01D);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
  }

  @Test
  public void test116()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.binomialCoefficientDouble(int0, int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      int int0 = 260;
      long long0 = 6L;
      int int1 = MathUtils.pow(int0, long0);
      assertEquals(253235200, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = (-138);
      assertFalse(int2 == int1);
      
      long long1 = MathUtils.binomialCoefficient(int1, int2);
      assertEquals(1L, long1);
      assertFalse(long1 == long0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(long0 == long1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test118()  throws Throwable  {
      int int0 = 260;
      long long0 = 6L;
      int int1 = MathUtils.pow(int0, long0);
      assertEquals(253235200, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      short short0 = (short)1283;
      // Undeclared exception!
      try {
        long long1 = MathUtils.binomialCoefficient(int1, (int) short0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
      }
  }

  @Test
  public void test119()  throws Throwable  {
      int int0 = 406;
      int int1 = MathUtils.sign(int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      long long0 = MathUtils.binomialCoefficient(int0, int1);
      assertEquals(406L, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test120()  throws Throwable  {
      int int0 = 406;
      int int1 = MathUtils.sign(int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      int int3 = MathUtils.sign(int2);
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertFalse(int2 == int1);
      
      long long0 = MathUtils.binomialCoefficient(int1, int3);
      assertEquals(1L, long0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test121()  throws Throwable  {
      int int0 = 21;
      long long0 = MathUtils.binomialCoefficient(int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test122()  throws Throwable  {
      long long0 = 9154082963658192752L;
      // Undeclared exception!
      try {
        long long1 = MathUtils.addAndCheck(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in addition: 9,154,082,963,658,192,752 + 9,154,082,963,658,192,752
         //
      }
  }

  @Test
  public void test123()  throws Throwable  {
      long long0 = (-9223372036854775799L);
      // Undeclared exception!
      try {
        long long1 = MathUtils.addAndCheck(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in addition: -9,223,372,036,854,775,799 + -9,223,372,036,854,775,799
         //
      }
  }

  @Test
  public void test124()  throws Throwable  {
      long long0 = (-3681L);
      long long1 = MathUtils.addAndCheck(long0, long0);
      assertEquals((-7362L), long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test125()  throws Throwable  {
      double double0 = 2.4384203044354907E-8;
      int int0 = MathUtils.compareTo(double0, double0, double0);
      assertEquals(0, int0);
      
      long long0 = (-2147483648L);
      long long1 = MathUtils.addAndCheck((long) int0, long0);
      assertEquals((-2147483648L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test126()  throws Throwable  {
      int int0 = (-1031);
      double double0 = MathUtils.cosh((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test
  public void test127()  throws Throwable  {
      int int0 = 406;
      int int1 = MathUtils.sign(int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = MathUtils.sinh((double) int1);
      assertEquals(1.1752011936438014, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try {
        MathUtils.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
      }
  }

  @Test
  public void test129()  throws Throwable  {
      int int0 = 0;
      double double0 = MathUtils.normalizeAngle((double) int0, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test130()  throws Throwable  {
      double double0 = 2.4384203044354907E-8;
      int int0 = MathUtils.compareTo(double0, double0, double0);
      assertEquals(0, int0);
      
      long long0 = MathUtils.addAndCheck((long) int0, (long) int0);
      assertEquals(0L, long0);
  }
}
