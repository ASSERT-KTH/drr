/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:58:39 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.linear.SingularValueDecompositionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class SingularValueDecompositionImplEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = arrayRealVector0.projection(arrayRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector1.outerProduct((RealVector) arrayRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(singularValueDecompositionImpl0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      
      int int0 = singularValueDecompositionImpl0.getRank();
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, int0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, singularValueDecompositionImpl0.getRank());
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(Double.NaN, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 1303;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(1303, openMapRealMatrix0.getRowDimension());
      assertEquals(1303, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) openMapRealMatrix0);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(1303, openMapRealMatrix0.getRowDimension());
      assertEquals(1303, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      
      // Undeclared exception!
      try {
        RealMatrix realMatrix0 = singularValueDecompositionImpl0.getCovariance((double) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 700.3;
      double[][] doubleArray1 = new double[7][7];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)array2DRowRealMatrix0.scalarAdd(double0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertNotNull(array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertEquals(false, array2DRowRealMatrix1.isSquare());
      assertEquals(8, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix1.getRowDimension());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      int int0 = 290;
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix1, int0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertNotNull(singularValueDecompositionImpl0);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertEquals(false, array2DRowRealMatrix1.isSquare());
      assertEquals(8, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix1.getRowDimension());
      assertEquals(2, singularValueDecompositionImpl0.getRank());
      assertEquals(5240.565335915582, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(2.1970820031999996E8, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getCovariance(double0);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix1));
      assertNotNull(array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertEquals(false, array2DRowRealMatrix1.isSquare());
      assertEquals(8, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix1.getRowDimension());
      assertEquals(2, singularValueDecompositionImpl0.getRank());
      assertEquals(5240.565335915582, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(2.1970820031999996E8, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(2, array2DRowRealMatrix2.getRowDimension());
      assertEquals(2, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix2.isSquare());
      
      Array2DRowRealMatrix array2DRowRealMatrix3 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getCovariance(doubleArray0[3]);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix3));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertTrue(array2DRowRealMatrix3.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix3.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix3.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix3));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix3);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix3);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix3, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix3, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix3, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix3);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertEquals(false, array2DRowRealMatrix1.isSquare());
      assertEquals(8, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, array2DRowRealMatrix3.isSquare());
      assertEquals(2, array2DRowRealMatrix3.getColumnDimension());
      assertEquals(2, array2DRowRealMatrix3.getRowDimension());
      assertEquals(2, singularValueDecompositionImpl0.getRank());
      assertEquals(5240.565335915582, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(2.1970820031999996E8, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = 1443.8580626486157;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      assertEquals(0, realMatrixImpl0.getRowDimension());
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[3] = double0;
      doubleArray1[8] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      doubleArray0[1] = doubleArray0[0];
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[3] = double0;
      doubleArray0[2] = doubleArray2;
      assertNotNull(doubleArray0[2]);
      
      doubleArray0[3] = doubleArray0[0];
      assertNotNull(doubleArray0[3]);
      
      realMatrixImpl0.data = doubleArray0;
      assertNotNull(realMatrixImpl0.data);
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      
      int int0 = 20;
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0, int0);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(3692.829306467818, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(3, singularValueDecompositionImpl0.getRank());
      assertEquals(1.29929880379306957E18, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(3692.829306467818, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(3, singularValueDecompositionImpl0.getRank());
      assertEquals(1.29929880379306957E18, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[8][3];
      double double0 = (-1.0);
      doubleArray0[2] = double0;
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix0);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(1.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getS();
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertNotNull(array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertEquals(1.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix2 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getS();
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix2));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertFalse(array2DRowRealMatrix2.equals((Object)array2DRowRealMatrix0));
      assertNotNull(array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix2);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
      assertSame(array2DRowRealMatrix2, array2DRowRealMatrix1);
      assertNotSame(array2DRowRealMatrix2, array2DRowRealMatrix0);
      assertEquals(1.0, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(8, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(3, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix2.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix2.isSquare());
      assertEquals(1, array2DRowRealMatrix2.getRowDimension());
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 1443.8580626486157;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[3] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      realMatrixImpl0.data = doubleArray0;
      assertNotNull(realMatrixImpl0.data);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      
      int int0 = 20;
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0, int0);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1443.8580626486157, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1443.8580626486157, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      assertEquals(false, decompositionSolver0.isNonSingular());
      
      DecompositionSolver decompositionSolver1 = singularValueDecompositionImpl0.getSolver();
      assertFalse(decompositionSolver1.equals((Object)decompositionSolver0));
      assertNotNull(decompositionSolver1);
      assertNotSame(decompositionSolver1, decompositionSolver0);
      assertEquals(false, decompositionSolver1.isNonSingular());
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(1443.8580626486157, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(9, realMatrixImpl0.getColumnDimension());
  }

  @Test
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 995.6;
      doubleArray0[0] = double0;
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) doubleArray0[0];
      doubleArray1[1] = (Double) doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, doubleArray0[1]);
      assertArrayEquals(new double[] {995.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertArrayEquals(new double[] {995.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(2, openMapRealMatrix0.getRowDimension());
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) openMapRealMatrix0);
      assertArrayEquals(new double[] {995.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1982438.7200000004, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(2, openMapRealMatrix0.getRowDimension());
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertArrayEquals(new double[] {995.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(decompositionSolver0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1982438.7200000004, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(2, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(2, openMapRealMatrix0.getRowDimension());
      assertEquals(false, decompositionSolver0.isNonSingular());
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 1443.8580626486157;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl();
      assertNotNull(realMatrixImpl0);
      assertEquals(0, realMatrixImpl0.getRowDimension());
      assertEquals(0, realMatrixImpl0.getColumnDimension());
      assertEquals(true, realMatrixImpl0.isSquare());
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[3] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      realMatrixImpl0.data = doubleArray0;
      assertNotNull(realMatrixImpl0.data);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      
      int int0 = 20;
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) realMatrixImpl0, int0);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1443.8580626486157, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)singularValueDecompositionImpl0.getU();
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(4, array2DRowRealMatrix0.getRowDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1443.8580626486157, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(9, realMatrixImpl0.getColumnDimension());
      
      DecompositionSolver decompositionSolver0 = singularValueDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(false, decompositionSolver0.isNonSingular());
      assertEquals(1.0, singularValueDecompositionImpl0.getConditionNumber(), 0.01D);
      assertEquals(1443.8580626486157, singularValueDecompositionImpl0.getNorm(), 0.01D);
      assertEquals(1, singularValueDecompositionImpl0.getRank());
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(4, realMatrixImpl0.getRowDimension());
      assertEquals(9, realMatrixImpl0.getColumnDimension());
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1, arrayRealVector0.getDimension());
      
      // Undeclared exception!
      try {
        double double0 = singularValueDecompositionImpl0.getConditionNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      
      double[] doubleArray1 = singularValueDecompositionImpl0.getSingularValues();
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
  }

  @Test
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0);
      assertNotNull(array2DRowRealMatrix0);
      assertEquals(7, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      
      int int0 = 290;
      SingularValueDecompositionImpl singularValueDecompositionImpl0 = new SingularValueDecompositionImpl((RealMatrix) array2DRowRealMatrix0, int0);
      assertNotNull(singularValueDecompositionImpl0);
      assertEquals(7, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      
      // Undeclared exception!
      try {
        double double0 = singularValueDecompositionImpl0.getNorm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }
}
