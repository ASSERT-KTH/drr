/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:44:17 GMT 2014
 */

package org.apache.commons.math3.optimization.direct;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.UnitSphereRandomVectorGenerator;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CMAESOptimizerEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 328;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      int int1 = 0;
      Well512a well512a0 = new Well512a((long) int1);
      assertFalse(int1 == int0);
      assertNotNull(well512a0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0, (RandomGenerator) well512a0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, int1, unitSphereRandomVectorGenerator0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0], doubleArray0, doubleArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(328, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(329, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(pointValuePair0);
      
      GoalType goalType1 = GoalType.MINIMIZE;
      assertNotSame(goalType1, goalType0);
      
      PointValuePair pointValuePair1 = cMAESOptimizer0.optimizeInternal(int0, microsphereInterpolatingFunction0, goalType1, doubleArray0);
      assertFalse(goalType1.equals((Object)goalType0));
      assertFalse(int1 == int0);
      assertFalse(pointValuePair1.equals((Object)pointValuePair0));
      assertFalse(int0 == int1);
      assertEquals(328, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(329, cMAESOptimizer0.getEvaluations());
      assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
      assertNotSame(goalType1, goalType0);
      assertNotSame(pointValuePair1, pointValuePair0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(pointValuePair1);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 328;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      int int1 = 0;
      Well512a well512a0 = new Well512a((long) int1);
      assertFalse(int1 == int0);
      assertNotNull(well512a0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1, (RandomGenerator) well512a0);
      assertFalse(int1 == int0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, int1, unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0], doubleArray0, doubleArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(328, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(329, cMAESOptimizer0.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      assertArrayEquals(new double[] {328.0}, doubleArray0, 0.01);
      assertNotNull(pointValuePair0);
      
      doubleArray0[0] = (double) int1;
      PointValuePair pointValuePair1 = cMAESOptimizer0.optimizeInternal(int0, microsphereInterpolatingFunction0, goalType0, doubleArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(pointValuePair1.equals((Object)pointValuePair0));
      assertEquals(328, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(329, cMAESOptimizer0.getEvaluations());
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      assertNotSame(pointValuePair1, pointValuePair0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(pointValuePair1);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 24;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {24.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      
      int int1 = 0;
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
      assertFalse(int0 == int1);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, int1, unitSphereRandomVectorGenerator0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int1, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[1], doubleArray0, doubleArray1[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 24 out of [0, 0] range
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 30000;
      double[] doubleArray0 = new double[10];
      double double0 = (-700.1498403457);
      doubleArray0[1] = double0;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {0.0, (-700.1498403457), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      
      double[][] doubleArray1 = new double[10][8];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      assertNotNull(doubleArray1[8]);
      
      doubleArray1[9] = doubleArray0;
      assertNotNull(doubleArray1[9]);
      
      int int1 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1);
      assertFalse(int1 == int0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[8], int0, int1, unitSphereRandomVectorGenerator0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[8]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -700.15 is smaller than the minimum (0)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 328;
      double[] doubleArray0 = new double[1];
      boolean boolean0 = true;
      RandomGenerator randomGenerator0 = null;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int0, (double) int0, boolean0, int0, int0, randomGenerator0, boolean0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      
      double[][] doubleArray1 = new double[1][10];
      int int1 = 0;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int1, randomGenerator0);
      assertFalse(int1 == int0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray0, int0, int0, unitSphereRandomVectorGenerator0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try {
        PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 328;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) int0;
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      int int1 = 0;
      int int2 = 450;
      Well512a well512a0 = new Well512a((long) int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertNotNull(well512a0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int2, (RandomGenerator) well512a0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, int1, unitSphereRandomVectorGenerator0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      doubleArray0[0] = (double) int1;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int2, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(450, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(451, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(pointValuePair0);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 328;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      int int1 = 0;
      int int2 = 450;
      Well512a well512a0 = new Well512a((long) int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertNotNull(well512a0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int2, (RandomGenerator) well512a0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, int1, unitSphereRandomVectorGenerator0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int0, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[0], doubleArray0, doubleArray0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(328, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(329, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(pointValuePair0);
      
      PointValuePair pointValuePair1 = cMAESOptimizer0.optimizeInternal(int2, microsphereInterpolatingFunction0, goalType0, doubleArray1[0]);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(pointValuePair1.equals((Object)pointValuePair0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(329, cMAESOptimizer0.getEvaluations());
      assertEquals(450, cMAESOptimizer0.getMaxEvaluations());
      assertNotSame(pointValuePair1, pointValuePair0);
      assertNotNull(pointValuePair1);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[4];
      boolean boolean0 = false;
      int int1 = 2522;
      int[] intArray0 = new int[10];
      intArray0[0] = int1;
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertArrayEquals(new int[] {2522, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(well44497b0);
      
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0, doubleArray0, int0, (double) int0, boolean0, int1, int1, (RandomGenerator) well44497b0, boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertArrayEquals(new int[] {2522, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(cMAESOptimizer0);
      
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(intArray0[8], (RandomGenerator) well44497b0);
      assertArrayEquals(new int[] {2522, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[3], intArray0[0], intArray0[8], unitSphereRandomVectorGenerator0);
      assertArrayEquals(new int[] {2522, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(intArray0[0], (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray1[1], doubleArray1[1], doubleArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      assertEquals(2522, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(1, cMAESOptimizer0.getEvaluations());
      assertArrayEquals(new int[] {2522, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(pointValuePair0);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 30000;
      double[] doubleArray0 = new double[10];
      double[][] doubleArray1 = new double[10][8];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[6]);
      
      doubleArray1[7] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[7]);
      
      doubleArray1[8] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[8]);
      
      doubleArray1[9] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[9]);
      
      int int1 = 0;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      
      int int2 = 1372;
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[8], int0, int1, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int2, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(GoalType.MAXIMIZE, cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(1372, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertEquals(1373, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotNull(pointValuePair0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 328;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0);
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test10()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-3289);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int0);
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNotNull(cMAESOptimizer0);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(cMAESOptimizer0.getGoalType());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertNotNull(list0);
  }

  @Test
  public void test12()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer();
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(cMAESOptimizer0);
      
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, cMAESOptimizer0.getEvaluations());
      assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      assertNull(cMAESOptimizer0.getGoalType());
      assertNotNull(list0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-3289);
      int int1 = 0;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNull(cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(0, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertNotNull(cMAESOptimizer0);
      
      int int2 = 1461;
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      //  // Unstable assertion: assertNotNull(doubleArray1[0]);
      
      Well512a well512a0 = new Well512a((long) int0);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotNull(well512a0);
      
      UnitSphereRandomVectorGenerator unitSphereRandomVectorGenerator0 = new UnitSphereRandomVectorGenerator(int0, (RandomGenerator) well512a0);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNotNull(unitSphereRandomVectorGenerator0);
      
      MicrosphereInterpolatingFunction microsphereInterpolatingFunction0 = new MicrosphereInterpolatingFunction(doubleArray1, doubleArray1[0], int0, int1, unitSphereRandomVectorGenerator0);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertNotNull(microsphereInterpolatingFunction0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      PointValuePair pointValuePair0 = cMAESOptimizer0.optimize(int2, (MultivariateFunction) microsphereInterpolatingFunction0, goalType0, doubleArray0);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertEquals(1462, cMAESOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(GoalType.MINIMIZE, cMAESOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(1461, cMAESOptimizer0.getMaxEvaluations());
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertNotNull(pointValuePair0);
  }
}
