/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:38:22 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.distribution.DiscreteDistribution;
import org.apache.commons.math3.exception.NotPositiveException;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class DiscreteDistributionEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      long long0 = 4294967313L;
      Well44497a well44497a0 = new Well44497a(long0);
      assertNotNull(well44497a0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      Double double0 = new Double((double) long0);
      assertEquals(4.294967313E9, (double)double0, 0.01D);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) well44497a0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) well44497a0, (List<Pair<Object, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      int int0 = (-1029);
      try {
        Object[] objectArray0 = discreteDistribution0.sample(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,029)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      long long0 = 4294967302L;
      Well44497a well44497a0 = new Well44497a(long0);
      assertNotNull(well44497a0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double((double) long0);
      assertEquals(4.294967302E9, (double)double0, 0.01D);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) linkedList0, double0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) well44497a0, (List<Pair<Object, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      byte byte0 = (byte)14;
      Object[] objectArray0 = discreteDistribution0.sample((int) byte0);
      assertEquals(1, linkedList0.size());
      assertNotNull(objectArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = 219;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(219, (int)integer0);
      
      Double double0 = new Double((double) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(219.0, (double)double0, 0.01D);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(pair0);
      assertEquals(2, linkedList0.size());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) linkedList0);
      assertEquals(2, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      Integer integer1 = discreteDistribution0.sample();
      assertEquals(2, linkedList0.size());
      assertSame(integer1, integer0);
      assertTrue(integer1.equals((Object)int0));
      assertEquals(219, (int)integer1);
  }

  @Test
  public void test3()  throws Throwable  {
      long long0 = 4294967302L;
      Well44497a well44497a0 = new Well44497a(long0);
      assertNotNull(well44497a0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double((double) long0);
      assertEquals(4.294967302E9, (double)double0, 0.01D);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) linkedList0, double0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) well44497a0, (List<Pair<Object, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      List<Pair<Object, Double>> list0 = discreteDistribution0.getSamples();
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<Pair<Integer, Double>> linkedList0 = new LinkedList<Pair<Integer, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      int int0 = 219;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(219, (int)integer0);
      
      Double double0 = new Double((double) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(219.0, (double)double0, 0.01D);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      DiscreteDistribution<Integer> discreteDistribution0 = new DiscreteDistribution<Integer>((List<Pair<Integer, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      double double1 = discreteDistribution0.probability(integer0);
      assertEquals(1, linkedList0.size());
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      long long0 = 4294967302L;
      Well44497a well44497a0 = new Well44497a(long0);
      assertNotNull(well44497a0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      Double double0 = new Double((double) long0);
      assertEquals(4.294967302E9, (double)double0, 0.01D);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) linkedList0, double0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) well44497a0, (List<Pair<Object, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      Object object0 = null;
      double double1 = discreteDistribution0.probability(object0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      long long0 = 1812433241L;
      Well44497a well44497a0 = new Well44497a(long0);
      assertNotNull(well44497a0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      Object object0 = null;
      Double double0 = new Double((double) long0);
      assertEquals(1.812433241E9, (double)double0, 0.01D);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(object0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) well44497a0, (List<Pair<Object, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      double double1 = discreteDistribution0.probability(object0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, double1, 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      long long0 = 4294967313L;
      Well44497a well44497a0 = new Well44497a(long0);
      assertNotNull(well44497a0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double((double) long0);
      assertEquals(4.294967313E9, (double)double0, 0.01D);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) well44497a0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) well44497a0, (List<Pair<Object, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      double double1 = discreteDistribution0.probability(double0);
      assertEquals(1, linkedList0.size());
      assertFalse(double0.equals((Object)double1));
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test8()  throws Throwable  {
      LinkedList<Pair<String, Double>> linkedList0 = new LinkedList<Pair<String, Double>>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      String string0 = "VH:r";
      double double0 = (-3627.838);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-3627.838), (double)double1, 0.01D);
      
      Pair<String, Double> pair0 = new Pair<String, Double>(string0, double1);
      assertTrue(double1.equals((Object)double0));
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(double1.equals((Object)double0));
      assertTrue(boolean0);
      
      DiscreteDistribution<String> discreteDistribution0 = null;
      try {
        discreteDistribution0 = new DiscreteDistribution<String>((List<Pair<String, Double>>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,627.838 is smaller than the minimum (0)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      long long0 = 4294967313L;
      Well44497a well44497a0 = new Well44497a(long0);
      assertNotNull(well44497a0);
      
      LinkedList<Pair<Object, Double>> linkedList0 = new LinkedList<Pair<Object, Double>>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double((double) long0);
      assertEquals(4.294967313E9, (double)double0, 0.01D);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>((Object) well44497a0, double0);
      assertNotNull(pair0);
      
      boolean boolean0 = linkedList0.add(pair0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DiscreteDistribution<Object> discreteDistribution0 = new DiscreteDistribution<Object>((RandomGenerator) well44497a0, (List<Pair<Object, Double>>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(discreteDistribution0);
      
      discreteDistribution0.reseedRandomGenerator(long0);
      assertEquals(1, linkedList0.size());
  }
}
