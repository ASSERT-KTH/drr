/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:36:46 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class PoissonDistributionImplEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 10000000;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl((double) int0, int0);
      assertEquals(1.0E7, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      double double0 = 1.0;
      int int1 = poissonDistributionImpl0.inverseCumulativeProbability(double0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(1.0E7, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      double double0 = 5168.48712;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
      assertEquals(5168.48712, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      double double1 = (-2686.057982429881);
      double double2 = poissonDistributionImpl0.cumulativeProbability(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(5168.48712, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      double double0 = 0.5;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int0 = 0;
      double double1 = poissonDistributionImpl0.probability(int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.6065306597126334, double1, 0.01D);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      double double0 = 1993.9647;
      int int0 = 0;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, int0);
      assertEquals(1993.9647, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int1 = Integer.MAX_VALUE;
      double double1 = poissonDistributionImpl0.probability(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(1993.9647, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 10000000;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl((double) int0, int0);
      assertEquals(1.0E7, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      double double0 = poissonDistributionImpl0.probability(int0);
      assertEquals(1.261566250497028E-4, double0, 0.01D);
      assertEquals(1.0E7, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      double double0 = 3294198.0;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
      assertEquals(3294198.0, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int0 = (-218);
      double double1 = poissonDistributionImpl0.probability((double) int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(3294198.0, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      double double0 = 1.1730463525082348E-7;
      int int0 = 10000000;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0, int0);
      assertEquals(1.1730463525082348E-7, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int1 = poissonDistributionImpl0.sample();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
      assertEquals(1.1730463525082348E-7, poissonDistributionImpl0.getMean(), 0.01D);
      
      PoissonDistributionImpl poissonDistributionImpl1 = null;
      try {
        poissonDistributionImpl1 = new PoissonDistributionImpl((double) int1, (double) int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0): mean (0)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      double double0 = 3294198.0;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
      assertEquals(3294198.0, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
  }

  @Test
  public void test8()  throws Throwable  {
      double double0 = 0.5;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      double double1 = poissonDistributionImpl0.getMean();
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.5, double1, 0.01D);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01D);
  }

  @Test
  public void test9()  throws Throwable  {
      double double0 = 3294198.0;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
      assertEquals(3294198.0, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int0 = (-218);
      double double1 = poissonDistributionImpl0.normalApproximateProbability(int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(3294198.0, poissonDistributionImpl0.getMean(), 0.01D);
  }
}
