/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:03:42 GMT 2014
 */

package org.apache.commons.math.complex;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.AttributedCharacterIterator;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.Locale;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ComplexFormatEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      // Undeclared exception!
      try {
        complexFormat0.setRealFormat(numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // realFormat can not be null.
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryFormat can not be null.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "";
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = null;
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "<n<(V*GlO0<3/";
      ComplexFormat complexFormat0 = new ComplexFormat(string0);
      //  // Unstable assertion: assertNotNull(complexFormat0);
      //  // Unstable assertion: assertEquals("<n<(V*GlO0<3/", complexFormat0.getImaginaryCharacter());
      
      Complex complex0 = Complex.INF;
      //  // Unstable assertion: assertNotNull(complex0);
      //  // Unstable assertion: assertEquals((-2063.8834108), complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(2185.2090823020667, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(718.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      
      String string1 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals("-2,063.88 + 718i", string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals((-2063.8834108), complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(2185.2090823020667, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(718.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      
      try {
        Object object0 = complexFormat0.parseObject(string1);
       //  fail("Expecting exception: ParseException");
       // Unstable assertion
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "2 +%teg8<Oq-jyRRG";
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      try {
        Complex complex0 = complexFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"2 +%teg8<Oq-jyRRG\"
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      //  // Unstable assertion: assertNotNull(complex0);
      //  // Unstable assertion: assertEquals((-2063.8834108), complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(2185.2090823020667, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(718.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("-2,063.88 + 718i", string0);
      //  // Unstable assertion: assertEquals((-2063.8834108), complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(2185.2090823020667, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(718.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      
      Locale locale0 = Locale.TAIWAN;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("TWN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_TW", locale0.toString());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("TW", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance(locale0);
      //  // Unstable assertion: assertNotNull(decimalFormat0);
      //  // Unstable assertion: assertEquals("TWN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_TW", locale0.toString());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("TW", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("#,##0", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals("-", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getNegativeSuffix());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      
      ComplexFormat complexFormat0 = new ComplexFormat((NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
      //  // Unstable assertion: assertNotNull(complexFormat0);
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertEquals("TWN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_TW", locale0.toString());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("TW", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("#,##0", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals("-", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getNegativeSuffix());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      
      try {
        Object object0 = complexFormat0.parseObject(string0);
       //  fail("Expecting exception: ParseException");
       // Unstable assertion
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      ComplexFormat complexFormat0 = ComplexFormat.getInstance(locale0);
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string0 = " ";
      try {
        Complex complex0 = complexFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \" \"
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      ComplexFormat complexFormat0 = ComplexFormat.getInstance(locale0);
      assertNotNull(complexFormat0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      String string0 = "5-8";
      try {
        Complex complex0 = complexFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"5-8\"
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "5";
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      Complex complex0 = complexFormat0.parse(string0);
      assertNotNull(complex0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(5.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(5.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
  }

  @Test
  public void test10()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      // Undeclared exception!
      try {
        AttributedCharacterIterator attributedCharacterIterator0 = complexFormat0.formatToCharacterIterator((Object) complexFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      int int0 = 12;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(12, (int)integer0);
      
      AttributedCharacterIterator attributedCharacterIterator0 = complexFormat0.formatToCharacterIterator((Object) integer0);
      assertNotNull(attributedCharacterIterator0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(2, attributedCharacterIterator0.getEndIndex());
      assertEquals(2, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
  }

  @Test
  public void test12()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertNotNull(complexFormat0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
  }

  @Test
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      //  // Unstable assertion: assertNotNull(complex0);
      //  // Unstable assertion: assertEquals(2185.2090823020667, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals((-2063.8834108), complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(718.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("-2,063.88 + 718i", string0);
      //  // Unstable assertion: assertEquals(2185.2090823020667, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals((-2063.8834108), complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(718.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      //  // Unstable assertion: assertNotNull(complexFormat0);
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      Complex complex1 = (Complex)complexFormat0.parseObject(string0);
      //  // Unstable assertion: assertNotNull(complex1);
      //  // Unstable assertion: assertFalse(complex0.equals((Object)complex1));
      //  // Unstable assertion: assertFalse(complex1.equals((Object)complex0));
      //  // Unstable assertion: assertNotSame(complex0, complex1);
      //  // Unstable assertion: assertNotSame(complex1, complex0);
      //  // Unstable assertion: assertEquals(2185.2090823020667, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals((-2063.8834108), complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(718.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(false, complex1.isInfinite());
      //  // Unstable assertion: assertEquals(false, complex1.isNaN());
      //  // Unstable assertion: assertEquals(2185.205860874439, complex1.abs(), 0.01D);
      //  // Unstable assertion: assertEquals((-2063.88), complex1.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(718.0, complex1.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
  }
}
