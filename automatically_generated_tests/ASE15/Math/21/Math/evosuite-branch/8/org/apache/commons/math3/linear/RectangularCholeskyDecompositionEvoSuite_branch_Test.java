/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:41:52 GMT 2014
 */

package org.apache.commons.math3.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
import org.apache.commons.math3.linear.OpenMapRealMatrix;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.linear.RectangularCholeskyDecomposition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class RectangularCholeskyDecompositionEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 10.0;
      doubleArray0[0] = double0;
      double double1 = (-2644.193287986);
      doubleArray0[1] = double1;
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      doubleArray1[1] = doubleArray0;
      assertNotNull(doubleArray1[1]);
      
      doubleArray1[2] = doubleArray0;
      assertNotNull(doubleArray1[2]);
      
      doubleArray1[3] = doubleArray0;
      assertNotNull(doubleArray1[3]);
      
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      doubleArray1[5] = doubleArray0;
      assertNotNull(doubleArray1[5]);
      
      doubleArray1[6] = doubleArray0;
      assertNotNull(doubleArray1[6]);
      
      boolean boolean0 = true;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1, boolean0);
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(7, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(8, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
      try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix0, doubleArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,654.193 is smaller than, or equal to, the minimum (10): not positive definite matrix: value -2,654.193 at index 2
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 165;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(int0, int0);
      assertEquals(165, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(165, array2DRowRealMatrix0.getRowDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertNotNull(array2DRowRealMatrix0);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = null;
      try {
        rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (165): not positive definite matrix: value 0 at index 0
         //
      }
  }

  @Test
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 924.85;
      doubleArray0[2] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 924.85, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4, openMapRealMatrix0.getColumnDimension());
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertNotNull(openMapRealMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 924.85, 0.0}, doubleArray0, 0.01);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) openMapRealMatrix0, doubleArray0[2]);
      assertEquals(0.25, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4, openMapRealMatrix0.getColumnDimension());
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(2, rectangularCholeskyDecomposition0.getRank());
      assertNotNull(rectangularCholeskyDecomposition0);
      assertArrayEquals(new double[] {0.0, 0.0, 924.85, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-309.647);
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.5, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      assertArrayEquals(new double[] {(-309.647), (-309.647), 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertEquals(0.5, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(4, openMapRealMatrix0.getColumnDimension());
      assertNotNull(openMapRealMatrix0);
      assertArrayEquals(new double[] {(-309.647), (-309.647), 0.0, 0.0}, doubleArray0, 0.01);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) openMapRealMatrix0, doubleArray0[3]);
      assertEquals(0.5, openMapRealVector0.getSparsity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(false, openMapRealMatrix0.isTransposable());
      assertEquals(4, openMapRealMatrix0.getColumnDimension());
      assertEquals(4, rectangularCholeskyDecomposition0.getRank());
      assertNotNull(rectangularCholeskyDecomposition0);
      assertArrayEquals(new double[] {(-309.647), (-309.647), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test4()  throws Throwable  {
      double double0 = (-1597.9054767853968);
      double[][] doubleArray0 = new double[1][6];
      boolean boolean0 = false;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray0, boolean0);
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertNotNull(array2DRowRealMatrix0);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix0, double0);
      assertEquals(1, rectangularCholeskyDecomposition0.getRank());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertNotNull(rectangularCholeskyDecomposition0);
      
      Array2DRowRealMatrix array2DRowRealMatrix1 = (Array2DRowRealMatrix)rectangularCholeskyDecomposition0.getRootMatrix();
      assertEquals(1, rectangularCholeskyDecomposition0.getRank());
      assertEquals(1, array2DRowRealMatrix1.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix1.isTransposable());
      assertEquals(1, array2DRowRealMatrix1.getRowDimension());
      assertEquals(true, array2DRowRealMatrix1.isSquare());
      assertEquals(false, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(6, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertNotNull(array2DRowRealMatrix1);
      assertFalse(array2DRowRealMatrix1.equals((Object)array2DRowRealMatrix0));
      assertFalse(array2DRowRealMatrix0.equals((Object)array2DRowRealMatrix1));
      assertNotSame(array2DRowRealMatrix1, array2DRowRealMatrix0);
      assertNotSame(array2DRowRealMatrix0, array2DRowRealMatrix1);
  }

  @Test
  public void test5()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(0.0, (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)arrayRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertNotNull(array2DRowRealMatrix0);
      
      RectangularCholeskyDecomposition rectangularCholeskyDecomposition0 = new RectangularCholeskyDecomposition((RealMatrix) array2DRowRealMatrix0, (double) doubleArray0[0]);
      assertEquals(1, rectangularCholeskyDecomposition0.getRank());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertNotNull(rectangularCholeskyDecomposition0);
      
      int int0 = rectangularCholeskyDecomposition0.getRank();
      assertEquals(1, rectangularCholeskyDecomposition0.getRank());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(1, int0);
  }
}
