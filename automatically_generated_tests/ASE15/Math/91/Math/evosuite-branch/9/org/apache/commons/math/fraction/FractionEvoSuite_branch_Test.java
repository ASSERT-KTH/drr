/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:40:50 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.fraction.Fraction;
import org.apache.commons.math.fraction.FractionConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class FractionEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-3);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-3, cannot negate
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = (-35);
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -35/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 448;
      int int1 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertNotNull(fraction0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, fraction0.intValue());
      assertEquals((-2.086162567138672E-7), fraction0.doubleValue(), 0.01D);
      assertEquals((-2.0861626E-7F), fraction0.floatValue(), 0.01F);
      assertEquals(33554432, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(-7, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
  }

  @Test
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      
      byte byte0 = fraction0.byteValue();
      assertEquals((byte) (-1), byte0);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      
      int int0 = 0;
      Fraction fraction1 = Fraction.getReducedFraction(int0, (int) byte0);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      
      Fraction fraction1 = Fraction.ONE;
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertNotNull(fraction2);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
  }

  @Test
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertNotNull(fraction1);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-509.17785299792195);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals((-509L), fraction0.longValue());
      assertEquals(-509, fraction0.intValue());
      assertEquals((-509.17785234899327), fraction0.doubleValue(), 0.01D);
      assertEquals(298, fraction0.getDenominator());
      assertEquals(3, fraction0.byteValue());
      assertEquals(-509, fraction0.shortValue());
      assertEquals(-151735, fraction0.getNumerator());
      assertEquals((-509.17786F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.divide(fraction0);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-2147483646);
      int int1 = Integer.MAX_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertNotNull(fraction0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-0.9999999995343387), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2147483647, fraction0.getDenominator());
      assertEquals(-2147483646, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(int0 == int1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(int1 == int0);
      assertEquals(0, fraction1.intValue());
      assertEquals(2147483647, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.9999999995343387, fraction1.doubleValue(), 0.01D);
      assertEquals(2147483646, fraction1.getNumerator());
      assertEquals((-0.9999999995343387), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2147483647, fraction0.getDenominator());
      assertEquals(-2147483646, fraction0.getNumerator());
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -4,294,967,292
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 96.10736443256403;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(96L, fraction0.longValue());
      assertEquals(96, fraction0.shortValue());
      assertEquals(326, fraction0.getDenominator());
      assertEquals(31331, fraction0.getNumerator());
      assertEquals(96.10736196319019, fraction0.doubleValue(), 0.01D);
      assertEquals(96, fraction0.intValue());
      assertEquals(96.10736F, fraction0.floatValue(), 0.01F);
      assertEquals(96, fraction0.byteValue());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(192.21472F, fraction1.floatValue(), 0.01F);
      assertEquals(192L, fraction1.longValue());
      assertEquals(-64, fraction1.byteValue());
      assertEquals(192, fraction1.shortValue());
      assertEquals(163, fraction1.getDenominator());
      assertEquals(31331, fraction1.getNumerator());
      assertEquals(192.21472392638037, fraction1.doubleValue(), 0.01D);
      assertEquals(192, fraction1.intValue());
      assertEquals(96L, fraction0.longValue());
      assertEquals(96, fraction0.shortValue());
      assertEquals(326, fraction0.getDenominator());
      assertEquals(31331, fraction0.getNumerator());
      assertEquals(96.10736196319019, fraction0.doubleValue(), 0.01D);
      assertEquals(96, fraction0.intValue());
      assertEquals(96.10736F, fraction0.floatValue(), 0.01F);
      assertEquals(96, fraction0.byteValue());
  }

  @Test
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.shortValue());
  }

  @Test
  public void test14()  throws Throwable  {
      double double0 = (-509.17785299792195);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(3, fraction0.byteValue());
      assertEquals((-509.17786F), fraction0.floatValue(), 0.01F);
      assertEquals(298, fraction0.getDenominator());
      assertEquals(-151735, fraction0.getNumerator());
      assertEquals((-509.17785234899327), fraction0.doubleValue(), 0.01D);
      assertEquals(-509, fraction0.shortValue());
      assertEquals((-509L), fraction0.longValue());
      assertEquals(-509, fraction0.intValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction0.byteValue());
      assertEquals((-509.17786F), fraction0.floatValue(), 0.01F);
      assertEquals(298, fraction0.getDenominator());
      assertEquals(-151735, fraction0.getNumerator());
      assertEquals((-509.17785234899327), fraction0.doubleValue(), 0.01D);
      assertEquals(-509, fraction0.shortValue());
      assertEquals((-509L), fraction0.longValue());
      assertEquals(-509, fraction0.intValue());
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertNotNull(fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(3, fraction0.byteValue());
      assertEquals((-509.17786F), fraction0.floatValue(), 0.01F);
      assertEquals(298, fraction0.getDenominator());
      assertEquals(-151735, fraction0.getNumerator());
      assertEquals((-509.17785234899327), fraction0.doubleValue(), 0.01D);
      assertEquals(-509, fraction0.shortValue());
      assertEquals((-509L), fraction0.longValue());
      assertEquals(-509, fraction0.intValue());
      assertEquals((-509L), fraction2.longValue());
      assertEquals(3, fraction2.byteValue());
      assertEquals((-509.17785234899327), fraction2.doubleValue(), 0.01D);
      assertEquals((-509.17786F), fraction2.floatValue(), 0.01F);
      assertEquals(-509, fraction2.intValue());
      assertEquals(-509, fraction2.shortValue());
      assertEquals(298, fraction2.getDenominator());
      assertEquals(-151735, fraction2.getNumerator());
  }

  @Test
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      double double0 = 1621.268558107556;
      int int0 = 448;
      Fraction fraction0 = new Fraction(double0, int0);
      assertNotNull(fraction0);
      assertEquals(1621.2686F, fraction0.floatValue(), 0.01F);
      assertEquals(283, fraction0.getDenominator());
      assertEquals(1621, fraction0.intValue());
      assertEquals(1621.268551236749, fraction0.doubleValue(), 0.01D);
      assertEquals(458819, fraction0.getNumerator());
      assertEquals(1621, fraction0.shortValue());
      assertEquals(1621L, fraction0.longValue());
      assertEquals(85, fraction0.byteValue());
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertNotNull(fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertEquals(1621.2686F, fraction0.floatValue(), 0.01F);
      assertEquals(283, fraction0.getDenominator());
      assertEquals(1621, fraction0.intValue());
      assertEquals(1621.268551236749, fraction0.doubleValue(), 0.01D);
      assertEquals(458819, fraction0.getNumerator());
      assertEquals(1621, fraction0.shortValue());
      assertEquals(1621L, fraction0.longValue());
      assertEquals(85, fraction0.byteValue());
      assertEquals(283, fraction2.getDenominator());
      assertEquals(-85, fraction2.byteValue());
      assertEquals(-1621, fraction2.shortValue());
      assertEquals(-458819, fraction2.getNumerator());
      assertEquals((-1621.2686F), fraction2.floatValue(), 0.01F);
      assertEquals(-1621, fraction2.intValue());
      assertEquals((-1621L), fraction2.longValue());
      assertEquals((-1621.268551236749), fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.add(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      
      double double0 = 0.0;
      Fraction fraction1 = new Fraction(double0);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(boolean0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
  }

  @Test
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.intValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.reciprocal();
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.intValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      
      Fraction fraction2 = Fraction.ONE;
      assertNotNull(fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.shortValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.byteValue());
      
      boolean boolean0 = fraction1.equals((Object) fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertFalse(boolean0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.intValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.shortValue());
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
  }

  @Test
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      
      Fraction fraction1 = fraction0.reciprocal();
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
  }

  @Test
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.getNumerator());
      
      Object object0 = null;
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.getNumerator());
  }

  @Test
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = Fraction.ONE;
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      
      int int0 = fraction1.compareTo(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1, int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = fraction0.reciprocal();
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      
      int int0 = fraction1.compareTo(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals((-1), int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2, fraction0.byteValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
  }

  @Test
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
  }

  @Test
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      
      byte byte0 = fraction0.byteValue();
      assertEquals((byte) (-1), byte0);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = Fraction.getReducedFraction((int) byte0, (int) byte0);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction2 = fraction1.abs();
      assertNotNull(fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 1898;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1,898/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 1178;
      int int1 = (-958);
      Fraction fraction0 = new Fraction(int0, int1);
      assertNotNull(fraction0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(479, fraction0.getDenominator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-589, fraction0.getNumerator());
      assertEquals((-1.2296450939457202), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.2296451F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.intValue());
  }

  @Test
  public void test29()  throws Throwable  {
      double double0 = 0.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      double double0 = 96.10736443256403;
      double double1 = (-6.961342516751458);
      int int0 = (-35);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double1, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to convert 96.107 to fraction after -35 iterations
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 8;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      
      int int0 = fraction0.intValue();
      assertEquals((-1), int0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) int0, (double) int0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert \u221E to fraction (9,223,372,036,854,775,807/1)
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
      
      long long0 = fraction0.longValue();
      assertEquals(2L, long0);
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.byteValue());
  }

  @Test
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      
      float float0 = fraction0.floatValue();
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-2, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-2.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-2, fraction1.intValue());
      assertEquals(-2, fraction1.shortValue());
      assertEquals((-2L), fraction1.longValue());
      assertEquals(-2, fraction1.getNumerator());
  }

  @Test
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      assertNotNull(fraction0);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      
      int int0 = fraction0.hashCode();
      assertEquals(23348, int0);
      assertEquals(2, fraction0.byteValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = new Fraction((double) int0);
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(23348, fraction1.intValue());
      assertEquals(23348L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(23348.0F, fraction1.floatValue(), 0.01F);
      assertEquals(23348, fraction1.shortValue());
      assertEquals(23348, fraction1.getNumerator());
      assertEquals(23348.0, fraction1.doubleValue(), 0.01D);
      assertEquals(52, fraction1.byteValue());
      assertEquals(2, fraction0.byteValue());
      assertEquals(2L, fraction0.longValue());
      assertEquals(2, fraction0.shortValue());
      assertEquals(2.0, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2, fraction0.intValue());
      assertEquals(2.0F, fraction0.floatValue(), 0.01F);
  }
}
