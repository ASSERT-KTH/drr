/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:55:50 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.jscomp.SourceFile;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

 
public class CodeGeneratorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "!--tf:t";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("!--tf:t", string1);
      assertNotNull(string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "onRange\u00120\n\u0007options\u0018\u0007 \u0001(\u000B2\u001F.google.protobuf.MessageOptions\u001A,\n\u000EExtensionRange\u0012\r\n\u0005start\u0018\u0001 \u0001(\u0005\n\u0003end\u0018\u0002 \u0001(\u0005\"\u0094\u0005\n\u0014FieldDescriptorProto\u0012\f\n\u0004name\u0018\u0001 \u0001(\t\u0012\u000E\ncnumber\u0018\u0003 \u0001(\u0005\u0012:\n\u0005label\u0018\u0004 \u0001(\u000E2+.google.protobuf.FieldDescriptorProto.Label\u00128\n\u0004type\u0018\u0005 \u0001(\u000E2*.google.protobuf.FieldDescriptorProto.Type\u0012\u0011\n\ttype_name\u0018\u0006 \u0001(\t\u0012\u0010\n\bextendee\u0018\u0002 \u0001(\t\u0012\u0015\n\rdefault_value\u0018\u0007 \u0001(\t\u0012.\n\u0007options\u0018\b \u0001(\u000B2\u001D.google.protobuf.FieldOptions\"\u00B6\u0002\n\u0004Type\u0012\u000F\n\u000BTYP";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("onRange\\u00120\\u000a\\u0007options\\u0018\\u0007 \\u0001(\\u000b2\\u001f.google.protobuf.MessageOptions\\u001a,\\u000a\\u000eExtensionRange\\u0012\\u000d\\u000a\\u0005start\\u0018\\u0001 \\u0001(\\u0005\\u000a\\u0003end\\u0018\\u0002 \\u0001(\\u0005\"\\u0094\\u0005\\u000a\\u0014FieldDescriptorProto\\u0012\\u000c\\u000a\\u0004name\\u0018\\u0001 \\u0001(\\u0009\\u0012\\u000e\\u000acnumber\\u0018\\u0003 \\u0001(\\u0005\\u0012:\\u000a\\u0005label\\u0018\\u0004 \\u0001(\\u000e2+.google.protobuf.FieldDescriptorProto.Label\\u00128\\u000a\\u0004type\\u0018\\u0005 \\u0001(\\u000e2*.google.protobuf.FieldDescriptorProto.Type\\u0012\\u0011\\u000a\\u0009type_name\\u0018\\u0006 \\u0001(\\u0009\\u0012\\u0010\\u000a\\u0008extendee\\u0018\\u0002 \\u0001(\\u0009\\u0012\\u0015\\u000a\\u000ddefault_value\\u0018\\u0007 \\u0001(\\u0009\\u0012.\\u000a\\u0007options\\u0018\\u0008 \\u0001(\\u000b2\\u001d.google.protobuf.FieldOptions\"\\u00b6\\u0002\\u000a\\u0004Type\\u0012\\u000f\\u000a\\u000bTYP", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "y^;^+;<cmipt4tb:l</scripttbK@y";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("/y^;^+;<cmipt4tb:l<\\/scripttbK@y/", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "onRange\u00120\n\u0007options\u0018\u0007 \u0001(\u000B2\u001F.google.protobuf.MessageOptions\u001A,\n\u000EExtensionRange\u0012\r\n\u0005start\u0018\u0001 \u0001(\u0005\n\u0003end\u0018\u0002 \u0001(\u0005\"\u0094\u0005\n\u0014FieldDescriptorProto\u0012\f\n\u0004name\u0018\u0001 \u0001(\t\u0012\u000E\ncnumber\u0018\u0003 \u0001(\u0005\u0012:\n\u0005label\u0018\u0004 \u0001(\u000E2+.google.protobuf.FieldDescriptorProto.Label\u00128\n\u0004type\u0018\u0005 \u0001(\u000E2*.google.protobuf.FieldDescriptorProto.Type\u0012\u0011\n\ttype_name\u0018\u0006 \u0001(\t\u0012\u0010\n\bextendee\u0018\u0002 \u0001(\t\u0012\u0015\n\rdefault_value\u0018\u0007 \u0001(\t\u0012.\n\u0007options\u0018\b \u0001(\u000B2\u001D.google.protobuf.FieldOptions\"\u00B6\u0002\n\u0004Type\u0012\u000F\n\u000BTYP";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("/onRange\\u00120\\n\\u0007options\\u0018\\u0007 \\u0001(\\u000b2\\u001f.google.protobuf.MessageOptions\\u001a,\\n\\u000eExtensionRange\\u0012\\r\\n\\u0005start\\u0018\\u0001 \\u0001(\\u0005\\n\\u0003end\\u0018\\u0002 \\u0001(\\u0005\"\\u0094\\u0005\\n\\u0014FieldDescriptorProto\\u0012\\u000c\\n\\u0004name\\u0018\\u0001 \\u0001(\\t\\u0012\\u000e\\ncnumber\\u0018\\u0003 \\u0001(\\u0005\\u0012:\\n\\u0005label\\u0018\\u0004 \\u0001(\\u000e2+.google.protobuf.FieldDescriptorProto.Label\\u00128\\n\\u0004type\\u0018\\u0005 \\u0001(\\u000e2*.google.protobuf.FieldDescriptorProto.Type\\u0012\\u0011\\n\\ttype_name\\u0018\\u0006 \\u0001(\\t\\u0012\\u0010\\n\\u0008extendee\\u0018\\u0002 \\u0001(\\t\\u0012\\u0015\\n\\rdefault_value\\u0018\\u0007 \\u0001(\\t\\u0012.\\n\\u0007options\\u0018\\u0008 \\u0001(\\u000b2\\u001d.google.protobuf.FieldOptions\"\\u00b6\\u0002\\n\\u0004Type\\u0012\\u000f\\n\\u000bTYP/", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "A_`u)'";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("A_`u)'/A_`u)'", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("A_`u)'/A_`u)'", sourceFile_OnDisk0.getName());
      assertEquals("A_`u)'/A_`u)'", sourceFile_OnDisk0.toString());
      
      Charset charset0 = sourceFile_OnDisk0.getCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("A_`u)'/A_`u)'", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("A_`u)'/A_`u)'", sourceFile_OnDisk0.getName());
      assertEquals("A_`u)'/A_`u)'", sourceFile_OnDisk0.toString());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("A_`u)'/A_`u)'", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("A_`u)'/A_`u)'", sourceFile_OnDisk0.getName());
      assertEquals("A_`u)'/A_`u)'", sourceFile_OnDisk0.toString());
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\"A_`u)'\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals("A_`u)'/A_`u)'", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("A_`u)'/A_`u)'", sourceFile_OnDisk0.getName());
      assertEquals("A_`u)'/A_`u)'", sourceFile_OnDisk0.toString());
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "UP-\\]>\"$rN1~Z";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("'UP-\\\\]>\"$rN1~Z'", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "w";
      boolean boolean0 = CodeGenerator.isSimpleNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "<!-->";
      char char0 = 'J';
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      Charset charset0 = null;
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0, charset0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("<!-->", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("<!-->", sourceFile_OnDisk0.toString());
      assertEquals("<!-->", sourceFile_OnDisk0.getName());
      
      Charset charset1 = sourceFile_OnDisk0.getCharset();
      assertNotNull(charset1);
      assertEquals(true, charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.toString());
      assertEquals(true, charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("<!-->", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("<!-->", sourceFile_OnDisk0.toString());
      assertEquals("<!-->", sourceFile_OnDisk0.getName());
      
      CharsetEncoder charsetEncoder0 = charset1.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(true, charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.toString());
      assertEquals(true, charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("<!-->", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("<!-->", sourceFile_OnDisk0.toString());
      assertEquals("<!-->", sourceFile_OnDisk0.getName());
      
      String string1 = CodeGenerator.strEscape(string0, char0, string0, string0, string0, charsetEncoder0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("J<\\!--\\>J", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(true, charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.toString());
      assertEquals(true, charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("<!-->", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("<!-->", sourceFile_OnDisk0.toString());
      assertEquals("<!-->", sourceFile_OnDisk0.getName());
      
      String string2 = CodeGenerator.regexpEscape(string1, charsetEncoder0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("/J<\\!--\\>J/", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(true, charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.toString());
      assertEquals(true, charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("<!-->", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("<!-->", sourceFile_OnDisk0.toString());
      assertEquals("<!-->", sourceFile_OnDisk0.getName());
      
      double double0 = CodeGenerator.getSimpleNumber(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(true, charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.toString());
      assertEquals(true, charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("<!-->", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("<!-->", sourceFile_OnDisk0.toString());
      assertEquals("<!-->", sourceFile_OnDisk0.getName());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "5";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(5.0, double0, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = CodeGenerator.isSimpleNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = ";uw!R\"->";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\";uw!R\\\"->\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "]>q r8?C`SE.;u_";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"]>q r8?C`SE.;u_\"", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      
      String string2 = CodeGenerator.regexpEscape(string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("/\"]>q r\\u007f8?C`SE.;u_\"/", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
  }
}
